
@article{arasu_cql_2006,
	title = {The {CQL} continuous query language: semantic foundations and query execution},
	volume = {15},
	issn = {0949-877X},
	url = {https://doi.org/10.1007/s00778-004-0147-z},
	doi = {10.1007/s00778-004-0147-z},
	shorttitle = {The {CQL} continuous query language},
	abstract = {{CQL}, a continuous query language, is supported by the {STREAM} prototype data stream management system ({DSMS}) at Stanford. {CQL} is an expressive {SQL}-based declarative language for registering continuous queries against streams and stored relations. We begin by presenting an abstract semantics that relies only on “black-box” mappings among streams and relations. From these mappings we define a precise and general interpretation for continuous queries. {CQL} is an instantiation of our abstract semantics using {SQL} to map from relations to relations, window specifications derived from {SQL}-99 to map from streams to relations, and three new operators to map from relations to streams. Most of the {CQL} language is operational in the {STREAM} system. We present the structure of {CQL}'s query execution plans as well as details of the most important components: operators, interoperator queues, synopses, and sharing of components among multiple operators and queries. Examples throughout the paper are drawn from the Linear Road benchmark recently proposed for {DSMSs}. We also curate a public repository of data stream applications that includes a wide variety of queries expressed in {CQL}. The relative ease of capturing these applications in {CQL} is one indicator that the language contains an appropriate set of constructs for data stream processing.},
	pages = {121--142},
	number = {2},
	journaltitle = {The {VLDB} Journal},
	shortjournal = {The {VLDB} Journal},
	author = {Arasu, Arvind and Babu, Shivnath and Widom, Jennifer},
	urldate = {2022-04-20},
	date = {2006-06-01},
	langid = {english},
	keywords = {Continuous queries, Data streams, Query language, Query processing},
	file = {Full Text PDF:/Users/matthias/Zotero/storage/BG5Y7ZCC/Arasu et al. - 2006 - The CQL continuous query language semantic founda.pdf:application/pdf},
}

@incollection{arasu_stream_2016,
	location = {Berlin, Heidelberg},
	title = {{STREAM}: The Stanford Data Stream Management System},
	isbn = {978-3-540-28608-0},
	url = {https://doi.org/10.1007/978-3-540-28608-0_16},
	series = {Data-Centric Systems and Applications},
	shorttitle = {{STREAM}},
	abstract = {Traditional database management systems are best equipped to run one-time queries over finite stored data sets. However, many modern applications such as network monitoring, financial analysis, manufacturing, and sensor networks require long-running, or continuous, queries over continuous unbounded streams of data. In the {STREAM} project at Stanford, we are investigating data management and query processing for this class of applications. As part of the project we are building a general-purpose prototype Data Stream Management System ({DSMS}), also called {STREAM}, that supports a large class of declarative continuous queries over continuous streams and traditional stored data sets. The {STREAM} prototype targets environments where streams may be rapid, stream characteristics and query loads may vary over time, and system resources may be limited.},
	pages = {317--336},
	booktitle = {Data Stream Management: Processing High-Speed Data Streams},
	publisher = {Springer},
	author = {Arasu, Arvind and Babcock, Brian and Babu, Shivnath and Cieslewicz, John and Datar, Mayur and Ito, Keith and Motwani, Rajeev and Srivastava, Utkarsh and Widom, Jennifer},
	editor = {Garofalakis, Minos and Gehrke, Johannes and Rastogi, Rajeev},
	urldate = {2022-04-20},
	date = {2016},
	langid = {english},
	doi = {10.1007/978-3-540-28608-0_16},
	keywords = {Continuous Query, Data Stream, Input Stream, Query Plan, Queue Size},
}