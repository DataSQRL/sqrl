{
  "week" : "This SQL function returns  the week number of the year for a given date. For example, WEEK('2020-02-14') returns 7, as February 14th is the 7th week of the year 2020.",
  "hour" : "This SQL function returns  the hour of a given time value. For example, HOUR('12:30:15') returns 12.",
  "month" : "This SQL function returns  the month of a given date. For example, MONTH('2020-07-01') returns 7.",
  "year" : "This SQL function returns  the year from a given date. For example, YEAR('2020-01-01') would return 2020.",
  "dayofweek" : "This SQL function returns  an integer representing the day of the week for a given date. For example, DAYOFWEEK('2020-07-01') returns 3, indicating that July 1, 2020 is a Wednesday.",
  "dayofmonth" : "This SQL function returns  the day of the month for a given date. For example, DAYOFMONTH('2020-07-15') would return 15.",
  "dayofyear" : "This SQL function returns  the day of the year for a given date. For example, DAYOFYEAR('2020-02-14') returns 45.",
  "minute" : "This SQL function returns  the minute of a given time value. For example, MINUTE('12:45:30') returns 45.",
  "quarter" : "This SQL function returns  an integer value representing the quarter of the year for a given date. For example, QUARTER('2020-07-15') returns 3, representing the third quarter of the year.",
  "second" : "This SQL function returns  the second item in a list of items. For example, SECOND('apple', 'banana', 'cherry') would return 'banana'.",
  "ascii" : "This SQL function returns  the ASCII code of the leftmost character of a given string. For example, ASCII('A') would return 65.",
  "chr" : "This SQL function returns  the character based on the number code in its argument. For example, CHR(65) returns the character 'A'.",
  "concat_function" : "This SQL function returns  a concatenated string of two or more strings. For example, CONCAT_FUNCTION('Hello', 'World') returns the string 'HelloWorld'.",
  "concat_ws" : "This SQL function returns  a string that is the result of concatenating a series of strings separated by a specified separator. For example, CONCAT_WS('-', 'Hello', 'World') returns 'Hello-World'.",
  "decode" : "This SQL function returns  a value based on a comparison of an expression to one or more search values. For example, DECODE(1, 1, 'One', 2, 'Two', 'Other') would return 'One' as the result.",
  "encode" : "This SQL function returns  an encoded string of the input string using the specified algorithm. For example, ENCODE('Hello World', 'SHA1') returns '2aae6c35c94fcfb415dbe95f408b9ce91ee",
  "from_base64" : "This SQL function returns  a string decoded from its base64 representation. For example, FROM_BASE64('SGVsbG8gV29ybGQ=') returns 'Hello World'.",
  "initcap" : "This SQL function returns  a string with the first letter of each word capitalized. For example, invoking the function with the string \"hello world\" would return \"Hello World\".",
  "instr" : "This SQL function returns  the position of a substring within a string. For example, INSTR('Hello World', 'World') returns 7, indicating that the substring 'World' starts at the 7th character in the string 'Hello World'.",
  "left" : "This SQL function returns  a specified number of characters from the left side of a string. For example, LEFT('Hello World', 5) would return 'Hello' as the result.",
  "char_length" : "This SQL function returns  the number of characters in a given string. For example, CHAR_LENGTH('Hello World') returns 11.",
  "locate" : "This SQL function returns  the position of a substring within a string. For example, LOCATE('world', 'Hello world') returns 7, indicating that the substring 'world' begins at the 7th character in the string 'Hello world'.",
  "lpad" : "This SQL function returns  a string padded on the left with a specified set of characters to a certain length. For example, LPAD('Hello', 10, '*') would return '**Hello***'.",
  "ltrim" : "This SQL function returns  a string with all leading spaces removed. For example, LTRIM('  Hello World') would return 'Hello World'.",
  "overlay" : "This SQL function returns  a string with a substring replaced by a new substring. For example, OVERLAY('ABCDE' PLACING 'XYZ' FROM 3 FOR 3) returns 'ABXYZE'.",
  "parse_url" : "This SQL function returns  the components of a URL as separate fields. For example, PARSE_URL('https://www.example.com/path/to/page?query=string') would return the protocol ('https'), host ('www.example.com'),",
  "position" : "This SQL function returns  the position of a substring within a string. For example, POSITION('world' IN 'hello world') returns 7, indicating that the substring 'world' begins at the 7th character in the string 'hello world'.",
  "regexp" : "This SQL function returns  a boolean value (true or false) indicating whether a given string matches a given regular expression. For example, REGEXP('Hello World', '^Hello') returns true.",
  "regexp_extract" : "This SQL function returns  a specific part of a string that matches a regular expression pattern. For example, REGEXP_EXTRACT('Hello World', '[a-zA-Z]+', 0) returns 'Hello'.",
  "regexp_replace" : "This SQL function returns  a string with all substrings that match a regular expression pattern replaced by a specified replacement string. For example, REGEXP_REPLACE('Hello World', 'l', 'z') would return 'Hezzo Worzd'.",
  "repeat" : "This SQL function returns  a string consisting of the specified string repeated a specified number of times. For example, REPEAT('Hello', 3) would return 'HelloHelloHello'.",
  "replace" : "This SQL function returns  a new string with some or all occurrences of a specified string replaced with another specified string. For example, REPLACE('Hello World', 'World', 'Universe') would return 'Hello Universe'.",
  "reverse" : "This SQL function returns  a character string in reverse order. For example, REVERSE('Hello World') would return 'dlroW olleH'.",
  "right" : "This SQL function returns  a specified number of characters from the right side of a given string. For example, RIGHT('Hello World', 5) would return \"World\".",
  "rpad" : "This SQL function returns  a string that is right-padded with a specific set of characters to a specified length. For example, RPAD('Hello', 10, '*') would return 'Hello*****'.",
  "rtrim" : "This SQL function returns  a character string with the specified characters removed from the right side of the string. For example, RTRIM('Hello World  ', ' ') would return 'Hello World'.",
  "split_index" : "This SQL function returns  a substring from a given string based on a delimiter and index. For example, SPLIT_INDEX('Hello,World', ',', 1) would return 'Hello' as the result.",
  "str_to_map" : "This SQL function returns  a map from a string of key-value pairs. For example, STR_TO_MAP('a=1,b=2,c=3') returns a map with keys 'a', 'b', and 'c' and values '",
  "substr" : "This SQL function returns  a substring from a given string, starting at a specified position and including a specified number of characters. For example, SUBSTR('Hello World', 6, 5) would return 'World'.",
  "substring" : "This SQL function returns  a portion of a string, starting at a specified position and including a specified number of characters. For example, SUBSTRING('Hello World', 6, 5) would return 'World'.",
  "to_base64" : "This SQL function returns  a base64-encoded string from a given input string. For example, TO_BASE64('Hello World') returns 'SGVsbG8gV29ybGQ=' which is the base64-encoded version of",
  "trim" : "This SQL function returns  a string with leading and trailing whitespace removed. For example, TRIM('  Hello World  ') would return 'Hello World'.",
  "upper" : "This SQL function returns  a string with all characters converted to uppercase. For example, UPPER('hello world') would return 'HELLO WORLD'.",
  "abs" : "This SQL function returns  the absolute value of a numeric expression. For example, ABS(-5) would return 5.",
  "acos" : "This SQL function returns  the arccosine of a number, which is the angle in radians between 0 and pi whose cosine is the number. For example, ACOS(0.5) returns 1.0471975511965979.",
  "approx_count_distinct" : "This SQL function returns  an approximate count of distinct values in a given column. For example, APPROX_COUNT_DISTINCT(column_name) returns the approximate number of distinct values in the column_name column.",
  "asin" : "This SQL function returns  the arcsine of a given number, which is the angle whose sine is equal to the given number. For example, ASIN(0.5) returns 0.5235987755982989, which is the angle whose sine",
  "atan" : "This SQL function returns  the arctangent of a given number, which is the angle in radians between the x-axis and the line that passes through the origin and the given number. For example, ATAN(1) returns 0.7853981633",
  "atan2" : "This SQL function returns  the arctangent of two numbers, the first being the y coordinate and the second being the x coordinate. For example, ATAN2(2, 3) returns 0.588002603547567.",
  "auxiliary_group" : "This SQL function returns  the auxiliary group associated with a given user. For example, invoking the function with the user \"John\" would return the auxiliary group associated with John, such as \"Marketing\".",
  "avg" : "This SQL function returns  the average value of a numeric column in a table. For example, the query \"SELECT AVG(price) FROM products\" would return the average price of all products in the products table.",
  "bin" : "This SQL function returns  a string representing the binary value of a number. For example, BIN(5) returns '101', which is the binary representation of the number 5.",
  "cast" : "This SQL function returns  a value with a specified type. For example, CAST(1 AS INTEGER) returns 1 as an integer.",
  "ceil" : "This SQL function returns  the smallest integer value that is greater than or equal to a specified numeric expression. For example, CEIL(3.14) returns 4.",
  "character_length" : "This SQL function returns  the length of a given string in characters. For example, CHARACTER_LENGTH('Hello World') returns 11.",
  "classifier" : "This SQL function returns  the class of a given value based on a set of ranges. For example, CLASSIFIER(5, 0, 3, 'Low', 3, 6, 'Medium', 6, 10, 'High') would return 'Medium'.",
  "collect" : "This SQL function returns  a single value that is the result of applying an aggregate function to a set of values. For example, COLLECT(MAX(salary)) returns the maximum salary from a set of salaries.",
  "convert_tz" : "This SQL function returns  a datetime value converted from one time zone to another. For example, CONVERT_TZ('2020-01-01 12:00:00', 'UTC', 'America/New_York') returns '2020-01-01 07",
  "cos" : "This SQL function returns  the cosine of a given number. For example, COS(1) returns 0.54030230586814.",
  "cosh" : "This SQL function returns  the hyperbolic cosine of a given number. For example, COSH(2) returns 3.7621956910836314.",
  "cot" : "This SQL function returns  the cotangent of a given angle in radians. For example, COT(1.5) would return 0.64209261593433, the cotangent of 1.5 radians.",
  "count" : "This SQL function returns  the number of rows in a table that meet a certain criteria. For example, COUNT(*) returns the total number of rows in a table.",
  "cume_dist" : "This SQL function returns  the cumulative distribution of a value in a group of values. For example, CUME_DIST() applied to a group of values (1, 2, 3, 4, 5) would return (0.2, 0.4, 0",
  "cumulate" : "This SQL function returns  the cumulative sum of a set of values. For example, CUMULATE(1, 2, 3) would return 6, as 1 + 2 + 3 = 6.",
  "current_database" : "This SQL function returns  the name of the current database. For example, invoking the function CURRENT_DATABASE() in a database named \"my_database\" would return \"my_database\" as the result.",
  "current_date" : "This SQL function returns  the current date in the current session's time zone as a date value. For example, invoking CURRENT_DATE() in a session with the time zone set to UTC would return the date \"2020-07-20\".",
  "current_row_timestamp" : "This SQL function returns  the current timestamp of the row being processed. For example, CURRENT_ROW_TIMESTAMP() returns '2020-07-20 11:30:00' when the row is processed at 11:30am on July 20th",
  "current_time" : "This SQL function returns  the current time in the current time zone as a value in the 'time' data type. For example, CURRENT_TIME() returns '14:30:00' when invoked at 2:30 PM.",
  "current_timestamp" : "This SQL function returns  the current date and time as a timestamp value. For example, invoking CURRENT_TIMESTAMP() would return the current timestamp value of '2020-09-17 11:45:00'.",
  "date_format" : "This SQL function returns  a date value, formatted according to the format string provided. For example, DATE_FORMAT('2020-01-01', '%M %d, %Y') returns \"January 01, 2020\".",
  "degrees" : "This SQL function returns  the angle in degrees for a given radian value. For example, DEGREES(1.5708) would return 90.0.",
  "dense_rank" : "This SQL function returns  the rank of rows within a partition of a result set, without any gaps in the ranking. For example, if the table contains the values (1, 2, 3, 3, 4), the DENSE_RANK function would return (1",
  "e" : "This SQL function returns  the natural logarithm of a given number. For example, the invocation of the function with the number 2 as an argument would return the result 0.693147180559945.",
  "exp" : "This SQL function returns  the value of e (the base of the natural logarithm) raised to the power of a specified number. For example, EXP(2) returns the result 7.38905609893065.",
  "first" : "This SQL function returns  the first value in a given column. For example, the invocation \"SELECT FIRST(column_name) FROM table_name\" would return the first value in the column \"column_name\" from the table \"table_name\".",
  "first_value" : "This SQL function returns  the first value in an ordered set of values. For example, FIRST_VALUE(salary) OVER (ORDER BY hire_date) FROM employees would return the salary of the employee with the earliest hire date.",
  "floor" : "This SQL function returns  the largest integer value that is less than or equal to a specified numeric expression. For example, FLOOR(3.14) returns 3.",
  "from_unixtime" : "This SQL function returns  a formatted date and time string from a Unix timestamp. For example, FROM_UNIXTIME(1599456800) returns '2020-09-08 12:00:00'.",
  "group_id" : "This SQL function returns  the group identifier of a given row. For example, GROUP_ID() applied to a table of customer orders with a column for customer ID would return the group ID of each customer order based on the customer ID.",
  "grouping" : "This SQL function returns  a single bit value indicating whether the value in the specified expression is aggregated or not. For example, GROUPING(Department) returns 1 if the Department column is aggregated, and 0 if it is not.",
  "grouping_id" : "This SQL function returns  an integer value that identifies the level of a group in a hierarchical query. For example, the following query returns the grouping ID for each row in the result set: SELECT GROUPING_ID(OrderID, CustomerID) FROM Orders; This query",
  "hash_code" : "This SQL function returns  an integer value that is the hash code of a given string. For example, HASH_CODE('Hello World') returns -1445004590.",
  "hex" : "This SQL function returns  a hexadecimal representation of a number or a string. For example, HEX(255) returns 'FF'.",
  "hop" : "This SQL function returns  the nth highest value in a given column. For example, HOP(2, salary) returns the second highest salary in the column.",
  "hop_end" : "This SQL function returns  the last date of the given month. For example, HOP_END('2020-02-15') returns '2020-02-29'.",
  "hop_old" : "This SQL function returns  the oldest date in a given set of dates. For example, HOP_OLD('2020-01-01', '2020-02-01', '2020-03-01') would return '2020-01-01'.",
  "hop_proctime" : "This SQL function returns  the time at which a row was processed by the system. For example, HOP_PROCTIME() returns the time '2020-07-20 12:00:00' when invoked on a row processed at that time.",
  "hop_rowtime" : "This SQL function returns  the rowtime of the current row in a stream. For example, HOP_ROWTIME() returns the timestamp of the current row in a stream of data.",
  "hop_start" : "This SQL function returns  the start date of a given hop. For example, HOP_START('2020-01-01', '2020-02-01') returns '2020-01-01'.",
  "if" : "This SQL function returns  a value based on a given condition. For example, IF(1=1, 'true', 'false') would return 'true'.",
  "is_alpha" : "This SQL function returns  a boolean value indicating whether a given string contains only alphabetic characters. For example, IS_ALPHA('Hello') would return TRUE, while IS_ALPHA('123') would return FALSE.",
  "is_decimal" : "This SQL function returns  a boolean value indicating whether a given expression is a decimal number or not. For example, IS_DECIMAL('3.14') returns 1, indicating that the expression is a decimal number.",
  "is_digit" : "This SQL function returns  a boolean value indicating whether or not a given character is a digit. For example, IS_DIGIT('5') would return true, while IS_DIGIT('a') would return false.",
  "json_array" : "This SQL function returns  a JSON array from a set of values. For example, JSON_ARRAY('a', 'b', 'c') returns [\"a\", \"b\", \"c\"].",
  "json_arrayagg_absent_on_null" : "This SQL function returns  a JSON array containing all non-null values in a specified column. For example, JSON_ARRAYAGG_ABSENT_ON_NULL(column_name) returns [1, 2, 3] if the column contains the values",
  "json_arrayagg_null_on_null" : "This SQL function returns  a JSON array containing all non-null values in a specified column. For example, JSON_ARRAYAGG_NULL_ON_NULL(column_name) returns [1, 2, 3] when column_name contains the values [",
  "json_exists" : "This SQL function returns  a boolean value indicating whether a specified JSON value exists in a JSON document. For example, JSON_EXISTS('{\"name\": \"John\"}', '$.name') returns TRUE.",
  "json_object" : "This SQL function returns  a JSON object composed of key-value pairs. For example, JSON_OBJECT('name', 'John', 'age', 25) returns {\"name\": \"John\", \"age\": 25}.",
  "json_objectagg_absent_on_null" : "This SQL function returns  a JSON object composed of key-value pairs, where the key is the value of the first argument and the value is the value of the second argument. For example, JSON_OBJECTAGG_ABSENT_ON_NULL('name",
  "json_objectagg_null_on_null" : "This SQL function returns  a JSON object composed of key-value pairs, where the key is the value of the first argument and the value is the value of the second argument. For example, JSON_OBJECTAGG_NULL_ON_NULL('name', '",
  "json_query" : "This SQL function returns  a JSON value from a JSON string. For example, JSON_QUERY('{\"name\": \"John\", \"age\": 25}', '$.name') would return \"John\".",
  "json_value" : "This SQL function returns  a scalar value from a JSON string. For example, JSON_VALUE('{\"name\": \"John\", \"age\": 25}', '$.name') returns \"John\".",
  "lag" : "This SQL function returns  a value from a previous row in the same result set. For example, LAG(column_name, 1) OVER (ORDER BY column_name) returns the value of the previous row in the result set for the specified column.",
  "last" : "This SQL function returns  the last value in an ordered set of values. For example, LAST(1,2,3,4) returns 4.",
  "last_value" : "This SQL function returns  the last value in an ordered set of values. For example, LAST_VALUE(1,2,3,4,5) would return 5.",
  "lead" : "This SQL function returns  a value from a subsequent row in the same result set. For example, LEAD(column_name, 1) OVER (ORDER BY column_name) returns the value of the column_name from the next row in the result set.",
  "listagg" : "This SQL function returns  a list of values from a column in a table, separated by a specified delimiter. For example, LISTAGG(column_name, ',') within a table would return a comma-separated list of values from the specified column.",
  "ln" : "This SQL function returns  the natural logarithm of a number. For example, LN(2.71828) returns 0.999999.",
  "localtime" : "This SQL function returns  the current local time of the system on which the database server is running. For example, LOCALTIME() returns '2020-07-20 11:45:00' when invoked on July 20th, 2020 at 11:45am.",
  "localtimestamp" : "This SQL function returns  the current date and time in the current session's time zone. For example, LOCALTIMESTAMP() returns '2020-07-20 11:45:00.000' when invoked on July 20th, 2020 at 11:45am",
  "log" : "This SQL function returns  the natural logarithm of a given number. For example, LOG(2) returns 0.693147180559945.",
  "log10" : "This SQL function returns  the base-10 logarithm of a given number. For example, LOG10(100) would return 2, as 100 is equal to 10^2.",
  "log2" : "This SQL function returns  the logarithm of a number to the base 2. For example, LOG2(8) returns 3, as 8 is equal to 2 to the power of 3.",
  "lower" : "This SQL function returns  a string with all characters converted to lowercase. For example, LOWER('ABCD') would return 'abcd'.",
  "match_proctime" : "This SQL function returns  the difference between two timestamps in milliseconds. For example, MATCH_PROCTIME('2020-07-01 10:00:00', '2020-07-01 10:00:05') returns 5000 milliseconds.",
  "match_rowtime" : "This SQL function returns  the rowtime of the first row that matches the given predicate. For example, MATCH_ROWTIME(ORDER_ID = '12345') returns the rowtime of the first row with ORDER_ID equal to '12345'.",
  "max" : "This SQL function returns  the maximum value in a set of values. For example, MAX(5, 10, 3) would return 10.",
  "md5" : "This SQL function returns  a 128-bit hash value from a given string. For example, MD5('Hello World') returns 'b10a8db164e0754105b7a99be72e3fe5'.",
  "min" : "This SQL function returns  the minimum value in a given column. For example, the query \"SELECT MIN(price) FROM products\" would return the lowest price of all products in the products table.",
  "mod" : "This SQL function returns  the remainder of a division operation. For example, MOD(10, 3) would return 1, since 10 divided by 3 is 3 with a remainder of 1.",
  "next" : "This SQL function returns  the next value in a sequence. For example, NEXT VALUE FOR my_sequence returns the next value in the sequence named my_sequence.",
  "now" : "This SQL function returns  the current date and time as a datetime value. For example, NOW() returns '2020-09-17 11:45:00' when invoked on September 17th, 2020 at 11:45am.",
  "ntile" : "This SQL function returns  an integer value that indicates the number of a group that a row belongs to within a set of groups. For example, NTILE(4) applied to a set of 10 rows would return 1 for the first 2 rows, 2 for the next 2",
  "nullif" : "This SQL function returns  a null value if two specified expressions are equal. For example, NULLIF(1,1) returns NULL.",
  "percent_rank" : "This SQL function returns  the relative rank of a value in a set of values. For example, PERCENT_RANK() of the value '5' in the set (1,2,3,4,5,6,7) would return 0.714",
  "pi" : "This SQL function returns  the mathematical constant pi (π) with a user-defined number of decimal places. For example, SELECT PI(4) would return 3.1416.",
  "pi_function" : "This SQL function returns  the value of pi to a specified number of decimal places. For example, PI_FUNCTION(3) returns 3.142.",
  "power" : "This SQL function returns  the result of a number raised to a specified power. For example, POWER(2,3) returns 8, as 2 to the power of 3 is 8.",
  "prev" : "This SQL function returns  the value of the previous row in the same column. For example, PREV(column_name) in a table with values 1, 2, 3, 4 would return 2.",
  "print" : "This SQL function returns  a message to the user. For example, PRINT 'Hello World' would return the message \"Hello World\" to the user.",
  "proctime" : "This SQL function returns  the time at which a query is processed. For example, PROCTIME() returns the time '2020-07-20 12:00:00' when the query is processed at 12:00 PM on July 20th, 2020.",
  "proctime_materialize" : "This SQL function returns  the current system time as a timestamp value. For example, PROCTIME_MATERIALIZE() returns the current system time as a timestamp value of '2020-09-17 15:45:00.000000'.",
  "radians" : "This SQL function returns  the radian value of a given degree value. For example, RADIANS(90) returns 1.5707963267948966.",
  "rand" : "This SQL function returns  a random floating-point number between 0 and 1. For example, SELECT RAND() could return 0.73545.",
  "rand_integer" : "This SQL function returns  a random integer between two specified values. For example, RAND_INTEGER(1, 10) returns a random integer between 1 and 10, such as 8.",
  "rank" : "This SQL function returns  the rank of each row within a partition of a result set. For example, the following query returns the rank of each row within the partition of the result set ordered by the column \"score\": SELECT RANK() OVER (ORDER BY score)",
  "round" : "This SQL function returns  a number rounded to a specified number of decimal places. For example, ROUND(3.14159, 2) would return 3.14.",
  "row_number" : "This SQL function returns  a unique sequential number for each row in a result set, starting with 1. For example, the query \"SELECT ROW_NUMBER() OVER (ORDER BY id) AS row_num, id FROM table\" would return a result set",
  "session_end" : "This SQL function returns  the time at which the current session ended. For example, SESSION_END() returns '2020-07-20 10:30:00' when the session ended at 10:30am on July 20, 2020.",
  "session_old" : "This SQL function returns  the value of a session variable from the previous session. For example, SESSION_OLD('user_id') returns the user_id from the previous session.",
  "session_proctime" : "This SQL function returns  the time at which the current session started processing the current statement. For example, SELECT SESSION_PROCTIME() FROM DUAL; returns the time the current statement was started in the current session.",
  "session_rowtime" : "This SQL function returns  the time at which the current row was last updated. For example, SESSION_ROWTIME() returns '2020-09-01 12:00:00' when the current row was last updated at 12:00 PM on September 1,",
  "session_start" : "This SQL function returns  the start time of the current session. For example, SESSION_START() returns '2020-09-17 10:00:00' when the current session started at 10:00 AM on September 17th, 2020.",
  "sha1" : "This SQL function returns  a 160-bit hash value as a hexadecimal string of 40 characters. For example, SHA1('Hello World') returns '2ef7bde608ce5404e97d5f042f95f89f1",
  "sha2" : "This SQL function returns  a hash value calculated using the SHA-2 algorithm. For example, SHA2('Hello World', 256) returns '7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1",
  "sha224" : "This SQL function returns  a 224-bit hash value as a string of 44 hexadecimal digits. For example, SHA224('Hello World') returns '4575bb4ec129df6380cedde6d71217fe0536f8ffd",
  "sha256" : "This SQL function returns  a 256-bit hash value of a given string. For example, SHA256('Hello World') returns 'a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b",
  "sha384" : "This SQL function returns  a 384-bit hash of a given string using the SHA-384 algorithm. For example, SHA384('Hello World') returns '59e1748777448c69de6b800d7a33bbfb9ff1b463",
  "sha512" : "This SQL function returns  a 512-bit hash value of a given string. For example, SHA512('Hello World') returns '2C74FD17EDAFD80E8447B0CA3A3CE0795D1BB7D9F",
  "sign" : "This SQL function returns  an integer value indicating the sign of a numeric expression. For example, SIGN(-5) would return -1, indicating that the expression is negative.",
  "sin" : "This SQL function returns  the sine of a given angle in radians. For example, SIN(1) returns 0.841470984807897.",
  "single_value" : "This SQL function returns  a single value from a single row of a query result set. For example, SELECT SINGLE_VALUE(1+1) FROM DUAL; would return 2.",
  "sinh" : "This SQL function returns  the hyperbolic sine of a given number. For example, SINH(1) returns 1.1752011936438014.",
  "sqrt" : "This SQL function returns  the square root of a given number. For example, SQRT(9) returns 3.",
  "stddev" : "This SQL function returns  the standard deviation of a set of values. For example, the query \"SELECT STDDEV(1,2,3,4,5) FROM dual;\" would return 1.58113883008419.",
  "stddev_pop" : "This SQL function returns  the population standard deviation of a set of numbers. For example, STDDEV_POP(1,2,3,4,5) returns 1.58113883008419.",
  "stddev_samp" : "This SQL function returns  the sample standard deviation of a set of numbers. For example, the query \"SELECT STDDEV_SAMP(1,2,3,4,5) FROM dual;\" would return 1.58113883008419.",
  "streamrecord_timestamp" : "This SQL function returns  the timestamp of the last record in a stream. For example, STREAMRECORD_TIMESTAMP('mystream') returns the timestamp of the last record in the stream 'mystream'.",
  "sum" : "This SQL function returns  the sum of a set of values. For example, SUM(1, 2, 3) would return 6.",
  "sum0" : "This SQL function returns  the sum of all values in a given column. For example, SUM(quantity) returns the sum of all values in the quantity column.",
  "tan" : "This SQL function returns  the tangent of a given angle in radians. For example, TAN(0.5) would return 0.5463024898437905.",
  "tanh" : "This SQL function returns  the hyperbolic tangent of a given number. For example, TANH(0.5) returns 0.4621171572600098.",
  "timestamp_add" : "This SQL function returns  a timestamp value based on adding an interval to a timestamp. For example, TIMESTAMP_ADD(TIMESTAMP '2020-01-01 00:00:00', INTERVAL 1 DAY) returns '2020-01-02 00",
  "timestamp_diff" : "This SQL function returns  the difference between two timestamps in a specified unit of measure. For example, TIMESTAMP_DIFF(SECOND, '2020-01-01 00:00:00', '2020-01-01 00:00:10",
  "to_date" : "This SQL function returns  a date value from a string or number. For example, TO_DATE('20-JAN-2020', 'DD-MON-YYYY') returns the date value '2020-01-20'.",
  "to_timestamp" : "This SQL function returns  a timestamp value from a string or number that represents a date and/or time. For example, TO_TIMESTAMP('2020-07-01', 'YYYY-MM-DD') returns the timestamp '2020-07-01",
  "to_timestamp_ltz" : "This SQL function returns  a timestamp value in the local time zone from a character string representing a date and time. For example, TO_TIMESTAMP_LTZ('2020-07-01 12:00:00', 'YYYY-MM-DD HH",
  "truncate" : "This SQL function returns  a number after truncating the decimal places. For example, TRUNCATE(3.14159, 2) would return 3.14.",
  "try_cast" : "This SQL function returns  a value cast to the specified data type if the cast succeeds; otherwise, it returns null. For example, TRY_CAST('123' AS INT) would return 123.",
  "tumble" : "This SQL function returns  a set of non-overlapping time intervals of a specified length. For example, TUMBLE(TIMESTAMP '2020-01-01 00:00:00', INTERVAL '1' DAY) returns the time interval from",
  "tumble_end" : "This SQL function returns  the end of a given time period based on a specified interval. For example, TUMBLE_END('2020-01-01', INTERVAL '1' DAY) returns '2020-01-02 00:00:00.000'.",
  "tumble_old" : "This SQL function returns  the oldest value in a given column. For example, TUMBLE_OLD('table_name', 'column_name') returns the oldest value in the 'column_name' column of the 'table_name' table.",
  "tumble_proctime" : "This SQL function returns  a window of time based on the current processing time. For example, TUMBLE_PROCTIME(INTERVAL '5' MINUTE) returns a window of time starting from the current processing time and ending 5 minutes later.",
  "tumble_rowtime" : "This SQL function returns  a row for each time window specified by the user. For example, TUMBLE_ROWTIME(timestamp, INTERVAL '1' HOUR) returns a row for each hour in the timestamp column.",
  "tumble_start" : "This SQL function returns  the start of a given time period based on a given interval. For example, TUMBLE_START('2020-07-01T00:00:00Z', INTERVAL '1' DAY) returns '2020-06-30",
  "unix_timestamp" : "This SQL function returns  the number of seconds since '1970-01-01 00:00:00' UTC as an unsigned integer. For example, UNIX_TIMESTAMP('2020-07-01 12:00:00') returns 1593593600",
  "uuid" : "This SQL function returns  a universally unique identifier (UUID) string. For example, UUID() returns '6ccd780c-baba-1026-9564-5b8c656024db'.",
  "var_pop" : "This SQL function returns  the population variance of a set of numbers. For example, VAR_POP(1,2,3,4,5) returns 2.5.",
  "var_samp" : "This SQL function returns  the sample variance of a set of numbers. For example, VAR_SAMP(1,2,3,4,5) returns 2.5.",
  "variance" : "This SQL function returns  the statistical variance of a set of values. For example, VARIANCE(1,2,3,4,5) would return 2.5."
}