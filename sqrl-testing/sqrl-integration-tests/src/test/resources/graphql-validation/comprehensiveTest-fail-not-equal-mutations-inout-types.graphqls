type AnotherCustomer {
    customerid: Float!
    email: String!
    lastUpdated: Float!
}

type Customer {
    customerid: Float!
    email: String!
    name: String!
    lastUpdated: Float!
    timestamp: DateTime
    related(limit: Int = 10, offset: Int = 0): [Customer!]
    relatedByLength(length: Int!, limit: Int = 10, offset: Int = 0): [Customer!]
}

type CustomerByMultipleTime {
    customerid: Float!
    email: String!
    name: String!
    lastUpdated: Float!
    timestamp: DateTime
}

type CustomerByTime2 {
    customerid: Float!
    email: String!
    name: String!
    lastUpdated: Float!
    timestamp: DateTime
}

type CustomerFilteredDistinct {
    customerid: Float!
    email: String!
    name: String!
    lastUpdated: Float!
    timestamp: DateTime
}

type CustomerTimeWindow {
    window_start: DateTime!
    window_end: DateTime!
    unique_email_count: Float!
}

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

type ExplicitDistinct {
    customerid: Float!
    timestamp: DateTime
    name: String!
}

type ExternalOrders {
    id: Float!
    customerid: Float!
    time: DateTime!
    entries: [ExternalOrders_entriesOutput]!
}

type ExternalOrders_entriesOutput {
    productid: Float!
    quantity: Float!
    unit_price: Float!
    discount: Float
}

type InvalidDistinct {
    customerid: Float!
    timestamp: DateTime
    namee: String!
}

type MissedTemporalJoin {
    id: Float!
    customerid: Float!
    time: DateTime!
    entries: [MissedTemporalJoin_entriesOutput]!
    customerid0: Float!
    timestamp: DateTime
    name: String!
}

type MissedTemporalJoin_entriesOutput {
    productid: Float!
    quantity: Float!
    unit_price: Float!
    discount: Float
}

type Mutation {
    Orders(event: OrdersInput!): OrdersResultOutput!
}

type Orders {
    orderid: Int!
    amount: Float
}

input OrdersInput {
    orderid: Int!
    amount: Float
}

type OrdersResultOutput {
    orderid: Int!
    amount: Float
    different_input: Float
}

type Query {
    AnotherCustomer(limit: Int = 10, offset: Int = 0): [AnotherCustomer!]
    Customer(limit: Int = 10, offset: Int = 0): [Customer!]
    CustomerByMultipleTime(limit: Int = 10, offset: Int = 0): [CustomerByMultipleTime!]
    CustomerByTime2(limit: Int = 10, offset: Int = 0): [CustomerByTime2!]
    CustomerFilteredDistinct(limit: Int = 10, offset: Int = 0): [CustomerFilteredDistinct!]
    CustomerTimeWindow(limit: Int = 10, offset: Int = 0): [CustomerTimeWindow!]
    ExplicitDistinct(limit: Int = 10, offset: Int = 0): [ExplicitDistinct!]
    ExternalOrders(limit: Int = 10, offset: Int = 0): [ExternalOrders!]
    InvalidDistinct(limit: Int = 10, offset: Int = 0): [InvalidDistinct!]
    MissedTemporalJoin(limit: Int = 10, offset: Int = 0): [MissedTemporalJoin!]
    Orders(limit: Int = 10, offset: Int = 0): [Orders!]
    SelectCustomers(limit: Int = 10, offset: Int = 0): [Customer!]
    TemporalJoin(limit: Int = 10, offset: Int = 0): [TemporalJoin!]
    UnnestOrders(limit: Int = 10, offset: Int = 0): [UnnestOrders!]
    CustomerById(minId: Int!, limit: Int = 10, offset: Int = 0): [Customer!]
    CustomerQuery(id: Float!, limit: Int = 10, offset: Int = 0): [AnotherCustomer!]
    TableFunctionCallsTblFct(arg1: Int!, arg2: Int!, limit: Int = 10, offset: Int = 0): [Customer!]
}

type Subscription {
    CustomerSubscription: Customer
    CustomerSubscriptionById(minId: Int!): Customer
}

type TemporalJoin {
    id: Float!
    customerid: Float!
    time: DateTime!
    entries: [TemporalJoin_entriesOutput]!
    customerid0: Float!
    timestamp: DateTime
    name: String!
}

type TemporalJoin_entriesOutput {
    productid: Float!
    quantity: Float!
    unit_price: Float!
    discount: Float
}

type UnnestOrders {
    id: Float!
    customerid: Float!
    time: DateTime!
    productid: Float!
    quantity: Float!
    discount: Float
    newId: Float!
}
