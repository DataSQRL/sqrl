type AddChatMessage {
  role: String!
  content: String!
  name: String
  context: AddChatMessage_contextOutput!
  event_time: DateTime
}

input AddChatMessageInput {
  role: String!
  content: String!
  name: String
  context: AddChatMessage_contextInput!
}

type AddChatMessageResultOutput {
  role: String!
  content: String!
  name: String
  context: AddChatMessageResult_contextOutput!
  event_time: DateTime
}

type AddChatMessageResult_contextOutput {
  customerid: Int
}

input AddChatMessage_contextInput {
  customerid: Int
}

type AddChatMessage_contextOutput {
  customerid: Int
}

type ApplicationAlert {
  id: GraphQLBigInteger!
  customer_id: GraphQLBigInteger!
  loan_type_id: GraphQLBigInteger!
  max_amount: Float!
  min_amount: Float!
  amount: Float!
}

type ApplicationStatus {
  status: String!
  message: String
  event_time: DateTime
  id: GraphQLBigInteger!
  customer_id: GraphQLBigInteger!
  loan_type_id: GraphQLBigInteger!
  amount: Float!
  duration: GraphQLBigInteger!
  max_amount: Float!
  min_amount: Float!
}

type ApplicationUpdates {
  loan_application_id: GraphQLBigInteger!
  status: String!
  message: String
  event_time: DateTime
  application(limit: Int = 10, offset: Int = 0): [Applications!]
}

input ApplicationUpdatesInput {
  loan_application_id: GraphQLBigInteger!
  status: String!
  message: String
}

type ApplicationUpdatesResultOutput {
  loan_application_id: GraphQLBigInteger!
  status: String!
  message: String
  event_time: DateTime
}

type Applications {
  id: GraphQLBigInteger!
  customer_id: GraphQLBigInteger!
  loan_type_id: GraphQLBigInteger!
  amount: Float!
  duration: GraphQLBigInteger!
  application_date: DateTime!
  updated_at: DateTime!
  loanType(limit: Int = 10, offset: Int = 0): [LoanTypes!]
  updates(limit: Int = 10, offset: Int = 0): [ApplicationUpdates!]
}

type ApplicationsStream {
  id: GraphQLBigInteger!
  customer_id: GraphQLBigInteger!
  loan_type_id: GraphQLBigInteger!
  amount: Float!
  duration: GraphQLBigInteger!
  application_date: DateTime!
  updated_at: DateTime!
}

type CustomerChatMessage {
  role: String!
  content: String!
  name: String
  customerid: Int
  timestamp: DateTime
  uuid: String!
}

type Customers {
  id: GraphQLBigInteger!
  first_name: String!
  last_name: String!
  email: String!
  phone: String!
  address: String!
  date_of_birth: String!
  updated_at: DateTime!
  applications(limit: Int = 10, offset: Int = 0): [Applications!]
  overview(limit: Int = 10, offset: Int = 0): [Customers_overview!]
}

type CustomersStream {
  id: GraphQLBigInteger!
  first_name: String!
  last_name: String!
  email: String!
  phone: String!
  address: String!
  date_of_birth: String!
  updated_at: DateTime!
}

type Customers_overview {
  loan_type_id: GraphQLBigInteger!
  total_amount: Float!
  total_loans: GraphQLBigInteger!
}

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

"An arbitrary precision signed integer"
scalar GraphQLBigInteger

type LoanTypes {
  id: GraphQLBigInteger!
  name: String!
  description: String!
  interest_rate: Float!
  max_amount: Float!
  min_amount: Float!
  max_duration: GraphQLBigInteger!
  min_duration: GraphQLBigInteger!
  updated_at: DateTime!
}

type LoanTypesStream {
  id: GraphQLBigInteger!
  name: String!
  description: String!
  interest_rate: Float!
  max_amount: Float!
  min_amount: Float!
  max_duration: GraphQLBigInteger!
  min_duration: GraphQLBigInteger!
  updated_at: DateTime!
}

type Mutation {
  AddChatMessage(event: AddChatMessageInput!): AddChatMessageResultOutput!
  ApplicationUpdates(event: [ApplicationUpdatesInput!]!): [ApplicationUpdatesResultOutput!]!
}

type Query {
  AddChatMessage(limit: Int = 10, offset: Int = 0): [AddChatMessage!]
  ApplicationAlert(limit: Int = 10, offset: Int = 0): [ApplicationAlert!]
  ApplicationStatus(limit: Int = 10, offset: Int = 0): [ApplicationStatus!]
  ApplicationUpdates(limit: Int = 10, offset: Int = 0): [ApplicationUpdates!]
  Applications(limit: Int = 10, offset: Int = 0): [Applications!]
  ApplicationsStream(limit: Int = 10, offset: Int = 0): [ApplicationsStream!]
  CustomerChatMessage(limit: Int = 10, offset: Int = 0): [CustomerChatMessage!]
  Customers(limit: Int = 10, offset: Int = 0): [Customers!]
  CustomersStream(limit: Int = 10, offset: Int = 0): [CustomersStream!]
  LoanTypes(limit: Int = 10, offset: Int = 0): [LoanTypes!]
  LoanTypesStream(limit: Int = 10, offset: Int = 0): [LoanTypesStream!]
}

enum _McpMethodType { NONE, TOOL, RESOURCE }
enum _RestMethodType { NONE, GET, POST }
directive @api(
  mcp: _McpMethodType,
  rest: _RestMethodType,
  uri: String
) on FIELD_DEFINITION | QUERY | MUTATION
