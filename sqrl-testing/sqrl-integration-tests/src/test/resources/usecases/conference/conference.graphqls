scalar DateTime

type Query {
    Events(limit: Int!, offset: Int = 0): [Events!]!
    EventsLiked(userid: String!): [EventsLiked!]!
    RecommendedEvents(userid: String!): [RecommendedEvents!]
    PersonalizedEventSearch(query: String!, userid: String!): [PersonalizedEventSearch!]
}


interface AbstractEvents {
    id : Int!
    date: String!
    time : String!
    location: String!
    title : String!
    abstract : String!
    url : String!
    startTimestamp : String!
}

type speakers {
    name : String!
    title: String
    company: String
}

type LikeCount {
    num : Int
}

type Events implements AbstractEvents{
    id : Int!
    date: String!
    time : String!
    location: String!
    title : String!
    abstract : String!
    url : String!
    startTimestamp : String!
    speakers : [speakers!]
}

type RecommendedEvents implements AbstractEvents{
    id : Int!
    date: String!
    time : String!
    location: String!
    title : String!
    abstract : String!
    url : String!
    startTimestamp : String!
    score: Float!
}

type PersonalizedEventSearch implements AbstractEvents{
    id : Int!
    date: String!
    time : String!
    location: String!
    title : String!
    abstract : String!
    url : String!
    startTimestamp : String!
    score: Float!
}

type EventsLiked implements AbstractEvents{
    id : Int!
    date: String!
    time : String!
    location: String!
    title : String!
    abstract : String!
    url : String!
    startTimestamp : String!
}



type Mutation {
    Likes(liked: LikedInput!): LikeAdded
    AddInterest(interest: AddInterest!): InterestAdded
}

input AddInterest {
    text: String!
    userid: String!
}

type InterestAdded {
    userid: String!
}

input LikedInput {
    eventId: Int!
    userid: String!
    liked: Boolean!
}

type LikeAdded {
    event_time: String!
    userid: String!
}