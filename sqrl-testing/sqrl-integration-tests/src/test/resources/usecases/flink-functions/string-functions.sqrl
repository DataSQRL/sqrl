IMPORT flink.*; -- Import flink functions
IMPORT data-local.Strings; -- Import text data

/* Create string data source */
UnmodifiedTextData := SELECT id,
                             word AS word,
                             sentence AS sentence,
                             paragraph AS paragraph
                      FROM Strings ORDER BY id;

/* =======TEST CASES======== */

/*+test */
ConcatTest := SELECT id,
                  word || 'other string' as concat_table_operator,
                  /*word + 'other string' as concat_table_operator,*/-- tries to add
                  REPEAT(word, 3) as repeat_string_function,
                  CONCAT(word, 'a', 'b', 'c') as concat_function,
                  CONCAT_WS(word, 'a', 'b', 'c') as ws_concat_function
                  FROM UnmodifiedTextData;


/*+test */
LengthTest := SELECT id,
                  CHAR_LENGTH(word) as char_length_function,
                  CHARACTER_LENGTH(word) as character_length_function
              FROM UnmodifiedTextData;


/*+test */
CaseTest := SELECT id,
                  UPPER(word) as uppercase_string_function
                  /*LOWER(word) as lowercase_string_function*/ -- reserved in parser
            FROM UnmodifiedTextData;


/*+test */
TrimTest := SELECT id,
                  /*TRIM(LEADING, ' example') as trim_leading_function,*/ -- issue with Symbol
                  /*TRIP(TRAILING, 'example ') as trim_trailing_function,*/
                  /*TRIP(BOTH, ' example ') as trim_both_function,*/
                  LTRIM(' example') as leading_trim_function,
                  /*RTRIM(TRAILING, 'example ') as trailing_trim_function,*/
                  RTRIM(' example ') as both_trim_function
            FROM UnmodifiedTextData;


/*+test */
PadTest := SELECT id,
                  LPAD('word', 2, word) as left_pad_function,
                  RPAD('word', 2, word) as right_pad_function
            FROM UnmodifiedTextData;


/*+test */
MiscTest := SELECT id,
                  POSITION(word in sentence) as position_function,
                  /*PRINTF('The word of the day is %s', word) as format_function,*/ -- not in flink 1.19
                  REVERSE(word) as reverse_function,
                  SUBSTR(word, 0, 4) as substring_function,
                  SPLIT_INDEX(paragraph, '.', 1) as split_index_function
            FROM UnmodifiedTextData;


/*+test */
BASE64Test := SELECT id,
                     TO_BASE64(word) as to_base_64_function,
                     FROM_BASE64(TO_BASE64(word)) as from_base_64_function
              FROM UnmodifiedTextData;


/*+test */
REGEXTest := SELECT id,
                    REGEXP_REPLACE(sentence, '[aeiouAEIOU]', '*') as no_vowels_regex_replace_function,
                    REGEXP_REPLACE(sentence, '[^a-zA-Z0-9]', '') as only_alphanumeric_regex_function,
                    /*REGEX_COUNT(sentence, ' ') as count_spaces_regex_count_function,*/--not in flink 1.19
                    REGEXP_EXTRACT(sentence, '(\\w+)') as first_word_regex_extract_function
                    /*REGEXP_EXTRACT_ALL(sentence, '(\\w+)') as all_words_regex_function,*/--not in flink 1.19
                    /*REGEXP_INSTR(sentence, '[A-Z]') as first_char_regex_function,*/--not in flink 1.19
                    /*REGEXP_SUBSTR(sentence, '\\w+') as first_word_regex_function*/--not in flink 1.19
                   /* sentence REGEXP '\\band\\b' as contains_and_regex_function*/ --issue with symbol
             FROM UnmodifiedTextData;


/*+test */
ASCIITest := SELECT id,
                  ASCII(word) as ascii_function,
                  CHR(97) as ascii_char_function
              FROM UnmodifiedTextData;


/*+test */
EncodeDecodeTest := SELECT id
                           /*ENCODE('UTF-8', word) as encode_function,
                           DECODE('UTF-8', ENCODE('UTF-8', word)) as decode_function*/ -- sqrl issue with utf-8
                    FROM UnmodifiedTextData;


/*+test */
JSONTest := SELECT id
                    /*JSON_QUOTE('Hello World') as simple_quote_function,
                    JSON_QUOTE('{"key": "value"}') as json_quote_function,
                    JSON_QUOTE('It''s working') as quote_with_apos_function,
                    JSON_QUOTE('Line 1\nLine 2') as multiline_quote_function*/-- not in flink 1.19
            FROM UnmodifiedTextData;


/*+test */
URLTest := SELECT id,
                  /*URL_ENCODE('Hello World') as basic_encode_function,
                  URL_ENCODE('user@example.com') as email_encode_function,
                  URL_ENCODE('path/to/file') as path_encode_function,
                  URL_ENCODE('50% off') as percent_encode_function,
                  URL_ENCODE('query?param=value') as query_encode_function,
                  URL_DECODE('Hello%20World') as basic_decode_function,
                  URL_DECODE('user%40example.com') as email_decode_function,
                  URL_DECODE('path%2Fto%2Ffile') as path_decode_function,
                  URL_DECODE('50%25%20off') as percent_decode_function,
                  URL_DECODE('query%3Fparam%3Dvalue') as query_decodev_function,*/ -- not in flink 1.19
                  PARSE_URL('https://example.com/path?id=123', 'PROTOCOL') as parse_protocol_function,
                  PARSE_URL('https://sub.example.com:8080/path', 'HOST') as parse_host_function,
                  PARSE_URL('https://example.com:8080/path', 'PORT') as parse_port_function,
                  PARSE_URL('https://example.com/path/to/page.html', 'PATH') as parse_path_function,
                  PARSE_URL('https://example.com?id=123&user=john', 'QUERY') as parse_query_function,
                  PARSE_URL('https://example.com#section1', 'REF') as parse_ref_function
           FROM UnmodifiedTextData;

/*+test */
UnmodifiedTextDataTest := SELECT id,
                                 word,
                                 sentence,
                                 paragraph
                          FROM UnmodifiedTextData;