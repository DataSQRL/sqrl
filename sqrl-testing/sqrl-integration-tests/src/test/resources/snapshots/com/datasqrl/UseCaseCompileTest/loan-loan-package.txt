>>>pipeline_explain.txt
=== AddChatMessage
ID:     default_catalog.default_database.AddChatMessage
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.AddChatMessage__def
Annotations:
 - features: DENORMALIZE (feature)
 - stream-root: AddChatMessage__def
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - role: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - content: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - context: RecordType:peek_no_expand(INTEGER customerid) NOT NULL
 - event_time: TIMESTAMP_LTZ(3) *ROWTIME*
Plan:
LogicalProject(_uuid=[$0], role=[$1], content=[$2], name=[$3], context=[$4], event_time=[$5])
  LogicalWatermarkAssigner(rowtime=[event_time], watermark=[-($5, 0:INTERVAL SECOND)])
    LogicalProject(_uuid=[$0], role=[$1], content=[$2], name=[$3], context=[$4], event_time=[CAST($5):TIMESTAMP_LTZ(3) *ROWTIME*])
      LogicalTableScan(table=[[default_catalog, default_database, AddChatMessage__def, metadata=[timestamp]]])
SQL: CREATE VIEW `AddChatMessage`
AS
SELECT *
FROM `default_catalog`.`default_database`.`AddChatMessage__def`
=== ApplicationAlert
ID:     default_catalog.default_database.ApplicationAlert
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.ApplicationStatus
Annotations:
 - stream-root: ApplicationUpdates__def
Primary Key: _uuid
Timestamp  : -
Schema:
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - id: BIGINT NOT NULL
 - customer_id: BIGINT NOT NULL
 - loan_type_id: BIGINT NOT NULL
 - max_amount: DOUBLE NOT NULL
 - min_amount: DOUBLE NOT NULL
 - amount: DOUBLE NOT NULL
Plan:
LogicalProject(_uuid=[$0], id=[$4], customer_id=[$5], loan_type_id=[$6], max_amount=[$9], min_amount=[$10], amount=[$7])
  LogicalFilter(condition=[AND(=($1, 'underwriting'), OR(>($7, $9), <($7, $10)))])
    LogicalTableScan(table=[[default_catalog, default_database, ApplicationStatus]])
SQL: CREATE VIEW ApplicationAlert AS  SELECT _uuid, id, customer_id, loan_type_id, max_amount, min_amount, amount
                    FROM ApplicationStatus a
                    WHERE status = 'underwriting' AND (amount > max_amount OR amount < min_amount);

=== ApplicationStatus
ID:     default_catalog.default_database.ApplicationStatus
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.ApplicationUpdates, default_catalog.default_database.Applications, default_catalog.default_database.LoanTypes
Annotations:
 - stream-root: ApplicationUpdates__def
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - status: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - message: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - event_time: TIMESTAMP_LTZ(3) *ROWTIME*
 - id: BIGINT NOT NULL
 - customer_id: BIGINT NOT NULL
 - loan_type_id: BIGINT NOT NULL
 - amount: DOUBLE NOT NULL
 - duration: BIGINT NOT NULL
 - max_amount: DOUBLE NOT NULL
 - min_amount: DOUBLE NOT NULL
Plan:
LogicalProject(_uuid=[$0], status=[$2], message=[$3], event_time=[$4], id=[$5], customer_id=[$6], loan_type_id=[$7], amount=[$8], duration=[$9], max_amount=[$16], min_amount=[$17])
  LogicalCorrelate(correlation=[$cor3], joinType=[inner], requiredColumns=[{4, 7}])
    LogicalCorrelate(correlation=[$cor2], joinType=[inner], requiredColumns=[{1, 4}])
      LogicalTableScan(table=[[default_catalog, default_database, ApplicationUpdates]])
      LogicalFilter(condition=[=($0, $cor2.loan_application_id)])
        LogicalSnapshot(period=[$cor2.event_time])
          LogicalTableScan(table=[[default_catalog, default_database, Applications]])
    LogicalFilter(condition=[=($0, $cor3.loan_type_id)])
      LogicalSnapshot(period=[$cor3.event_time])
        LogicalTableScan(table=[[default_catalog, default_database, LoanTypes]])
SQL: CREATE VIEW ApplicationStatus AS  SELECT u._uuid, u.status, u.message, u.event_time, a.id, a.customer_id, a.loan_type_id,
                            a.amount, a.duration, t.max_amount, t.min_amount
                     FROM ApplicationUpdates u JOIN Applications FOR SYSTEM_TIME AS OF u.`event_time` a ON a.id = u.loan_application_id
                            JOIN LoanTypes FOR SYSTEM_TIME AS OF u.`event_time` t ON t.id = a.loan_type_id;

=== ApplicationUpdates
ID:     default_catalog.default_database.ApplicationUpdates
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.ApplicationUpdates__def
Annotations:
 - stream-root: ApplicationUpdates__def
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - loan_application_id: BIGINT NOT NULL
 - status: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - message: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - event_time: TIMESTAMP_LTZ(3) *ROWTIME*
Plan:
LogicalProject(_uuid=[$0], loan_application_id=[$1], status=[$2], message=[$3], event_time=[$4])
  LogicalWatermarkAssigner(rowtime=[event_time], watermark=[-($4, 0:INTERVAL SECOND)])
    LogicalProject(_uuid=[$0], loan_application_id=[$1], status=[$2], message=[$3], event_time=[CAST($4):TIMESTAMP_LTZ(3) *ROWTIME*])
      LogicalTableScan(table=[[default_catalog, default_database, ApplicationUpdates__def, metadata=[timestamp]]])
SQL: CREATE VIEW `ApplicationUpdates`
AS
SELECT *
FROM `default_catalog`.`default_database`.`ApplicationUpdates__def`
=== Applications
ID:     default_catalog.default_database.Applications
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.ApplicationsStream
Annotations:
 - mostRecentDistinct: true
 - stream-root: ApplicationsStream__def
Primary Key: id
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - customer_id: BIGINT NOT NULL
 - loan_type_id: BIGINT NOT NULL
 - amount: DOUBLE NOT NULL
 - duration: BIGINT NOT NULL
 - application_date: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - updated_at: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(id=[$0], customer_id=[$1], loan_type_id=[$2], amount=[$3], duration=[$4], application_date=[$5], updated_at=[$6])
  LogicalFilter(condition=[=($7, 1)])
    LogicalProject(id=[$0], customer_id=[$1], loan_type_id=[$2], amount=[$3], duration=[$4], application_date=[$5], updated_at=[$6], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $6 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, ApplicationsStream]])
SQL: CREATE VIEW `Applications`
AS
SELECT `id`, `customer_id`, `loan_type_id`, `amount`, `duration`, `application_date`, `updated_at`
FROM (SELECT `id`, `customer_id`, `loan_type_id`, `amount`, `duration`, `application_date`, `updated_at`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`ApplicationsStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== ApplicationsStream
ID:     default_catalog.default_database.ApplicationsStream
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.ApplicationsStream__def
Annotations:
 - stream-root: ApplicationsStream__def
Primary Key: id, updated_at
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - customer_id: BIGINT NOT NULL
 - loan_type_id: BIGINT NOT NULL
 - amount: DOUBLE NOT NULL
 - duration: BIGINT NOT NULL
 - application_date: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - updated_at: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(id=[$0], customer_id=[$1], loan_type_id=[$2], amount=[$3], duration=[$4], application_date=[$5], updated_at=[$6])
  LogicalWatermarkAssigner(rowtime=[updated_at], watermark=[-($6, 1:INTERVAL SECOND)])
    LogicalTableScan(table=[[default_catalog, default_database, ApplicationsStream__def]])
SQL: CREATE VIEW `ApplicationsStream`
AS
SELECT *
FROM `default_catalog`.`default_database`.`ApplicationsStream__def`
=== CustomerChatMessage
ID:     default_catalog.default_database.CustomerChatMessage
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.AddChatMessage
Annotations:
 - stream-root: AddChatMessage__def
 - sort: [4 DESC-nulls-last]
Primary Key: uuid
Timestamp  : timestamp
Schema:
 - role: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - content: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - customerid: INTEGER
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME*
 - uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalProject(role=[$1], content=[$2], name=[$3], customerid=[$4.customerid], timestamp=[$5], uuid=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, AddChatMessage]])
SQL: CREATE VIEW CustomerChatMessage AS  SELECT role, content, name, c.context.customerid, event_time AS `timestamp`,
                        _uuid AS uuid
                       FROM AddChatMessage c ORDER BY `timestamp` DESC;

=== Customers
ID:     default_catalog.default_database.Customers
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.CustomersStream
Annotations:
 - mostRecentDistinct: true
 - stream-root: CustomersStream__def
Primary Key: id
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - first_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - last_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - phone: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - address: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - date_of_birth: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - updated_at: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], phone=[$4], address=[$5], date_of_birth=[$6], updated_at=[$7])
  LogicalFilter(condition=[=($8, 1)])
    LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], phone=[$4], address=[$5], date_of_birth=[$6], updated_at=[$7], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $7 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, CustomersStream]])
SQL: CREATE VIEW `Customers`
AS
SELECT `id`, `first_name`, `last_name`, `email`, `phone`, `address`, `date_of_birth`, `updated_at`
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `phone`, `address`, `date_of_birth`, `updated_at`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`CustomersStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== CustomersStream
ID:     default_catalog.default_database.CustomersStream
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.CustomersStream__def
Annotations:
 - stream-root: CustomersStream__def
Primary Key: id, updated_at
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - first_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - last_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - phone: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - address: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - date_of_birth: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - updated_at: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], phone=[$4], address=[$5], date_of_birth=[$6], updated_at=[$7])
  LogicalWatermarkAssigner(rowtime=[updated_at], watermark=[-($7, 1:INTERVAL SECOND)])
    LogicalTableScan(table=[[default_catalog, default_database, CustomersStream__def]])
SQL: CREATE VIEW `CustomersStream`
AS
SELECT *
FROM `default_catalog`.`default_database`.`CustomersStream__def`
=== LoanTypes
ID:     default_catalog.default_database.LoanTypes
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.LoanTypesStream
Annotations:
 - mostRecentDistinct: true
 - stream-root: LoanTypesStream__def
Primary Key: id
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - description: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - interest_rate: DOUBLE NOT NULL
 - max_amount: DOUBLE NOT NULL
 - min_amount: DOUBLE NOT NULL
 - max_duration: BIGINT NOT NULL
 - min_duration: BIGINT NOT NULL
 - updated_at: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(id=[$0], name=[$1], description=[$2], interest_rate=[$3], max_amount=[$4], min_amount=[$5], max_duration=[$6], min_duration=[$7], updated_at=[$8])
  LogicalFilter(condition=[=($9, 1)])
    LogicalProject(id=[$0], name=[$1], description=[$2], interest_rate=[$3], max_amount=[$4], min_amount=[$5], max_duration=[$6], min_duration=[$7], updated_at=[$8], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $8 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, LoanTypesStream]])
SQL: CREATE VIEW `LoanTypes`
AS
SELECT `id`, `name`, `description`, `interest_rate`, `max_amount`, `min_amount`, `max_duration`, `min_duration`, `updated_at`
FROM (SELECT `id`, `name`, `description`, `interest_rate`, `max_amount`, `min_amount`, `max_duration`, `min_duration`, `updated_at`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`LoanTypesStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== LoanTypesStream
ID:     default_catalog.default_database.LoanTypesStream
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.LoanTypesStream__def
Annotations:
 - stream-root: LoanTypesStream__def
Primary Key: id, updated_at
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - description: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - interest_rate: DOUBLE NOT NULL
 - max_amount: DOUBLE NOT NULL
 - min_amount: DOUBLE NOT NULL
 - max_duration: BIGINT NOT NULL
 - min_duration: BIGINT NOT NULL
 - updated_at: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(id=[$0], name=[$1], description=[$2], interest_rate=[$3], max_amount=[$4], min_amount=[$5], max_duration=[$6], min_duration=[$7], updated_at=[$8])
  LogicalWatermarkAssigner(rowtime=[updated_at], watermark=[-($8, 1:INTERVAL SECOND)])
    LogicalTableScan(table=[[default_catalog, default_database, LoanTypesStream__def]])
SQL: CREATE VIEW `LoanTypesStream`
AS
SELECT *
FROM `default_catalog`.`default_database`.`LoanTypesStream__def`
>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `CustomersStream__schema` (
  `id` BIGINT NOT NULL,
  `first_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `last_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `phone` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `address` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `date_of_birth` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `CustomersStream__def` (
  PRIMARY KEY (`id`, `updated_at`) NOT ENFORCED,
  WATERMARK FOR `updated_at` AS `updated_at` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = '${DATA_PATH}/customers.jsonl',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `CustomersStream__schema`;
CREATE VIEW `CustomersStream`
AS
SELECT *
FROM `default_catalog`.`default_database`.`CustomersStream__def`;
CREATE TEMPORARY TABLE `ApplicationsStream__schema` (
  `id` BIGINT NOT NULL,
  `customer_id` BIGINT NOT NULL,
  `loan_type_id` BIGINT NOT NULL,
  `amount` DOUBLE NOT NULL,
  `duration` BIGINT NOT NULL,
  `application_date` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `ApplicationsStream__def` (
  PRIMARY KEY (`id`, `updated_at`) NOT ENFORCED,
  WATERMARK FOR `updated_at` AS `updated_at` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = '${DATA_PATH}/applications.jsonl',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `ApplicationsStream__schema`;
CREATE VIEW `ApplicationsStream`
AS
SELECT *
FROM `default_catalog`.`default_database`.`ApplicationsStream__def`;
CREATE TEMPORARY TABLE `LoanTypesStream__schema` (
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `interest_rate` DOUBLE NOT NULL,
  `max_amount` DOUBLE NOT NULL,
  `min_amount` DOUBLE NOT NULL,
  `max_duration` BIGINT NOT NULL,
  `min_duration` BIGINT NOT NULL,
  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `LoanTypesStream__def` (
  PRIMARY KEY (`id`, `updated_at`) NOT ENFORCED,
  WATERMARK FOR `updated_at` AS `updated_at` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = '${DATA_PATH}/loan_types.jsonl',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `LoanTypesStream__schema`;
CREATE VIEW `LoanTypesStream`
AS
SELECT *
FROM `default_catalog`.`default_database`.`LoanTypesStream__def`;
CREATE TABLE `ApplicationUpdates__def` (
  `_uuid` STRING NOT NULL,
  `loan_application_id` BIGINT NOT NULL,
  `status` STRING NOT NULL,
  `message` STRING,
  `event_time` TIMESTAMP_LTZ(3) METADATA FROM 'timestamp',
  WATERMARK FOR `event_time` AS `event_time` - INTERVAL '0.0' SECOND
) WITH (
  'connector' = 'kafka',
  'format' = 'flexible-json',
  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',
  'properties.group.id' = '${PROPERTIES_GROUP_ID}',
  'scan.startup.mode' = 'group-offsets',
  'properties.auto.offset.reset' = 'earliest',
  'topic' = 'ApplicationUpdates'
);
CREATE VIEW `ApplicationUpdates`
AS
SELECT *
FROM `default_catalog`.`default_database`.`ApplicationUpdates__def`;
CREATE VIEW `Customers`
AS
SELECT `id`, `first_name`, `last_name`, `email`, `phone`, `address`, `date_of_birth`, `updated_at`
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `phone`, `address`, `date_of_birth`, `updated_at`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`CustomersStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `Applications`
AS
SELECT `id`, `customer_id`, `loan_type_id`, `amount`, `duration`, `application_date`, `updated_at`
FROM (SELECT `id`, `customer_id`, `loan_type_id`, `amount`, `duration`, `application_date`, `updated_at`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`ApplicationsStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `LoanTypes`
AS
SELECT `id`, `name`, `description`, `interest_rate`, `max_amount`, `min_amount`, `max_duration`, `min_duration`, `updated_at`
FROM (SELECT `id`, `name`, `description`, `interest_rate`, `max_amount`, `min_amount`, `max_duration`, `min_duration`, `updated_at`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`LoanTypesStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `ApplicationStatus`
AS
SELECT `u`.`_uuid`, `u`.`status`, `u`.`message`, `u`.`event_time`, `a`.`id`, `a`.`customer_id`, `a`.`loan_type_id`, `a`.`amount`, `a`.`duration`, `t`.`max_amount`, `t`.`min_amount`
FROM `ApplicationUpdates` AS `u`
 INNER JOIN `Applications` FOR SYSTEM_TIME AS OF `u`.`event_time` AS `a` ON `a`.`id` = `u`.`loan_application_id`
 INNER JOIN `LoanTypes` FOR SYSTEM_TIME AS OF `u`.`event_time` AS `t` ON `t`.`id` = `a`.`loan_type_id`;
CREATE VIEW `ApplicationAlert`
AS
SELECT `_uuid`, `id`, `customer_id`, `loan_type_id`, `max_amount`, `min_amount`, `amount`
FROM `ApplicationStatus` AS `a`
WHERE `status` = 'underwriting' AND (`amount` > `max_amount` OR `amount` < `min_amount`);
CREATE TABLE `AddChatMessage__def` (
  `_uuid` STRING NOT NULL,
  `role` STRING NOT NULL,
  `content` STRING NOT NULL,
  `name` STRING,
  `context` ROW(`customerid` INTEGER) NOT NULL,
  `event_time` TIMESTAMP_LTZ(3) METADATA FROM 'timestamp',
  WATERMARK FOR `event_time` AS `event_time` - INTERVAL '0.0' SECOND
) WITH (
  'connector' = 'kafka',
  'format' = 'flexible-json',
  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',
  'properties.group.id' = '${PROPERTIES_GROUP_ID}',
  'scan.startup.mode' = 'group-offsets',
  'properties.auto.offset.reset' = 'earliest',
  'topic' = 'AddChatMessage'
);
CREATE VIEW `AddChatMessage`
AS
SELECT *
FROM `default_catalog`.`default_database`.`AddChatMessage__def`;
CREATE VIEW `CustomerChatMessage`
AS
SELECT `role`, `content`, `name`, `c`.`context`.`customerid`, `event_time` AS `timestamp`, `_uuid` AS `uuid`
FROM `AddChatMessage` AS `c`;
CREATE VIEW `LoanTypesTest`
AS
SELECT COUNT(*) AS `num_loan_types`
FROM `LoanTypes`;
CREATE VIEW `CustomerApplicationTest`
AS
SELECT `c`.`id`, `c`.`email`, COUNT(*) AS `num_applications`, SUM(`a`.`amount`) AS `total`
FROM `Customers` AS `c`
 INNER JOIN `Applications` AS `a` ON `c`.`id` = `a`.`customer_id`
GROUP BY `c`.`id`, `c`.`email`;
CREATE TABLE `AddChatMessage_1` (
  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `role` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `content` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `context` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),
  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE,
  PRIMARY KEY (`_uuid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'AddChatMessage_1'
);
CREATE TABLE `ApplicationAlert_2` (
  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `id` BIGINT NOT NULL,
  `customer_id` BIGINT NOT NULL,
  `loan_type_id` BIGINT NOT NULL,
  `max_amount` DOUBLE NOT NULL,
  `min_amount` DOUBLE NOT NULL,
  `amount` DOUBLE NOT NULL,
  PRIMARY KEY (`_uuid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'ApplicationAlert_2'
);
CREATE TABLE `ApplicationStatus_3` (
  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `status` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `message` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE,
  `id` BIGINT NOT NULL,
  `customer_id` BIGINT NOT NULL,
  `loan_type_id` BIGINT NOT NULL,
  `amount` DOUBLE NOT NULL,
  `duration` BIGINT NOT NULL,
  `max_amount` DOUBLE NOT NULL,
  `min_amount` DOUBLE NOT NULL,
  PRIMARY KEY (`_uuid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'ApplicationStatus_3'
);
CREATE TABLE `ApplicationUpdates_4` (
  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `loan_application_id` BIGINT NOT NULL,
  `status` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `message` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE,
  PRIMARY KEY (`_uuid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'ApplicationUpdates_4'
);
CREATE TABLE `Applications_5` (
  `id` BIGINT NOT NULL,
  `customer_id` BIGINT NOT NULL,
  `loan_type_id` BIGINT NOT NULL,
  `amount` DOUBLE NOT NULL,
  `duration` BIGINT NOT NULL,
  `application_date` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'Applications_5'
);
CREATE TABLE `ApplicationsStream_6` (
  `id` BIGINT NOT NULL,
  `customer_id` BIGINT NOT NULL,
  `loan_type_id` BIGINT NOT NULL,
  `amount` DOUBLE NOT NULL,
  `duration` BIGINT NOT NULL,
  `application_date` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`, `updated_at`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'ApplicationsStream_6'
);
CREATE TABLE `CustomerChatMessage_7` (
  `role` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `content` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `customerid` INTEGER,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE,
  `uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  PRIMARY KEY (`uuid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'CustomerChatMessage_7'
);
CREATE TABLE `Customers_8` (
  `id` BIGINT NOT NULL,
  `first_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `last_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `phone` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `address` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `date_of_birth` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'Customers_8'
);
CREATE TABLE `CustomersStream_9` (
  `id` BIGINT NOT NULL,
  `first_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `last_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `phone` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `address` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `date_of_birth` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`, `updated_at`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'CustomersStream_9'
);
CREATE TABLE `LoanTypes_10` (
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `interest_rate` DOUBLE NOT NULL,
  `max_amount` DOUBLE NOT NULL,
  `min_amount` DOUBLE NOT NULL,
  `max_duration` BIGINT NOT NULL,
  `min_duration` BIGINT NOT NULL,
  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'LoanTypes_10'
);
CREATE TABLE `LoanTypesStream_11` (
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `interest_rate` DOUBLE NOT NULL,
  `max_amount` DOUBLE NOT NULL,
  `min_amount` DOUBLE NOT NULL,
  `max_duration` BIGINT NOT NULL,
  `min_duration` BIGINT NOT NULL,
  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`, `updated_at`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'LoanTypesStream_11'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`AddChatMessage_1`
(SELECT `_uuid`, `role`, `content`, `name`, TOJSON(`context`) AS `context`, `event_time`
 FROM `default_catalog`.`default_database`.`AddChatMessage`)
;
INSERT INTO `default_catalog`.`default_database`.`ApplicationAlert_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`ApplicationAlert`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`ApplicationStatus_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`ApplicationStatus`)
  ;
  INSERT INTO `default_catalog`.`default_database`.`ApplicationUpdates_4`
   (SELECT *
    FROM `default_catalog`.`default_database`.`ApplicationUpdates`)
   ;
   INSERT INTO `default_catalog`.`default_database`.`Applications_5`
    (SELECT *
     FROM `default_catalog`.`default_database`.`ApplicationsStream`)
    ;
    INSERT INTO `default_catalog`.`default_database`.`ApplicationsStream_6`
     (SELECT *
      FROM `default_catalog`.`default_database`.`ApplicationsStream`)
     ;
     INSERT INTO `default_catalog`.`default_database`.`CustomerChatMessage_7`
      (SELECT *
       FROM `default_catalog`.`default_database`.`CustomerChatMessage`)
      ;
      INSERT INTO `default_catalog`.`default_database`.`Customers_8`
       (SELECT *
        FROM `default_catalog`.`default_database`.`CustomersStream`)
       ;
       INSERT INTO `default_catalog`.`default_database`.`CustomersStream_9`
        (SELECT *
         FROM `default_catalog`.`default_database`.`CustomersStream`)
        ;
        INSERT INTO `default_catalog`.`default_database`.`LoanTypes_10`
         (SELECT *
          FROM `default_catalog`.`default_database`.`LoanTypesStream`)
         ;
         INSERT INTO `default_catalog`.`default_database`.`LoanTypesStream_11`
          (SELECT *
           FROM `default_catalog`.`default_database`.`LoanTypesStream`)
          ;
          END
>>>kafka.json
{
  "topics" : [
    {
      "name" : "AddChatMessage",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    },
    {
      "name" : "ApplicationUpdates",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    }
  ]
}
>>>postgres-schema.sql
CREATE TABLE IF NOT EXISTS "AddChatMessage_1" ("_uuid" TEXT NOT NULL, "role" TEXT NOT NULL, "content" TEXT NOT NULL, "name" TEXT , "context" JSONB , "event_time" TIMESTAMP WITH TIME ZONE  , PRIMARY KEY ("_uuid"));
CREATE TABLE IF NOT EXISTS "ApplicationAlert_2" ("_uuid" TEXT NOT NULL, "id" BIGINT NOT NULL, "customer_id" BIGINT NOT NULL, "loan_type_id" BIGINT NOT NULL, "max_amount" DOUBLE PRECISION NOT NULL, "min_amount" DOUBLE PRECISION NOT NULL, "amount" DOUBLE PRECISION NOT NULL , PRIMARY KEY ("_uuid"));
CREATE TABLE IF NOT EXISTS "ApplicationStatus_3" ("_uuid" TEXT NOT NULL, "status" TEXT NOT NULL, "message" TEXT , "event_time" TIMESTAMP WITH TIME ZONE , "id" BIGINT NOT NULL, "customer_id" BIGINT NOT NULL, "loan_type_id" BIGINT NOT NULL, "amount" DOUBLE PRECISION NOT NULL, "duration" BIGINT NOT NULL, "max_amount" DOUBLE PRECISION NOT NULL, "min_amount" DOUBLE PRECISION NOT NULL , PRIMARY KEY ("_uuid"));
CREATE TABLE IF NOT EXISTS "ApplicationUpdates_4" ("_uuid" TEXT NOT NULL, "loan_application_id" BIGINT NOT NULL, "status" TEXT NOT NULL, "message" TEXT , "event_time" TIMESTAMP WITH TIME ZONE  , PRIMARY KEY ("_uuid"));
CREATE TABLE IF NOT EXISTS "Applications_5" ("id" BIGINT NOT NULL, "customer_id" BIGINT NOT NULL, "loan_type_id" BIGINT NOT NULL, "amount" DOUBLE PRECISION NOT NULL, "duration" BIGINT NOT NULL, "application_date" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id"));
CREATE TABLE IF NOT EXISTS "ApplicationsStream_6" ("id" BIGINT NOT NULL, "customer_id" BIGINT NOT NULL, "loan_type_id" BIGINT NOT NULL, "amount" DOUBLE PRECISION NOT NULL, "duration" BIGINT NOT NULL, "application_date" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id","updated_at"));
CREATE TABLE IF NOT EXISTS "CustomerChatMessage_7" ("role" TEXT NOT NULL, "content" TEXT NOT NULL, "name" TEXT , "customerid" INTEGER , "timestamp" TIMESTAMP WITH TIME ZONE , "uuid" TEXT NOT NULL , PRIMARY KEY ("uuid"));
CREATE TABLE IF NOT EXISTS "Customers_8" ("id" BIGINT NOT NULL, "first_name" TEXT NOT NULL, "last_name" TEXT NOT NULL, "email" TEXT NOT NULL, "phone" TEXT NOT NULL, "address" TEXT NOT NULL, "date_of_birth" TEXT NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id"));
CREATE TABLE IF NOT EXISTS "CustomersStream_9" ("id" BIGINT NOT NULL, "first_name" TEXT NOT NULL, "last_name" TEXT NOT NULL, "email" TEXT NOT NULL, "phone" TEXT NOT NULL, "address" TEXT NOT NULL, "date_of_birth" TEXT NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id","updated_at"));
CREATE TABLE IF NOT EXISTS "LoanTypes_10" ("id" BIGINT NOT NULL, "name" TEXT NOT NULL, "description" TEXT NOT NULL, "interest_rate" DOUBLE PRECISION NOT NULL, "max_amount" DOUBLE PRECISION NOT NULL, "min_amount" DOUBLE PRECISION NOT NULL, "max_duration" BIGINT NOT NULL, "min_duration" BIGINT NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id"));
CREATE TABLE IF NOT EXISTS "LoanTypesStream_11" ("id" BIGINT NOT NULL, "name" TEXT NOT NULL, "description" TEXT NOT NULL, "interest_rate" DOUBLE PRECISION NOT NULL, "max_amount" DOUBLE PRECISION NOT NULL, "min_amount" DOUBLE PRECISION NOT NULL, "max_duration" BIGINT NOT NULL, "min_duration" BIGINT NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id","updated_at"));

CREATE INDEX IF NOT EXISTS "ApplicationUpdates_4_hash_c1" ON "ApplicationUpdates_4" USING hash ("loan_application_id");
CREATE INDEX IF NOT EXISTS "Applications_5_hash_c1" ON "Applications_5" USING hash ("customer_id")
>>>postgres-views.sql
CREATE OR REPLACE VIEW "AddChatMessage"("_uuid", "role", "content", "name", "context", "event_time") AS SELECT *
FROM "AddChatMessage_1";
CREATE OR REPLACE VIEW "ApplicationAlert"("_uuid", "id", "customer_id", "loan_type_id", "max_amount", "min_amount", "amount") AS SELECT *
FROM "ApplicationAlert_2";
CREATE OR REPLACE VIEW "ApplicationStatus"("_uuid", "status", "message", "event_time", "id", "customer_id", "loan_type_id", "amount", "duration", "max_amount", "min_amount") AS SELECT *
FROM "ApplicationStatus_3";
CREATE OR REPLACE VIEW "ApplicationUpdates"("_uuid", "loan_application_id", "status", "message", "event_time") AS SELECT *
FROM "ApplicationUpdates_4";
CREATE OR REPLACE VIEW "Applications"("id", "customer_id", "loan_type_id", "amount", "duration", "application_date", "updated_at") AS SELECT *
FROM "Applications_5";
CREATE OR REPLACE VIEW "ApplicationsStream"("id", "customer_id", "loan_type_id", "amount", "duration", "application_date", "updated_at") AS SELECT *
FROM "ApplicationsStream_6";
CREATE OR REPLACE VIEW "CustomerChatMessage"("role", "content", "name", "customerid", "timestamp", "uuid") AS SELECT *
FROM (SELECT "role", "content", "name", "customerid", "timestamp", "uuid"
  FROM "CustomerChatMessage_7"
  ORDER BY "timestamp" DESC NULLS LAST) AS "t1";
CREATE OR REPLACE VIEW "Customers"("id", "first_name", "last_name", "email", "phone", "address", "date_of_birth", "updated_at") AS SELECT *
FROM "Customers_8";
CREATE OR REPLACE VIEW "CustomersStream"("id", "first_name", "last_name", "email", "phone", "address", "date_of_birth", "updated_at") AS SELECT *
FROM "CustomersStream_9";
CREATE OR REPLACE VIEW "LoanTypes"("id", "name", "description", "interest_rate", "max_amount", "min_amount", "max_duration", "min_duration", "updated_at") AS SELECT *
FROM "LoanTypes_10";
CREATE OR REPLACE VIEW "LoanTypesStream"("id", "name", "description", "interest_rate", "max_amount", "min_amount", "max_duration", "min_duration", "updated_at") AS SELECT *
FROM "LoanTypesStream_11"
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Subscription",
        "fieldName" : "ApplicationAlert",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"ApplicationAlert_2\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "ApplicationStatus",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"ApplicationStatus_3\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Applications",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "id"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"Applications_5\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Applications",
        "fieldName" : "updates",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"ApplicationUpdates_4\"\nWHERE $1 = \"loan_application_id\"\nORDER BY \"event_time\" NULLS FIRST",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "ApplicationUpdates",
        "fieldName" : "application",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"Applications_5\"\nWHERE $1 = \"id\"",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "loan_application_id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Applications",
        "fieldName" : "loanType",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"LoanTypes_10\"\nWHERE $1 = \"id\"",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "loan_type_id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Customers",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "id"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"Customers_8\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Customers",
        "fieldName" : "applications",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"Applications_5\"\nWHERE $1 = \"customer_id\"\nORDER BY \"application_date\" NULLS FIRST",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Customers",
        "fieldName" : "overview",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"loan_type_id\", SUM(\"amount\") AS \"total_amount\", COUNT(*) AS \"total_loans\"\nFROM \"Applications_5\"\nWHERE $1 = \"customer_id\"\nGROUP BY \"loan_type_id\"",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "LoanTypes",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "id"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"LoanTypes_10\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "ApplicationAlert",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"ApplicationAlert_2\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "ApplicationUpdates",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"ApplicationUpdates_4\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CustomerChatMessage",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "customerid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM (SELECT \"role\", \"content\", \"name\", \"customerid\", \"timestamp\", \"uuid\"\n  FROM \"CustomerChatMessage_7\"\n  ORDER BY \"timestamp\" DESC NULLS LAST) AS \"t\"",
              "parameters" : [ ]
            }
          }
        ]
      }
    ],
    "mutations" : [
      {
        "type" : "kafka",
        "fieldName" : "ApplicationUpdates",
        "topic" : "ApplicationUpdates",
        "computedColumns" : {
          "_uuid" : "UUID",
          "event_time" : "TIMESTAMP"
        },
        "sinkConfig" : { }
      },
      {
        "type" : "kafka",
        "fieldName" : "AddChatMessage",
        "topic" : "AddChatMessage",
        "computedColumns" : {
          "_uuid" : "UUID",
          "event_time" : "TIMESTAMP"
        },
        "sinkConfig" : { }
      }
    ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "type ApplicationAlert {\n  id: Int!\n  loan_type_id: Int!\n  customer_id: Int!\n  max_amount: Float!\n  min_amount: Float!\n  amount: Float!\n}\n\ntype ApplicationStatus {\n  status: String!\n  message: String!\n  id: Int!\n  customer_id: Int!\n  loan_type_id: Int!\n  amount: Float!\n  duration: Int!\n}\n\ntype ApplicationUpdates {\n  loan_application_id: Int!\n  status: String!\n  message: String!\n  event_time: String!\n  application: Applications!\n}\n\ntype Applications {\n  id: Int!\n  customer_id: Int!\n  loan_type_id: Int!\n  amount: Float!\n  duration: Int!\n  application_date: String!\n  updated_at: String!\n  updates: [ApplicationUpdates!]\n  loanType: LoanTypes!\n}\n\ntype Customers {\n  id: Int!\n  first_name: String!\n  last_name: String!\n  email: String!\n  phone: String!\n  address: String!\n  date_of_birth: String!\n  updated_at: String!\n  applications(limit: Int = 20, offset: Int = 0): [Applications!]\n  overview: [overview!]\n}\n\ntype LoanTypes {\n  id: Int!\n  name: String!\n  description: String!\n  interest_rate: Float!\n  max_amount: Float!\n  min_amount: Float!\n  max_duration: Int!\n  min_duration: Int!\n  updated_at: String!\n}\n\ntype Query {\n  ApplicationStatus: [ApplicationStatus!]\n  Applications(id: Int!): [Applications!]\n  Customers(id: Int!): [Customers!]\n  LoanTypes(id: Int): [LoanTypes!]\n  ApplicationAlert: [ApplicationAlert!]\n  ApplicationUpdates: [ApplicationUpdates!]\n  CustomerChatMessage(customerid: Int!, limit: Int = 10, offset: Int = 0): [CustomerChatMessage!]\n}\n\ntype CustomerChatMessage {\n  role: String!\n  content: String!\n  name: String\n  customerid: Int!\n  timestamp: String!\n  uuid: String!\n}\n\ntype overview {\n  loan_type_id: Int!\n  total_amount: Float!\n  total_loans: Int!\n}\n\ntype Subscription {\n  ApplicationAlert: ApplicationAlert!\n}\n\ntype Mutation {\n  ApplicationUpdates(event: ApplicationUpdateEvent!): ApplicationUpdateEventResult!\n  AddChatMessage(message: ChatMessageInput!): CreatedChatMessage\n}\n\ninput ApplicationUpdateEvent {\n  loan_application_id: Int!\n  status: String!\n  message: String!\n}\n\ntype ApplicationUpdateEventResult {\n  loan_application_id: Int!\n  message: String!\n}\n\n\ninput ChatMessageInput {\n  role: String!\n  content: String!\n  name: String\n  context: ChatMessageContextInput\n}\n\ninput ChatMessageContextInput {\n  customerid: Int\n}\n\ntype CreatedChatMessage {\n  event_time: String!\n}\n"
    }
  }
}
