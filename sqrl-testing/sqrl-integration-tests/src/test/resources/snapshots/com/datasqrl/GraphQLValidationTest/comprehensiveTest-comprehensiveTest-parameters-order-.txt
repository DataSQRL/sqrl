>>>pipeline_explain.txt
=== AnotherCustomer
ID:     default_catalog.default_database.AnotherCustomer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database._customer
Annotations:
 - stream-root: _customer__def
Primary Key: customerid, lastUpdated
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], lastUpdated=[$3])
  LogicalFilter(condition=[>($0, 100)])
    LogicalTableScan(table=[[default_catalog, default_database, _customer]])
SQL: CREATE VIEW AnotherCustomer AS  SELECT customerid, email, lastUpdated FROM _customer WHERE customerid > 100;

=== Customer
ID:     default_catalog.default_database.Customer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer__def
Annotations:
 - stream-root: Customer__def
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[COALESCE(TO_TIMESTAMP_LTZ($3, 0), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
      LogicalTableScan(table=[[default_catalog, default_database, Customer__def]])
SQL: CREATE VIEW `Customer`
AS
SELECT *
FROM `default_catalog`.`default_database`.`Customer__def`
=== CustomerById
ID:     default_catalog.default_database.CustomerById
Type:   query
Stage:  postgres
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer__def
 - parameters: minId
 - base-table: Customer
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[>($0, ?0)])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW CustomerById AS  SELECT * FROM Customer WHERE customerid > ?     ;

=== CustomerByMultipleTime
ID:     default_catalog.default_database.CustomerByMultipleTime
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - mostRecentDistinct: true
 - stream-root: Customer__def
Primary Key: customerid, email
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[=($5, 1)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0, $1 ORDER BY $4 DESC NULLS LAST, $3 NULLS FIRST)])
      LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `CustomerByMultipleTime`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid`, `email` ORDER BY `timestamp` DESC NULLS LAST, `lastUpdated` NULLS FIRST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`Customer`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== CustomerByTime2
ID:     default_catalog.default_database.CustomerByTime2
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - mostRecentDistinct: true
 - stream-root: Customer__def
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[=($5, 1)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `CustomerByTime2`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `timestamp` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`Customer`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== CustomerFilteredDistinct
ID:     default_catalog.default_database.CustomerFilteredDistinct
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer__def
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[=($5, 1)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], $f5=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST)])
      LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
        LogicalFilter(condition=[OR(AND(IS NULL($5), IS NULL($6)), <>($1, $5), <>($2, $6))])
          LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], $f5=[LAG($1, 1) OVER (PARTITION BY $0 ORDER BY $4 NULLS FIRST)], $f6=[LAG($2, 1) OVER (PARTITION BY $0 ORDER BY $4 NULLS FIRST)])
            LogicalFilter(condition=[>=($3, $5)])
              LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], $f5=[MAX($3) OVER (PARTITION BY $0 ORDER BY $4 NULLS FIRST)])
                LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `CustomerFilteredDistinct`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `lastUpdated` DESC NULLS LAST) AS `$f5`
  FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
    FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, LAG(`email`, 1) OVER (PARTITION BY `customerid` ORDER BY `timestamp`) AS `$f5`, LAG(`name`, 1) OVER (PARTITION BY `customerid` ORDER BY `timestamp`) AS `$f6`
      FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, MAX(`lastUpdated`) OVER (PARTITION BY `customerid` ORDER BY `timestamp` RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS `$f5`
        FROM `default_catalog`.`default_database`.`Customer`) AS `t`
      WHERE `lastUpdated` >= `$f5`) AS `t1`
    WHERE `$f5` IS NULL AND `$f6` IS NULL OR `email` <> `$f5` OR `name` <> `$f6`) AS `t3`) AS `t4`
WHERE `$f5` = 1
=== CustomerQuery
ID:     default_catalog.default_database.CustomerQuery
Type:   query
Stage:  postgres
Inputs: default_catalog.default_database.AnotherCustomer
Annotations:
 - stream-root: _customer__def
 - parameters: id
 - base-table: AnotherCustomer
Plan:
LogicalProject(customerid=[$0], email=[$1], lastUpdated=[$2])
  LogicalFilter(condition=[=($0, ?0)])
    LogicalTableScan(table=[[default_catalog, default_database, AnotherCustomer]])
SQL: CREATE VIEW CustomerQuery AS  SELECT * FROM AnotherCustomer WHERE customerid = ?  ;

=== CustomerSubscription
ID:     default_catalog.default_database.CustomerSubscription
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer__def
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW CustomerSubscription AS  SELECT * FROM Customer;

=== CustomerSubscriptionById
ID:     default_catalog.default_database.CustomerSubscriptionById
Type:   query
Stage:  kafka
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer__def
 - parameters: minId
 - base-table: Customer
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[=($0, ?0)])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW CustomerSubscriptionById AS  SELECT * FROM Customer WHERE customerid = ?     ;

=== CustomerTimeWindow
ID:     default_catalog.default_database.CustomerTimeWindow
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.SelectCustomers
Annotations:
 - features: STREAM_WINDOW_AGGREGATION (feature)
Primary Key: window_start, window_end
Timestamp  : -
Schema:
 - window_start: TIMESTAMP(3) NOT NULL
 - window_end: TIMESTAMP(3) NOT NULL
 - unique_email_count: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], unique_email_count=[COUNT(DISTINCT $2)])
  LogicalProject(window_start=[$5], window_end=[$6], email=[$1])
    LogicalTableFunctionScan(invocation=[TUMBLE(DESCRIPTOR($4), 60000:INTERVAL MINUTE)], rowType=[RecordType(BIGINT customerid, VARCHAR(2147483647) email, VARCHAR(2147483647) name, BIGINT lastUpdated, TIMESTAMP_LTZ(3) *ROWTIME* timestamp, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP_LTZ(3) *ROWTIME* window_time)])
      LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
        LogicalTableScan(table=[[default_catalog, default_database, SelectCustomers]])
SQL: CREATE VIEW CustomerTimeWindow AS  SELECT
                          window_start, window_end,
                          COUNT(DISTINCT email) AS unique_email_count
                      FROM TABLE(
                              TUMBLE(TABLE SelectCustomers, DESCRIPTOR(`timestamp`), INTERVAL '1' MINUTE)
                           )
                      GROUP BY
                          window_start, window_end;

=== CustomerTimeWindowTest
ID:     default_catalog.default_database.CustomerTimeWindowTest
Type:   stream
Stage:  postgres
Inputs: default_catalog.default_database.CustomerTimeWindow
Annotations:
 - sort: [1 DESC-nulls-last]
Primary Key: window_start, window_end
Timestamp  : -
Schema:
 - window_start: TIMESTAMP(3) NOT NULL
 - window_end: TIMESTAMP(3) NOT NULL
 - unique_email_count: BIGINT NOT NULL
Plan:
LogicalProject(window_start=[$0], window_end=[$1], unique_email_count=[$2])
  LogicalTableScan(table=[[default_catalog, default_database, CustomerTimeWindow]])
SQL: CREATE VIEW CustomerTimeWindowTest AS  SELECT * FROM CustomerTimeWindow ORDER BY window_end DESC;

=== ExplicitDistinct
ID:     default_catalog.default_database.ExplicitDistinct
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer__def
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalProject(customerid=[$0], timestamp=[$4], name=[$2])
  LogicalFilter(condition=[=($5, 1)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW ExplicitDistinct AS  SELECT customerid, `timestamp`, name FROM (SELECT *, (ROW_NUMBER() OVER (PARTITION BY customerid ORDER BY `timestamp` DESC)) AS _rownum FROM Customer) WHERE (_rownum = 1);

=== ExternalOrders
ID:     default_catalog.default_database.ExternalOrders
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.ExternalOrders__def
Annotations:
 - features: DENORMALIZE (feature)
 - stream-root: ExternalOrders__def
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - entries: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3])
  LogicalWatermarkAssigner(rowtime=[time], watermark=[-($2, 1:INTERVAL SECOND)])
    LogicalTableScan(table=[[default_catalog, default_database, ExternalOrders__def]])
SQL: CREATE VIEW `ExternalOrders`
AS
SELECT *
FROM `default_catalog`.`default_database`.`ExternalOrders__def`
=== InvalidDistinct
ID:     default_catalog.default_database.InvalidDistinct
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer__def
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - namee: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalProject(customerid=[$0], timestamp=[$4], namee=[$2])
  LogicalFilter(condition=[=($5, 1)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW InvalidDistinct AS  SELECT customerid, `timestamp`, name AS namee FROM (SELECT *, (ROW_NUMBER() OVER (PARTITION BY customerid ORDER BY `timestamp` DESC)) AS _rownum FROM Customer) WHERE (_rownum = 1);

=== MissedTemporalJoin
ID:     default_catalog.default_database.MissedTemporalJoin
Type:   state
Stage:  postgres
Inputs: default_catalog.default_database.ExplicitDistinct, default_catalog.default_database.ExternalOrders
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - entries: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
 - customerid0: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], customerid0=[$4], timestamp=[$5], name=[$6])
  LogicalJoin(condition=[=($1, $4)], joinType=[inner])
    LogicalTableScan(table=[[default_catalog, default_database, ExternalOrders]])
    LogicalTableScan(table=[[default_catalog, default_database, ExplicitDistinct]])
SQL: CREATE VIEW MissedTemporalJoin AS  SELECT * FROM ExternalOrders o JOIN ExplicitDistinct c ON o.customerid = c.customerid;

=== Orders
ID:     default_catalog.default_database.Orders
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Orders__def
Primary Key: orderid
Timestamp  : -
Schema:
 - orderid: INTEGER NOT NULL
 - amount: FLOAT
Plan:
LogicalProject(orderid=[$0], amount=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, Orders__def]])
SQL: CREATE VIEW `Orders`
AS
SELECT *
FROM `default_catalog`.`default_database`.`Orders__def`
=== SelectCustomers
ID:     default_catalog.default_database.SelectCustomers
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer__def
 - sort: [4 DESC-nulls-last]
Primary Key: customerid, name
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[>($0, 0)])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW SelectCustomers AS  SELECT * From Customer WHERE customerid > 0 ORDER BY `timestamp` DESC LIMIT 10;

=== TableFunctionCallsTblFct
ID:     default_catalog.default_database.TableFunctionCallsTblFct
Type:   query
Stage:  postgres
Inputs: default_catalog.default_database.CustomerById
Annotations:
 - features: TABLE_FUNCTION_SCAN (feature)
 - stream-root: Customer__def
 - parameters: arg1, arg2
 - base-table: Customer
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[>($0, ?0)])
    LogicalTableFunctionScan(invocation=[CustomerById(?1)], rowType=[RecordType(BIGINT customerid, VARCHAR(2147483647) email, VARCHAR(2147483647) name, BIGINT lastUpdated, TIMESTAMP_LTZ(3) *ROWTIME* timestamp)], elementType=[class [Ljava.lang.Object;])
SQL: CREATE VIEW TableFunctionCallsTblFct AS  SELECT * FROM Table(CustomerById(?    )) WHERE customerid > ?    ;

=== TemporalJoin
ID:     default_catalog.default_database.TemporalJoin
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.ExplicitDistinct, default_catalog.default_database.ExternalOrders
Annotations:
 - stream-root: ExternalOrders__def
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - entries: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
 - customerid0: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], customerid0=[$4], timestamp=[$5], name=[$6])
  LogicalCorrelate(correlation=[$cor1], joinType=[inner], requiredColumns=[{1, 2}])
    LogicalTableScan(table=[[default_catalog, default_database, ExternalOrders]])
    LogicalFilter(condition=[=($cor1.customerid, $0)])
      LogicalSnapshot(period=[$cor1.time])
        LogicalTableScan(table=[[default_catalog, default_database, ExplicitDistinct]])
SQL: CREATE VIEW TemporalJoin AS  SELECT * FROM ExternalOrders o JOIN ExplicitDistinct FOR SYSTEM_TIME AS OF `time` c ON o.customerid = c.customerid;

=== UnnestOrders
ID:     default_catalog.default_database.UnnestOrders
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.ExternalOrders
Annotations:
 - stream-root: ExternalOrders__def
Primary Key: -
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - productid: BIGINT NOT NULL
 - quantity: BIGINT NOT NULL
 - discount: DOUBLE
 - newId: BIGINT NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], productid=[$3], quantity=[$4], discount=[$5], newId=[+($0, $3)])
  LogicalProject(id=[$0], customerid=[$1], time=[$2], productid=[$4], quantity=[$5], discount=[$7])
    LogicalCorrelate(correlation=[$cor5], joinType=[inner], requiredColumns=[{3}])
      LogicalTableScan(table=[[default_catalog, default_database, ExternalOrders]])
      Uncollect
        LogicalProject(entries=[$cor5.entries])
          LogicalValues(tuples=[[{ 0 }]])
SQL: ALTER VIEW UnnestOrders AS SELECT *,  id + productid AS newId FROM 
(  SELECT o.id, o.customerid, o.`time`, e.productid, e.quantity, e.discount FROM ExternalOrders o CROSS JOIN UNNEST(entries) e );
=== _customer
ID:     default_catalog.default_database._customer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database._customer__def
Annotations:
 - stream-root: _customer__def
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[COALESCE(TO_TIMESTAMP_LTZ($3, 0), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
      LogicalTableScan(table=[[default_catalog, default_database, _customer__def]])
SQL: CREATE VIEW `_customer`
AS
SELECT *
FROM `default_catalog`.`default_database`.`_customer__def`
=== customersink
ID:     mysink.customersink
Type:   export
Stage:  flink
Inputs: default_catalog.default_database.TemporalJoin

=== TimeWindow
ID:     print.TimeWindow
Type:   export
Stage:  flink
Inputs: default_catalog.default_database.CustomerTimeWindow

>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Customer__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Customer__def` (
  `timestamp` AS COALESCE(TO_TIMESTAMP_LTZ(`lastUpdated`, 0), TIMESTAMP '1970-01-01 00:00:00.000'),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Customer__schema`;
CREATE VIEW `Customer`
AS
SELECT *
FROM `default_catalog`.`default_database`.`Customer__def`;
CREATE TEMPORARY TABLE `ExternalOrders__schema` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `ExternalOrders__def` (
  PRIMARY KEY (`id`, `time`) NOT ENFORCED,
  WATERMARK FOR `time` AS `time` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `ExternalOrders__schema`;
CREATE VIEW `ExternalOrders`
AS
SELECT *
FROM `default_catalog`.`default_database`.`ExternalOrders__def`;
CREATE TEMPORARY TABLE `_customer__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `_customer__def` (
  `timestamp` AS COALESCE(TO_TIMESTAMP_LTZ(`lastUpdated`, 0), TIMESTAMP '1970-01-01 00:00:00.000'),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `_customer__schema`;
CREATE VIEW `_customer`
AS
SELECT *
FROM `default_catalog`.`default_database`.`_customer__def`;
CREATE TEMPORARY TABLE `_orders__schema` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `_orders__def` (
  PRIMARY KEY (`id`, `time`) NOT ENFORCED,
  WATERMARK FOR `time` AS `time` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `_orders__schema`;
CREATE VIEW `_orders`
AS
SELECT *
FROM `default_catalog`.`default_database`.`_orders__def`;
CREATE TEMPORARY TABLE `_product__schema` (
  `productid` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `_product__def` (
  PRIMARY KEY (`productid`, `name`, `description`, `category`) NOT ENFORCED,
  WATERMARK FOR `_ingest_time` AS `_ingest_time` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `_product__schema`;
CREATE VIEW `_product`
AS
SELECT *
FROM `default_catalog`.`default_database`.`_product__def`;
CREATE VIEW `CustomerByTime2`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `timestamp` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`Customer`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `CustomerFilteredDistinct`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `lastUpdated` DESC NULLS LAST) AS `$f5`
  FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
    FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, LAG(`email`, 1) OVER (PARTITION BY `customerid` ORDER BY `timestamp`) AS `$f5`, LAG(`name`, 1) OVER (PARTITION BY `customerid` ORDER BY `timestamp`) AS `$f6`
      FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, MAX(`lastUpdated`) OVER (PARTITION BY `customerid` ORDER BY `timestamp` RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS `$f5`
        FROM `default_catalog`.`default_database`.`Customer`) AS `t`
      WHERE `lastUpdated` >= `$f5`) AS `t1`
    WHERE `$f5` IS NULL AND `$f6` IS NULL OR `email` <> `$f5` OR `name` <> `$f6`) AS `t3`) AS `t4`
WHERE `$f5` = 1;
CREATE VIEW `AnotherCustomer`
AS
SELECT `customerid`, `email`, `lastUpdated`
FROM `_customer`
WHERE `customerid` > 100;
CREATE VIEW `CustomerByMultipleTime`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid`, `email` ORDER BY `timestamp` DESC NULLS LAST, `lastUpdated` NULLS FIRST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`Customer`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `ExplicitDistinct`
AS
SELECT `customerid`, `timestamp`, `name`
FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `timestamp` DESC) AS `_rownum`
  FROM `Customer`)
WHERE `_rownum` = 1;
CREATE VIEW `InvalidDistinct`
AS
SELECT `customerid`, `timestamp`, `name` AS `namee`
FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `timestamp` DESC) AS `_rownum`
  FROM `Customer`)
WHERE `_rownum` = 1;
CREATE VIEW `MissedTemporalJoin`
AS
SELECT *
FROM `ExternalOrders` AS `o`
 INNER JOIN `ExplicitDistinct` AS `c` ON `o`.`customerid` = `c`.`customerid`;
CREATE VIEW `TemporalJoin`
AS
SELECT *
FROM `ExternalOrders` AS `o`
 INNER JOIN `ExplicitDistinct` FOR SYSTEM_TIME AS OF `time` AS `c` ON `o`.`customerid` = `c`.`customerid`;
CREATE VIEW `SelectCustomers`
AS
SELECT *
FROM `Customer`
WHERE `customerid` > 0;
CREATE VIEW `CustomerSubscription`
AS
SELECT *
FROM `Customer`;
CREATE VIEW `UnnestOrders`
AS
SELECT `o`.`id`, `o`.`customerid`, `o`.`time`, `e`.`productid`, `e`.`quantity`, `e`.`discount`
FROM `ExternalOrders` AS `o`
 CROSS JOIN UNNEST(`entries`) AS `e`;
ALTER VIEW `UnnestOrders`
AS
SELECT *, `id` + `productid` AS `newId`
FROM (SELECT `o`.`id`, `o`.`customerid`, `o`.`time`, `e`.`productid`, `e`.`quantity`, `e`.`discount`
  FROM `ExternalOrders` AS `o`
   CROSS JOIN UNNEST(`entries`) AS `e`);
CREATE TABLE `Orders__def` (
  `orderid` INTEGER,
  `amount` FLOAT,
  PRIMARY KEY (`orderid`) NOT ENFORCED
) WITH (
  'connector' = 'upsert-kafka',
  'value.format' = 'flexible-json',
  'key.format' = 'raw',
  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',
  'properties.group.id' = '${PROPERTIES_GROUP_ID}',
  'topic' = 'Orders'
);
CREATE VIEW `Orders`
AS
SELECT *
FROM `default_catalog`.`default_database`.`Orders__def`;
CREATE VIEW `CustomerTimeWindow`
AS
SELECT `window_start`, `window_end`, COUNT(DISTINCT `email`) AS `unique_email_count`
FROM TABLE(TUMBLE(TABLE `SelectCustomers`, DESCRIPTOR(`timestamp`), INTERVAL '1' MINUTE))
GROUP BY `window_start`, `window_end`;
CREATE VIEW `CustomerTimeWindowTest`
AS
SELECT *
FROM `CustomerTimeWindow`;
CREATE TEMPORARY TABLE `customersink_ex2__schema` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,
  `customerid0` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `customersink_ex2__def` (
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'print'
)
LIKE `customersink_ex2__schema`;
CREATE TABLE `AnotherCustomer_1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'AnotherCustomer_1'
);
CREATE TABLE `Customer_2` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'Customer_2'
);
CREATE TABLE `Customer_3` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'kafka',
  'format' = 'flexible-json',
  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',
  'properties.group.id' = '${PROPERTIES_GROUP_ID}',
  'scan.startup.mode' = 'group-offsets',
  'properties.auto.offset.reset' = 'earliest',
  'topic' = 'Customer'
);
CREATE TABLE `CustomerByMultipleTime_4` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `email`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'CustomerByMultipleTime_4'
);
CREATE TABLE `CustomerByTime2_5` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'CustomerByTime2_5'
);
CREATE TABLE `CustomerFilteredDistinct_6` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'CustomerFilteredDistinct_6'
);
CREATE TABLE `CustomerSubscription_7` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'kafka',
  'format' = 'flexible-json',
  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',
  'properties.group.id' = '${PROPERTIES_GROUP_ID}',
  'scan.startup.mode' = 'group-offsets',
  'properties.auto.offset.reset' = 'earliest',
  'topic' = 'CustomerSubscription'
);
CREATE TABLE `TimeWindow_8` (
  `window_start` TIMESTAMP(3) NOT NULL,
  `window_end` TIMESTAMP(3) NOT NULL,
  `unique_email_count` BIGINT NOT NULL,
  PRIMARY KEY (`window_start`, `window_end`) NOT ENFORCED
) WITH (
  'connector' = 'print',
  'print-identifier' = 'TimeWindow'
);
CREATE TABLE `CustomerTimeWindow_9` (
  `window_start` TIMESTAMP(3) NOT NULL,
  `window_end` TIMESTAMP(3) NOT NULL,
  `unique_email_count` BIGINT NOT NULL,
  PRIMARY KEY (`window_start`, `window_end`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'CustomerTimeWindow_9'
);
CREATE TABLE `ExplicitDistinct_10` (
  `customerid` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'ExplicitDistinct_10'
);
CREATE TABLE `ExternalOrders_11` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),
  PRIMARY KEY (`id`, `time`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'ExternalOrders_11'
);
CREATE TABLE `InvalidDistinct_12` (
  `customerid` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `namee` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'InvalidDistinct_12'
);
CREATE TABLE `Orders_13` (
  `orderid` INTEGER NOT NULL,
  `amount` FLOAT,
  PRIMARY KEY (`orderid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'Orders_13'
);
CREATE TABLE `SelectCustomers_14` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `name`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'SelectCustomers_14'
);
CREATE TABLE `TemporalJoin_15` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),
  `customerid0` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  PRIMARY KEY (`id`, `time`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'TemporalJoin_15'
);
CREATE TABLE `UnnestOrders_16` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `productid` BIGINT NOT NULL,
  `quantity` BIGINT NOT NULL,
  `discount` DOUBLE,
  `newId` BIGINT NOT NULL,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'UnnestOrders_16'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`AnotherCustomer_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`AnotherCustomer`)
;
INSERT INTO `default_catalog`.`default_database`.`Customer_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`Customer`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`Customer_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`Customer`)
  ;
  INSERT INTO `default_catalog`.`default_database`.`CustomerByMultipleTime_4`
   (SELECT *
    FROM `default_catalog`.`default_database`.`Customer`)
   ;
   INSERT INTO `default_catalog`.`default_database`.`CustomerByTime2_5`
    (SELECT *
     FROM `default_catalog`.`default_database`.`Customer`)
    ;
    INSERT INTO `default_catalog`.`default_database`.`CustomerFilteredDistinct_6`
     (SELECT *
      FROM `default_catalog`.`default_database`.`CustomerFilteredDistinct`)
     ;
     INSERT INTO `default_catalog`.`default_database`.`CustomerSubscription_7`
      (SELECT *
       FROM `default_catalog`.`default_database`.`CustomerSubscription`)
      ;
      INSERT INTO `default_catalog`.`default_database`.`TimeWindow_8`
       (SELECT *
        FROM `default_catalog`.`default_database`.`CustomerTimeWindow`)
       ;
       INSERT INTO `default_catalog`.`default_database`.`CustomerTimeWindow_9`
        (SELECT *
         FROM `default_catalog`.`default_database`.`CustomerTimeWindow`)
        ;
        INSERT INTO `default_catalog`.`default_database`.`ExplicitDistinct_10`
         (SELECT *
          FROM `default_catalog`.`default_database`.`ExplicitDistinct`)
         ;
         INSERT INTO `default_catalog`.`default_database`.`ExternalOrders_11`
          (SELECT `id`, `customerid`, `time`, TOJSON(`entries`) AS `entries`
           FROM `default_catalog`.`default_database`.`ExternalOrders`)
          ;
          INSERT INTO `default_catalog`.`default_database`.`InvalidDistinct_12`
           (SELECT *
            FROM `default_catalog`.`default_database`.`InvalidDistinct`)
           ;
           INSERT INTO `default_catalog`.`default_database`.`Orders_13`
            (SELECT *
             FROM `default_catalog`.`default_database`.`Orders`)
            ;
            INSERT INTO `default_catalog`.`default_database`.`SelectCustomers_14`
             (SELECT *
              FROM `default_catalog`.`default_database`.`SelectCustomers`)
             ;
             INSERT INTO `default_catalog`.`default_database`.`customersink_ex2__def`
              (SELECT *
               FROM `default_catalog`.`default_database`.`TemporalJoin`)
              ;
              INSERT INTO `default_catalog`.`default_database`.`TemporalJoin_15`
               (SELECT `id`, `customerid`, `time`, TOJSON(`entries`) AS `entries`, `customerid0`, CAST(`timestamp` AS TIMESTAMP(3) WITH LOCAL TIME ZONE) AS `timestamp`, `name`
                FROM `default_catalog`.`default_database`.`TemporalJoin`)
               ;
               INSERT INTO `default_catalog`.`default_database`.`UnnestOrders_16`
                (SELECT `id`, `customerid`, `time`, `productid`, `quantity`, `discount`, `newId`, HASHCOLUMNS(`id`, `customerid`, `time`, `productid`, `quantity`, `discount`, `newId`) AS `__pk_hash`
                 FROM `default_catalog`.`default_database`.`UnnestOrders`)
                ;
                END
>>>kafka.json
{
  "topics" : [
    {
      "topicName" : "Customer",
      "tableName" : "Customer_3",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    },
    {
      "topicName" : "CustomerSubscription",
      "tableName" : "CustomerSubscription_7",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    },
    {
      "topicName" : "Orders",
      "tableName" : "Orders__def",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    }
  ]
}
>>>postgres-schema.sql
CREATE TABLE IF NOT EXISTS "AnotherCustomer_1" ("customerid" BIGINT NOT NULL, "email" TEXT NOT NULL, "lastUpdated" BIGINT NOT NULL , PRIMARY KEY ("customerid","lastUpdated"));
CREATE TABLE IF NOT EXISTS "Customer_2" ("customerid" BIGINT NOT NULL, "email" TEXT NOT NULL, "name" TEXT NOT NULL, "lastUpdated" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("customerid","lastUpdated"));
CREATE TABLE IF NOT EXISTS "CustomerByMultipleTime_4" ("customerid" BIGINT NOT NULL, "email" TEXT NOT NULL, "name" TEXT NOT NULL, "lastUpdated" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("customerid","email"));
CREATE TABLE IF NOT EXISTS "CustomerByTime2_5" ("customerid" BIGINT NOT NULL, "email" TEXT NOT NULL, "name" TEXT NOT NULL, "lastUpdated" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS "CustomerFilteredDistinct_6" ("customerid" BIGINT NOT NULL, "email" TEXT NOT NULL, "name" TEXT NOT NULL, "lastUpdated" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS "CustomerTimeWindow_9" ("window_start" TIMESTAMP WITHOUT TIME ZONE NOT NULL, "window_end" TIMESTAMP WITHOUT TIME ZONE NOT NULL, "unique_email_count" BIGINT NOT NULL , PRIMARY KEY ("window_start","window_end"));
CREATE TABLE IF NOT EXISTS "ExplicitDistinct_10" ("customerid" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL, "name" TEXT NOT NULL , PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS "ExternalOrders_11" ("id" BIGINT NOT NULL, "customerid" BIGINT NOT NULL, "time" TIMESTAMP WITH TIME ZONE NOT NULL, "entries" JSONB  , PRIMARY KEY ("id","time"));
CREATE TABLE IF NOT EXISTS "InvalidDistinct_12" ("customerid" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL, "namee" TEXT NOT NULL , PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS "Orders_13" ("orderid" INTEGER NOT NULL, "amount" FLOAT  , PRIMARY KEY ("orderid"));
CREATE TABLE IF NOT EXISTS "SelectCustomers_14" ("customerid" BIGINT NOT NULL, "email" TEXT NOT NULL, "name" TEXT NOT NULL, "lastUpdated" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("customerid","name"));
CREATE TABLE IF NOT EXISTS "TemporalJoin_15" ("id" BIGINT NOT NULL, "customerid" BIGINT NOT NULL, "time" TIMESTAMP WITH TIME ZONE NOT NULL, "entries" JSONB , "customerid0" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL, "name" TEXT NOT NULL , PRIMARY KEY ("id","time"));
CREATE TABLE IF NOT EXISTS "UnnestOrders_16" ("id" BIGINT NOT NULL, "customerid" BIGINT NOT NULL, "time" TIMESTAMP WITH TIME ZONE NOT NULL, "productid" BIGINT NOT NULL, "quantity" BIGINT NOT NULL, "discount" DOUBLE PRECISION , "newId" BIGINT NOT NULL, "__pk_hash" TEXT  , PRIMARY KEY ("__pk_hash"));

CREATE INDEX IF NOT EXISTS "SelectCustomers_14_hash_c2" ON "SelectCustomers_14" USING hash ("name")
>>>postgres-views.sql
CREATE OR REPLACE VIEW "AnotherCustomer"("customerid", "email", "lastUpdated") AS SELECT *
FROM "AnotherCustomer_1";
CREATE OR REPLACE VIEW "Customer"("customerid", "email", "name", "lastUpdated", "timestamp") AS SELECT *
FROM "Customer_2";
CREATE OR REPLACE VIEW "CustomerByMultipleTime"("customerid", "email", "name", "lastUpdated", "timestamp") AS SELECT *
FROM "CustomerByMultipleTime_4";
CREATE OR REPLACE VIEW "CustomerByTime2"("customerid", "email", "name", "lastUpdated", "timestamp") AS SELECT *
FROM "CustomerByTime2_5";
CREATE OR REPLACE VIEW "CustomerFilteredDistinct"("customerid", "email", "name", "lastUpdated", "timestamp") AS SELECT *
FROM "CustomerFilteredDistinct_6";
CREATE OR REPLACE VIEW "CustomerTimeWindow"("window_start", "window_end", "unique_email_count") AS SELECT *
FROM "CustomerTimeWindow_9";
CREATE OR REPLACE VIEW "CustomerTimeWindowTest"("window_start", "window_end", "unique_email_count") AS SELECT *
FROM (SELECT "window_start", "window_end", "unique_email_count"
  FROM "CustomerTimeWindow_9"
  ORDER BY "window_end" DESC NULLS LAST) AS "t3";
CREATE OR REPLACE VIEW "ExplicitDistinct"("customerid", "timestamp", "name") AS SELECT *
FROM "ExplicitDistinct_10";
CREATE OR REPLACE VIEW "ExternalOrders"("id", "customerid", "time", "entries") AS SELECT *
FROM "ExternalOrders_11";
CREATE OR REPLACE VIEW "InvalidDistinct"("customerid", "timestamp", "namee") AS SELECT *
FROM "InvalidDistinct_12";
CREATE OR REPLACE VIEW "MissedTemporalJoin"("id", "customerid", "time", "entries", "customerid0", "timestamp", "name") AS SELECT *
FROM "ExternalOrders_11" AS "ExternalOrders_112"
 INNER JOIN "ExplicitDistinct_10" AS "ExplicitDistinct_102" ON "ExternalOrders_112"."customerid" = "ExplicitDistinct_102"."customerid";
CREATE OR REPLACE VIEW "Orders"("orderid", "amount") AS SELECT *
FROM "Orders_13";
CREATE OR REPLACE VIEW "SelectCustomers"("customerid", "email", "name", "lastUpdated", "timestamp") AS SELECT *
FROM (SELECT "customerid", "email", "name", "lastUpdated", "timestamp"
  FROM "SelectCustomers_14"
  ORDER BY "timestamp" DESC NULLS LAST
  FETCH NEXT 10 ROWS ONLY) AS "t1";
CREATE OR REPLACE VIEW "TemporalJoin"("id", "customerid", "time", "entries", "customerid0", "timestamp", "name") AS SELECT *
FROM "TemporalJoin_15";
CREATE OR REPLACE VIEW "UnnestOrders"("id", "customerid", "time", "productid", "quantity", "discount", "newId") AS SELECT "id", "customerid", "time", "productid", "quantity", "discount", "newId"
FROM "UnnestOrders_16"
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "TableFunctionCallsTblFct",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "arg2"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "arg1"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM (SELECT *\n  FROM \"Customer_2\"\n  WHERE \"customerid\" > $2) AS \"t0\"\nWHERE \"customerid\" > $1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "arg1"
                },
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "arg2"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Customer",
        "fieldName" : "related",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"Customer_2\"\nWHERE $1 = \"customerid\"\nORDER BY \"timestamp\" NULLS FIRST",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "customerid"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Customer",
        "fieldName" : "relatedByLength",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "length"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"Customer_2\"\nWHERE $2 = \"customerid\" AND CHAR_LENGTH(\"email\") >= $1\nORDER BY \"timestamp\" NULLS FIRST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "length"
                },
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "customerid"
                }
              ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype Customer {\n    customerid: GraphQLBigInteger!\n    email: String!\n    name: String!\n    lastUpdated: GraphQLBigInteger!\n    timestamp: DateTime!\n    related(limit: Int = 10, offset: Int = 0): [Customer!]\n    relatedByLength(length: Int!, limit: Int = 10, offset: Int = 0): [Customer!]\n}\n\ntype Query {\n    TableFunctionCallsTblFct(arg2: Int!, arg1: Int!, limit: Int = 10, offset: Int = 0): [Customer!]\n}"
    }
  }
}
