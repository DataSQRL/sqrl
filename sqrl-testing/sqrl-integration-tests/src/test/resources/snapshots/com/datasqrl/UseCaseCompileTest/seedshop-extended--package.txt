>>>pipeline_explain.txt
=== CustomerPromotion
ID:     default_catalog.default_database.CustomerPromotion
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customers, default_catalog.default_database.CustomersSpending
Annotations:
 - stream-root: Orders__def
Primary Key: -
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - first_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - last_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - spend: DOUBLE NOT NULL
 - saved: DOUBLE NOT NULL
Plan:
LogicalProject(customerid=[$0], first_name=[$5], last_name=[$6], email=[$7], spend=[$2], saved=[$3])
  LogicalFilter(condition=[>($2, 250)])
    LogicalCorrelate(correlation=[$cor23], joinType=[inner], requiredColumns=[{0, 1}])
      LogicalTableScan(table=[[default_catalog, default_database, CustomersSpending]])
      LogicalFilter(condition=[=($cor23.customerid, $0)])
        LogicalSnapshot(period=[$cor23.week])
          LogicalTableScan(table=[[default_catalog, default_database, Customers]])
SQL: CREATE VIEW CustomerPromotion AS  SELECT s.customerid, c.first_name, c.last_name, c.email, s.spend, s.saved
        FROM CustomersSpending s JOIN Customers FOR SYSTEM_TIME AS OF `week` c ON s.customerid = c.id
        WHERE s.spend > 250;

=== Customers
ID:     default_catalog.default_database.Customers
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.CustomersStream
Annotations:
 - mostRecentDistinct: true
 - stream-root: CustomersStream__def
Primary Key: id
Timestamp  : timestamp
Schema:
 - id: BIGINT NOT NULL
 - first_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - last_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - ip_address: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - country: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - changed_on: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], ip_address=[$4], country=[$5], changed_on=[$6], timestamp=[$7])
  LogicalFilter(condition=[=($8, 1)])
    LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], ip_address=[$4], country=[$5], changed_on=[$6], timestamp=[$7], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $7 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, CustomersStream]])
SQL: CREATE VIEW `Customers`
AS
SELECT `id`, `first_name`, `last_name`, `email`, `ip_address`, `country`, `changed_on`, `timestamp`
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `ip_address`, `country`, `changed_on`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `timestamp` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`CustomersStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== CustomersOrderStats
ID:     default_catalog.default_database.CustomersOrderStats
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.OrdersTotals
Primary Key: customerid
Timestamp  : first_order
Schema:
 - customerid: BIGINT NOT NULL
 - first_order: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - total_spend: DOUBLE NOT NULL
 - total_saved: DOUBLE NOT NULL
 - num_orders: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0}], first_order=[MIN($1)], total_spend=[SUM($2)], total_saved=[SUM($3)], num_orders=[COUNT()])
  LogicalProject(customerid=[$2], time=[$1], price=[$3], saving=[$4])
    LogicalTableScan(table=[[default_catalog, default_database, OrdersTotals]])
SQL: CREATE VIEW CustomersOrderStats AS  SELECT customerid, min(`time`) as first_order,
                              sum(price) as total_spend, sum(saving) as total_saved,
                              count(1) as num_orders
                       FROM OrdersTotals GROUP BY customerid;

=== CustomersPastPurchases
ID:     default_catalog.default_database.CustomersPastPurchases
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Orders
Primary Key: customerid, productid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - productid: BIGINT NOT NULL
 - num_orders: BIGINT NOT NULL
 - total_quantity: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], num_orders=[COUNT()], total_quantity=[SUM($2)])
  LogicalProject(customerid=[$1], productid=[$4], quantity=[$5])
    LogicalCorrelate(correlation=[$cor15], joinType=[inner], requiredColumns=[{3}])
      LogicalTableScan(table=[[default_catalog, default_database, Orders]])
      Uncollect
        LogicalProject(items=[$cor15.items])
          LogicalValues(tuples=[[{ 0 }]])
SQL: CREATE VIEW CustomersPastPurchases AS  SELECT o.customerid, i.productid, count(1) as num_orders,
         sum(i.quantity) as total_quantity
      FROM Orders o CROSS JOIN UNNEST(o.items) i
      GROUP BY o.customerid, i.productid;

=== CustomersSpending
ID:     default_catalog.default_database.CustomersSpending
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.OrdersTotals
Annotations:
 - features: STREAM_WINDOW_AGGREGATION (feature)
 - stream-root: Orders__def
 - sort: [1 DESC-nulls-last]
Primary Key: -
Timestamp  : week
Schema:
 - customerid: BIGINT NOT NULL
 - week: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - spend: DOUBLE NOT NULL
 - saved: DOUBLE NOT NULL
Plan:
LogicalProject(customerid=[$0], week=[$3], spend=[$4], saved=[$5])
  LogicalAggregate(group=[{0, 1, 2, 3}], spend=[SUM($4)], saved=[SUM($5)])
    LogicalProject(customerid=[$2], window_start=[$5], window_end=[$6], week=[$7], price=[$3], saving=[$4])
      LogicalTableFunctionScan(invocation=[TUMBLE(DESCRIPTOR($1), 604800000:INTERVAL DAY)], rowType=[RecordType(BIGINT id, TIMESTAMP_LTZ(3) *ROWTIME* time, BIGINT customerid, DOUBLE price, DOUBLE saving, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP_LTZ(3) *ROWTIME* window_time)])
        LogicalProject(id=[$0], time=[$1], customerid=[$2], price=[$3], saving=[$4])
          LogicalTableScan(table=[[default_catalog, default_database, OrdersTotals]])
SQL: CREATE VIEW CustomersSpending AS  SELECT customerid, window_time AS week,
         sum(price) AS spend, sum(saving) AS saved
      FROM TABLE(TUMBLE(TABLE OrdersTotals, DESCRIPTOR(`time`), INTERVAL '7' DAYS))
      GROUP BY customerid, window_start, window_end, window_time
      ORDER BY week DESC;

=== CustomersStream
ID:     default_catalog.default_database.CustomersStream
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.CustomersStream__def
Annotations:
 - stream-root: CustomersStream__def
Primary Key: id, changed_on
Timestamp  : timestamp
Schema:
 - id: BIGINT NOT NULL
 - first_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - last_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - ip_address: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - country: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - changed_on: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], ip_address=[$4], country=[$5], changed_on=[$6], timestamp=[$7])
  LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($7, 1:INTERVAL SECOND)])
    LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], ip_address=[$4], country=[$5], changed_on=[$6], timestamp=[EPOCHMILLITOTIMESTAMP($6)])
      LogicalTableScan(table=[[default_catalog, default_database, CustomersStream__def]])
SQL: CREATE VIEW `CustomersStream`
AS
SELECT *
FROM `default_catalog`.`default_database`.`CustomersStream__def`
=== NumOrders
ID:     default_catalog.default_database.NumOrders
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Orders
Primary Key: 
Timestamp  : -
Schema:
 - count: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{}], count=[COUNT()])
  LogicalProject($f0=[0])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
SQL: CREATE VIEW NumOrders AS  SELECT COUNT(*) AS `count` FROM Orders;

=== Orders
ID:     default_catalog.default_database.Orders
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Orders__def
Annotations:
 - features: DENORMALIZE (feature)
 - stream-root: Orders__def
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - items: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], items=[$3])
  LogicalWatermarkAssigner(rowtime=[time], watermark=[-($2, 1:INTERVAL SECOND)])
    LogicalTableScan(table=[[default_catalog, default_database, Orders__def]])
SQL: CREATE VIEW `Orders`
AS
SELECT *
FROM `default_catalog`.`default_database`.`Orders__def`
=== OrdersTotals
ID:     default_catalog.default_database.OrdersTotals
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database._OrderItems
Annotations:
 - features: STREAM_WINDOW_AGGREGATION (feature)
 - stream-root: Orders__def
Primary Key: -
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - customerid: BIGINT NOT NULL
 - price: DOUBLE NOT NULL
 - saving: DOUBLE NOT NULL
Plan:
LogicalProject(id=[$0], time=[$4], customerid=[$1], price=[$5], saving=[$6])
  LogicalAggregate(group=[{0, 1, 2, 3, 4}], price=[SUM($5)], saving=[SUM($6)])
    LogicalProject(id=[$0], customerid=[$2], window_start=[$7], window_end=[$8], time=[$9], $f5=[-(*($4, $5), coalesce($6, 0.0:DOUBLE))], $f6=[coalesce($6, 0.0:DOUBLE)])
      LogicalTableFunctionScan(invocation=[TUMBLE(DESCRIPTOR($1), 1:INTERVAL SECOND)], rowType=[RecordType(BIGINT id, TIMESTAMP_LTZ(3) *ROWTIME* time, BIGINT customerid, BIGINT productid, BIGINT quantity, DOUBLE unit_price, DOUBLE discount, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP_LTZ(3) *ROWTIME* window_time)])
        LogicalProject(id=[$0], time=[$1], customerid=[$2], productid=[$3], quantity=[$4], unit_price=[$5], discount=[$6])
          LogicalTableScan(table=[[default_catalog, default_database, _OrderItems]])
SQL: CREATE VIEW OrdersTotals AS  SELECT id, window_time AS `time`, customerid, sum(quantity * unit_price - coalesce(discount, 0.0)) as price,
                  sum(coalesce(discount, 0.0)) as saving
                FROM TABLE(TUMBLE(TABLE _OrderItems, DESCRIPTOR(`time`), INTERVAL '0.001' SECONDS))
                GROUP BY id, customerid, window_start, window_end, window_time;

=== ProductSearch
ID:     default_catalog.default_database.ProductSearch
Type:   query
Stage:  postgres
Inputs: default_catalog.default_database.Products
Annotations:
 - stream-root: ProductsStream__def
 - parameters: query
 - base-table: ProductSearch
Plan:
LogicalSort(sort0=[$8], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first])
  LogicalProject(id=[$0], name=[$1], sizing=[$2], weight_in_gram=[$3], type=[$4], category=[$5], usda_id=[$6], updated=[$7], score=[textSearch(?0, $1)])
    LogicalFilter(condition=[>(textSearch(CAST(?0):VARCHAR(2147483647) CHARACTER SET "UTF-16LE", $1), 0)])
      LogicalTableScan(table=[[default_catalog, default_database, Products]])
SQL: CREATE VIEW ProductSearch AS  SELECT p.*, textSearch(?     , name) as score
                                 FROM Products p
                                 WHERE textSearch(?     , name) > 0
                                 ORDER BY score DESC, id ASC;

=== ProductSearchWithId
ID:     default_catalog.default_database.ProductSearchWithId
Type:   query
Stage:  postgres
Inputs: default_catalog.default_database.Products
Annotations:
 - stream-root: ProductsStream__def
 - parameters: query, id
 - base-table: Products
Plan:
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first])
  LogicalProject(id=[$0], name=[$1], sizing=[$2], weight_in_gram=[$3], type=[$4], category=[$5], usda_id=[$6], updated=[$7])
    LogicalFilter(condition=[AND(>(textSearch(CAST(?0):VARCHAR(2147483647) CHARACTER SET "UTF-16LE", $1, $5), 0), >($0, ?1))])
      LogicalTableScan(table=[[default_catalog, default_database, Products]])
SQL: CREATE VIEW ProductSearchWithId AS  SELECT * FROM Products WHERE textSearch(?     , name, category) > 0
                                                                          AND id > ?   ORDER BY id ASC;

=== Products
ID:     default_catalog.default_database.Products
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.ProductsStream
Annotations:
 - mostRecentDistinct: true
 - stream-root: ProductsStream__def
Primary Key: id
Timestamp  : updated
Schema:
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - sizing: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - weight_in_gram: BIGINT NOT NULL
 - type: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - category: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - usda_id: BIGINT NOT NULL
 - updated: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(id=[$0], name=[$1], sizing=[$2], weight_in_gram=[$3], type=[$4], category=[$5], usda_id=[$6], updated=[$7])
  LogicalFilter(condition=[=($8, 1)])
    LogicalProject(id=[$0], name=[$1], sizing=[$2], weight_in_gram=[$3], type=[$4], category=[$5], usda_id=[$6], updated=[$7], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $7 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, ProductsStream]])
SQL: CREATE VIEW `Products`
AS
SELECT `id`, `name`, `sizing`, `weight_in_gram`, `type`, `category`, `usda_id`, `updated`
FROM (SELECT `id`, `name`, `sizing`, `weight_in_gram`, `type`, `category`, `usda_id`, `updated`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`ProductsStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== ProductsByCountry
ID:     default_catalog.default_database.ProductsByCountry
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customers, default_catalog.default_database.Products, default_catalog.default_database._OrderItems
Primary Key: productid, country
Timestamp  : -
Schema:
 - productid: BIGINT NOT NULL
 - country: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - quantity: BIGINT NOT NULL
 - spend: DOUBLE NOT NULL
 - weight: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], quantity=[SUM($2)], spend=[SUM($3)], weight=[SUM($4)])
  LogicalProject(productid=[$7], country=[$20], quantity=[$4], $f3=[*($4, $5)], $f4=[*($4, $10)])
    LogicalCorrelate(correlation=[$cor35], joinType=[inner], requiredColumns=[{1, 2}])
      LogicalCorrelate(correlation=[$cor34], joinType=[inner], requiredColumns=[{1, 3}])
        LogicalTableScan(table=[[default_catalog, default_database, _OrderItems]])
        LogicalFilter(condition=[=($cor34.productid, $0)])
          LogicalSnapshot(period=[$cor34.time])
            LogicalTableScan(table=[[default_catalog, default_database, Products]])
      LogicalFilter(condition=[=($cor35.customerid, $0)])
        LogicalSnapshot(period=[$cor35.time])
          LogicalTableScan(table=[[default_catalog, default_database, Customers]])
SQL: CREATE VIEW ProductsByCountry AS  SELECT p.id AS productid, c.country AS country, sum(o.quantity) as quantity,
         sum(o.quantity * o.unit_price) as spend, sum(o.quantity * p.weight_in_gram) as weight
      FROM _OrderItems o
          JOIN Products FOR SYSTEM_TIME AS OF o.`time` p ON o.productid = p.id
          JOIN Customers FOR SYSTEM_TIME AS OF o.`time`  c ON o.customerid =c.id
      GROUP BY p.id, c.country;

=== ProductsStream
ID:     default_catalog.default_database.ProductsStream
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.ProductsStream__def
Annotations:
 - stream-root: ProductsStream__def
Primary Key: id, updated
Timestamp  : updated
Schema:
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - sizing: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - weight_in_gram: BIGINT NOT NULL
 - type: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - category: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - usda_id: BIGINT NOT NULL
 - updated: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(id=[$0], name=[$1], sizing=[$2], weight_in_gram=[$3], type=[$4], category=[$5], usda_id=[$6], updated=[$7])
  LogicalWatermarkAssigner(rowtime=[updated], watermark=[-($7, 1:INTERVAL SECOND)])
    LogicalTableScan(table=[[default_catalog, default_database, ProductsStream__def]])
SQL: CREATE VIEW `ProductsStream`
AS
SELECT *
FROM `default_catalog`.`default_database`.`ProductsStream__def`
=== _OrderItems
ID:     default_catalog.default_database._OrderItems
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Orders
Annotations:
 - stream-root: Orders__def
Primary Key: -
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - customerid: BIGINT NOT NULL
 - productid: BIGINT NOT NULL
 - quantity: BIGINT NOT NULL
 - unit_price: DOUBLE NOT NULL
 - discount: DOUBLE
Plan:
LogicalProject(id=[$0], time=[$2], customerid=[$1], productid=[$4], quantity=[$5], unit_price=[$6], discount=[$7])
  LogicalCorrelate(correlation=[$cor1], joinType=[inner], requiredColumns=[{3}])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
    Uncollect
      LogicalProject(items=[$cor1.items])
        LogicalValues(tuples=[[{ 0 }]])
SQL: CREATE VIEW _OrderItems AS  SELECT o.id, o.`time`, o.customerid, i.* FROM Orders o CROSS JOIN UNNEST(o.items) i;

=== promotion
ID:     mySinkPackage.promotion
Type:   export
Stage:  flink
Inputs: default_catalog.default_database.CustomerPromotion

>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Orders__schema` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `items` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Orders__def` (
  PRIMARY KEY (`id`, `time`) NOT ENFORCED,
  WATERMARK FOR `time` AS `time` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = '${DATA_PATH}/orderitems.jsonl',
  'connector' = 'filesystem'
)
LIKE `Orders__schema`;
CREATE VIEW `Orders`
AS
SELECT *
FROM `default_catalog`.`default_database`.`Orders__def`;
CREATE TEMPORARY TABLE `ProductsStream__schema` (
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `sizing` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `weight_in_gram` BIGINT NOT NULL,
  `type` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `usda_id` BIGINT NOT NULL,
  `updated` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `ProductsStream__def` (
  PRIMARY KEY (`id`, `updated`) NOT ENFORCED,
  WATERMARK FOR `updated` AS `updated` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = '${DATA_PATH}/products.jsonl',
  'connector' = 'filesystem'
)
LIKE `ProductsStream__schema`;
CREATE VIEW `ProductsStream`
AS
SELECT *
FROM `default_catalog`.`default_database`.`ProductsStream__def`;
CREATE TEMPORARY TABLE `CustomersStream__schema` (
  `id` BIGINT NOT NULL,
  `first_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `last_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `ip_address` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `country` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `changed_on` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `CustomersStream__def` (
  `timestamp` AS EPOCHMILLITOTIMESTAMP(`changed_on`),
  PRIMARY KEY (`id`, `changed_on`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = '${DATA_PATH}/customers.jsonl',
  'connector' = 'filesystem'
)
LIKE `CustomersStream__schema`;
CREATE VIEW `CustomersStream`
AS
SELECT *
FROM `default_catalog`.`default_database`.`CustomersStream__def`;
CREATE VIEW `_OrderItems`
AS
SELECT `o`.`id`, `o`.`time`, `o`.`customerid`, `i`.*
FROM `Orders` AS `o`
 CROSS JOIN UNNEST(`o`.`items`) AS `i`;
CREATE VIEW `OrdersTotals`
AS
SELECT `id`, `window_time` AS `time`, `customerid`, SUM(`quantity` * `unit_price` - COALESCE(`discount`, 0.0)) AS `price`, SUM(COALESCE(`discount`, 0.0)) AS `saving`
FROM TABLE(TUMBLE(TABLE `_OrderItems`, DESCRIPTOR(`time`), INTERVAL '0.001' SECOND))
GROUP BY `id`, `customerid`, `window_start`, `window_end`, `window_time`;
CREATE VIEW `Customers`
AS
SELECT `id`, `first_name`, `last_name`, `email`, `ip_address`, `country`, `changed_on`, `timestamp`
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `ip_address`, `country`, `changed_on`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `timestamp` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`CustomersStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `CustomersSpending`
AS
SELECT `customerid`, `window_time` AS `week`, SUM(`price`) AS `spend`, SUM(`saving`) AS `saved`
FROM TABLE(TUMBLE(TABLE `OrdersTotals`, DESCRIPTOR(`time`), INTERVAL '7' DAY))
GROUP BY `customerid`, `window_start`, `window_end`, `window_time`;
CREATE VIEW `CustomersOrderStats`
AS
SELECT `customerid`, MIN(`time`) AS `first_order`, SUM(`price`) AS `total_spend`, SUM(`saving`) AS `total_saved`, COUNT(1) AS `num_orders`
FROM `OrdersTotals`
GROUP BY `customerid`;
CREATE VIEW `CustomersPastPurchases`
AS
SELECT `o`.`customerid`, `i`.`productid`, COUNT(1) AS `num_orders`, SUM(`i`.`quantity`) AS `total_quantity`
FROM `Orders` AS `o`
 CROSS JOIN UNNEST(`o`.`items`) AS `i`
GROUP BY `o`.`customerid`, `i`.`productid`;
CREATE VIEW `CustomerPurchaseTest`
AS
SELECT `customerid`, `productid`, COUNT(*) AS `num`
FROM `CustomersPastPurchases`
GROUP BY `customerid`, `productid`;
CREATE VIEW `CustomerPromotion`
AS
SELECT `s`.`customerid`, `c`.`first_name`, `c`.`last_name`, `c`.`email`, `s`.`spend`, `s`.`saved`
FROM `CustomersSpending` AS `s`
 INNER JOIN `Customers` FOR SYSTEM_TIME AS OF `week` AS `c` ON `s`.`customerid` = `c`.`id`
WHERE `s`.`spend` > 250;
CREATE TEMPORARY TABLE `promotion_ex1__schema` (
  `customerid` BIGINT NOT NULL,
  `first_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `last_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `spend` DOUBLE NOT NULL,
  `saved` DOUBLE NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `promotion_ex1__def` (
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'format' = 'flexible-json',
  'path' = '/tmp/sink/',
  'connector' = 'filesystem'
)
LIKE `promotion_ex1__schema`;
CREATE VIEW `CustomerPromotionTest`
AS
SELECT COUNT(*) AS `numPromotions`
FROM `CustomerPromotion`;
CREATE VIEW `NumOrders`
AS
SELECT COUNT(*) AS `count`
FROM `Orders`;
CREATE VIEW `Products`
AS
SELECT `id`, `name`, `sizing`, `weight_in_gram`, `type`, `category`, `usda_id`, `updated`
FROM (SELECT `id`, `name`, `sizing`, `weight_in_gram`, `type`, `category`, `usda_id`, `updated`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`ProductsStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `ProductsByCountry`
AS
SELECT `p`.`id` AS `productid`, `c`.`country` AS `country`, SUM(`o`.`quantity`) AS `quantity`, SUM(`o`.`quantity` * `o`.`unit_price`) AS `spend`, SUM(`o`.`quantity` * `p`.`weight_in_gram`) AS `weight`
FROM `_OrderItems` AS `o`
 INNER JOIN `Products` FOR SYSTEM_TIME AS OF `o`.`time` AS `p` ON `o`.`productid` = `p`.`id`
 INNER JOIN `Customers` FOR SYSTEM_TIME AS OF `o`.`time` AS `c` ON `o`.`customerid` = `c`.`id`
GROUP BY `p`.`id`, `c`.`country`;
CREATE TABLE `CustomerPromotion_1` (
  `customerid` BIGINT NOT NULL,
  `first_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `last_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `spend` DOUBLE NOT NULL,
  `saved` DOUBLE NOT NULL,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'CustomerPromotion_1'
);
CREATE TABLE `Customers_2` (
  `id` BIGINT NOT NULL,
  `first_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `last_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `ip_address` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `country` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `changed_on` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'Customers_2'
);
CREATE TABLE `CustomersOrderStats_3` (
  `customerid` BIGINT NOT NULL,
  `first_order` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `total_spend` DOUBLE NOT NULL,
  `total_saved` DOUBLE NOT NULL,
  `num_orders` BIGINT NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'CustomersOrderStats_3'
);
CREATE TABLE `CustomersPastPurchases_4` (
  `customerid` BIGINT NOT NULL,
  `productid` BIGINT NOT NULL,
  `num_orders` BIGINT NOT NULL,
  `total_quantity` BIGINT NOT NULL,
  PRIMARY KEY (`customerid`, `productid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'CustomersPastPurchases_4'
);
CREATE TABLE `CustomersSpending_5` (
  `customerid` BIGINT NOT NULL,
  `week` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `spend` DOUBLE NOT NULL,
  `saved` DOUBLE NOT NULL,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'CustomersSpending_5'
);
CREATE TABLE `CustomersStream_6` (
  `id` BIGINT NOT NULL,
  `first_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `last_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `ip_address` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `country` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `changed_on` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`, `changed_on`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'CustomersStream_6'
);
CREATE TABLE `NumOrders_7` (
  `count` BIGINT NOT NULL,
  `__pk_hash` INTEGER NOT NULL,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'NumOrders_7'
);
CREATE TABLE `Orders_8` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `items` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),
  PRIMARY KEY (`id`, `time`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'Orders_8'
);
CREATE TABLE `OrdersTotals_9` (
  `id` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `customerid` BIGINT NOT NULL,
  `price` DOUBLE NOT NULL,
  `saving` DOUBLE NOT NULL,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'OrdersTotals_9'
);
CREATE TABLE `Products_10` (
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `sizing` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `weight_in_gram` BIGINT NOT NULL,
  `type` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `usda_id` BIGINT NOT NULL,
  `updated` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'Products_10'
);
CREATE TABLE `ProductsByCountry_11` (
  `productid` BIGINT NOT NULL,
  `country` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `quantity` BIGINT NOT NULL,
  `spend` DOUBLE NOT NULL,
  `weight` BIGINT NOT NULL,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'ProductsByCountry_11'
);
CREATE TABLE `ProductsStream_12` (
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `sizing` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `weight_in_gram` BIGINT NOT NULL,
  `type` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `usda_id` BIGINT NOT NULL,
  `updated` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`, `updated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'ProductsStream_12'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`promotion_ex1__def`
(SELECT *
 FROM `default_catalog`.`default_database`.`CustomerPromotion`)
;
INSERT INTO `default_catalog`.`default_database`.`CustomerPromotion_1`
 (SELECT `customerid`, `first_name`, `last_name`, `email`, `spend`, `saved`, HASHCOLUMNS(`customerid`, `first_name`, `last_name`, `email`, `spend`, `saved`) AS `__pk_hash`
  FROM `default_catalog`.`default_database`.`CustomerPromotion`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`Customers_2`
  (SELECT *
   FROM `default_catalog`.`default_database`.`CustomersStream`)
  ;
  INSERT INTO `default_catalog`.`default_database`.`CustomersOrderStats_3`
   (SELECT *
    FROM `default_catalog`.`default_database`.`CustomersOrderStats`)
   ;
   INSERT INTO `default_catalog`.`default_database`.`CustomersPastPurchases_4`
    (SELECT *
     FROM `default_catalog`.`default_database`.`CustomersPastPurchases`)
    ;
    INSERT INTO `default_catalog`.`default_database`.`CustomersSpending_5`
     (SELECT `customerid`, `week`, `spend`, `saved`, HASHCOLUMNS(`customerid`, `week`, `spend`, `saved`) AS `__pk_hash`
      FROM `default_catalog`.`default_database`.`CustomersSpending`)
     ;
     INSERT INTO `default_catalog`.`default_database`.`CustomersStream_6`
      (SELECT *
       FROM `default_catalog`.`default_database`.`CustomersStream`)
      ;
      INSERT INTO `default_catalog`.`default_database`.`NumOrders_7`
       (SELECT `count`, 1 AS `__pk_hash`
        FROM `default_catalog`.`default_database`.`NumOrders`)
       ;
       INSERT INTO `default_catalog`.`default_database`.`Orders_8`
        (SELECT `id`, `customerid`, `time`, TOJSON(`items`) AS `items`
         FROM `default_catalog`.`default_database`.`Orders`)
        ;
        INSERT INTO `default_catalog`.`default_database`.`OrdersTotals_9`
         (SELECT `id`, `time`, `customerid`, `price`, `saving`, HASHCOLUMNS(`id`, `time`, `customerid`, `price`, `saving`) AS `__pk_hash`
          FROM `default_catalog`.`default_database`.`OrdersTotals`)
         ;
         INSERT INTO `default_catalog`.`default_database`.`Products_10`
          (SELECT *
           FROM `default_catalog`.`default_database`.`ProductsStream`)
          ;
          INSERT INTO `default_catalog`.`default_database`.`ProductsByCountry_11`
           (SELECT `productid`, `country`, `quantity`, `spend`, `weight`, HASHCOLUMNS(`productid`, `country`) AS `__pk_hash`
            FROM `default_catalog`.`default_database`.`ProductsByCountry`)
           ;
           INSERT INTO `default_catalog`.`default_database`.`ProductsStream_12`
            (SELECT *
             FROM `default_catalog`.`default_database`.`ProductsStream`)
            ;
            END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres-schema.sql

CREATE TABLE IF NOT EXISTS "CustomerPromotion_1" ("customerid" BIGINT NOT NULL, "first_name" TEXT NOT NULL, "last_name" TEXT NOT NULL, "email" TEXT NOT NULL, "spend" DOUBLE PRECISION NOT NULL, "saved" DOUBLE PRECISION NOT NULL, "__pk_hash" TEXT  , PRIMARY KEY ("__pk_hash"));
CREATE TABLE IF NOT EXISTS "Customers_2" ("id" BIGINT NOT NULL, "first_name" TEXT NOT NULL, "last_name" TEXT NOT NULL, "email" TEXT NOT NULL, "ip_address" TEXT , "country" TEXT , "changed_on" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id"));
CREATE TABLE IF NOT EXISTS "CustomersOrderStats_3" ("customerid" BIGINT NOT NULL, "first_order" TIMESTAMP WITH TIME ZONE NOT NULL, "total_spend" DOUBLE PRECISION NOT NULL, "total_saved" DOUBLE PRECISION NOT NULL, "num_orders" BIGINT NOT NULL , PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS "CustomersPastPurchases_4" ("customerid" BIGINT NOT NULL, "productid" BIGINT NOT NULL, "num_orders" BIGINT NOT NULL, "total_quantity" BIGINT NOT NULL , PRIMARY KEY ("customerid","productid"));
CREATE TABLE IF NOT EXISTS "CustomersSpending_5" ("customerid" BIGINT NOT NULL, "week" TIMESTAMP WITH TIME ZONE NOT NULL, "spend" DOUBLE PRECISION NOT NULL, "saved" DOUBLE PRECISION NOT NULL, "__pk_hash" TEXT  , PRIMARY KEY ("__pk_hash"));
CREATE TABLE IF NOT EXISTS "CustomersStream_6" ("id" BIGINT NOT NULL, "first_name" TEXT NOT NULL, "last_name" TEXT NOT NULL, "email" TEXT NOT NULL, "ip_address" TEXT , "country" TEXT , "changed_on" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id","changed_on"));
CREATE TABLE IF NOT EXISTS "NumOrders_7" ("count" BIGINT NOT NULL, "__pk_hash" INTEGER NOT NULL , PRIMARY KEY ("__pk_hash"));
CREATE TABLE IF NOT EXISTS "Orders_8" ("id" BIGINT NOT NULL, "customerid" BIGINT NOT NULL, "time" TIMESTAMP WITH TIME ZONE NOT NULL, "items" JSONB  , PRIMARY KEY ("id","time"));
CREATE TABLE IF NOT EXISTS "OrdersTotals_9" ("id" BIGINT NOT NULL, "time" TIMESTAMP WITH TIME ZONE NOT NULL, "customerid" BIGINT NOT NULL, "price" DOUBLE PRECISION NOT NULL, "saving" DOUBLE PRECISION NOT NULL, "__pk_hash" TEXT  , PRIMARY KEY ("__pk_hash"));
CREATE TABLE IF NOT EXISTS "Products_10" ("id" BIGINT NOT NULL, "name" TEXT NOT NULL, "sizing" TEXT NOT NULL, "weight_in_gram" BIGINT NOT NULL, "type" TEXT NOT NULL, "category" TEXT NOT NULL, "usda_id" BIGINT NOT NULL, "updated" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id"));
CREATE TABLE IF NOT EXISTS "ProductsByCountry_11" ("productid" BIGINT NOT NULL, "country" TEXT , "quantity" BIGINT NOT NULL, "spend" DOUBLE PRECISION NOT NULL, "weight" BIGINT NOT NULL, "__pk_hash" TEXT  , PRIMARY KEY ("__pk_hash"));
CREATE TABLE IF NOT EXISTS "ProductsStream_12" ("id" BIGINT NOT NULL, "name" TEXT NOT NULL, "sizing" TEXT NOT NULL, "weight_in_gram" BIGINT NOT NULL, "type" TEXT NOT NULL, "category" TEXT NOT NULL, "usda_id" BIGINT NOT NULL, "updated" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id","updated"))
CREATE INDEX IF NOT EXISTS OrdersTotals_9_hash_c0 ON OrdersTotals_9 USING hash ("id");;
CREATE INDEX IF NOT EXISTS Orders_8_hash_c1 ON Orders_8 USING hash ("customerid");;
CREATE INDEX IF NOT EXISTS Products_10_text_c1c5 ON Products_10 USING GIN (to_tsvector('english', coalesce("name", '') || ' ' || coalesce("category", '') ));
>>>postgres-views.sql
CREATE OR REPLACE VIEW "CustomerPromotion"("customerid", "first_name", "last_name", "email", "spend", "saved") AS SELECT "customerid", "first_name", "last_name", "email", "spend", "saved"
FROM "CustomerPromotion_1";
CREATE OR REPLACE VIEW "Customers"("id", "first_name", "last_name", "email", "ip_address", "country", "changed_on", "timestamp") AS SELECT *
FROM "Customers_2";
CREATE OR REPLACE VIEW "CustomersOrderStats"("customerid", "first_order", "total_spend", "total_saved", "num_orders") AS SELECT *
FROM "CustomersOrderStats_3";
CREATE OR REPLACE VIEW "CustomersPastPurchases"("customerid", "productid", "num_orders", "total_quantity") AS SELECT *
FROM "CustomersPastPurchases_4";
CREATE OR REPLACE VIEW "CustomersSpending"("customerid", "week", "spend", "saved") AS SELECT "customerid", "week", "spend", "saved"
FROM (SELECT "customerid", "week", "spend", "saved", "__pk_hash"
  FROM "CustomersSpending_5"
  ORDER BY "week" DESC NULLS LAST) AS "t1";
CREATE OR REPLACE VIEW "CustomersStream"("id", "first_name", "last_name", "email", "ip_address", "country", "changed_on", "timestamp") AS SELECT *
FROM "CustomersStream_6";
CREATE OR REPLACE VIEW "NumOrders"("count") AS SELECT "count"
FROM "NumOrders_7";
CREATE OR REPLACE VIEW "Orders"("id", "customerid", "time", "items") AS SELECT *
FROM "Orders_8";
CREATE OR REPLACE VIEW "OrdersTotals"("id", "time", "customerid", "price", "saving") AS SELECT "id", "time", "customerid", "price", "saving"
FROM "OrdersTotals_9";
CREATE OR REPLACE VIEW "Products"("id", "name", "sizing", "weight_in_gram", "type", "category", "usda_id", "updated") AS SELECT *
FROM "Products_10";
CREATE OR REPLACE VIEW "ProductsByCountry"("productid", "country", "quantity", "spend", "weight") AS SELECT "productid", "country", "quantity", "spend", "weight"
FROM "ProductsByCountry_11";
CREATE OR REPLACE VIEW "ProductsStream"("id", "name", "sizing", "weight_in_gram", "type", "category", "usda_id", "updated") AS SELECT *
FROM "ProductsStream_12"
>>>vertx.json
{ }
