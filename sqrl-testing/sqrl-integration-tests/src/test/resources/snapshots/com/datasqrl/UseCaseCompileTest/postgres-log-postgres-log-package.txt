>>>pipeline_explain.txt
=== AddEvent
ID:     addevent_2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - timestamp: TIMESTAMP(3) NOT NULL
 - userId: DECIMAL(10, 5) NOT NULL
 - eventType: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[addevent_1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

=== PgTable
ID:     pgtable_1
Type:   stream
Stage:  streams
Inputs: addevent_2
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - timestamp: TIMESTAMP(3) NOT NULL
 - userId: DECIMAL(10, 5) NOT NULL
 - eventType: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[addevent_2]])

=== PgTable.PgTable
ID:     pgtable_1_1
Type:   export
Stage:  streams
Inputs: pgtable_1

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY TABLE `addevent_1` (\n  `timestamp` TIMESTAMP(3) NOT NULL,\n  `userId` DECIMAL(10, 5) NOT NULL,\n  `eventType` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL METADATA FROM 'timestamp',\n  PRIMARY KEY (`_uuid`) NOT ENFORCED,\n  WATERMARK FOR `event_time` AS (`event_time` - INTERVAL '0.0' SECOND)\n) WITH (\n  'hostname' = 'database',\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'postgres-cdc',\n  'port' = '5432',\n  'slot.name' = 'flink_slot',\n  'database-name' = 'datasqrl',\n  'schema-name' = 'public',\n  'decoding.plugin.name' = 'pgoutput',\n  'table-name' = 'postgres-log-addevent',\n  'debezium.slot.drop_on_stop' = 'false',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `pgtable_1` (\n  `timestamp` TIMESTAMP(3) NOT NULL,\n  `userId` DECIMAL(10, 5) NOT NULL,\n  `eventType` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'pgtable_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `pgtable_1_1` (\n  `timestamp` TIMESTAMP(3) NOT NULL,\n  `userId` DECIMAL(10, 5) NOT NULL,\n  `eventType` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'pgtable_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT *\nFROM `addevent_1`;",
    "CREATE VIEW `table$2`\nAS\nSELECT *\nFROM `addevent_1`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `pgtable_1`\n(SELECT *\nFROM `table$1`)\n;\nINSERT INTO `pgtable_1_1`\n(SELECT *\nFROM `table$2`)\n;\nEND;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "jdbc",
    "postgres-cdc"
  ],
  "formats" : [ ]
}
>>>postgres-log.json
{
  "ddl" : [
    {
      "name" : "pgtable_1",
      "columns" : [
        "\"timestamp\" TIMESTAMP WITHOUT TIME ZONE NOT NULL",
        "\"userId\" NUMERIC NOT NULL",
        "\"eventType\" TEXT NOT NULL",
        "\"_uuid\" TEXT NOT NULL",
        "\"event_time\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [ ],
      "sql" : "CREATE TABLE IF NOT EXISTS pgtable_1 (\"timestamp\" TIMESTAMP WITHOUT TIME ZONE NOT NULL,\"userId\" NUMERIC NOT NULL,\"eventType\" TEXT NOT NULL,\"_uuid\" TEXT NOT NULL,\"event_time\" TIMESTAMP WITH TIME ZONE NOT NULL );"
    },
    {
      "tableName" : "pgtable_1",
      "primaryKey" : "_uuid",
      "sql" : "CREATE OR REPLACE FUNCTION notify_on_pgtable_1_insert()\nRETURNS TRIGGER AS $$\nBEGIN\n   PERFORM pg_notify('pgtable_1_notify', NEW._uuid::text);\n   RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER insert_notify_trigger\nAFTER INSERT ON pgtable_1\nFOR EACH ROW EXECUTE PROCEDURE notify_on_pgtable_1_insert();"
    },
    {
      "name" : "postgres-log-addevent",
      "columns" : [
        "\"timestamp\" TIMESTAMP WITHOUT TIME ZONE NOT NULL",
        "\"userId\" NUMERIC NOT NULL",
        "\"eventType\" TEXT NOT NULL",
        "\"_uuid\" TEXT NOT NULL"
      ],
      "primaryKeys" : [ ],
      "sql" : "CREATE TABLE IF NOT EXISTS postgres-log-addevent (\"timestamp\" TIMESTAMP WITHOUT TIME ZONE NOT NULL,\"userId\" NUMERIC NOT NULL,\"eventType\" TEXT NOT NULL,\"_uuid\" TEXT NOT NULL );"
    },
    {
      "tableName" : "postgres-log-addevent",
      "primaryKey" : "_uuid",
      "sql" : "CREATE OR REPLACE FUNCTION notify_on_postgres-log-addevent_insert()\nRETURNS TRIGGER AS $$\nBEGIN\n   PERFORM pg_notify('postgres-log-addevent_notify', NEW._uuid::text);\n   RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER insert_notify_trigger\nAFTER INSERT ON postgres-log-addevent\nFOR EACH ROW EXECUTE PROCEDURE notify_on_postgres-log-addevent_insert();"
    }
  ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "pgtable_1",
      "columns" : [
        "\"timestamp\" TIMESTAMP WITHOUT TIME ZONE NOT NULL",
        "\"userId\" NUMERIC NOT NULL",
        "\"eventType\" TEXT NOT NULL",
        "\"_uuid\" TEXT NOT NULL",
        "\"event_time\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"_uuid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS pgtable_1 (\"timestamp\" TIMESTAMP WITHOUT TIME ZONE NOT NULL,\"userId\" NUMERIC NOT NULL,\"eventType\" TEXT NOT NULL,\"_uuid\" TEXT NOT NULL,\"event_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"_uuid\"));"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "PgTable",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"pgtable_1\"\nORDER BY \"event_time\" DESC NULLS LAST, \"_uuid\"",
              "parameters" : [ ]
            }
          }
        ]
      }
    ],
    "mutations" : [
      {
        "fieldName" : "AddEvent",
        "sinkConfig" : { }
      }
    ],
    "subscriptions" : [
      {
        "fieldName" : "PgTable",
        "sinkConfig" : { },
        "filters" : {
          "eventType" : "eventType"
        }
      }
    ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\ntype PgTable {\n  timestamp: DateTime!\n  userId: Float!\n  eventType: String!\n}\n\ntype Query {\n  PgTable(limit: Int = 10, offset: Int = 0): [PgTable!]\n}\n\ntype Mutation {\n  AddEvent(event: EventInput!): AddedEvent\n}\n\ninput EventInput {\n  timestamp: DateTime!\n  userId : Float!\n  eventType: String!\n}\n\ntype AddedEvent {\n  timestamp: DateTime!\n  userId: Float!\n  eventType: String!\n}\n\ntype Subscription {\n  PgTable(eventType: String): PgTable\n}\n"
    }
  }
}
