>>>pipeline_explain.txt
=== Data
ID:     data_2
Type:   stream
Stage:  flink
Primary Key: ID
Timestamp  : TIMESTAMP
Schema:
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - ID: BIGINT NOT NULL
 - EPOCH_TIMESTAMP: BIGINT NOT NULL
 - SOME_VALUE: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - TIMESTAMP: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[data_1]])

=== Event
ID:     event_2
Type:   state
Stage:  flink
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - ID: BIGINT
 - EPOCH_TIMESTAMP: BIGINT
 - SOME_VALUE: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - event_time: TIMESTAMP(3) NOT NULL
Plan:
LogicalTableScan(table=[[event_1]])

=== MyEvent
ID:     myevent_1
Type:   state
Stage:  flink
Inputs: event_2
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - ID: BIGINT
 - EPOCH_TIMESTAMP: BIGINT
 - SOME_VALUE: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - event_time: TIMESTAMP(3) NOT NULL
Plan:
LogicalTableScan(table=[[event_2]])

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochmillitotimestamp` AS 'com.datasqrl.time.EpochMilliToTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY TABLE `event_1` (\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `ID` BIGINT,\n  `EPOCH_TIMESTAMP` BIGINT,\n  `SOME_VALUE` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,\n  `event_time` TIMESTAMP(3) NOT NULL,\n  PRIMARY KEY (`_uuid`) NOT ENFORCED,\n  WATERMARK FOR `event_time` AS `event_time` - INTERVAL '0.0' SECOND\n) WITH (\n  'hostname' = '${PGHOST}',\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'postgres-cdc',\n  'port' = '${PGPORT}',\n  'slot.name' = 'flink_slot',\n  'database-name' = 'datasqrl',\n  'schema-name' = 'public',\n  'decoding.plugin.name' = 'pgoutput',\n  'table-name' = 'Event',\n  'debezium.slot.drop_on_stop' = 'false',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `data_1` (\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `ID` BIGINT NOT NULL,\n  `EPOCH_TIMESTAMP` BIGINT NOT NULL,\n  `SOME_VALUE` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `TIMESTAMP` AS EPOCHMILLITOTIMESTAMP(`EPOCH_TIMESTAMP`),\n  `event_time` AS EPOCHMILLITOTIMESTAMP(`EPOCH_TIMESTAMP`),\n  PRIMARY KEY (`ID`) NOT ENFORCED,\n  WATERMARK FOR `TIMESTAMP` AS `TIMESTAMP` - INTERVAL '0.001' SECOND\n) WITH (\n  'fields.ID.end' = '9',\n  'number-of-rows' = '10',\n  'connector' = 'datagen',\n  'fields.EPOCH_TIMESTAMP.kind' = 'sequence',\n  'fields.EPOCH_TIMESTAMP.end' = '1719319565000',\n  'fields.EPOCH_TIMESTAMP.start' = '1719318565000',\n  'fields.SOME_VALUE.kind' = 'random',\n  'fields.ID.start' = '0',\n  'fields._uuid.kind' = 'random',\n  'fields.ID.kind' = 'sequence'\n);",
    "CREATE TEMPORARY TABLE `data_2` (\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `ID` BIGINT NOT NULL,\n  `EPOCH_TIMESTAMP` BIGINT NOT NULL,\n  `SOME_VALUE` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `TIMESTAMP` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`ID`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'data_2',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `event_2` (\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `ID` BIGINT,\n  `EPOCH_TIMESTAMP` BIGINT,\n  `SOME_VALUE` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,\n  `event_time` TIMESTAMP(3) NOT NULL,\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'event_2',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `myevent_1` (\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `ID` BIGINT,\n  `EPOCH_TIMESTAMP` BIGINT,\n  `SOME_VALUE` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,\n  `event_time` TIMESTAMP(3) NOT NULL,\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'myevent_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT *\nFROM `data_1`;",
    "CREATE VIEW `table$2`\nAS\nSELECT *\nFROM `event_1`;",
    "CREATE VIEW `table$3`\nAS\nSELECT *\nFROM `event_1`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `data_2`\n(SELECT *\n FROM `table$1`)\n;\nINSERT INTO `event_2`\n (SELECT *\n  FROM `table$2`)\n ;\n INSERT INTO `myevent_1`\n  (SELECT *\n   FROM `table$3`)\n  ;\n  END;"
  ],
  "connectors" : [
    "datagen",
    "jdbc-sqrl",
    "postgres-cdc"
  ],
  "formats" : [ ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "data_2",
      "columns" : [
        "\"_uuid\" TEXT NOT NULL",
        "\"ID\" BIGINT NOT NULL",
        "\"EPOCH_TIMESTAMP\" BIGINT NOT NULL",
        "\"SOME_VALUE\" TEXT NOT NULL",
        "\"TIMESTAMP\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"event_time\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"ID\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS data_2 (\"_uuid\" TEXT NOT NULL,\"ID\" BIGINT NOT NULL,\"EPOCH_TIMESTAMP\" BIGINT NOT NULL,\"SOME_VALUE\" TEXT NOT NULL,\"TIMESTAMP\" TIMESTAMP WITH TIME ZONE NOT NULL,\"event_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"ID\"));"
    },
    {
      "name" : "event_2",
      "columns" : [
        "\"_uuid\" TEXT NOT NULL",
        "\"ID\" BIGINT ",
        "\"EPOCH_TIMESTAMP\" BIGINT ",
        "\"SOME_VALUE\" TEXT ",
        "\"event_time\" TIMESTAMP WITHOUT TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"_uuid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS event_2 (\"_uuid\" TEXT NOT NULL,\"ID\" BIGINT ,\"EPOCH_TIMESTAMP\" BIGINT ,\"SOME_VALUE\" TEXT ,\"event_time\" TIMESTAMP WITHOUT TIME ZONE NOT NULL , PRIMARY KEY (\"_uuid\"));"
    },
    {
      "name" : "myevent_1",
      "columns" : [
        "\"_uuid\" TEXT NOT NULL",
        "\"ID\" BIGINT ",
        "\"EPOCH_TIMESTAMP\" BIGINT ",
        "\"SOME_VALUE\" TEXT ",
        "\"event_time\" TIMESTAMP WITHOUT TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"_uuid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS myevent_1 (\"_uuid\" TEXT NOT NULL,\"ID\" BIGINT ,\"EPOCH_TIMESTAMP\" BIGINT ,\"SOME_VALUE\" TEXT ,\"event_time\" TIMESTAMP WITHOUT TIME ZONE NOT NULL , PRIMARY KEY (\"_uuid\"));"
    }
  ],
  "views" : [
    {
      "name" : "MyEvent",
      "sql" : "CREATE OR REPLACE VIEW \"MyEvent\"(\"_uuid\", \"ID\", \"EPOCH_TIMESTAMP\", \"SOME_VALUE\", \"event_time\") AS SELECT *\nFROM \"myevent_1\"\nORDER BY \"_uuid\";"
    },
    {
      "name" : "Event",
      "sql" : "CREATE OR REPLACE VIEW \"Event\"(\"_uuid\", \"ID\", \"EPOCH_TIMESTAMP\", \"SOME_VALUE\", \"event_time\") AS SELECT *\nFROM \"event_2\"\nORDER BY \"_uuid\";"
    },
    {
      "name" : "Data",
      "sql" : "CREATE OR REPLACE VIEW \"Data\"(\"_uuid\", \"ID\", \"EPOCH_TIMESTAMP\", \"SOME_VALUE\", \"TIMESTAMP\", \"event_time\") AS SELECT *\nFROM \"data_2\"\nORDER BY \"TIMESTAMP\" DESC NULLS LAST, \"ID\";"
    }
  ]
}
>>>postgres_log.json
{
  "ddl" : [
    {
      "name" : "\"Event\"",
      "columns" : [
        "\"_uuid\" TEXT NOT NULL",
        "\"ID\" BIGINT ",
        "\"EPOCH_TIMESTAMP\" BIGINT ",
        "\"SOME_VALUE\" TEXT ",
        "\"event_time\" TIMESTAMP WITHOUT TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"_uuid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS \"Event\" (\"_uuid\" TEXT NOT NULL,\"ID\" BIGINT ,\"EPOCH_TIMESTAMP\" BIGINT ,\"SOME_VALUE\" TEXT ,\"event_time\" TIMESTAMP WITHOUT TIME ZONE NOT NULL , PRIMARY KEY (\"_uuid\"));"
    },
    {
      "sql" : "CREATE OR REPLACE FUNCTION notify_on_Event_insert()\nRETURNS TRIGGER AS $$\nBEGIN\n   PERFORM pg_notify('Event_notify', jsonb_build_object('_uuid', NEW.\"_uuid\")::text);\n   RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER insert_notify_trigger\nAFTER INSERT ON \"Event\"\nFOR EACH ROW EXECUTE PROCEDURE notify_on_Event_insert();"
    }
  ],
  "queries" : [
    {
      "listen" : {
        "tableName" : "Event",
        "sql" : "LISTEN Event_notify;"
      },
      "onNotify" : {
        "sql" : "SELECT *\nFROM \"Event\"\nWHERE \"_uuid\" = $1"
      },
      "parameters" : [
        "_uuid"
      ]
    }
  ],
  "inserts" : [
    {
      "tableName" : "Event",
      "sql" : "INSERT INTO \"Event\" (\"_uuid\", \"ID\", \"EPOCH_TIMESTAMP\", \"SOME_VALUE\", \"event_time\") VALUES\n($1, $2, $3, $4, $5)",
      "params" : [
        "_uuid",
        "ID",
        "EPOCH_TIMESTAMP",
        "SOME_VALUE",
        "event_time"
      ]
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Data",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "ID"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"data_2\"\nWHERE \"ID\" = $1\nORDER BY \"TIMESTAMP\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "ID"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"data_2\"\nORDER BY \"TIMESTAMP\" DESC NULLS LAST, \"ID\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Event",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"event_2\"\nORDER BY \"_uuid\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "MyEvent",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"myevent_1\"\nORDER BY \"_uuid\"",
              "parameters" : [ ]
            }
          }
        ]
      }
    ],
    "mutations" : [
      {
        "type" : "postgres_log",
        "fieldName" : "Event",
        "tableName" : "Event",
        "insertStatement" : "INSERT INTO \"Event\" (\"_uuid\", \"ID\", \"EPOCH_TIMESTAMP\", \"SOME_VALUE\", \"event_time\") VALUES\n($1, $2, $3, $4, $5)",
        "parameters" : [
          "_uuid",
          "ID",
          "EPOCH_TIMESTAMP",
          "SOME_VALUE",
          "event_time"
        ]
      }
    ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "type Data {\n  ID: Float!\n  EPOCH_TIMESTAMP: Float!\n  SOME_VALUE: String!\n  TIMESTAMP: DateTime!\n  event_time: DateTime!\n}\n\n\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\ntype Event {\n  ID: Float\n  EPOCH_TIMESTAMP: Float\n  SOME_VALUE: String\n  event_time: DateTime!\n}\n\ninput EventInput {\n  ID: Float\n  EPOCH_TIMESTAMP: Float\n  SOME_VALUE: String\n  event_time: DateTime!\n}\n\ntype EventResult {\n  ID: Float\n  EPOCH_TIMESTAMP: Float\n  SOME_VALUE: String\n  event_time: DateTime!\n}\n\ntype Mutation {\n  Event(event: EventInput!): EventResult!\n}\n\ntype MyEvent {\n  ID: Float\n  EPOCH_TIMESTAMP: Float\n  SOME_VALUE: String\n  event_time: DateTime!\n}\n\ntype Query {\n  Data(ID: Float, limit: Int = 10, offset: Int = 0): [Data!]\n  Event(limit: Int = 10, offset: Int = 0): [Event!]\n  MyEvent(limit: Int = 10, offset: Int = 0): [MyEvent!]\n}\n"
    }
  }
}
