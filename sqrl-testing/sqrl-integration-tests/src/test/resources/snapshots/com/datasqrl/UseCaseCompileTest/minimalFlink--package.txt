>>>pipeline_explain.txt
=== SensorAggregate
ID:     default_catalog.default_database.SensorAggregate
Type:   state
Stage:  postgres
Inputs: default_catalog.default_database.SensorReading
Annotations:
 - sort: [0 ASC-nulls-first]
Primary Key: sensorid
Timestamp  : -
Schema:
 - sensorid: INTEGER NOT NULL
 - maxTemp: FLOAT NOT NULL
Plan:
LogicalAggregate(group=[{0}], maxTemp=[MAX($1)])
  LogicalProject(sensorid=[$0], temperature=[$1])
    LogicalTableScan(table=[[default_catalog, default_database, SensorReading]])
SQL: CREATE VIEW SensorAggregate AS  SELECT sensorid, MAX(temperature) AS maxTemp
                   FROM SensorReading
                   GROUP BY sensorid ORDER BY sensorid ASC;

=== SensorReading
ID:     default_catalog.default_database.SensorReading
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.SensorReading__base
Primary Key: sensorid, event_time
Timestamp  : -
Schema:
 - sensorid: INTEGER NOT NULL
 - temperature: FLOAT NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[default_catalog, default_database, SensorReading]])
SQL: CREATE VIEW `SensorReading__view`
AS
SELECT `SensorReading`.`sensorid`, `SensorReading`.`temperature`, `SensorReading`.`event_time`
FROM `default_catalog`.`default_database`.`SensorReading` AS `SensorReading`
=== SensorReadingById
ID:     default_catalog.default_database.SensorReadingById
Type:   query
Stage:  postgres
Inputs: default_catalog.default_database.SensorReading
Annotations:
 - parameters: sensorid
 - base-table: SensorReading
Plan:
LogicalSort(sort0=[$2], dir0=[DESC-nulls-last])
  LogicalProject(sensorid=[$0], temperature=[$1], event_time=[$2])
    LogicalFilter(condition=[=($0, ?0)])
      LogicalTableScan(table=[[default_catalog, default_database, SensorReading]])
SQL: CREATE VIEW SensorReadingById AS  SELECT * FROM SensorReading
                    WHERE sensorid = ?         ORDER BY event_time DESC;

>>>flink-sql-no-functions.sql
CREATE TABLE `SensorReading` (
  `sensorid` INTEGER NOT NULL,
  `temperature` FLOAT NOT NULL,
  `event_time` TIMESTAMP_LTZ(3) NOT NULL,
  PRIMARY KEY (`sensorid`, `event_time`) NOT ENFORCED
) WITH (
  'connector' = 'upsert-kafka',
  'value.format' = 'flexible-json',
  'key.format' = 'json',
  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',
  'properties.group.id' = '${PROPERTIES_GROUP_ID}',
  'topic' = 'SensorReading'
);
CREATE VIEW `SensorAggregate`
AS
SELECT `sensorid`, MAX(`temperature`) AS `maxTemp`
FROM `SensorReading`
GROUP BY `sensorid`;
CREATE TABLE `SensorReading_1` (
  `sensorid` INTEGER NOT NULL,
  `temperature` FLOAT NOT NULL,
  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`sensorid`, `event_time`) NOT ENFORCED
) WITH (
  'table-name' = 'SensorReading',
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`SensorReading_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`SensorReading`)
;
END
>>>kafka.json
{
  "topics" : [
    {
      "topicName" : "SensorReading",
      "tableName" : "SensorReading",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    }
  ]
}
>>>postgres-schema.sql
CREATE TABLE IF NOT EXISTS "SensorReading" ("sensorid" INTEGER NOT NULL, "temperature" FLOAT NOT NULL, "event_time" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("sensorid","event_time"))
>>>postgres-views.sql

>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SensorAggregate",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "sensorid"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM (SELECT \"sensorid\", MAX(\"temperature\") AS \"maxTemp\"\n  FROM \"SensorReading\"\n  GROUP BY \"sensorid\"\n  ORDER BY \"sensorid\" NULLS FIRST) AS \"t1\"\nWHERE \"sensorid\" = $1 OR $1 IS NULL",
            "parameters" : [
              {
                "type" : "arg",
                "path" : "sensorid"
              }
            ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SensorReading",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"SensorReading\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SensorReadingById",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "sensorid"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"SensorReading\"\nWHERE \"sensorid\" = $1\nORDER BY \"event_time\" DESC NULLS LAST",
            "parameters" : [
              {
                "type" : "arg",
                "path" : "sensorid"
              }
            ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [
      {
        "type" : "kafka",
        "fieldName" : "SensorReading",
        "topic" : "SensorReading",
        "computedColumns" : { },
        "sinkConfig" : { }
      }
    ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "schema" : "\"A slightly refined version of RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype Mutation {\n  SensorReading(event: SensorReadingInput!): SensorReadingResultOutput!\n}\n\ntype Query {\n  SensorAggregate(sensorid: Int, limit: Int = 10, offset: Int = 0): [SensorAggregate!]\n  SensorReading(limit: Int = 10, offset: Int = 0): [SensorReading!]\n  SensorReadingById(sensorid: Int!, limit: Int = 10, offset: Int = 0): [SensorReading!]\n}\n\ntype SensorAggregate {\n  sensorid: Int!\n  maxTemp: Float!\n}\n\ntype SensorReading {\n  sensorid: Int!\n  temperature: Float!\n  event_time: DateTime!\n}\n\ninput SensorReadingInput {\n  sensorid: Int!\n  temperature: Float!\n  event_time: DateTime!\n}\n\ntype SensorReadingResultOutput {\n  sensorid: Int!\n  temperature: Float!\n  event_time: DateTime!\n}\n"
    }
  }
}
