>>>pipeline_explain.txt
=== OrderCount
ID:     default_catalog.default_database.OrderCount
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Orders
Primary Key: id
Timestamp  : -
Schema:
 - id: BIGINT NOT NULL
 - number: BIGINT NOT NULL
 - volume: INTEGER NOT NULL
Plan:
LogicalAggregate(group=[{0}], number=[COUNT()], volume=[SUM($1)])
  LogicalProject(id=[$0], quantity=[$6])
    LogicalCorrelate(correlation=[$cor1], joinType=[inner], requiredColumns=[{3}])
      LogicalTableScan(table=[[default_catalog, default_database, Orders]])
      Uncollect
        LogicalProject(items=[$cor1.items])
          LogicalValues(tuples=[[{ 0 }]])
SQL: CREATE VIEW OrderCount AS  SELECT id, COUNT(1) as number, SUM(i.quantity) as volume
              FROM Orders o CROSS JOIN UNNEST(o.items) i
              GROUP BY id;

=== Orders
ID:     default_catalog.default_database.Orders
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Orders__def
Annotations:
 - features: DENORMALIZE (feature)
Primary Key: -
Timestamp  : _source_time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - items: RecordType:peek_no_expand(INTEGER NOT NULL productid, INTEGER NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
 - _source_time: TIMESTAMP_LTZ(3) *ROWTIME*
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], items=[$3], _source_time=[$4])
  LogicalWatermarkAssigner(rowtime=[_source_time], watermark=[$4])
    LogicalProject(id=[$0], customerid=[$1], time=[$2], items=[$3], _source_time=[CAST($4):TIMESTAMP_LTZ(3) *ROWTIME*])
      LogicalTableScan(table=[[default_catalog, default_database, Orders__def, metadata=[timestamp]]])
SQL: CREATE VIEW `Orders`
AS
SELECT *
FROM `default_catalog`.`default_database`.`Orders__def`
>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Orders__schema` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `items` ROW(`productid` INTEGER NOT NULL, `quantity` INTEGER NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Orders__def` (
  `_source_time` TIMESTAMP_LTZ(3) METADATA FROM 'timestamp',
  WATERMARK FOR `_source_time` AS `_source_time`
) WITH (
  'format' = 'avro',
  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',
  'properties.group.id' = 'datasqrl-orders',
  'topic' = '${sqrl:topic}',
  'connector' = 'kafka',
  'avro.timestamp_mapping.legacy' = 'false'
)
LIKE `Orders__schema`;
CREATE VIEW `Orders`
AS
SELECT *
FROM `default_catalog`.`default_database`.`Orders__def`;
CREATE VIEW `OrderCount`
AS
SELECT `id`, COUNT(1) AS `number`, SUM(`i`.`quantity`) AS `volume`
FROM `Orders` AS `o`
 CROSS JOIN UNNEST(`o`.`items`) AS `i`
GROUP BY `id`;
CREATE TABLE `OrderCount_1` (
  `id` BIGINT NOT NULL,
  `number` BIGINT NOT NULL,
  `volume` INTEGER NOT NULL,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'OrderCount_1'
);
CREATE TABLE `Orders_2` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `items` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),
  `_source_time` TIMESTAMP(3) WITH LOCAL TIME ZONE,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'Orders_2'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`OrderCount_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`OrderCount`)
;
INSERT INTO `default_catalog`.`default_database`.`Orders_2`
 (SELECT `id`, `customerid`, `time`, TOJSON(`items`) AS `items`, `_source_time`, HASHCOLUMNS(`id`, `customerid`, `time`, `items`, `_source_time`) AS `__pk_hash`
  FROM `default_catalog`.`default_database`.`Orders`)
 ;
 END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres-schema.sql
CREATE TABLE IF NOT EXISTS "OrderCount_1" ("id" BIGINT NOT NULL, "number" BIGINT NOT NULL, "volume" INTEGER NOT NULL , PRIMARY KEY ("id"));
CREATE TABLE IF NOT EXISTS "Orders_2" ("id" BIGINT NOT NULL, "customerid" BIGINT NOT NULL, "time" TEXT NOT NULL, "items" JSONB , "_source_time" TIMESTAMP WITH TIME ZONE , "__pk_hash" TEXT  , PRIMARY KEY ("__pk_hash"))
>>>postgres-views.sql
CREATE OR REPLACE VIEW "OrderCount"("id", "number", "volume") AS SELECT *
FROM "OrderCount_1";
CREATE OR REPLACE VIEW "Orders"("id", "customerid", "time", "items", "_source_time") AS SELECT "id", "customerid", "time", "items", "_source_time"
FROM "Orders_2"
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderCount",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"OrderCount_1\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Orders",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"id\", \"customerid\", \"time\", \"items\", \"_source_time\"\nFROM \"Orders_2\"",
              "parameters" : [ ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "type OrderCount {\n  id: Float!\n  number: Float!\n  volume: Int!\n}\n\ntype Orders {\n  id: Float!\n  customerid: Float!\n  time: String!\n  items: [Orders_itemsOutput]!\n}\n\ntype Orders_itemsOutput {\n  productid: Int!\n  quantity: Int!\n  unit_price: Float!\n  discount: Float\n}\n\ntype Query {\n  OrderCount(limit: Int = 10, offset: Int = 0): [OrderCount!]\n  Orders(limit: Int = 10, offset: Int = 0): [Orders!]\n}\n"
    }
  }
}
