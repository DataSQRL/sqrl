>>>pipeline_explain.txt
=== HighTempAlert
ID:     default_catalog.default_database.HighTempAlert
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.SensorReading
Annotations:
 - sort: [0 DESC-nulls-last]
Primary Key: -
Timestamp  : event_time
Schema:
 - sensorid: INTEGER NOT NULL
 - temperature: DECIMAL(8, 2) NOT NULL
 - event_time: TIMESTAMP_LTZ(3) *ROWTIME*
Plan:
LogicalProject(sensorid=[$0], temperature=[$1], event_time=[$2])
  LogicalFilter(condition=[>($1, 50)])
    LogicalTableScan(table=[[default_catalog, default_database, SensorReading]])
SQL: CREATE VIEW HighTempAlert AS  SELECT * FROM SensorReading WHERE temperature > 50 ORDER BY sensorid DESC;

=== SensorMaxTemp
ID:     default_catalog.default_database.SensorMaxTemp
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.SensorReading
Annotations:
 - sort: [0 DESC-nulls-last]
Primary Key: sensorid
Timestamp  : -
Schema:
 - sensorid: INTEGER NOT NULL
 - maxTemp: DECIMAL(8, 2) NOT NULL
Plan:
LogicalAggregate(group=[{0}], maxTemp=[MAX($1)])
  LogicalProject(sensorid=[$0], temperature=[$1])
    LogicalTableScan(table=[[default_catalog, default_database, SensorReading]])
SQL: CREATE VIEW SensorMaxTemp AS  SELECT sensorid, max(temperature) as maxTemp
    FROM SensorReading
    GROUP BY sensorid
    ORDER BY sensorid DESC;

=== SensorReading
ID:     default_catalog.default_database.SensorReading
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.SensorReading__def
Primary Key: -
Timestamp  : event_time
Schema:
 - sensorid: INTEGER NOT NULL
 - temperature: DECIMAL(8, 2) NOT NULL
 - event_time: TIMESTAMP_LTZ(3) *ROWTIME*
Plan:
LogicalProject(sensorid=[$0], temperature=[$1], event_time=[$2])
  LogicalWatermarkAssigner(rowtime=[event_time], watermark=[-($2, 0:INTERVAL SECOND)])
    LogicalProject(sensorid=[$0], temperature=[$1], event_time=[CAST($2):TIMESTAMP_LTZ(3) *ROWTIME*])
      LogicalTableScan(table=[[default_catalog, default_database, SensorReading__def, metadata=[timestamp]]])
SQL: CREATE VIEW `SensorReading`
AS
SELECT *
FROM `default_catalog`.`default_database`.`SensorReading__def`
=== SensorReadingSubscription
ID:     default_catalog.default_database.SensorReadingSubscription
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.SensorReading
Primary Key: -
Timestamp  : event_time
Schema:
 - sensorid: INTEGER NOT NULL
 - temperature: DECIMAL(8, 2) NOT NULL
 - event_time: TIMESTAMP_LTZ(3) *ROWTIME*
Plan:
LogicalProject(sensorid=[$0], temperature=[$1], event_time=[$2])
  LogicalTableScan(table=[[default_catalog, default_database, SensorReading]])
SQL: CREATE VIEW SensorReadingSubscription AS  SELECT * FROM SensorReading;

=== SensorSubscriptionById
ID:     default_catalog.default_database.SensorSubscriptionById
Type:   query
Stage:  kafka
Inputs: default_catalog.default_database.SensorReadingSubscription
Annotations:
 - parameters: sensorid
 - base-table: SensorReading
Plan:
LogicalProject(sensorid=[$0], temperature=[$1], event_time=[$2])
  LogicalFilter(condition=[=($0, ?0)])
    LogicalTableScan(table=[[default_catalog, default_database, SensorReadingSubscription]])
SQL: CREATE VIEW SensorSubscriptionById AS  SELECT * FROM SensorReadingSubscription
                                                                    WHERE sensorid = ?        ;

>>>flink-sql-no-functions.sql
CREATE TABLE `SensorReading__def` (
  `sensorid` INTEGER NOT NULL,
  `temperature` DECIMAL(8, 2) NOT NULL,
  `event_time` TIMESTAMP_LTZ(3) METADATA FROM 'timestamp',
  WATERMARK FOR `event_time` AS `event_time` - INTERVAL '0.0' SECOND
) WITH (
  'connector' = 'kafka',
  'format' = 'flexible-json',
  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',
  'properties.group.id' = '${PROPERTIES_GROUP_ID}',
  'scan.startup.mode' = 'group-offsets',
  'properties.auto.offset.reset' = 'earliest',
  'topic' = 'SensorReading'
);
CREATE VIEW `SensorReading`
AS
SELECT *
FROM `default_catalog`.`default_database`.`SensorReading__def`;
CREATE VIEW `SensorMaxTemp`
AS
SELECT `sensorid`, MAX(`temperature`) AS `maxTemp`
FROM `SensorReading`
GROUP BY `sensorid`;
CREATE VIEW `HighTempAlert`
AS
SELECT *
FROM `SensorReading`
WHERE `temperature` > 50;
CREATE VIEW `HighTempAlertTest`
AS
SELECT `sensorid`, `temperature`
FROM `HighTempAlert`;
CREATE VIEW `SensorMaxTempTest`
AS
SELECT `sensorid`, `maxTemp`
FROM `SensorMaxTemp`;
CREATE VIEW `SensorReadingSubscription`
AS
SELECT *
FROM `SensorReading`;
CREATE TABLE `HighTempAlert_1` (
  `sensorid` INTEGER NOT NULL,
  `temperature` DECIMAL(8, 2) NOT NULL,
  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'HighTempAlert_1'
);
CREATE TABLE `SensorMaxTemp_2` (
  `sensorid` INTEGER NOT NULL,
  `maxTemp` DECIMAL(8, 2) NOT NULL,
  PRIMARY KEY (`sensorid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'SensorMaxTemp_2'
);
CREATE TABLE `SensorReading_3` (
  `sensorid` INTEGER NOT NULL,
  `temperature` DECIMAL(8, 2) NOT NULL,
  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'SensorReading_3'
);
CREATE TABLE `SensorReadingSubscription_4` (
  `sensorid` INTEGER NOT NULL,
  `temperature` DECIMAL(8, 2) NOT NULL,
  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE
) WITH (
  'connector' = 'kafka',
  'format' = 'flexible-json',
  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',
  'properties.group.id' = '${PROPERTIES_GROUP_ID}',
  'scan.startup.mode' = 'group-offsets',
  'properties.auto.offset.reset' = 'earliest',
  'topic' = 'SensorReadingSubscription'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`HighTempAlert_1`
(SELECT `sensorid`, `temperature`, `event_time`, HASHCOLUMNS(`sensorid`, `temperature`, `event_time`) AS `__pk_hash`
 FROM `default_catalog`.`default_database`.`HighTempAlert`)
;
INSERT INTO `default_catalog`.`default_database`.`SensorMaxTemp_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`SensorMaxTemp`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`SensorReading_3`
  (SELECT `sensorid`, `temperature`, `event_time`, HASHCOLUMNS(`sensorid`, `temperature`, `event_time`) AS `__pk_hash`
   FROM `default_catalog`.`default_database`.`SensorReading`)
  ;
  INSERT INTO `default_catalog`.`default_database`.`SensorReadingSubscription_4`
   (SELECT *
    FROM `default_catalog`.`default_database`.`SensorReadingSubscription`)
   ;
   END
>>>kafka.json
{
  "topics" : [
    {
      "topicName" : "SensorReadingSubscription",
      "tableName" : "SensorReadingSubscription_4",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    },
    {
      "topicName" : "SensorReading",
      "tableName" : "SensorReading__def",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    }
  ]
}
>>>postgres-schema.sql
CREATE TABLE IF NOT EXISTS "HighTempAlert_1" ("sensorid" INTEGER NOT NULL, "temperature" NUMERIC NOT NULL, "event_time" TIMESTAMP WITH TIME ZONE , "__pk_hash" TEXT  , PRIMARY KEY ("__pk_hash"));
CREATE TABLE IF NOT EXISTS "SensorMaxTemp_2" ("sensorid" INTEGER NOT NULL, "maxTemp" NUMERIC NOT NULL , PRIMARY KEY ("sensorid"));
CREATE TABLE IF NOT EXISTS "SensorReading_3" ("sensorid" INTEGER NOT NULL, "temperature" NUMERIC NOT NULL, "event_time" TIMESTAMP WITH TIME ZONE , "__pk_hash" TEXT  , PRIMARY KEY ("__pk_hash"))
>>>postgres-views.sql
CREATE OR REPLACE VIEW "HighTempAlert"("sensorid", "temperature", "event_time") AS SELECT *
FROM (SELECT "sensorid", "temperature", "event_time"
  FROM "HighTempAlert_1"
  ORDER BY "sensorid" DESC NULLS LAST) AS "t3";
CREATE OR REPLACE VIEW "SensorMaxTemp"("sensorid", "maxTemp") AS SELECT *
FROM (SELECT "sensorid", "maxTemp"
  FROM "SensorMaxTemp_2"
  ORDER BY "sensorid" DESC NULLS LAST) AS "t1";
CREATE OR REPLACE VIEW "SensorReading"("sensorid", "temperature", "event_time") AS SELECT "sensorid", "temperature", "event_time"
FROM "SensorReading_3"
>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "HighTempAlert",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM (SELECT \"sensorid\", \"temperature\", \"event_time\"\n  FROM \"HighTempAlert_1\"\n  ORDER BY \"sensorid\" DESC NULLS LAST) AS \"t0\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SensorMaxTemp",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM (SELECT \"sensorid\", \"maxTemp\"\n  FROM \"SensorMaxTemp_2\"\n  ORDER BY \"sensorid\" DESC NULLS LAST) AS \"t\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SensorReading",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT \"sensorid\", \"temperature\", \"event_time\"\nFROM \"SensorReading_3\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [
      {
        "type" : "kafka",
        "fieldName" : "SensorReading",
        "topic" : "SensorReading",
        "computedColumns" : {
          "event_time" : "TIMESTAMP"
        },
        "sinkConfig" : { }
      }
    ],
    "subscriptions" : [
      {
        "type" : "kafka",
        "fieldName" : "SensorReadingSubscription",
        "topic" : "SensorReadingSubscription",
        "sinkConfig" : { },
        "filters" : { }
      },
      {
        "type" : "kafka",
        "fieldName" : "SensorSubscriptionById",
        "topic" : "SensorReadingSubscription",
        "sinkConfig" : { },
        "filters" : {
          "sensorid" : "sensorid"
        }
      }
    ],
    "schema" : {
      "type" : "string",
      "schema" : "\"A slightly refined version of RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype Mutation {\n  SensorReading(event: SensorReadingInput!): SensorReadingResultOutput!\n}\n\ntype Query {\n  HighTempAlert(limit: Int = 10, offset: Int = 0): [SensorReading!]\n  SensorMaxTemp(limit: Int = 10, offset: Int = 0): [SensorMaxTemp!]\n  SensorReading(limit: Int = 10, offset: Int = 0): [SensorReading!]\n}\n\ntype SensorMaxTemp {\n  sensorid: Int!\n  maxTemp: Float!\n}\n\ntype SensorReading {\n  sensorid: Int!\n  temperature: Float!\n  event_time: DateTime\n}\n\ninput SensorReadingInput {\n  sensorid: Int!\n  temperature: Float!\n}\n\ntype SensorReadingResultOutput {\n  sensorid: Int!\n  temperature: Float!\n  event_time: DateTime\n}\n\ntype Subscription {\n  SensorReadingSubscription: SensorReading\n  SensorSubscriptionById(sensorid: Int!): SensorReading\n}\n"
    }
  }
}
