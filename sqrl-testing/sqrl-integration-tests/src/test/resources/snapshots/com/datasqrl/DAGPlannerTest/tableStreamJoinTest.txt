>>>pipeline_explain.txt
=== Customer
ID:     default_catalog.default_database.Customer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer__base
Annotations:
 - stream-root: Customer
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
  LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[COALESCE(TO_TIMESTAMP_LTZ($3, 0), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `Customer__view`
AS
SELECT `Customer`.`customerid`, `Customer`.`email`, `Customer`.`name`, `Customer`.`lastUpdated`, `Customer`.`timestamp`
FROM `default_catalog`.`default_database`.`Customer` AS `Customer`
=== OrderCustomer
ID:     default_catalog.default_database.OrderCustomer
Type:   stream
Stage:  postgres
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: -
Timestamp  : -
Schema:
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT NOT NULL
Plan:
LogicalProject(id=[$0], name=[$6], customerid=[$1])
  LogicalJoin(condition=[=($1, $4)], joinType=[inner])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW OrderCustomer AS  SELECT o.id, c.name, o.customerid FROM Orders o INNER JOIN Customer c on o.customerid = c.customerid;

=== OrderCustomerConstant
ID:     default_catalog.default_database.OrderCustomerConstant
Type:   stream
Stage:  postgres
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: -
Timestamp  : time
Schema:
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT NOT NULL
Plan:
LogicalProject(time=[$2], id=[$0], name=[$6], customerid=[$1])
  LogicalJoin(condition=[AND(=($1, $4), =($6, 'Robert'), >($0, 5))], joinType=[inner])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW OrderCustomerConstant AS  SELECT o.`time`,o.id, c.name, o.customerid FROM Orders o INNER JOIN Customer c ON o.customerid = c.customerid AND c.name = 'Robert' AND o.id > 5;

=== OrderCustomerLeft
ID:     default_catalog.default_database.OrderCustomerLeft
Type:   state
Stage:  postgres
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: -
Timestamp  : -
Schema:
 - cid: BIGINT NOT NULL
 - ctime: BIGINT NOT NULL
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - customerid: BIGINT NOT NULL
Plan:
LogicalProject(cid=[coalesce($4, 0:BIGINT)], ctime=[coalesce($7, 0:BIGINT)], id=[$0], name=[$6], customerid=[$1])
  LogicalJoin(condition=[=($1, $4)], joinType=[left])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW OrderCustomerLeft AS  SELECT coalesce(c.customerid, 0) as cid, coalesce(c.lastUpdated, 0) as ctime, o.id, c.name, o.customerid  FROM Orders o LEFT JOIN Customer c on o.customerid = c.customerid;

=== OrderCustomerLeftExcluded
ID:     default_catalog.default_database.OrderCustomerLeftExcluded
Type:   state
Stage:  postgres
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: id, time
Timestamp  : time
Schema:
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
Plan:
LogicalProject(time=[$2], id=[$0], customerid=[$1])
  LogicalFilter(condition=[AND(IS NULL($4), IS NULL($7))])
    LogicalJoin(condition=[=($1, $4)], joinType=[left])
      LogicalTableScan(table=[[default_catalog, default_database, Orders]])
      LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW OrderCustomerLeftExcluded AS  SELECT o.`time`, o.id, o.customerid  FROM Orders o LEFT JOIN Customer c on o.customerid = c.customerid WHERE c.customerid IS NULL AND c.lastUpdated IS NULL;

=== OrderCustomerRight
ID:     default_catalog.default_database.OrderCustomerRight
Type:   state
Stage:  postgres
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: -
Timestamp  : otime
Schema:
 - ouuid: BIGINT NOT NULL
 - otime: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - id: BIGINT
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT
Plan:
LogicalProject(ouuid=[coalesce($0, 0:BIGINT)], otime=[coalesce($2, PROCTIME())], id=[$0], name=[$6], customerid=[$1])
  LogicalJoin(condition=[=($1, $4)], joinType=[right])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW OrderCustomerRight AS  SELECT coalesce(o.id, 0) as ouuid, coalesce(o.`time`, proctime()) as otime,o.id, c.name, o.customerid  FROM Orders o RIGHT JOIN Customer c on o.customerid = c.customerid;

=== OrderCustomerRightExcluded
ID:     default_catalog.default_database.OrderCustomerRightExcluded
Type:   state
Stage:  postgres
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: lastUpdated
Timestamp  : -
Schema:
 - lastUpdated: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalProject(lastUpdated=[$7], customerid=[$4], name=[$6])
  LogicalFilter(condition=[AND(IS NULL($0), IS NULL($2))])
    LogicalJoin(condition=[=($1, $4)], joinType=[right])
      LogicalTableScan(table=[[default_catalog, default_database, Orders]])
      LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW OrderCustomerRightExcluded AS  SELECT c.lastUpdated, c.customerid, c.name  FROM Orders o RIGHT JOIN Customer c on o.customerid = c.customerid WHERE o.id IS NULL AND o.`time` IS NULL;

=== Orders
ID:     default_catalog.default_database.Orders
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Orders__base
Annotations:
 - features: DENORMALIZE (feature)
 - stream-root: Orders
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - entries: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[time], watermark=[-($2, 1:INTERVAL SECOND)])
  LogicalTableScan(table=[[default_catalog, default_database, Orders]])
SQL: CREATE VIEW `Orders__view`
AS
SELECT `Orders`.`id`, `Orders`.`customerid`, `Orders`.`time`, `Orders`.`entries`
FROM `default_catalog`.`default_database`.`Orders` AS `Orders`
>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Customer__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Customer` (
  `timestamp` AS COALESCE(`TO_TIMESTAMP_LTZ`(`lastUpdated`, 0), TIMESTAMP '1970-01-01 00:00:00.000'),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Customer__schema`;
CREATE TEMPORARY TABLE `Orders__schema` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Orders` (
  PRIMARY KEY (`id`, `time`) NOT ENFORCED,
  WATERMARK FOR `time` AS `time` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Orders__schema`;
CREATE VIEW `OrderCustomerLeft`
AS
SELECT COALESCE(`c`.`customerid`, 0) AS `cid`, COALESCE(`c`.`lastUpdated`, 0) AS `ctime`, `o`.`id`, `c`.`name`, `o`.`customerid`
FROM `Orders` AS `o`
 LEFT JOIN `Customer` AS `c` ON `o`.`customerid` = `c`.`customerid`;
CREATE VIEW `OrderCustomer`
AS
SELECT `o`.`id`, `c`.`name`, `o`.`customerid`
FROM `Orders` AS `o`
 INNER JOIN `Customer` AS `c` ON `o`.`customerid` = `c`.`customerid`;
CREATE VIEW `OrderCustomerLeftExcluded`
AS
SELECT `o`.`time`, `o`.`id`, `o`.`customerid`
FROM `Orders` AS `o`
 LEFT JOIN `Customer` AS `c` ON `o`.`customerid` = `c`.`customerid`
WHERE `c`.`customerid` IS NULL AND `c`.`lastUpdated` IS NULL;
CREATE VIEW `OrderCustomerRight`
AS
SELECT COALESCE(`o`.`id`, 0) AS `ouuid`, COALESCE(`o`.`time`, `proctime`()) AS `otime`, `o`.`id`, `c`.`name`, `o`.`customerid`
FROM `Orders` AS `o`
 RIGHT JOIN `Customer` AS `c` ON `o`.`customerid` = `c`.`customerid`;
CREATE VIEW `OrderCustomerRightExcluded`
AS
SELECT `c`.`lastUpdated`, `c`.`customerid`, `c`.`name`
FROM `Orders` AS `o`
 RIGHT JOIN `Customer` AS `c` ON `o`.`customerid` = `c`.`customerid`
WHERE `o`.`id` IS NULL AND `o`.`time` IS NULL;
CREATE VIEW `OrderCustomerConstant`
AS
SELECT `o`.`time`, `o`.`id`, `c`.`name`, `o`.`customerid`
FROM `Orders` AS `o`
 INNER JOIN `Customer` AS `c` ON `o`.`customerid` = `c`.`customerid` AND `c`.`name` = 'Robert' AND `o`.`id` > 5;
CREATE TABLE `Customer_1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'Customer_1'
);
CREATE TABLE `Orders_2` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` RAW('com.datasqrl.flinkrunner.types.json.FlinkJsonType', 'AENjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIudHlwZXMuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAw=='),
  PRIMARY KEY (`id`, `time`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'Orders_2'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`Customer_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`Customer`)
;
INSERT INTO `default_catalog`.`default_database`.`Orders_2`
 (SELECT `id`, `customerid`, `time`, `to_jsonb`(`entries`) AS `entries`
  FROM `default_catalog`.`default_database`.`Orders`)
 ;
 END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "Customer_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Customer_1\" (\"customerid\" BIGINT NOT NULL, \"email\" TEXT NOT NULL, \"name\" TEXT NOT NULL, \"lastUpdated\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"customerid\",\"lastUpdated\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Orders_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Orders_2\" (\"id\" BIGINT NOT NULL, \"customerid\" BIGINT NOT NULL, \"time\" TIMESTAMP WITH TIME ZONE NOT NULL, \"entries\" JSONB  , PRIMARY KEY (\"id\",\"time\"))",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "Customer",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Customer\"(\"customerid\", \"email\", \"name\", \"lastUpdated\", \"timestamp\") AS SELECT *\nFROM \"Customer_1\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderCustomer",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderCustomer\"(\"id\", \"name\", \"customerid\") AS SELECT \"Orders_22\".\"id\", \"Customer_12\".\"name\", \"Orders_22\".\"customerid\"\nFROM \"Orders_2\" AS \"Orders_22\"\n INNER JOIN \"Customer_1\" AS \"Customer_12\" ON \"Orders_22\".\"customerid\" = \"Customer_12\".\"customerid\"",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderCustomerConstant",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderCustomerConstant\"(\"time\", \"id\", \"name\", \"customerid\") AS SELECT \"Orders_22\".\"time\", \"Orders_22\".\"id\", \"Customer_12\".\"name\", \"Orders_22\".\"customerid\"\nFROM \"Orders_2\" AS \"Orders_22\"\n INNER JOIN \"Customer_1\" AS \"Customer_12\" ON \"Orders_22\".\"customerid\" = \"Customer_12\".\"customerid\" AND \"Customer_12\".\"name\" = 'Robert' AND \"Orders_22\".\"id\" > 5",
      "fields" : [
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderCustomerLeft",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderCustomerLeft\"(\"cid\", \"ctime\", \"id\", \"name\", \"customerid\") AS SELECT COALESCE(\"Customer_12\".\"customerid\", 0) AS \"cid\", COALESCE(\"Customer_12\".\"lastUpdated\", 0) AS \"ctime\", \"Orders_22\".\"id\", \"Customer_12\".\"name\", \"Orders_22\".\"customerid\"\nFROM \"Orders_2\" AS \"Orders_22\"\n LEFT JOIN \"Customer_1\" AS \"Customer_12\" ON \"Orders_22\".\"customerid\" = \"Customer_12\".\"customerid\"",
      "fields" : [
        {
          "name" : "cid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "ctime",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : true
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderCustomerLeftExcluded",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderCustomerLeftExcluded\"(\"time\", \"id\", \"customerid\") AS SELECT \"Orders_22\".\"time\", \"Orders_22\".\"id\", \"Orders_22\".\"customerid\"\nFROM \"Orders_2\" AS \"Orders_22\"\n LEFT JOIN \"Customer_1\" AS \"Customer_12\" ON \"Orders_22\".\"customerid\" = \"Customer_12\".\"customerid\"\nWHERE \"Customer_12\".\"customerid\" IS NULL AND \"Customer_12\".\"lastUpdated\" IS NULL",
      "fields" : [
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderCustomerRight",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderCustomerRight\"(\"ouuid\", \"otime\", \"id\", \"name\", \"customerid\") AS SELECT COALESCE(\"Orders_22\".\"id\", 0) AS \"ouuid\", COALESCE(\"Orders_22\".\"time\", PROCTIME()) AS \"otime\", \"Orders_22\".\"id\", \"Customer_12\".\"name\", \"Orders_22\".\"customerid\"\nFROM \"Orders_2\" AS \"Orders_22\"\n RIGHT JOIN \"Customer_1\" AS \"Customer_12\" ON \"Orders_22\".\"customerid\" = \"Customer_12\".\"customerid\"",
      "fields" : [
        {
          "name" : "ouuid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "otime",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : true
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "OrderCustomerRightExcluded",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderCustomerRightExcluded\"(\"lastUpdated\", \"customerid\", \"name\") AS SELECT \"Customer_12\".\"lastUpdated\", \"Customer_12\".\"customerid\", \"Customer_12\".\"name\"\nFROM \"Orders_2\" AS \"Orders_22\"\n RIGHT JOIN \"Customer_1\" AS \"Customer_12\" ON \"Orders_22\".\"customerid\" = \"Customer_12\".\"customerid\"\nWHERE \"Orders_22\".\"id\" IS NULL AND \"Orders_22\".\"time\" IS NULL",
      "fields" : [
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Orders",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Orders\"(\"id\", \"customerid\", \"time\", \"entries\") AS SELECT *\nFROM \"Orders_2\"",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "Customer_1_btree_c0c2",
      "type" : "INDEX",
      "sql" : "CREATE INDEX IF NOT EXISTS \"Customer_1_btree_c0c2\" ON \"Customer_1\" USING btree (\"customerid\",\"name\")"
    }
  ]
}
>>>vertx-config.json
{
  "servletConfig": {
    "graphiQLEndpoint": "/graphiql*",
    "graphQLEndpoint": "/graphql",
    "usePgPool": true,
    "useApolloWs": false,
    "graphQLWsEndpoint": "/graphql-ws"
  },
  "graphQLHandlerOptions": {
    "requestBatchingEnabled": false,
    "requestMultipartEnabled": false
  },
  "graphiQLHandlerOptions": {
    "enabled": true
  },
  "httpServerOptions": {
    "sendBufferSize": -1,
    "receiveBufferSize": -1,
    "trafficClass": -1,
    "reuseAddress": true,
    "logActivity": false,
    "activityLogDataFormat": "HEX_DUMP",
    "reusePort": false,
    "tcpNoDelay": true,
    "tcpKeepAlive": false,
    "soLinger": -1,
    "idleTimeout": 0,
    "readIdleTimeout": 0,
    "writeIdleTimeout": 0,
    "idleTimeoutUnit": "SECONDS",
    "ssl": false,
    "sslHandshakeTimeout": 10,
    "sslHandshakeTimeoutUnit": "SECONDS",
    "enabledCipherSuites": [],
    "crlPaths": [],
    "crlValues": [],
    "useAlpn": false,
    "enabledSecureTransportProtocols": [
      "TLSv1",
      "TLSv1.1",
      "TLSv1.2"
    ],
    "tcpFastOpen": false,
    "tcpCork": false,
    "tcpQuickAck": false,
    "tcpUserTimeout": 0,
    "port": 8888,
    "host": "0.0.0.0",
    "acceptBacklog": -1,
    "clientAuth": "NONE",
    "sni": false,
    "useProxyProtocol": false,
    "proxyProtocolTimeout": 10,
    "proxyProtocolTimeoutUnit": "SECONDS",
    "compressionSupported": false,
    "compressionLevel": 6,
    "maxWebSocketFrameSize": 65536,
    "maxWebSocketMessageSize": 262144,
    "webSocketSubProtocols": [
      "graphql-transport-ws",
      "graphql-ws"
    ],
    "handle100ContinueAutomatically": false,
    "maxChunkSize": 8192,
    "maxInitialLineLength": 4096,
    "maxHeaderSize": 8192,
    "maxFormAttributeSize": 8192,
    "initialSettings": {
      "headerTableSize": 4096,
      "pushEnabled": true,
      "maxConcurrentStreams": 100,
      "initialWindowSize": 65535,
      "maxFrameSize": 16384,
      "maxHeaderListSize": 8192
    },
    "alpnVersions": [
      "HTTP_2",
      "HTTP_1_1"
    ],
    "http2ConnectionWindowSize": -1,
    "decompressionSupported": false,
    "acceptUnmaskedFrames": false,
    "decoderInitialBufferSize": 128,
    "perFrameWebSocketCompressionSupported": true,
    "perMessageWebSocketCompressionSupported": true,
    "webSocketCompressionLevel": 6,
    "webSocketAllowServerNoContext": false,
    "webSocketPreferredClientNoContext": false,
    "webSocketClosingTimeout": 10,
    "tracingPolicy": "ALWAYS"
  },
  "pgConnectOptions": {
    "sendBufferSize": -1,
    "receiveBufferSize": -1,
    "trafficClass": -1,
    "reuseAddress": true,
    "logActivity": false,
    "activityLogDataFormat": "HEX_DUMP",
    "reusePort": false,
    "tcpNoDelay": true,
    "tcpKeepAlive": false,
    "soLinger": -1,
    "idleTimeout": 0,
    "readIdleTimeout": 0,
    "writeIdleTimeout": 0,
    "idleTimeoutUnit": "SECONDS",
    "ssl": false,
    "sslHandshakeTimeout": 10,
    "sslHandshakeTimeoutUnit": "SECONDS",
    "enabledCipherSuites": [],
    "crlPaths": [],
    "crlValues": [],
    "useAlpn": false,
    "enabledSecureTransportProtocols": [
      "TLSv1",
      "TLSv1.1",
      "TLSv1.2"
    ],
    "tcpFastOpen": false,
    "tcpCork": false,
    "tcpQuickAck": false,
    "tcpUserTimeout": 0,
    "connectTimeout": 60000,
    "trustAll": false,
    "metricsName": "",
    "reconnectAttempts": 0,
    "reconnectInterval": 1000,
    "hostnameVerificationAlgorithm": "",
    "host": "${PGHOST}",
    "port": 5432,
    "user": "${PGUSER}",
    "password": "${PGPASSWORD}",
    "database": "${PGDATABASE}",
    "cachePreparedStatements": false,
    "preparedStatementCacheMaxSize": 256,
    "preparedStatementCacheSqlFilter": {},
    "properties": {
      "DateStyle": "ISO",
      "client_encoding": "utf8",
      "application_name": "vertx-pg-client",
      "extra_float_digits": "2"
    },
    "pipeliningLimit": 256,
    "sslMode": "DISABLE",
    "socketAddress": {
      "domainSocket": false,
      "inetSocket": true
    },
    "usingDomainSocket": false
  },
  "poolOptions": {
    "maxSize": 4,
    "maxWaitQueueSize": -1,
    "idleTimeout": 0,
    "idleTimeoutUnit": "SECONDS",
    "poolCleanerPeriod": 1000,
    "connectionTimeout": 30,
    "connectionTimeoutUnit": "SECONDS",
    "shared": false,
    "name": "__vertx.DEFAULT",
    "eventLoopSize": 0
  },
  "corsHandlerOptions": {
    "allowedOrigin": "*",
    "allowCredentials": false,
    "maxAgeSeconds": -1,
    "allowPrivateNetwork": false,
    "allowedMethods": [
      "GET",
      "POST"
    ],
    "allowedHeaders": [],
    "exposedHeaders": []
  },
  "apolloWSOptions": {
    "keepAlive": 30000
  }
}

>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Customer",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Customer_1\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderCustomer",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT \"Orders_20\".\"id\", \"Customer_10\".\"name\", \"Orders_20\".\"customerid\"\nFROM \"Orders_2\" AS \"Orders_20\"\n INNER JOIN \"Customer_1\" AS \"Customer_10\" ON \"Orders_20\".\"customerid\" = \"Customer_10\".\"customerid\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderCustomerConstant",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT \"Orders_20\".\"time\", \"Orders_20\".\"id\", \"Customer_10\".\"name\", \"Orders_20\".\"customerid\"\nFROM \"Orders_2\" AS \"Orders_20\"\n INNER JOIN \"Customer_1\" AS \"Customer_10\" ON \"Orders_20\".\"customerid\" = \"Customer_10\".\"customerid\" AND \"Customer_10\".\"name\" = 'Robert' AND \"Orders_20\".\"id\" > 5",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderCustomerLeft",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT COALESCE(\"Customer_10\".\"customerid\", 0) AS \"cid\", COALESCE(\"Customer_10\".\"lastUpdated\", 0) AS \"ctime\", \"Orders_20\".\"id\", \"Customer_10\".\"name\", \"Orders_20\".\"customerid\"\nFROM \"Orders_2\" AS \"Orders_20\"\n LEFT JOIN \"Customer_1\" AS \"Customer_10\" ON \"Orders_20\".\"customerid\" = \"Customer_10\".\"customerid\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderCustomerLeftExcluded",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT \"Orders_20\".\"time\", \"Orders_20\".\"id\", \"Orders_20\".\"customerid\"\nFROM \"Orders_2\" AS \"Orders_20\"\n LEFT JOIN \"Customer_1\" AS \"Customer_10\" ON \"Orders_20\".\"customerid\" = \"Customer_10\".\"customerid\"\nWHERE \"Customer_10\".\"customerid\" IS NULL AND \"Customer_10\".\"lastUpdated\" IS NULL",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderCustomerRight",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT COALESCE(\"Orders_20\".\"id\", 0) AS \"ouuid\", COALESCE(\"Orders_20\".\"time\", PROCTIME()) AS \"otime\", \"Orders_20\".\"id\", \"Customer_10\".\"name\", \"Orders_20\".\"customerid\"\nFROM \"Orders_2\" AS \"Orders_20\"\n RIGHT JOIN \"Customer_1\" AS \"Customer_10\" ON \"Orders_20\".\"customerid\" = \"Customer_10\".\"customerid\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderCustomerRightExcluded",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT \"Customer_10\".\"lastUpdated\", \"Customer_10\".\"customerid\", \"Customer_10\".\"name\"\nFROM \"Orders_2\" AS \"Orders_20\"\n RIGHT JOIN \"Customer_1\" AS \"Customer_10\" ON \"Orders_20\".\"customerid\" = \"Customer_10\".\"customerid\"\nWHERE \"Orders_20\".\"id\" IS NULL AND \"Orders_20\".\"time\" IS NULL",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Orders",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Orders_2\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "operations" : [
      {
        "function" : {
          "name" : "GetCustomer",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query Customer($limit: Int = 10, $offset: Int = 0) {\nCustomer(limit: $limit, offset: $offset) {\ncustomerid\nemail\nname\nlastUpdated\ntimestamp\n}\n\n}",
          "queryName" : "Customer",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/Customer{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrderCustomer",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query OrderCustomer($limit: Int = 10, $offset: Int = 0) {\nOrderCustomer(limit: $limit, offset: $offset) {\nid\nname\ncustomerid\n}\n\n}",
          "queryName" : "OrderCustomer",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/OrderCustomer{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrderCustomerConstant",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query OrderCustomerConstant($limit: Int = 10, $offset: Int = 0) {\nOrderCustomerConstant(limit: $limit, offset: $offset) {\ntime\nid\nname\ncustomerid\n}\n\n}",
          "queryName" : "OrderCustomerConstant",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/OrderCustomerConstant{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrderCustomerLeft",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query OrderCustomerLeft($limit: Int = 10, $offset: Int = 0) {\nOrderCustomerLeft(limit: $limit, offset: $offset) {\ncid\nctime\nid\nname\ncustomerid\n}\n\n}",
          "queryName" : "OrderCustomerLeft",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/OrderCustomerLeft{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrderCustomerLeftExcluded",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query OrderCustomerLeftExcluded($limit: Int = 10, $offset: Int = 0) {\nOrderCustomerLeftExcluded(limit: $limit, offset: $offset) {\ntime\nid\ncustomerid\n}\n\n}",
          "queryName" : "OrderCustomerLeftExcluded",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/OrderCustomerLeftExcluded{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrderCustomerRight",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query OrderCustomerRight($limit: Int = 10, $offset: Int = 0) {\nOrderCustomerRight(limit: $limit, offset: $offset) {\nouuid\notime\nid\nname\ncustomerid\n}\n\n}",
          "queryName" : "OrderCustomerRight",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/OrderCustomerRight{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrderCustomerRightExcluded",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query OrderCustomerRightExcluded($limit: Int = 10, $offset: Int = 0) {\nOrderCustomerRightExcluded(limit: $limit, offset: $offset) {\nlastUpdated\ncustomerid\nname\n}\n\n}",
          "queryName" : "OrderCustomerRightExcluded",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/OrderCustomerRightExcluded{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrders",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query Orders($limit: Int = 10, $offset: Int = 0) {\nOrders(limit: $limit, offset: $offset) {\nid\ncustomerid\ntime\nentries {\nproductid\nquantity\nunit_price\ndiscount\n}\n}\n\n}",
          "queryName" : "Orders",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/Orders{?offset,limit}"
      }
    ],
    "schema" : {
      "type" : "string",
      "schema" : "type Customer {\n  customerid: GraphQLBigInteger!\n  email: String!\n  name: String!\n  lastUpdated: GraphQLBigInteger!\n  timestamp: DateTime!\n}\n\n\"A slightly refined version of RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype OrderCustomer {\n  id: GraphQLBigInteger!\n  name: String!\n  customerid: GraphQLBigInteger!\n}\n\ntype OrderCustomerConstant {\n  time: DateTime!\n  id: GraphQLBigInteger!\n  name: String!\n  customerid: GraphQLBigInteger!\n}\n\ntype OrderCustomerLeft {\n  cid: GraphQLBigInteger!\n  ctime: GraphQLBigInteger!\n  id: GraphQLBigInteger!\n  name: String\n  customerid: GraphQLBigInteger!\n}\n\ntype OrderCustomerLeftExcluded {\n  time: DateTime!\n  id: GraphQLBigInteger!\n  customerid: GraphQLBigInteger!\n}\n\ntype OrderCustomerRight {\n  ouuid: GraphQLBigInteger!\n  otime: DateTime!\n  id: GraphQLBigInteger\n  name: String!\n  customerid: GraphQLBigInteger\n}\n\ntype OrderCustomerRightExcluded {\n  lastUpdated: GraphQLBigInteger!\n  customerid: GraphQLBigInteger!\n  name: String!\n}\n\ntype Orders {\n  id: GraphQLBigInteger!\n  customerid: GraphQLBigInteger!\n  time: DateTime!\n  entries: [Orders_entriesOutput]!\n}\n\ntype Orders_entriesOutput {\n  productid: GraphQLBigInteger!\n  quantity: GraphQLBigInteger!\n  unit_price: Float!\n  discount: Float\n}\n\ntype Query {\n  Customer(limit: Int = 10, offset: Int = 0): [Customer!]\n  OrderCustomer(limit: Int = 10, offset: Int = 0): [OrderCustomer!]\n  OrderCustomerConstant(limit: Int = 10, offset: Int = 0): [OrderCustomerConstant!]\n  OrderCustomerLeft(limit: Int = 10, offset: Int = 0): [OrderCustomerLeft!]\n  OrderCustomerLeftExcluded(limit: Int = 10, offset: Int = 0): [OrderCustomerLeftExcluded!]\n  OrderCustomerRight(limit: Int = 10, offset: Int = 0): [OrderCustomerRight!]\n  OrderCustomerRightExcluded(limit: Int = 10, offset: Int = 0): [OrderCustomerRightExcluded!]\n  Orders(limit: Int = 10, offset: Int = 0): [Orders!]\n}\n"
    }
  }
}
