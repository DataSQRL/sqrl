>>>pipeline_explain.txt
=== ApplicationUpdates
ID:     default_catalog.default_database.ApplicationUpdates
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.ApplicationUpdates__base
Annotations:
 - stream-root: ApplicationUpdates
Primary Key: loan_application_id, event_time
Timestamp  : -
Schema:
 - loan_application_id: BIGINT NOT NULL
 - status: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - message: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[default_catalog, default_database, ApplicationUpdates]])
SQL: CREATE VIEW `ApplicationUpdates__view`
AS
SELECT `ApplicationUpdates`.`loan_application_id`, `ApplicationUpdates`.`status`, `ApplicationUpdates`.`message`, `ApplicationUpdates`.`event_time`
FROM `default_catalog`.`default_database`.`ApplicationUpdates` AS `ApplicationUpdates`
=== Applications
ID:     default_catalog.default_database.Applications
Type:   state
Stage:  flink
Inputs: default_catalog.default_database._ApplicationsStream
Annotations:
 - stream-root: _ApplicationsStream
Primary Key: id
Timestamp  : -
Schema:
 - id: BIGINT NOT NULL
 - customer_id: BIGINT NOT NULL
 - loan_type_id: BIGINT NOT NULL
 - amount: DOUBLE NOT NULL
 - duration: BIGINT NOT NULL
 - application_date: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(id=[$0], customer_id=[$1], loan_type_id=[$2], amount=[$3], duration=[$4], application_date=[$5], updated_at=[$6])
  LogicalFilter(condition=[=($7, 1)])
    LogicalProject(id=[$0], customer_id=[$1], loan_type_id=[$2], amount=[$3], duration=[$4], application_date=[$5], updated_at=[$6], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $6 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, _ApplicationsStream]])
SQL: CREATE VIEW `Applications`
AS
SELECT `id`, `customer_id`, `loan_type_id`, `amount`, `duration`, `application_date`, `updated_at`
FROM (SELECT `id`, `customer_id`, `loan_type_id`, `amount`, `duration`, `application_date`, `updated_at`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`_ApplicationsStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== CustomerUpdates
ID:     default_catalog.default_database.CustomerUpdates
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.ApplicationUpdates, default_catalog.default_database.Applications, default_catalog.default_database.Customers
Primary Key: customer_id
Timestamp  : -
Schema:
 - customer_id: BIGINT NOT NULL
 - num_updates: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0}], num_updates=[COUNT()])
  LogicalProject(customer_id=[$0])
    LogicalJoin(condition=[=($8, $15)], joinType=[inner])
      LogicalJoin(condition=[=($0, $9)], joinType=[inner])
        LogicalTableScan(table=[[default_catalog, default_database, Customers]])
        LogicalTableScan(table=[[default_catalog, default_database, Applications]])
      LogicalTableScan(table=[[default_catalog, default_database, ApplicationUpdates]])
SQL: CREATE VIEW CustomerUpdates AS  SELECT c.id AS customer_id, COUNT(*) AS num_updates FROM Customers c
    JOIN Applications a ON c.id = a.customer_id
    JOIN ApplicationUpdates u ON a.id = u.loan_application_id
    GROUP BY c.id;

=== Customers
ID:     default_catalog.default_database.Customers
Type:   state
Stage:  flink
Inputs: default_catalog.default_database._CustomersStream
Annotations:
 - stream-root: _CustomersStream
Primary Key: id
Timestamp  : -
Schema:
 - id: BIGINT NOT NULL
 - first_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - last_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - phone: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - address: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - date_of_birth: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], phone=[$4], address=[$5], date_of_birth=[$6], updated_at=[$7])
  LogicalFilter(condition=[=($8, 1)])
    LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], phone=[$4], address=[$5], date_of_birth=[$6], updated_at=[$7], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $7 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, _CustomersStream]])
SQL: CREATE VIEW `Customers`
AS
SELECT `id`, `first_name`, `last_name`, `email`, `phone`, `address`, `date_of_birth`, `updated_at`
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `phone`, `address`, `date_of_birth`, `updated_at`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`_CustomersStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== _ApplicationsStream
ID:     default_catalog.default_database._ApplicationsStream
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database._ApplicationsStream__base
Annotations:
 - stream-root: _ApplicationsStream
Primary Key: id, updated_at
Timestamp  : -
Schema:
 - id: BIGINT NOT NULL
 - customer_id: BIGINT NOT NULL
 - loan_type_id: BIGINT NOT NULL
 - amount: DOUBLE NOT NULL
 - duration: BIGINT NOT NULL
 - application_date: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[default_catalog, default_database, _ApplicationsStream]])
SQL: CREATE VIEW `_ApplicationsStream__view`
AS
SELECT `_ApplicationsStream`.`id`, `_ApplicationsStream`.`customer_id`, `_ApplicationsStream`.`loan_type_id`, `_ApplicationsStream`.`amount`, `_ApplicationsStream`.`duration`, `_ApplicationsStream`.`application_date`, `_ApplicationsStream`.`updated_at`
FROM `default_catalog`.`default_database`.`_ApplicationsStream` AS `_ApplicationsStream`
=== _CustomersStream
ID:     default_catalog.default_database._CustomersStream
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database._CustomersStream__base
Annotations:
 - stream-root: _CustomersStream
Primary Key: id, updated_at
Timestamp  : -
Schema:
 - id: BIGINT NOT NULL
 - first_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - last_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - phone: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - address: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - date_of_birth: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[default_catalog, default_database, _CustomersStream]])
SQL: CREATE VIEW `_CustomersStream__view`
AS
SELECT `_CustomersStream`.`id`, `_CustomersStream`.`first_name`, `_CustomersStream`.`last_name`, `_CustomersStream`.`email`, `_CustomersStream`.`phone`, `_CustomersStream`.`address`, `_CustomersStream`.`date_of_birth`, `_CustomersStream`.`updated_at`
FROM `default_catalog`.`default_database`.`_CustomersStream` AS `_CustomersStream`
>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `_CustomersStream__schema` (
  `id` BIGINT NOT NULL,
  `first_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `last_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `phone` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `address` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `date_of_birth` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `_CustomersStream` (
  PRIMARY KEY (`id`, `updated_at`) NOT ENFORCED
) WITH (
  'format' = 'flexible-json',
  'path' = '${DATA_PATH}/customers.jsonl',
  'connector' = 'filesystem'
)
LIKE `_CustomersStream__schema`;
CREATE TEMPORARY TABLE `_ApplicationsStream__schema` (
  `id` BIGINT NOT NULL,
  `customer_id` BIGINT NOT NULL,
  `loan_type_id` BIGINT NOT NULL,
  `amount` DOUBLE NOT NULL,
  `duration` BIGINT NOT NULL,
  `application_date` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `_ApplicationsStream` (
  PRIMARY KEY (`id`, `updated_at`) NOT ENFORCED
) WITH (
  'format' = 'flexible-json',
  'path' = '${DATA_PATH}/applications.jsonl',
  'connector' = 'filesystem'
)
LIKE `_ApplicationsStream__schema`;
CREATE TEMPORARY TABLE `ApplicationUpdates__schema` (
  `loan_application_id` BIGINT NOT NULL,
  `status` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `message` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `ApplicationUpdates` (
  PRIMARY KEY (`loan_application_id`, `event_time`) NOT ENFORCED
) WITH (
  'format' = 'flexible-json',
  'path' = '${DATA_PATH}/applicationupdates.jsonl',
  'connector' = 'filesystem'
)
LIKE `ApplicationUpdates__schema`;
CREATE VIEW `Customers`
AS
SELECT `id`, `first_name`, `last_name`, `email`, `phone`, `address`, `date_of_birth`, `updated_at`
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `phone`, `address`, `date_of_birth`, `updated_at`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`_CustomersStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `Applications`
AS
SELECT `id`, `customer_id`, `loan_type_id`, `amount`, `duration`, `application_date`, `updated_at`
FROM (SELECT `id`, `customer_id`, `loan_type_id`, `amount`, `duration`, `application_date`, `updated_at`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`_ApplicationsStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `CustomerUpdates`
AS
SELECT `c`.`id` AS `customer_id`, COUNT(*) AS `num_updates`
FROM `Customers` AS `c`
 INNER JOIN `Applications` AS `a` ON `c`.`id` = `a`.`customer_id`
 INNER JOIN `ApplicationUpdates` AS `u` ON `a`.`id` = `u`.`loan_application_id`
GROUP BY `c`.`id`;
CREATE VIEW `CustomerUpdatesTest`
AS
SELECT *
FROM `CustomerUpdates`;
CREATE TABLE `ApplicationUpdates_1` (
  `loan_application_id` BIGINT NOT NULL,
  `status` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `message` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`loan_application_id`, `event_time`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'ApplicationUpdates_1'
);
CREATE TABLE `Applications_2` (
  `id` BIGINT NOT NULL,
  `customer_id` BIGINT NOT NULL,
  `loan_type_id` BIGINT NOT NULL,
  `amount` DOUBLE NOT NULL,
  `duration` BIGINT NOT NULL,
  `application_date` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'Applications_2'
);
CREATE TABLE `CustomerUpdates_3` (
  `customer_id` BIGINT NOT NULL,
  `num_updates` BIGINT NOT NULL,
  PRIMARY KEY (`customer_id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'CustomerUpdates_3'
);
CREATE TABLE `Customers_4` (
  `id` BIGINT NOT NULL,
  `first_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `last_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `phone` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `address` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `date_of_birth` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'Customers_4'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`ApplicationUpdates_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`ApplicationUpdates`)
;
INSERT INTO `default_catalog`.`default_database`.`Applications_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`Applications`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`CustomerUpdates_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`CustomerUpdates`)
  ;
  INSERT INTO `default_catalog`.`default_database`.`Customers_4`
   (SELECT *
    FROM `default_catalog`.`default_database`.`Customers`)
   ;
   END
>>>postgres-schema.sql
CREATE TABLE IF NOT EXISTS "ApplicationUpdates_1" ("loan_application_id" BIGINT NOT NULL, "status" TEXT NOT NULL, "message" TEXT NOT NULL, "event_time" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("loan_application_id","event_time"));
CREATE TABLE IF NOT EXISTS "Applications_2" ("id" BIGINT NOT NULL, "customer_id" BIGINT NOT NULL, "loan_type_id" BIGINT NOT NULL, "amount" DOUBLE PRECISION NOT NULL, "duration" BIGINT NOT NULL, "application_date" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id"));
CREATE TABLE IF NOT EXISTS "CustomerUpdates_3" ("customer_id" BIGINT NOT NULL, "num_updates" BIGINT NOT NULL , PRIMARY KEY ("customer_id"));
CREATE TABLE IF NOT EXISTS "Customers_4" ("id" BIGINT NOT NULL, "first_name" TEXT NOT NULL, "last_name" TEXT NOT NULL, "email" TEXT NOT NULL, "phone" TEXT NOT NULL, "address" TEXT NOT NULL, "date_of_birth" TEXT NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id"))
>>>postgres-views.sql
CREATE OR REPLACE VIEW "ApplicationUpdates"("loan_application_id", "status", "message", "event_time") AS SELECT *
FROM "ApplicationUpdates_1";
CREATE OR REPLACE VIEW "Applications"("id", "customer_id", "loan_type_id", "amount", "duration", "application_date", "updated_at") AS SELECT *
FROM "Applications_2";
CREATE OR REPLACE VIEW "CustomerUpdates"("customer_id", "num_updates") AS SELECT *
FROM "CustomerUpdates_3";
CREATE OR REPLACE VIEW "Customers"("id", "first_name", "last_name", "email", "phone", "address", "date_of_birth", "updated_at") AS SELECT *
FROM "Customers_4"
>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "ApplicationUpdates",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"ApplicationUpdates_1\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Applications",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Applications_2\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CustomerUpdates",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"CustomerUpdates_3\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Customers",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Customers_4\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "schema" : "type ApplicationUpdates {\n  loan_application_id: GraphQLBigInteger!\n  status: String!\n  message: String!\n  event_time: DateTime!\n}\n\ntype Applications {\n  id: GraphQLBigInteger!\n  customer_id: GraphQLBigInteger!\n  loan_type_id: GraphQLBigInteger!\n  amount: Float!\n  duration: GraphQLBigInteger!\n  application_date: DateTime!\n  updated_at: DateTime!\n}\n\ntype CustomerUpdates {\n  customer_id: GraphQLBigInteger!\n  num_updates: GraphQLBigInteger!\n}\n\ntype Customers {\n  id: GraphQLBigInteger!\n  first_name: String!\n  last_name: String!\n  email: String!\n  phone: String!\n  address: String!\n  date_of_birth: String!\n  updated_at: DateTime!\n}\n\n\"A slightly refined version of RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype Query {\n  ApplicationUpdates(limit: Int = 10, offset: Int = 0): [ApplicationUpdates!]\n  Applications(limit: Int = 10, offset: Int = 0): [Applications!]\n  CustomerUpdates(limit: Int = 10, offset: Int = 0): [CustomerUpdates!]\n  Customers(limit: Int = 10, offset: Int = 0): [Customers!]\n}\n"
    }
  }
}
