>>>pipeline_explain.txt
=== MyView
ID:     myview_1
Type:   state
Stage:  flink
Primary Key: val
Timestamp  : -
Schema:
 - val: INTEGER NOT NULL
Plan:
LogicalValues(tuples=[[{ 1 }, { 2 }]])

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY TABLE `myview_1` (\n  `val` INTEGER NOT NULL,\n  PRIMARY KEY (`val`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'myview_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT *\nFROM (VALUES (1),\n    (2)) AS `t` (`val`);",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `myview_1`\n(SELECT *\n FROM `table$1`)\n;\nEND;"
  ],
  "connectors" : [
    "jdbc-sqrl"
  ],
  "formats" : [ ],
  "compliedPlan" : "{\n  \"flinkVersion\" : \"1.19\",\n  \"nodes\" : [ {\n    \"id\" : 233,\n    \"type\" : \"stream-exec-values_1\",\n    \"tuples\" : [ [ {\n      \"kind\" : \"LITERAL\",\n      \"value\" : 1,\n      \"type\" : \"INT NOT NULL\"\n    } ], [ {\n      \"kind\" : \"LITERAL\",\n      \"value\" : 2,\n      \"type\" : \"INT NOT NULL\"\n    } ] ],\n    \"outputType\" : \"ROW<`val` INT NOT NULL>\",\n    \"description\" : \"Values(tuples=[[{ 1 }, { 2 }]])\",\n    \"inputProperties\" : [ ]\n  }, {\n    \"id\" : 234,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`myview_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`val` INT NOT NULL>\",\n    \"description\" : \"Sink(table=[default_catalog.default_database.myview_1], fields=[val])\"\n  } ],\n  \"edges\" : [ {\n    \"source\" : 233,\n    \"target\" : 234,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  } ]\n}"
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "myview_1",
      "columns" : [
        "\"val\" INTEGER NOT NULL"
      ],
      "primaryKeys" : [
        "\"val\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS myview_1 (\"val\" INTEGER NOT NULL , PRIMARY KEY (\"val\"));"
    }
  ],
  "views" : [
    {
      "name" : "MyView",
      "sql" : "CREATE OR REPLACE VIEW \"MyView\"(\"val\") AS SELECT *\nFROM \"myview_1\"\nORDER BY \"val\";"
    }
  ]
}
