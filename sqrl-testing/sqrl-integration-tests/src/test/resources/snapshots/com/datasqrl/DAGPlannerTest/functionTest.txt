>>>pipeline_explain.txt
=== FunctionCalls
ID:     default_catalog.default_database.FunctionCalls
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Product
Annotations:
 - stream-root: Product
Primary Key: -
Timestamp  : -
Schema:
 - searchResult: DOUBLE NOT NULL
 - format: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalProject(searchResult=[text_search('garden gnome', $3, $1)], format=[format('Go buy: %s in %s with id=%s', $1, $3, CAST($0):VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL)])
  LogicalTableScan(table=[[default_catalog, default_database, Product]])
SQL: CREATE VIEW FunctionCalls AS  SELECT text_search('garden gnome', category, name) AS searchResult,
                        format('Go buy: %s in %s with id=%s', name, category, CAST(productid AS STRING)) AS format
    FROM Product;

=== Product
ID:     default_catalog.default_database.Product
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Product__base
Annotations:
 - stream-root: Product
Primary Key: productid, name, description, category
Timestamp  : _ingest_time
Schema:
 - productid: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - description: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - category: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[_ingest_time], watermark=[-($4, 1:INTERVAL SECOND)])
  LogicalTableScan(table=[[default_catalog, default_database, Product]])
SQL: CREATE VIEW `Product__view`
AS
SELECT `Product`.`productid`, `Product`.`name`, `Product`.`description`, `Product`.`category`, `Product`.`_ingest_time`
FROM `default_catalog`.`default_database`.`Product` AS `Product`
>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Product__schema` (
  `productid` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Product` (
  PRIMARY KEY (`productid`, `name`, `description`, `category`) NOT ENFORCED,
  WATERMARK FOR `_ingest_time` AS `_ingest_time` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Product__schema`;
CREATE VIEW `FunctionCalls`
AS
SELECT `text_search`('garden gnome', `category`, `name`) AS `searchResult`, `format`('Go buy: %s in %s with id=%s', `name`, `category`, CAST(`productid` AS STRING)) AS `format`
FROM `Product`;
CREATE TABLE `FunctionCalls_1` (
  `searchResult` DOUBLE NOT NULL,
  `format` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'FunctionCalls_1'
);
CREATE TABLE `Product_2` (
  `productid` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`productid`, `name`, `description`, `category`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'Product_2'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`FunctionCalls_1`
(SELECT `searchResult`, `format`, `hash_columns`(`searchResult`, `format`) AS `__pk_hash`
 FROM `default_catalog`.`default_database`.`FunctionCalls`)
;
INSERT INTO `default_catalog`.`default_database`.`Product_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`Product`)
 ;
 END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "FunctionCalls_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"FunctionCalls_1\" (\"searchResult\" DOUBLE PRECISION NOT NULL, \"format\" TEXT NOT NULL, \"__pk_hash\" TEXT  , PRIMARY KEY (\"__pk_hash\"))",
      "fields" : [
        {
          "name" : "searchResult",
          "type" : "DOUBLE PRECISION",
          "nullable" : false
        },
        {
          "name" : "format",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "__pk_hash",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "Product_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Product_2\" (\"productid\" BIGINT NOT NULL, \"name\" TEXT NOT NULL, \"description\" TEXT NOT NULL, \"category\" TEXT NOT NULL, \"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"productid\",\"name\",\"description\",\"category\"))",
      "fields" : [
        {
          "name" : "productid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "description",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "category",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "_ingest_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "FunctionCalls",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"FunctionCalls\"(\"searchResult\", \"format\") AS SELECT \"searchResult\", \"format\"\nFROM \"FunctionCalls_1\"",
      "fields" : [
        {
          "name" : "searchResult",
          "type" : "DOUBLE PRECISION",
          "nullable" : false
        },
        {
          "name" : "format",
          "type" : "TEXT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Product",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Product\"(\"productid\", \"name\", \"description\", \"category\", \"_ingest_time\") AS SELECT *\nFROM \"Product_2\"",
      "fields" : [
        {
          "name" : "productid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "description",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "category",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "_ingest_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    }
  ]
}
>>>vertx-config.json
{
  "servletConfig": {
    "graphiQLEndpoint": "/graphiql*",
    "graphQLEndpoint": "/graphql",
    "usePgPool": true,
    "useApolloWs": false,
    "graphQLWsEndpoint": "/graphql-ws"
  },
  "graphQLHandlerOptions": {
    "requestBatchingEnabled": false,
    "requestMultipartEnabled": false
  },
  "graphiQLHandlerOptions": {
    "enabled": true
  },
  "httpServerOptions": {
    "sendBufferSize": -1,
    "receiveBufferSize": -1,
    "trafficClass": -1,
    "reuseAddress": true,
    "logActivity": false,
    "activityLogDataFormat": "HEX_DUMP",
    "reusePort": false,
    "tcpNoDelay": true,
    "tcpKeepAlive": false,
    "soLinger": -1,
    "idleTimeout": 0,
    "readIdleTimeout": 0,
    "writeIdleTimeout": 0,
    "idleTimeoutUnit": "SECONDS",
    "ssl": false,
    "sslHandshakeTimeout": 10,
    "sslHandshakeTimeoutUnit": "SECONDS",
    "enabledCipherSuites": [],
    "crlPaths": [],
    "crlValues": [],
    "useAlpn": false,
    "enabledSecureTransportProtocols": [
      "TLSv1",
      "TLSv1.1",
      "TLSv1.2"
    ],
    "tcpFastOpen": false,
    "tcpCork": false,
    "tcpQuickAck": false,
    "tcpUserTimeout": 0,
    "port": 8888,
    "host": "0.0.0.0",
    "acceptBacklog": -1,
    "clientAuth": "NONE",
    "sni": false,
    "useProxyProtocol": false,
    "proxyProtocolTimeout": 10,
    "proxyProtocolTimeoutUnit": "SECONDS",
    "compressionSupported": false,
    "compressionLevel": 6,
    "maxWebSocketFrameSize": 65536,
    "maxWebSocketMessageSize": 262144,
    "webSocketSubProtocols": [
      "graphql-transport-ws",
      "graphql-ws"
    ],
    "handle100ContinueAutomatically": false,
    "maxChunkSize": 8192,
    "maxInitialLineLength": 4096,
    "maxHeaderSize": 8192,
    "maxFormAttributeSize": 8192,
    "initialSettings": {
      "headerTableSize": 4096,
      "pushEnabled": true,
      "maxConcurrentStreams": 100,
      "initialWindowSize": 65535,
      "maxFrameSize": 16384,
      "maxHeaderListSize": 8192
    },
    "alpnVersions": [
      "HTTP_2",
      "HTTP_1_1"
    ],
    "http2ConnectionWindowSize": -1,
    "decompressionSupported": false,
    "acceptUnmaskedFrames": false,
    "decoderInitialBufferSize": 128,
    "perFrameWebSocketCompressionSupported": true,
    "perMessageWebSocketCompressionSupported": true,
    "webSocketCompressionLevel": 6,
    "webSocketAllowServerNoContext": false,
    "webSocketPreferredClientNoContext": false,
    "webSocketClosingTimeout": 10,
    "tracingPolicy": "ALWAYS"
  },
  "pgConnectOptions": {
    "sendBufferSize": -1,
    "receiveBufferSize": -1,
    "trafficClass": -1,
    "reuseAddress": true,
    "logActivity": false,
    "activityLogDataFormat": "HEX_DUMP",
    "reusePort": false,
    "tcpNoDelay": true,
    "tcpKeepAlive": false,
    "soLinger": -1,
    "idleTimeout": 0,
    "readIdleTimeout": 0,
    "writeIdleTimeout": 0,
    "idleTimeoutUnit": "SECONDS",
    "ssl": false,
    "sslHandshakeTimeout": 10,
    "sslHandshakeTimeoutUnit": "SECONDS",
    "enabledCipherSuites": [],
    "crlPaths": [],
    "crlValues": [],
    "useAlpn": false,
    "enabledSecureTransportProtocols": [
      "TLSv1",
      "TLSv1.1",
      "TLSv1.2"
    ],
    "tcpFastOpen": false,
    "tcpCork": false,
    "tcpQuickAck": false,
    "tcpUserTimeout": 0,
    "connectTimeout": 60000,
    "trustAll": false,
    "metricsName": "",
    "reconnectAttempts": 0,
    "reconnectInterval": 1000,
    "hostnameVerificationAlgorithm": "",
    "host": "${PGHOST}",
    "port": 5432,
    "user": "${PGUSER}",
    "password": "${PGPASSWORD}",
    "database": "${PGDATABASE}",
    "cachePreparedStatements": false,
    "preparedStatementCacheMaxSize": 256,
    "preparedStatementCacheSqlFilter": {},
    "properties": {
      "DateStyle": "ISO",
      "client_encoding": "utf8",
      "application_name": "vertx-pg-client",
      "extra_float_digits": "2"
    },
    "pipeliningLimit": 256,
    "sslMode": "DISABLE",
    "socketAddress": {
      "domainSocket": false,
      "inetSocket": true
    },
    "usingDomainSocket": false
  },
  "poolOptions": {
    "maxSize": 4,
    "maxWaitQueueSize": -1,
    "idleTimeout": 0,
    "idleTimeoutUnit": "SECONDS",
    "poolCleanerPeriod": 1000,
    "connectionTimeout": 30,
    "connectionTimeoutUnit": "SECONDS",
    "shared": false,
    "name": "__vertx.DEFAULT",
    "eventLoopSize": 0
  },
  "corsHandlerOptions": {
    "allowedOrigin": "*",
    "allowCredentials": false,
    "maxAgeSeconds": -1,
    "allowPrivateNetwork": false,
    "allowedMethods": [
      "GET",
      "POST"
    ],
    "allowedHeaders": [],
    "exposedHeaders": []
  },
  "apolloWSOptions": {
    "keepAlive": 30000
  }
}

>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "FunctionCalls",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT \"searchResult\", \"format\"\nFROM \"FunctionCalls_1\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Product",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Product_2\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "schema" : "type FunctionCalls {\n  searchResult: Float!\n  format: String!\n}\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype Product {\n  productid: GraphQLBigInteger!\n  name: String!\n  description: String!\n  category: String!\n}\n\ntype Query {\n  FunctionCalls(limit: Int = 10, offset: Int = 0): [FunctionCalls!]\n  Product(limit: Int = 10, offset: Int = 0): [Product!]\n}\n"
    }
  }
}
