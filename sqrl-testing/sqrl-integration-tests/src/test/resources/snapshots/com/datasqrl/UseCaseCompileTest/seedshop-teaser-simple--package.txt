>>>pipeline_explain.txt
=== CustomerSpending
ID:     customerspending_1
Type:   stream
Stage:  flink
Inputs: orders_2
Primary Key: customerid, week
Timestamp  : week
Schema:
 - customerid: BIGINT NOT NULL
 - week: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - total: DOUBLE NOT NULL
 - saved: DOUBLE NOT NULL
Post Processors:
 - sort: #1: week TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC
Plan:
LogicalProject(customerid=[$0], week=[$1], total=[$2], saved=[$3])
  LogicalAggregate(group=[{0, 1}], total=[SUM($2)], agg#1=[SUM($3)]) hints[TumbleAggregationHint options:[1, FUNCTION, 5, 604800000, 0]]
    LogicalProject(customerid=[$1], week=[endOfWeek($2)], total=[$7], $f3=[COALESCE($6, 0.0:DECIMAL(2, 1))], id=[$0], time=[$2])
      LogicalTableScan(table=[[orders_2]])

=== kafka.CustomerSpending
ID:     customerspending_1_1
Type:   export
Stage:  flink
Inputs: customerspending_1

=== Orders
ID:     orders_2
Type:   stream
Stage:  flink
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - productid: BIGINT NOT NULL
 - quantity: BIGINT NOT NULL
 - unit_price: DOUBLE NOT NULL
 - discount: DOUBLE
 - total: DOUBLE NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], productid=[$3], quantity=[$4], unit_price=[$5], discount=[$6], total=[-(*($4, $5), COALESCE($6, 0.0:DOUBLE))]) hints[WatermarkHint options:[2]]
  LogicalTableScan(table=[[orders_1]])

=== ProductRevenue
ID:     productrevenue_1
Type:   stream
Stage:  flink
Inputs: orders_2
Primary Key: productid, week
Timestamp  : week
Schema:
 - productid: BIGINT NOT NULL
 - week: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - revenue: DOUBLE NOT NULL
Post Processors:
 - sort: #1: week TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC
Plan:
LogicalAggregate(group=[{0, 1}], revenue=[SUM($2)]) hints[TumbleAggregationHint options:[1, FUNCTION, 4, 604800000, 0]]
  LogicalProject(productid=[$3], week=[endOfWeek($2)], total=[$7], id=[$0], time=[$2])
    LogicalTableScan(table=[[orders_2]])

=== kafka.ProductRevenue
ID:     productrevenue_1_2
Type:   export
Stage:  flink
Inputs: productrevenue_1

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofweek` AS 'com.datasqrl.time.EndOfWeek' LANGUAGE JAVA;",
    "CREATE TEMPORARY TABLE `orders_1` (\n  `id` BIGINT NOT NULL,\n  `customerid` BIGINT NOT NULL,\n  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `productid` BIGINT NOT NULL,\n  `quantity` BIGINT NOT NULL,\n  `unit_price` DOUBLE NOT NULL,\n  `discount` DOUBLE,\n  PRIMARY KEY (`id`, `time`) NOT ENFORCED,\n  WATERMARK FOR `time` AS `time` - INTERVAL '0.001' SECOND\n) WITH (\n  'format' = 'flexible-json',\n  'path' = '/data/orders.jsonl',\n  'connector' = 'filesystem'\n);",
    "CREATE TEMPORARY TABLE `customerspending_1` (\n  `customerid` BIGINT NOT NULL,\n  `week` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `total` DOUBLE NOT NULL,\n  `saved` DOUBLE NOT NULL,\n  PRIMARY KEY (`customerid`, `week`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'customerspending_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `orders_2` (\n  `id` BIGINT NOT NULL,\n  `customerid` BIGINT NOT NULL,\n  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `productid` BIGINT NOT NULL,\n  `quantity` BIGINT NOT NULL,\n  `unit_price` DOUBLE NOT NULL,\n  `discount` DOUBLE,\n  `total` DOUBLE NOT NULL,\n  PRIMARY KEY (`id`, `time`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'orders_2',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `productrevenue_1` (\n  `productid` BIGINT NOT NULL,\n  `week` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `revenue` DOUBLE NOT NULL,\n  PRIMARY KEY (`productid`, `week`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'productrevenue_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `customerspending_1_1` (\n  `customerid` BIGINT NOT NULL,\n  `week` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `total` DOUBLE NOT NULL,\n  `saved` DOUBLE NOT NULL\n) WITH (\n  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',\n  'properties.auto.offset.reset' = 'earliest',\n  'connector' = 'kafka',\n  'format' = 'flexible-json',\n  'properties.group.id' = '${PROPERTIES_GROUP_ID}',\n  'topic' = 'customerspending_1',\n  'scan.startup.mode' = 'group-offsets'\n);",
    "CREATE TEMPORARY TABLE `productrevenue_1_2` (\n  `productid` BIGINT NOT NULL,\n  `week` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `revenue` DOUBLE NOT NULL\n) WITH (\n  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',\n  'properties.auto.offset.reset' = 'earliest',\n  'connector' = 'kafka',\n  'format' = 'flexible-json',\n  'properties.group.id' = '${PROPERTIES_GROUP_ID}',\n  'topic' = 'productrevenue_1',\n  'scan.startup.mode' = 'group-offsets'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT `customerid`, ENDOFWEEK(`time`) AS `week`, `quantity` * `unit_price` - COALESCE(`discount`, 0.0) AS `total`, COALESCE(`discount`, 0.0) AS `$f3`, `id`, `time`\nFROM `orders_1`;",
    "CREATE VIEW `table$2`\nAS\nSELECT `customerid`, `window_time` AS `week`, SUM(`total`) AS `total`, SUM(`$f3`) AS `saved`\nFROM TABLE(TUMBLE(TABLE `table$1`, DESCRIPTOR(`time`), INTERVAL '604800' SECOND(9), INTERVAL '0' SECOND(1))) AS `t1`\nGROUP BY `customerid`, `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$3`\nAS\nSELECT `id`, `customerid`, `time`, `productid`, `quantity`, `unit_price`, `discount`, `quantity` * `unit_price` - COALESCE(`discount`, 0.0) AS `total`\nFROM `orders_1`;",
    "CREATE VIEW `table$4`\nAS\nSELECT `productid`, ENDOFWEEK(`time`) AS `week`, `quantity` * `unit_price` - COALESCE(`discount`, 0.0) AS `total`, `id`, `time`\nFROM `orders_1`;",
    "CREATE VIEW `table$5`\nAS\nSELECT `productid`, `window_time` AS `week`, SUM(`total`) AS `revenue`\nFROM TABLE(TUMBLE(TABLE `table$4`, DESCRIPTOR(`time`), INTERVAL '604800' SECOND(9), INTERVAL '0' SECOND(1))) AS `t1`\nGROUP BY `productid`, `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$6`\nAS\nSELECT `customerid`, ENDOFWEEK(`time`) AS `week`, `quantity` * `unit_price` - COALESCE(`discount`, 0.0) AS `total`, COALESCE(`discount`, 0.0) AS `$f3`, `id`, `time`\nFROM `orders_1`;",
    "CREATE VIEW `table$7`\nAS\nSELECT `customerid`, `window_time` AS `week`, SUM(`total`) AS `total`, SUM(`$f3`) AS `saved`\nFROM TABLE(TUMBLE(TABLE `table$6`, DESCRIPTOR(`time`), INTERVAL '604800' SECOND(9), INTERVAL '0' SECOND(1))) AS `t1`\nGROUP BY `customerid`, `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$8`\nAS\nSELECT `productid`, ENDOFWEEK(`time`) AS `week`, `quantity` * `unit_price` - COALESCE(`discount`, 0.0) AS `total`, `id`, `time`\nFROM `orders_1`;",
    "CREATE VIEW `table$9`\nAS\nSELECT `productid`, `window_time` AS `week`, SUM(`total`) AS `revenue`\nFROM TABLE(TUMBLE(TABLE `table$8`, DESCRIPTOR(`time`), INTERVAL '604800' SECOND(9), INTERVAL '0' SECOND(1))) AS `t1`\nGROUP BY `productid`, `window_start`, `window_end`, `window_time`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `customerspending_1`\n(SELECT *\n FROM `table$2`)\n;\nINSERT INTO `orders_2`\n (SELECT *\n  FROM `table$3`)\n ;\n INSERT INTO `productrevenue_1`\n  (SELECT *\n   FROM `table$5`)\n  ;\n  INSERT INTO `customerspending_1_1`\n   (SELECT *\n    FROM `table$7`)\n   ;\n   INSERT INTO `productrevenue_1_2`\n    (SELECT *\n     FROM `table$9`)\n    ;\n    END;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "kafka",
    "filesystem"
  ],
  "formats" : [
    "flexible-json"
  ]
}
>>>kafka.json
{
  "topics" : [
    {
      "name" : "customerspending_1",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    },
    {
      "name" : "productrevenue_1",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    }
  ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "customerspending_1",
      "columns" : [
        "\"customerid\" BIGINT NOT NULL",
        "\"week\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"total\" DOUBLE PRECISION NOT NULL",
        "\"saved\" DOUBLE PRECISION NOT NULL"
      ],
      "primaryKeys" : [
        "\"customerid\"",
        "\"week\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS customerspending_1 (\"customerid\" BIGINT NOT NULL,\"week\" TIMESTAMP WITH TIME ZONE NOT NULL,\"total\" DOUBLE PRECISION NOT NULL,\"saved\" DOUBLE PRECISION NOT NULL , PRIMARY KEY (\"customerid\",\"week\"));"
    },
    {
      "name" : "orders_2",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"customerid\" BIGINT NOT NULL",
        "\"time\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"productid\" BIGINT NOT NULL",
        "\"quantity\" BIGINT NOT NULL",
        "\"unit_price\" DOUBLE PRECISION NOT NULL",
        "\"discount\" DOUBLE PRECISION ",
        "\"total\" DOUBLE PRECISION NOT NULL"
      ],
      "primaryKeys" : [
        "\"id\"",
        "\"time\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS orders_2 (\"id\" BIGINT NOT NULL,\"customerid\" BIGINT NOT NULL,\"time\" TIMESTAMP WITH TIME ZONE NOT NULL,\"productid\" BIGINT NOT NULL,\"quantity\" BIGINT NOT NULL,\"unit_price\" DOUBLE PRECISION NOT NULL,\"discount\" DOUBLE PRECISION ,\"total\" DOUBLE PRECISION NOT NULL , PRIMARY KEY (\"id\",\"time\"));"
    },
    {
      "name" : "productrevenue_1",
      "columns" : [
        "\"productid\" BIGINT NOT NULL",
        "\"week\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"revenue\" DOUBLE PRECISION NOT NULL"
      ],
      "primaryKeys" : [
        "\"productid\"",
        "\"week\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS productrevenue_1 (\"productid\" BIGINT NOT NULL,\"week\" TIMESTAMP WITH TIME ZONE NOT NULL,\"revenue\" DOUBLE PRECISION NOT NULL , PRIMARY KEY (\"productid\",\"week\"));"
    },
    {
      "indexName" : "customerspending_1_hash_c1",
      "tableName" : "customerspending_1",
      "columns" : [
        "week"
      ],
      "type" : "HASH",
      "sql" : "CREATE INDEX IF NOT EXISTS customerspending_1_hash_c1 ON customerspending_1 USING hash (\"week\");"
    },
    {
      "indexName" : "orders_2_hash_c2",
      "tableName" : "orders_2",
      "columns" : [
        "time"
      ],
      "type" : "HASH",
      "sql" : "CREATE INDEX IF NOT EXISTS orders_2_hash_c2 ON orders_2 USING hash (\"time\");"
    },
    {
      "indexName" : "productrevenue_1_hash_c1",
      "tableName" : "productrevenue_1",
      "columns" : [
        "week"
      ],
      "type" : "HASH",
      "sql" : "CREATE INDEX IF NOT EXISTS productrevenue_1_hash_c1 ON productrevenue_1 USING hash (\"week\");"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CustomerSpending",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "customerid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "week"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"customerid\", \"week\", \"total\", \"saved\", 1 AS \"__pk\"\nFROM \"customerspending_1\"\nWHERE \"customerid\" = $1 AND \"week\" = $2\nORDER BY \"week\" DESC, 1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "customerid"
                },
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "week"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "week"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"customerspending_1\"\nWHERE \"week\" = $1\nORDER BY \"week\" DESC, \"customerid\"",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "week"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "customerid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"customerspending_1\"\nWHERE \"customerid\" = $1\nORDER BY \"week\" DESC",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "customerid"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"customerspending_1\"\nORDER BY \"week\" DESC, \"customerid\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Orders",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "time"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"orders_2\"\nWHERE \"time\" = $1\nORDER BY \"time\" DESC NULLS LAST, \"id\"",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "time"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"orders_2\"\nORDER BY \"time\" DESC NULLS LAST, \"id\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "id"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "time"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"id\", \"customerid\", \"time\", \"productid\", \"quantity\", \"unit_price\", \"discount\", \"total\", 1 AS \"__pk\"\nFROM \"orders_2\"\nWHERE \"id\" = $1 AND \"time\" = $2\nORDER BY \"time\" DESC NULLS LAST, 1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "id"
                },
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "time"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "id"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"orders_2\"\nWHERE \"id\" = $1\nORDER BY \"time\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "ProductRevenue",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "productid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"productrevenue_1\"\nWHERE \"productid\" = $1\nORDER BY \"week\" DESC",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "productid"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "week"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"productrevenue_1\"\nWHERE \"week\" = $1\nORDER BY \"week\" DESC, \"productid\"",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "week"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"productrevenue_1\"\nORDER BY \"week\" DESC, \"productid\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "productid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "week"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"productid\", \"week\", \"revenue\", 1 AS \"__pk\"\nFROM \"productrevenue_1\"\nWHERE \"productid\" = $1 AND \"week\" = $2\nORDER BY \"week\" DESC, 1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "productid"
                },
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "week"
                }
              ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [
      {
        "fieldName" : "CustomerSpending",
        "topic" : "customerspending_1",
        "sinkConfig" : { },
        "filters" : { }
      },
      {
        "fieldName" : "ProductRevenue",
        "topic" : "productrevenue_1",
        "sinkConfig" : { },
        "filters" : { }
      }
    ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "type CustomerSpending {\n  customerid: Float!\n  week: DateTime!\n  total: Float!\n  saved: Float!\n}\n\ntype CustomerSpendingResult {\n  customerid: Float!\n  week: DateTime!\n  total: Float!\n  saved: Float!\n}\n\n\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\ntype Orders {\n  id: Float!\n  customerid: Float!\n  time: DateTime!\n  productid: Float!\n  quantity: Float!\n  unit_price: Float!\n  discount: Float\n  total: Float!\n}\n\ntype ProductRevenue {\n  productid: Float!\n  week: DateTime!\n  revenue: Float!\n}\n\ntype ProductRevenueResult {\n  productid: Float!\n  week: DateTime!\n  revenue: Float!\n}\n\ntype Query {\n  CustomerSpending(customerid: Float, week: DateTime, limit: Int = 10, offset: Int = 0): [CustomerSpending!]\n  Orders(id: Float, time: DateTime, limit: Int = 10, offset: Int = 0): [Orders!]\n  ProductRevenue(productid: Float, week: DateTime, limit: Int = 10, offset: Int = 0): [ProductRevenue!]\n}\n\ntype Subscription {\n  CustomerSpending: CustomerSpendingResult!\n  ProductRevenue: ProductRevenueResult!\n}\n"
    }
  }
}
