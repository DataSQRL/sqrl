>>>pipeline_explain.txt
=== HighTempAlert
ID:     hightempalert_1
Type:   stream
Stage:  flink
Inputs: sensorreading_2
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - sensorid: BIGINT NOT NULL
 - temperature: DECIMAL(10, 5) NOT NULL
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalFilter(condition=[>($1, 50)])
  LogicalTableScan(table=[[sensorreading_2]])

=== kafka.HighTempAlert
ID:     hightempalert_1_1
Type:   export
Stage:  flink
Inputs: hightempalert_1

=== SecReading
ID:     secreading_1
Type:   stream
Stage:  flink
Inputs: sensorreading_2
Primary Key: sensorid, timeSec
Timestamp  : timeSec
Schema:
 - sensorid: BIGINT NOT NULL
 - timeSec: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - temperature: DECIMAL(38, 6) NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], temperature=[AVG($2)]) hints[TumbleAggregationHint options:[1, FUNCTION, 4, 1000, 0]]
  LogicalProject(sensorid=[$0], timeSec=[endOfSecond($3)], temperature=[$1], _uuid=[$2], event_time=[$3])
    LogicalTableScan(table=[[sensorreading_2]])

=== SensorMaxTemp
ID:     sensormaxtemp_1
Type:   state
Stage:  flink
Inputs: sensorreading_2
Primary Key: sensorid
Timestamp  : __timestamp
Schema:
 - sensorid: BIGINT NOT NULL
 - maxTemp: DECIMAL(10, 5) NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalAggregate(group=[{0}], maxTemp=[MAX($1)], __timestamp=[MAX($3)])
  LogicalTableScan(table=[[sensorreading_2]])

=== SensorReading
ID:     sensorreading_2
Type:   stream
Stage:  flink
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - sensorid: BIGINT NOT NULL
 - temperature: DECIMAL(10, 5) NOT NULL
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[sensorreading_1]])

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofsecond` AS 'com.datasqrl.time.EndOfSecond' LANGUAGE JAVA;",
    "CREATE TEMPORARY TABLE `sensorreading_1` (\n  `sensorid` BIGINT NOT NULL,\n  `temperature` DECIMAL(10, 5) NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL METADATA FROM 'timestamp',\n  WATERMARK FOR `event_time` AS `event_time` - INTERVAL '0.0' SECOND\n) WITH (\n  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',\n  'properties.auto.offset.reset' = 'earliest',\n  'connector' = 'kafka',\n  'format' = 'flexible-json',\n  'properties.group.id' = '${PROPERTIES_GROUP_ID}',\n  'topic' = 'sensors-mutation-addreading',\n  'scan.startup.mode' = 'group-offsets'\n);",
    "CREATE TEMPORARY TABLE `secreading_1` (\n  `sensorid` BIGINT NOT NULL,\n  `timeSec` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `temperature` DECIMAL(38, 6) NOT NULL,\n  PRIMARY KEY (`sensorid`, `timeSec`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'secreading_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `sensormaxtemp_1` (\n  `sensorid` BIGINT NOT NULL,\n  `maxTemp` DECIMAL(10, 5) NOT NULL,\n  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`sensorid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'sensormaxtemp_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `hightempalert_1_1` (\n  `sensorid` BIGINT NOT NULL,\n  `temperature` DECIMAL(10, 5) NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\n) WITH (\n  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',\n  'properties.auto.offset.reset' = 'earliest',\n  'connector' = 'kafka',\n  'format' = 'flexible-json',\n  'properties.group.id' = '${PROPERTIES_GROUP_ID}',\n  'topic' = 'hightempalert_1',\n  'scan.startup.mode' = 'group-offsets'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT `sensorid`, ENDOFSECOND(`event_time`) AS `timeSec`, `temperature`, `_uuid`, `event_time`\nFROM `sensorreading_1`;",
    "CREATE VIEW `table$2`\nAS\nSELECT `sensorid`, `window_time` AS `timeSec`, AVG(`temperature`) AS `temperature`\nFROM TABLE(TUMBLE(TABLE `table$1`, DESCRIPTOR(`event_time`), INTERVAL '1' SECOND(4), INTERVAL '0' SECOND(1))) AS `t0`\nGROUP BY `sensorid`, `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$3`\nAS\nSELECT `sensorid`, MAX(`temperature`) AS `maxTemp`, MAX(`event_time`) AS `__timestamp`\nFROM `sensorreading_1`\nGROUP BY `sensorid`;",
    "CREATE VIEW `table$4`\nAS\nSELECT *\nFROM `sensorreading_1`\nWHERE `temperature` > 50;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `secreading_1`\n(SELECT *\n FROM `table$2`)\n;\nINSERT INTO `sensormaxtemp_1`\n (SELECT *\n  FROM `table$3`)\n ;\n INSERT INTO `hightempalert_1_1`\n  (SELECT *\n   FROM `table$4`)\n  ;\n  END;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "kafka"
  ],
  "formats" : [
    "flexible-json"
  ],
  "compliedPlan" : "{\n  \"flinkVersion\" : \"1.19\",\n  \"nodes\" : [ {\n    \"id\" : 1298,\n    \"type\" : \"stream-exec-table-source-scan_1\",\n    \"scanTableSource\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`sensorreading_1`\"\n      }\n    },\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `temperature` DECIMAL(10, 5) NOT NULL, `_uuid` VARCHAR(2147483647) NOT NULL, `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>\",\n    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, sensorreading_1]], fields=[sensorid, temperature, _uuid, event_time])\",\n    \"inputProperties\" : [ ]\n  }, {\n    \"id\" : 1299,\n    \"type\" : \"stream-exec-watermark-assigner_1\",\n    \"watermarkExpr\" : {\n      \"kind\" : \"CALL\",\n      \"syntax\" : \"BINARY\",\n      \"internalName\" : \"$-$1\",\n      \"operands\" : [ {\n        \"kind\" : \"INPUT_REF\",\n        \"inputIndex\" : 3,\n        \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n      }, {\n        \"kind\" : \"LITERAL\",\n        \"value\" : \"0\",\n        \"type\" : \"INTERVAL SECOND(6) NOT NULL\"\n      } ],\n      \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n    },\n    \"rowtimeFieldIndex\" : 3,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DECIMAL(10, 5) NOT NULL\"\n      }, {\n        \"name\" : \"_uuid\",\n        \"fieldType\" : \"VARCHAR(2147483647) NOT NULL\"\n      }, {\n        \"name\" : \"event_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"WatermarkAssigner(rowtime=[event_time], watermark=[(event_time - 0:INTERVAL SECOND)])\"\n  }, {\n    \"id\" : 1300,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DECIMAL(10, 5) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 3,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DECIMAL(10, 5) NOT NULL\"\n      }, {\n        \"name\" : \"event_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[sensorid, temperature, event_time])\"\n  }, {\n    \"id\" : 1301,\n    \"type\" : \"stream-exec-local-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"temperature\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"TimeAttribute\",\n      \"window\" : {\n        \"type\" : \"TumblingWindow\",\n        \"size\" : \"PT1S\",\n        \"offset\" : \"PT0S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"timeAttributeIndex\" : 2,\n      \"isRowtime\" : true\n    },\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `sum$0` DECIMAL(38, 5), `count$1` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"LocalWindowAggregate(groupBy=[sensorid], window=[TUMBLE(time_col=[event_time], size=[1 s], offset=[0 ms])], select=[sensorid, AVG(temperature) AS (sum$0, count$1), slice_end('w$) AS $slice_end])\"\n  }, {\n    \"id\" : 1302,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `sum$0` DECIMAL(38, 5), `count$1` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"Exchange(distribution=[hash[sensorid]])\"\n  }, {\n    \"id\" : 1303,\n    \"type\" : \"stream-exec-global-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"temperature\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"SliceAttached\",\n      \"window\" : {\n        \"type\" : \"TumblingWindow\",\n        \"size\" : \"PT1S\",\n        \"offset\" : \"PT0S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"sliceEnd\" : 3,\n      \"isRowtime\" : true\n    },\n    \"namedWindowProperties\" : [ {\n      \"name\" : \"window_start\",\n      \"property\" : {\n        \"kind\" : \"WindowStart\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_end\",\n      \"property\" : {\n        \"kind\" : \"WindowEnd\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_time\",\n      \"property\" : {\n        \"kind\" : \"Rowtime\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    } ],\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"localAggInputRowType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DECIMAL(10, 5) NOT NULL\"\n      }, {\n        \"name\" : \"event_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"window_start\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_end\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"GlobalWindowAggregate(groupBy=[sensorid], window=[TUMBLE(slice_end=[$slice_end], size=[1 s], offset=[0 ms])], select=[sensorid, AVG((sum$0, count$1)) AS temperature, start('w$) AS window_start, end('w$) AS window_end, rowtime('w$) AS window_time])\"\n  }, {\n    \"id\" : 1304,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Calc(select=[sensorid, window_time AS timeSec, temperature])\"\n  }, {\n    \"id\" : 1305,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`secreading_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.secreading_1], fields=[sensorid, timeSec, temperature])\"\n  }, {\n    \"id\" : 1306,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DECIMAL(10, 5) NOT NULL\"\n    }, {\n      \"kind\" : \"CALL\",\n      \"syntax\" : \"SPECIAL\",\n      \"internalName\" : \"$CAST$1\",\n      \"operands\" : [ {\n        \"kind\" : \"INPUT_REF\",\n        \"inputIndex\" : 3,\n        \"type\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ],\n      \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `temperature` DECIMAL(10, 5) NOT NULL, `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>\",\n    \"description\" : \"Calc(select=[sensorid, temperature, CAST(event_time AS TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)) AS event_time])\"\n  }, {\n    \"id\" : 1307,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `temperature` DECIMAL(10, 5) NOT NULL, `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>\",\n    \"description\" : \"Exchange(distribution=[hash[sensorid]])\"\n  }, {\n    \"id\" : 1308,\n    \"type\" : \"stream-exec-group-aggregate_1\",\n    \"configuration\" : {\n      \"table.exec.mini-batch.enabled\" : \"false\",\n      \"table.exec.mini-batch.size\" : \"-1\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"maxTemp\",\n      \"internalName\" : \"$MAX$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(10, 5) NOT NULL\"\n    }, {\n      \"name\" : \"__timestamp\",\n      \"internalName\" : \"$MAX$1\",\n      \"argList\" : [ 2 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n    } ],\n    \"aggCallNeedRetractions\" : [ false, false ],\n    \"generateUpdateBefore\" : false,\n    \"needRetraction\" : false,\n    \"state\" : [ {\n      \"index\" : 0,\n      \"ttl\" : \"0 ms\",\n      \"name\" : \"groupAggregateState\"\n    } ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `maxTemp` DECIMAL(10, 5) NOT NULL, `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>\",\n    \"description\" : \"GroupAggregate(groupBy=[sensorid], select=[sensorid, MAX(temperature) AS maxTemp, MAX(event_time) AS __timestamp])\"\n  }, {\n    \"id\" : 1309,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`sensormaxtemp_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\", \"UPDATE_AFTER\" ],\n    \"inputUpsertKey\" : [ 0 ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `maxTemp` DECIMAL(10, 5) NOT NULL, `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>\",\n    \"description\" : \"Sink(table=[default_catalog.default_database.sensormaxtemp_1], fields=[sensorid, maxTemp, __timestamp])\"\n  }, {\n    \"id\" : 1310,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DECIMAL(10, 5) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 2,\n      \"type\" : \"VARCHAR(2147483647) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 3,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : {\n      \"kind\" : \"CALL\",\n      \"syntax\" : \"BINARY\",\n      \"internalName\" : \"$>$1\",\n      \"operands\" : [ {\n        \"kind\" : \"INPUT_REF\",\n        \"inputIndex\" : 1,\n        \"type\" : \"DECIMAL(10, 5) NOT NULL\"\n      }, {\n        \"kind\" : \"LITERAL\",\n        \"value\" : 50,\n        \"type\" : \"INT NOT NULL\"\n      } ],\n      \"type\" : \"BOOLEAN NOT NULL\"\n    },\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DECIMAL(10, 5) NOT NULL\"\n      }, {\n        \"name\" : \"_uuid\",\n        \"fieldType\" : \"VARCHAR(2147483647) NOT NULL\"\n      }, {\n        \"name\" : \"event_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[sensorid, temperature, _uuid, event_time], where=[(temperature > 50)])\"\n  }, {\n    \"id\" : 1311,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`hightempalert_1_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DECIMAL(10, 5) NOT NULL\"\n      }, {\n        \"name\" : \"_uuid\",\n        \"fieldType\" : \"VARCHAR(2147483647) NOT NULL\"\n      }, {\n        \"name\" : \"event_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.hightempalert_1_1], fields=[sensorid, temperature, _uuid, event_time])\"\n  } ],\n  \"edges\" : [ {\n    \"source\" : 1298,\n    \"target\" : 1299,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1299,\n    \"target\" : 1300,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1300,\n    \"target\" : 1301,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1301,\n    \"target\" : 1302,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1302,\n    \"target\" : 1303,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1303,\n    \"target\" : 1304,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1304,\n    \"target\" : 1305,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1299,\n    \"target\" : 1306,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1306,\n    \"target\" : 1307,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1307,\n    \"target\" : 1308,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1308,\n    \"target\" : 1309,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1299,\n    \"target\" : 1310,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1310,\n    \"target\" : 1311,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  } ]\n}"
}
>>>kafka.json
{
  "topics" : [
    {
      "name" : "hightempalert_1",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    },
    {
      "name" : "sensors-mutation-addreading",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    }
  ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "secreading_1",
      "columns" : [
        "\"sensorid\" BIGINT NOT NULL",
        "\"timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"temperature\" NUMERIC NOT NULL"
      ],
      "primaryKeys" : [
        "\"sensorid\"",
        "\"timeSec\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS secreading_1 (\"sensorid\" BIGINT NOT NULL,\"timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL,\"temperature\" NUMERIC NOT NULL , PRIMARY KEY (\"sensorid\",\"timeSec\"));"
    },
    {
      "name" : "sensormaxtemp_1",
      "columns" : [
        "\"sensorid\" BIGINT NOT NULL",
        "\"maxTemp\" NUMERIC NOT NULL",
        "\"__timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"sensorid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS sensormaxtemp_1 (\"sensorid\" BIGINT NOT NULL,\"maxTemp\" NUMERIC NOT NULL,\"__timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"sensorid\"));"
    }
  ],
  "views" : [
    {
      "name" : "SensorMaxTemp",
      "sql" : "CREATE OR REPLACE VIEW \"SensorMaxTemp\"(\"sensorid\", \"maxTemp\", \"__timestamp\") AS SELECT *\nFROM \"sensormaxtemp_1\"\nORDER BY \"sensorid\";"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SecReading",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "sensorid"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"secreading_1\"\nWHERE \"sensorid\" = $1\nORDER BY \"timeSec\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "sensorid"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SensorMaxTemp",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"sensormaxtemp_1\"\nORDER BY \"sensorid\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "sensorid"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"sensormaxtemp_1\"\nWHERE \"sensorid\" = $1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "sensorid"
                }
              ]
            }
          }
        ]
      }
    ],
    "mutations" : [
      {
        "type" : "kafka",
        "fieldName" : "AddReading",
        "topic" : "sensors-mutation-addreading",
        "sinkConfig" : { }
      }
    ],
    "subscriptions" : [
      {
        "fieldName" : "HighTempAlert",
        "topic" : "hightempalert_1",
        "sinkConfig" : { },
        "filters" : {
          "sensorid" : "sensorid"
        }
      }
    ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "type Query {\n  SecReading(sensorid: Int!): [SecReading!]\n  SensorMaxTemp(sensorid: Int): [SensorMaxTemp!]\n}\n\ntype SecReading {\n  sensorid: Int!\n  timeSec: String!\n  temperature: Float!\n}\n\ntype SensorMaxTemp {\n  sensorid: Int!\n  maxTemp: Float!\n}\n\ntype Mutation {\n  AddReading(metric: ReadingInput!): CreatedReading\n}\n\ninput ReadingInput {\n  sensorid: Int!\n  temperature: Float!\n}\n\ntype CreatedReading {\n  event_time: String!\n  sensorid: Int!\n}\n\ntype Subscription {\n  HighTempAlert(sensorid: Int): HighTempAlert\n}\n\ntype HighTempAlert {\n  sensorid: Int!\n  timeSec: String!\n  temperature: Float!\n}"
    }
  }
}
