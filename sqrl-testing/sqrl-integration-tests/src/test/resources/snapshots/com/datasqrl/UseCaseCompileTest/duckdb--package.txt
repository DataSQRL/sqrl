>>>pipeline_explain.txt
=== _Applications
ID:     _applications_2
Type:   stream
Stage:  flink
Primary Key: id, updated_at
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - customer_id: BIGINT NOT NULL
 - loan_type_id: BIGINT NOT NULL
 - amount: DOUBLE NOT NULL
 - duration: BIGINT NOT NULL
 - application_date: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[_applications_1]])

=== _MyApplications1
ID:     _myapplications1_1
Type:   stream
Stage:  flink
Inputs: _applications_2
Primary Key: id, updated_at
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - customer_id: BIGINT NOT NULL
 - loan_type_id: BIGINT NOT NULL
 - amount: DOUBLE NOT NULL
 - duration: BIGINT NOT NULL
 - application_date: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[_applications_2]])

=== _MyApplications2
ID:     _myapplications2_1
Type:   stream
Stage:  flink
Inputs: _applications_2
Primary Key: id, updated_at
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - customer_id: BIGINT NOT NULL
 - loan_type_id: BIGINT NOT NULL
 - amount: DOUBLE NOT NULL
 - duration: BIGINT NOT NULL
 - application_date: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[_applications_2]])

=== _MyApplications3
ID:     _myapplications3_1
Type:   stream
Stage:  flink
Inputs: _applications_2
Primary Key: id, updated_at
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - customer_id: BIGINT NOT NULL
 - loan_type_id: BIGINT NOT NULL
 - amount: DOUBLE NOT NULL
 - duration: BIGINT NOT NULL
 - application_date: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[_applications_2]])

=== MyTable1
ID:     mytable1_1
Type:   stream
Stage:  iceberg
Inputs: _myapplications1_1
Primary Key: id, _updated_at
Timestamp  : _updated_at
Schema:
 - id: BIGINT NOT NULL
 - hello: CHAR(11) CHARACTER SET "UTF-16LE" NOT NULL
 - _updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(id=[$0], hello=['hello world'], _updated_at=[$6])
  LogicalTableScan(table=[[_myapplications1_1]])

=== MyTable2
ID:     mytable2_1
Type:   stream
Stage:  iceberg
Inputs: _myapplications2_1
Primary Key: id, _updated_at
Timestamp  : _updated_at
Schema:
 - id: BIGINT NOT NULL
 - hello: CHAR(11) CHARACTER SET "UTF-16LE" NOT NULL
 - _updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(id=[$0], hello=['hello world'], _updated_at=[$6])
  LogicalTableScan(table=[[_myapplications2_1]])

=== MyTable3
ID:     mytable3_1
Type:   stream
Stage:  postgres
Inputs: _myapplications3_1
Primary Key: id, _updated_at
Timestamp  : _updated_at
Schema:
 - id: BIGINT NOT NULL
 - hello: CHAR(11) CHARACTER SET "UTF-16LE" NOT NULL
 - _updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(id=[$0], hello=['hello world'], _updated_at=[$6])
  LogicalTableScan(table=[[_myapplications3_1]])

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY TABLE `_applications_1` (\n  `id` BIGINT NOT NULL,\n  `customer_id` BIGINT NOT NULL,\n  `loan_type_id` BIGINT NOT NULL,\n  `amount` DOUBLE NOT NULL,\n  `duration` BIGINT NOT NULL,\n  `application_date` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`, `updated_at`) NOT ENFORCED,\n  WATERMARK FOR `updated_at` AS `updated_at` - INTERVAL '0.001' SECOND\n) WITH (\n  'format' = 'flexible-json',\n  'path' = '${DATA_PATH}/applications.jsonl',\n  'source.monitor-interval' = '1',\n  'connector' = 'filesystem'\n);",
    "CREATE TEMPORARY TABLE `_myapplications1_1` (\n  `id` BIGINT NOT NULL,\n  `customer_id` BIGINT NOT NULL,\n  `loan_type_id` BIGINT NOT NULL,\n  `amount` DOUBLE NOT NULL,\n  `duration` BIGINT NOT NULL,\n  `application_date` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`, `updated_at`) NOT ENFORCED\n)\nPARTITIONED BY (`id`)\nWITH (\n  'catalog-type' = 'hadoop',\n  'warehouse' = '${HOME}/duckdb',\n  'catalog-name' = 'mydatabase',\n  'connector' = 'iceberg',\n  'catalog-table' = '_myapplications1_1'\n);",
    "CREATE TEMPORARY TABLE `_myapplications2_1` (\n  `id` BIGINT NOT NULL,\n  `customer_id` BIGINT NOT NULL,\n  `loan_type_id` BIGINT NOT NULL,\n  `amount` DOUBLE NOT NULL,\n  `duration` BIGINT NOT NULL,\n  `application_date` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`, `updated_at`) NOT ENFORCED\n) WITH (\n  'catalog-type' = 'hadoop',\n  'warehouse' = '${HOME}/duckdb',\n  'catalog-name' = 'mydatabase',\n  'connector' = 'iceberg',\n  'catalog-table' = '_myapplications2_1'\n);",
    "CREATE TEMPORARY TABLE `_myapplications3_1` (\n  `id` BIGINT NOT NULL,\n  `customer_id` BIGINT NOT NULL,\n  `loan_type_id` BIGINT NOT NULL,\n  `amount` DOUBLE NOT NULL,\n  `duration` BIGINT NOT NULL,\n  `application_date` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`, `updated_at`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = '_myapplications3_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT *\nFROM `_applications_1`;",
    "CREATE VIEW `table$2`\nAS\nSELECT *\nFROM `_applications_1`;",
    "CREATE VIEW `table$3`\nAS\nSELECT *\nFROM `_applications_1`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `_myapplications1_1`\n(SELECT *\n FROM `table$1`)\n;\nINSERT INTO `_myapplications2_1`\n (SELECT *\n  FROM `table$2`)\n ;\n INSERT INTO `_myapplications3_1`\n  (SELECT *\n   FROM `table$3`)\n  ;\n  END;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "iceberg",
    "filesystem"
  ],
  "formats" : [
    "flexible-json"
  ]
}
>>>iceberg.json
{
  "ddl" : [
    {
      "name" : "_myapplications1_1",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"customer_id\" BIGINT NOT NULL",
        "\"loan_type_id\" BIGINT NOT NULL",
        "\"amount\" DOUBLE PRECISION NOT NULL",
        "\"duration\" BIGINT NOT NULL",
        "\"application_date\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"id\"",
        "\"updated_at\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS _myapplications1_1 (\"id\" BIGINT NOT NULL,\"customer_id\" BIGINT NOT NULL,\"loan_type_id\" BIGINT NOT NULL,\"amount\" DOUBLE PRECISION NOT NULL,\"duration\" BIGINT NOT NULL,\"application_date\" TIMESTAMP WITH TIME ZONE NOT NULL,\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"id\",\"updated_at\"));"
    },
    {
      "name" : "_myapplications2_1",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"customer_id\" BIGINT NOT NULL",
        "\"loan_type_id\" BIGINT NOT NULL",
        "\"amount\" DOUBLE PRECISION NOT NULL",
        "\"duration\" BIGINT NOT NULL",
        "\"application_date\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"id\"",
        "\"updated_at\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS _myapplications2_1 (\"id\" BIGINT NOT NULL,\"customer_id\" BIGINT NOT NULL,\"loan_type_id\" BIGINT NOT NULL,\"amount\" DOUBLE PRECISION NOT NULL,\"duration\" BIGINT NOT NULL,\"application_date\" TIMESTAMP WITH TIME ZONE NOT NULL,\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"id\",\"updated_at\"));"
    }
  ],
  "engines" : {
    "duckdb" : {
      "ddl" : [
        {
          "name" : "_myapplications1_1",
          "columns" : [
            "\"id\" BIGINT NOT NULL",
            "\"customer_id\" BIGINT NOT NULL",
            "\"loan_type_id\" BIGINT NOT NULL",
            "\"amount\" DOUBLE PRECISION NOT NULL",
            "\"duration\" BIGINT NOT NULL",
            "\"application_date\" TIMESTAMP WITH TIME ZONE NOT NULL",
            "\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL"
          ],
          "primaryKeys" : [
            "\"id\"",
            "\"updated_at\""
          ],
          "sql" : "CREATE TABLE IF NOT EXISTS _myapplications1_1 (\"id\" BIGINT NOT NULL,\"customer_id\" BIGINT NOT NULL,\"loan_type_id\" BIGINT NOT NULL,\"amount\" DOUBLE PRECISION NOT NULL,\"duration\" BIGINT NOT NULL,\"application_date\" TIMESTAMP WITH TIME ZONE NOT NULL,\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"id\",\"updated_at\"));"
        },
        {
          "name" : "_myapplications2_1",
          "columns" : [
            "\"id\" BIGINT NOT NULL",
            "\"customer_id\" BIGINT NOT NULL",
            "\"loan_type_id\" BIGINT NOT NULL",
            "\"amount\" DOUBLE PRECISION NOT NULL",
            "\"duration\" BIGINT NOT NULL",
            "\"application_date\" TIMESTAMP WITH TIME ZONE NOT NULL",
            "\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL"
          ],
          "primaryKeys" : [
            "\"id\"",
            "\"updated_at\""
          ],
          "sql" : "CREATE TABLE IF NOT EXISTS _myapplications2_1 (\"id\" BIGINT NOT NULL,\"customer_id\" BIGINT NOT NULL,\"loan_type_id\" BIGINT NOT NULL,\"amount\" DOUBLE PRECISION NOT NULL,\"duration\" BIGINT NOT NULL,\"application_date\" TIMESTAMP WITH TIME ZONE NOT NULL,\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"id\",\"updated_at\"));"
        }
      ],
      "views" : [ ]
    }
  }
}
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "_myapplications3_1",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"customer_id\" BIGINT NOT NULL",
        "\"loan_type_id\" BIGINT NOT NULL",
        "\"amount\" DOUBLE PRECISION NOT NULL",
        "\"duration\" BIGINT NOT NULL",
        "\"application_date\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"id\"",
        "\"updated_at\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS _myapplications3_1 (\"id\" BIGINT NOT NULL,\"customer_id\" BIGINT NOT NULL,\"loan_type_id\" BIGINT NOT NULL,\"amount\" DOUBLE PRECISION NOT NULL,\"duration\" BIGINT NOT NULL,\"application_date\" TIMESTAMP WITH TIME ZONE NOT NULL,\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"id\",\"updated_at\"));"
    }
  ],
  "views" : [
    {
      "name" : "MyTable3",
      "sql" : "CREATE OR REPLACE VIEW \"MyTable3\"(\"id\", \"hello\", \"_updated_at\") AS SELECT \"id\", 'hello world' AS \"hello\", \"updated_at\" AS \"_updated_at\"\nFROM \"_myapplications3_1\"\nORDER BY \"updated_at\" DESC NULLS LAST, \"id\";"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "MyTable1",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "id"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedDuckDbQuery",
              "type" : "PagedDuckDbQuery",
              "sql" : "SELECT *\nFROM (SELECT \"id\", 'hello world' AS \"hello\", \"updated_at\" AS \"_updated_at\"\n  FROM ICEBERG_SCAN('${HOME}/duckdb/default_database/_myapplications1_1', ALLOW_MOVED_PATHS = TRUE)) AS \"t0\"\nWHERE \"id\" = $1\nORDER BY \"_updated_at\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "id"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedDuckDbQuery",
              "type" : "PagedDuckDbQuery",
              "sql" : "SELECT \"id\", 'hello world' AS \"hello\", \"updated_at\" AS \"_updated_at\"\nFROM ICEBERG_SCAN('${HOME}/duckdb/default_database/_myapplications1_1', ALLOW_MOVED_PATHS = TRUE)\nORDER BY \"updated_at\" DESC NULLS LAST, \"id\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "MyTable2",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedDuckDbQuery",
              "type" : "PagedDuckDbQuery",
              "sql" : "SELECT \"id\", 'hello world' AS \"hello\", \"updated_at\" AS \"_updated_at\"\nFROM ICEBERG_SCAN('${HOME}/duckdb/default_database/_myapplications2_1', ALLOW_MOVED_PATHS = TRUE)\nORDER BY \"updated_at\" DESC NULLS LAST, \"id\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "id"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedDuckDbQuery",
              "type" : "PagedDuckDbQuery",
              "sql" : "SELECT *\nFROM (SELECT \"id\", 'hello world' AS \"hello\", \"updated_at\" AS \"_updated_at\"\n  FROM ICEBERG_SCAN('${HOME}/duckdb/default_database/_myapplications2_1', ALLOW_MOVED_PATHS = TRUE)) AS \"t0\"\nWHERE \"id\" = $1\nORDER BY \"_updated_at\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "MyTable3",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "id"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM (SELECT \"id\", 'hello world' AS \"hello\", \"updated_at\" AS \"_updated_at\"\n  FROM \"_myapplications3_1\") AS \"t\"\nWHERE \"id\" = $1\nORDER BY \"_updated_at\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "id"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"id\", 'hello world' AS \"hello\", \"updated_at\" AS \"_updated_at\"\nFROM \"_myapplications3_1\"\nORDER BY \"updated_at\" DESC NULLS LAST, \"id\"",
              "parameters" : [ ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\ntype MyTable1 {\n  id: Float!\n  hello: String!\n}\n\ntype MyTable2 {\n  id: Float!\n  hello: String!\n}\n\ntype MyTable3 {\n  id: Float!\n  hello: String!\n}\n\ntype Query {\n  MyTable1(id: Float, limit: Int = 10, offset: Int = 0): [MyTable1!]\n  MyTable2(id: Float, limit: Int = 10, offset: Int = 0): [MyTable2!]\n  MyTable3(id: Float, limit: Int = 10, offset: Int = 0): [MyTable3!]\n}\n"
    }
  }
}
