>>>pipeline_explain.txt
=== SecReading
ID:     secreading$1
Type:   stream
Stage:  streams
Inputs: sensorreading$2
Primary Key: sensorid, timeSec
Timestamp  : timeSec
Schema:
 - sensorid: BIGINT NOT NULL
 - timeSec: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - temp: DOUBLE NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], temp=[AVG($2)]) hints[TumbleAggregationHint options:[1, FUNCTION, 3, 1000, 0]]
  LogicalProject(sensorid=[$0], timeSec=[endOfSecond($1)], temperature=[$2], time=[$1])
    LogicalTableScan(table=[[sensorreading$2]])

=== SensorMaxTemp
ID:     sensormaxtemp$1
Type:   state
Stage:  streams
Inputs: secreading$1
Primary Key: sensorid
Timestamp  : _timeSec
Schema:
 - sensorid: BIGINT NOT NULL
 - maxTemp: DOUBLE NOT NULL
 - _timeSec: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=sensorid limit=1 sort=#2: _timeSec TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalProject(sensorid=[$0], maxTemp=[$2], _timeSec=[$1])
  LogicalAggregate(group=[{0, 1}], maxTemp=[MAX($2)]) hints[SlidingAggregationHint options:[1, 60000, 1200]]
    LogicalTableScan(table=[[secreading$1]])

=== SensorReading
ID:     sensorreading$2
Type:   stream
Stage:  streams
Primary Key: sensorid, time
Timestamp  : time
Schema:
 - sensorid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - temperature: DOUBLE NOT NULL
 - humidity: DOUBLE NOT NULL
Plan:
LogicalTableScan(table=[[sensorreading$1]], hints=[[[WatermarkHint inheritPath:[] options:[1]]]]) hints[WatermarkHint options:[1]]

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofsecond` AS 'com.datasqrl.time.EndOfSecond' LANGUAGE JAVA;",
    "CREATE TEMPORARY TABLE `sensorreading$1` (\n  `sensorid` BIGINT NOT NULL,\n  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `temperature` DOUBLE NOT NULL,\n  `humidity` DOUBLE NOT NULL,\n  PRIMARY KEY (`sensorid`, `time`) NOT ENFORCED,\n  WATERMARK FOR `time` AS (`time` - INTERVAL '0.001' SECOND)\n) WITH (\n  'format' = 'csv',\n  'path' = '/data/sensorreading.csv.gz',\n  'source.monitor-interval' = '1',\n  'connector' = 'filesystem'\n);",
    "CREATE TEMPORARY TABLE `secreading$1` (\n  `sensorid` BIGINT NOT NULL,\n  `timeSec` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `temp` DOUBLE NOT NULL,\n  PRIMARY KEY (`sensorid`, `timeSec`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'secreading$1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `sensormaxtemp$1` (\n  `sensorid` BIGINT NOT NULL,\n  `maxTemp` DOUBLE NOT NULL,\n  `_timeSec` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`sensorid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'sensormaxtemp$1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT `sensorid`, ENDOFSECOND(`time`) AS `timeSec`, `temperature`, `time`\nFROM `sensorreading$1`;",
    "CREATE VIEW `table$2`\nAS\nSELECT `sensorid`, ENDOFSECOND(`time`) AS `timeSec`, `temperature`, `time`\nFROM `sensorreading$1`;",
    "CREATE VIEW `table$3`\nAS\nSELECT `sensorid`, `window_time` AS `timeSec`, AVG(`temperature`) AS `temp`\nFROM TABLE(TUMBLE((TABLE `table$2`), (DESCRIPTOR(`time`)), INTERVAL '1' SECOND(4), INTERVAL '0' SECOND(1))) AS `t0`\nGROUP BY `sensorid`, `window_start`, `window_end`, `window_time`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `secreading$1`\n(SELECT `sensorid`, `window_time` AS `timeSec`, AVG(`temperature`) AS `temp`\nFROM TABLE(TUMBLE((TABLE `table$1`), (DESCRIPTOR(`time`)), INTERVAL '1' SECOND(4), INTERVAL '0' SECOND(1))) AS `t0`\nGROUP BY `sensorid`, `window_start`, `window_end`, `window_time`)\n;\nINSERT INTO `sensormaxtemp$1`\n(SELECT `sensorid`, MAX(`temp`) AS `maxTemp`, `window_time` AS `_timeSec`\nFROM TABLE(HOP((TABLE `table$3`), (DESCRIPTOR(`timeSec`)), INTERVAL '1.2' SECOND(4), INTERVAL '60' SECOND(5))) AS `t3`\nGROUP BY `sensorid`, `window_start`, `window_end`, `window_time`)\n;\nEND;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "filesystem"
  ],
  "formats" : [
    "csv"
  ]
}
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "secreading$1",
      "columns" : [
        "\"sensorid\" BIGINT NOT NULL",
        "\"timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"temp\" DOUBLE PRECISION NOT NULL"
      ],
      "primaryKeys" : [
        "\"sensorid\"",
        "\"timeSec\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS secreading$1 (\"sensorid\" BIGINT NOT NULL,\"timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL,\"temp\" DOUBLE PRECISION NOT NULL , PRIMARY KEY (\"sensorid\",\"timeSec\"));"
    },
    {
      "name" : "sensormaxtemp$1",
      "columns" : [
        "\"sensorid\" BIGINT NOT NULL",
        "\"maxTemp\" DOUBLE PRECISION NOT NULL",
        "\"_timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"sensorid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS sensormaxtemp$1 (\"sensorid\" BIGINT NOT NULL,\"maxTemp\" DOUBLE PRECISION NOT NULL,\"_timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"sensorid\"));"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SecReading",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "sensorid"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"secreading$1\"\nWHERE \"sensorid\" = $1\nORDER BY \"timeSec\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "sensorid"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SensorMaxTemp",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"sensormaxtemp$1\"\nORDER BY \"sensorid\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "sensorid"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT \"sensorid\", \"maxTemp\", \"_timeSec\", 1 AS \"__pk\"\nFROM \"sensormaxtemp$1\"\nWHERE \"sensorid\" = $1\nORDER BY 1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "sensorid"
                }
              ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "type Query {\n  SecReading(sensorid: Int!): [SecReading!]\n  SensorMaxTemp(sensorid: Int): [SensorMaxTemp!]\n}\n\ntype SecReading {\n  sensorid: Int!\n  timeSec: String!\n  temp: Float!\n}\n\ntype SensorMaxTemp {\n  sensorid: Int!\n  maxTemp: Float!\n}\n"
    }
  }
}
