>>>pipeline_explain.txt
=== MyAsyncTable
ID:     default_catalog.default_database.MyAsyncTable
Type:   state
Stage:  flink
Annotations:
 - sort: [0 ASC-nulls-first]
Primary Key: val
Timestamp  : -
Schema:
 - val: CHAR(1) CHARACTER SET "UTF-16LE" NOT NULL
 - myFnc: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
Plan:
LogicalProject(val=[$0], myFnc=[MyAsyncScalarFunction($0, $1)])
  LogicalValues(tuples=[[{ '1', 1 }, { '2', 2 }, { '3', 3 }]])
SQL: CREATE VIEW MyAsyncTable AS  SELECT val, MyAsyncScalarFunction(val, ival) AS myFnc
           FROM (VALUES (('1'), (1)), (('2'), (2)), (('3'), (3))) AS t(val, ival) ORDER BY val;

=== MyTable
ID:     default_catalog.default_database.MyTable
Type:   state
Stage:  flink
Annotations:
 - sort: [0 ASC-nulls-first]
Primary Key: val
Timestamp  : -
Schema:
 - val: INTEGER NOT NULL
 - myFnc: BIGINT
Plan:
LogicalProject(val=[$0], myFnc=[MyScalarFunction(CAST($0):BIGINT, CAST($0):BIGINT)])
  LogicalValues(tuples=[[{ 1 }, { 2 }, { 3 }, { 4 }, { 5 }, { 6 }, { 7 }, { 8 }, { 9 }, { 10 }]])
SQL: CREATE VIEW MyTable AS  SELECT val, MyScalarFunction(val, val) AS myFnc
           FROM (VALUES ((1)), ((2)), ((3)), ((4)), ((5)),
            ((6)), ((7)), ((8)), ((9)), ((10))) AS t(val) ORDER BY val;

=== MyTableAnother
ID:     default_catalog.default_database.MyTableAnother
Type:   state
Stage:  flink
Annotations:
 - sort: [0 ASC-nulls-first]
Primary Key: val
Timestamp  : -
Schema:
 - val: INTEGER NOT NULL
 - myFnc: BIGINT
Plan:
LogicalProject(val=[$0], myFnc=[AnotherFunction(CAST($0):BIGINT, CAST($0):BIGINT)])
  LogicalValues(tuples=[[{ 1 }, { 2 }]])
SQL: CREATE VIEW MyTableAnother AS  SELECT val, AnotherFunction(val, val) AS myFnc
           FROM (VALUES ((1)), ((2))) AS t(val) ORDER BY val;

>>>flink-sql-no-functions.sql
CREATE VIEW `MyTable`
AS
SELECT `val`, `MyScalarFunction`(`val`, `val`) AS `myFnc`
FROM (VALUES ROW(1),
   ROW(2),
   ROW(3),
   ROW(4),
   ROW(5),
   ROW(6),
   ROW(7),
   ROW(8),
   ROW(9),
   ROW(10)) AS `t` (`val`);
CREATE VIEW `MyTableAnother`
AS
SELECT `val`, `AnotherFunction`(`val`, `val`) AS `myFnc`
FROM (VALUES ROW(1),
   ROW(2)) AS `t` (`val`);
CREATE VIEW `MyAsyncTable`
AS
SELECT `val`, `MyAsyncScalarFunction`(`val`, `ival`) AS `myFnc`
FROM (VALUES ROW('1', 1),
   ROW('2', 2),
   ROW('3', 3)) AS `t` (`val`, `ival`);
CREATE VIEW `MyAsyncTableTest`
AS
SELECT *
FROM `MyAsyncTable`;
CREATE TABLE `MyAsyncTable_1` (
  `val` CHAR(1) CHARACTER SET `UTF-16LE` NOT NULL,
  `myFnc` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`val`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'MyAsyncTable_1',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `MyTable_2` (
  `val` INTEGER NOT NULL,
  `myFnc` BIGINT,
  PRIMARY KEY (`val`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'MyTable_2',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `MyTableAnother_3` (
  `val` INTEGER NOT NULL,
  `myFnc` BIGINT,
  PRIMARY KEY (`val`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'MyTableAnother_3',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`MyAsyncTable_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`MyAsyncTable`)
;
INSERT INTO `default_catalog`.`default_database`.`MyTable_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`MyTable`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`MyTableAnother_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`MyTableAnother`)
  ;
  END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres-schema.sql
CREATE TABLE IF NOT EXISTS "MyAsyncTable_1" ("val" TEXT NOT NULL, "myFnc" TEXT  , PRIMARY KEY ("val"));
CREATE TABLE IF NOT EXISTS "MyTable_2" ("val" INTEGER NOT NULL, "myFnc" BIGINT  , PRIMARY KEY ("val"));
CREATE TABLE IF NOT EXISTS "MyTableAnother_3" ("val" INTEGER NOT NULL, "myFnc" BIGINT  , PRIMARY KEY ("val"))
>>>postgres-views.sql
CREATE OR REPLACE VIEW "MyAsyncTable"("val", "myFnc") AS SELECT *
FROM (SELECT "val", "myFnc"
  FROM "MyAsyncTable_1"
  ORDER BY "val" NULLS FIRST) AS "t1";
CREATE OR REPLACE VIEW "MyTable"("val", "myFnc") AS SELECT *
FROM (SELECT "val", "myFnc"
  FROM "MyTable_2"
  ORDER BY "val" NULLS FIRST) AS "t1";
CREATE OR REPLACE VIEW "MyTableAnother"("val", "myFnc") AS SELECT *
FROM (SELECT "val", "myFnc"
  FROM "MyTableAnother_3"
  ORDER BY "val" NULLS FIRST) AS "t1"
>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "MyAsyncTable",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM (SELECT \"val\", \"myFnc\"\n  FROM \"MyAsyncTable_1\"\n  ORDER BY \"val\" NULLS FIRST) AS \"t\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "MyTable",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM (SELECT \"val\", \"myFnc\"\n  FROM \"MyTable_2\"\n  ORDER BY \"val\" NULLS FIRST) AS \"t\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "MyTableAnother",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM (SELECT \"val\", \"myFnc\"\n  FROM \"MyTableAnother_3\"\n  ORDER BY \"val\" NULLS FIRST) AS \"t\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "schema" : "\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype MyAsyncTable {\n  val: String!\n  myFnc: String\n}\n\ntype MyTable {\n  val: Int!\n  myFnc: GraphQLBigInteger\n}\n\ntype MyTableAnother {\n  val: Int!\n  myFnc: GraphQLBigInteger\n}\n\ntype Query {\n  MyAsyncTable(limit: Int = 10, offset: Int = 0): [MyAsyncTable!]\n  MyTable(limit: Int = 10, offset: Int = 0): [MyTable!]\n  MyTableAnother(limit: Int = 10, offset: Int = 0): [MyTableAnother!]\n}\n"
    }
  }
}
