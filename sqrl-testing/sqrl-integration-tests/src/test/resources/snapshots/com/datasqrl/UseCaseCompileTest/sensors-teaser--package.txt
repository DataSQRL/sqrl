>>>pipeline_explain.txt
=== SecReading
ID:     default_catalog.default_database.SecReading
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.SensorReading
Annotations:
 - features: STREAM_WINDOW_AGGREGATION (feature)
 - stream-root: SensorReading
 - sort: [1 DESC-nulls-last]
Primary Key: -
Timestamp  : timeSec
Schema:
 - sensorid: BIGINT NOT NULL
 - timeSec: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - temp: DOUBLE NOT NULL
Plan:
LogicalProject(sensorid=[$0], timeSec=[$3], temp=[$4])
  LogicalAggregate(group=[{0, 1, 2, 3}], temp=[AVG($4)])
    LogicalProject(sensorid=[$0], window_start=[$5], window_end=[$6], timeSec=[$7], temperature=[$2])
      LogicalTableFunctionScan(invocation=[TUMBLE(DESCRIPTOR($4), 1000:INTERVAL SECOND)], rowType=[RecordType(BIGINT sensorid, BIGINT time, DOUBLE temperature, DOUBLE humidity, TIMESTAMP_LTZ(3) *ROWTIME* timestamp, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP_LTZ(3) *ROWTIME* window_time)])
        LogicalProject(sensorid=[$0], time=[$1], temperature=[$2], humidity=[$3], timestamp=[$4])
          LogicalTableScan(table=[[default_catalog, default_database, SensorReading]])
SQL: CREATE VIEW SecReading AS  SELECT sensorid, window_time as timeSec,
        avg(temperature) as temp
    FROM TABLE(TUMBLE(TABLE SensorReading, DESCRIPTOR(`timestamp`), INTERVAL '1' SECONDS))
    GROUP BY sensorid, window_start, window_end, window_time
    ORDER BY timeSec DESC;

=== SensorMaxTemp
ID:     default_catalog.default_database.SensorMaxTemp
Type:   state
Stage:  flink
Inputs: default_catalog.default_database._SensorMaxTempWindow
Annotations:
 - mostRecentDistinct: true
 - stream-root: SensorReading
Primary Key: sensorid
Timestamp  : window_time
Schema:
 - sensorid: BIGINT NOT NULL
 - window_time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - maxTemp: DOUBLE NOT NULL
Plan:
LogicalProject(sensorid=[$0], window_time=[$1], maxTemp=[$2])
  LogicalFilter(condition=[=($3, 1)])
    LogicalProject(sensorid=[$0], window_time=[$1], maxTemp=[$2], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, _SensorMaxTempWindow]])
SQL: CREATE VIEW `SensorMaxTemp`
AS
SELECT `sensorid`, `window_time`, `maxTemp`
FROM (SELECT `sensorid`, `window_time`, `maxTemp`, ROW_NUMBER() OVER (PARTITION BY `sensorid` ORDER BY `window_time` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`_SensorMaxTempWindow`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== SensorReading
ID:     default_catalog.default_database.SensorReading
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.SensorReading__base
Annotations:
 - stream-root: SensorReading
Primary Key: sensorid, time
Timestamp  : timestamp
Schema:
 - sensorid: BIGINT NOT NULL
 - time: BIGINT NOT NULL
 - temperature: DOUBLE NOT NULL
 - humidity: DOUBLE NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
  LogicalProject(sensorid=[$0], time=[$1], temperature=[$2], humidity=[$3], timestamp=[COALESCE(TO_TIMESTAMP_LTZ($1, 3), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
    LogicalTableScan(table=[[default_catalog, default_database, SensorReading]])
SQL: CREATE VIEW `SensorReading__view`
AS
SELECT `SensorReading`.`sensorid`, `SensorReading`.`time`, `SensorReading`.`temperature`, `SensorReading`.`humidity`, `SensorReading`.`timestamp`
FROM `default_catalog`.`default_database`.`SensorReading` AS `SensorReading`
=== _SensorMaxTempWindow
ID:     default_catalog.default_database._SensorMaxTempWindow
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.SecReading
Annotations:
 - features: STREAM_WINDOW_AGGREGATION (feature)
 - stream-root: SensorReading
Primary Key: -
Timestamp  : window_time
Schema:
 - sensorid: BIGINT NOT NULL
 - window_time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - maxTemp: DOUBLE NOT NULL
Plan:
LogicalProject(sensorid=[$0], window_time=[$3], maxTemp=[$4])
  LogicalAggregate(group=[{0, 1, 2, 3}], maxTemp=[MAX($4)])
    LogicalProject(sensorid=[$0], window_start=[$3], window_end=[$4], window_time=[$5], temp=[$2])
      LogicalTableFunctionScan(invocation=[HOP(DESCRIPTOR($1), 5000:INTERVAL SECOND, 60000:INTERVAL MINUTE)], rowType=[RecordType(BIGINT sensorid, TIMESTAMP_LTZ(3) *ROWTIME* timeSec, DOUBLE temp, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP_LTZ(3) *ROWTIME* window_time)])
        LogicalProject(sensorid=[$0], timeSec=[$1], temp=[$2])
          LogicalTableScan(table=[[default_catalog, default_database, SecReading]])
SQL: CREATE VIEW _SensorMaxTempWindow AS  SELECT sensorid, window_time, max(temp) as maxTemp
    FROM TABLE(HOP(TABLE SecReading, DESCRIPTOR(timeSec), INTERVAL '5' SECONDS, INTERVAL '1' MINUTES))
    GROUP BY sensorid, window_start, window_end, window_time;

>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `SensorReading__schema` (
  `sensorid` BIGINT NOT NULL,
  `time` BIGINT NOT NULL,
  `temperature` DOUBLE NOT NULL,
  `humidity` DOUBLE NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `SensorReading` (
  `timestamp` AS COALESCE(`TO_TIMESTAMP_LTZ`(`time`, 3), TIMESTAMP '1970-01-01 00:00:00.000'),
  PRIMARY KEY (`sensorid`, `time`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-csv',
  'path' = '${DATA_PATH}/sensorreading.csv.gz',
  'connector' = 'filesystem',
  'flexible-csv.skip-header' = 'true'
)
LIKE `SensorReading__schema`;
CREATE VIEW `SecReading`
AS
SELECT `sensorid`, `window_time` AS `timeSec`, AVG(`temperature`) AS `temp`
FROM TABLE(TUMBLE(TABLE `SensorReading`, DESCRIPTOR(`timestamp`), INTERVAL '1' SECOND))
GROUP BY `sensorid`, `window_start`, `window_end`, `window_time`;
CREATE VIEW `_SensorMaxTempWindow`
AS
SELECT `sensorid`, `window_time`, MAX(`temp`) AS `maxTemp`
FROM TABLE(HOP(TABLE `SecReading`, DESCRIPTOR(`timeSec`), INTERVAL '5' SECOND, INTERVAL '1' MINUTE))
GROUP BY `sensorid`, `window_start`, `window_end`, `window_time`;
CREATE VIEW `SensorMaxTemp`
AS
SELECT `sensorid`, `window_time`, `maxTemp`
FROM (SELECT `sensorid`, `window_time`, `maxTemp`, ROW_NUMBER() OVER (PARTITION BY `sensorid` ORDER BY `window_time` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`_SensorMaxTempWindow`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `SecReadingTest`
AS
SELECT *
FROM `SecReading`;
CREATE VIEW `SensorMaxTempTest`
AS
SELECT `sensorid`, `maxTemp`
FROM `SensorMaxTemp`;
CREATE TABLE `SecReading_1` (
  `sensorid` BIGINT NOT NULL,
  `timeSec` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `temp` DOUBLE NOT NULL,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'SecReading',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `SensorMaxTemp_2` (
  `sensorid` BIGINT NOT NULL,
  `window_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `maxTemp` DOUBLE NOT NULL,
  PRIMARY KEY (`sensorid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'SensorMaxTemp',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `SensorReading_3` (
  `sensorid` BIGINT NOT NULL,
  `time` BIGINT NOT NULL,
  `temperature` DOUBLE NOT NULL,
  `humidity` DOUBLE NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`sensorid`, `time`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'SensorReading',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`SecReading_1`
(SELECT `sensorid`, `timeSec`, `temp`, `hash_columns`(`sensorid`, `timeSec`, `temp`) AS `__pk_hash`
 FROM `default_catalog`.`default_database`.`SecReading`)
;
INSERT INTO `default_catalog`.`default_database`.`SensorMaxTemp_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`_SensorMaxTempWindow`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`SensorReading_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`SensorReading`)
  ;
  END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres-schema.sql
CREATE TABLE IF NOT EXISTS "SecReading" ("sensorid" BIGINT NOT NULL, "timeSec" TIMESTAMP WITH TIME ZONE NOT NULL, "temp" DOUBLE PRECISION NOT NULL, "__pk_hash" TEXT  , PRIMARY KEY ("__pk_hash"));
CREATE TABLE IF NOT EXISTS "SensorMaxTemp" ("sensorid" BIGINT NOT NULL, "window_time" TIMESTAMP WITH TIME ZONE NOT NULL, "maxTemp" DOUBLE PRECISION NOT NULL , PRIMARY KEY ("sensorid"));
CREATE TABLE IF NOT EXISTS "SensorReading" ("sensorid" BIGINT NOT NULL, "time" BIGINT NOT NULL, "temperature" DOUBLE PRECISION NOT NULL, "humidity" DOUBLE PRECISION NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("sensorid","time"))
>>>postgres-views.sql

>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SecReading",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "sensorid"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM (SELECT \"sensorid\", \"timeSec\", \"temp\"\n  FROM \"SecReading\"\n  ORDER BY \"timeSec\" DESC NULLS LAST) AS \"t0\"\nWHERE \"sensorid\" = $1",
            "parameters" : [
              {
                "type" : "arg",
                "path" : "sensorid"
              }
            ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SensorMaxTemp",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "sensorid"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"SensorMaxTemp\"\nWHERE \"sensorid\" = $1 OR $1 IS NULL",
            "parameters" : [
              {
                "type" : "arg",
                "path" : "sensorid"
              }
            ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SensorReading",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"SensorReading\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "operations" : [
      {
        "function" : {
          "name" : "GetSecReading",
          "description" : "Returns the sensor temperature for a sensor by id from most recent.\n    Sensor temperature readings are averaged per second.",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              },
              "sensorid" : {
                "type" : "integer"
              }
            },
            "required" : [
              "sensorid"
            ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query SecReading($sensorid: Long!, $limit: Int = 10, $offset: Int = 0) {\nSecReading(sensorid: $sensorid, limit: $limit, offset: $offset) {\nsensorid\ntimeSec\ntemp\n}\n\n}",
          "queryName" : "SecReading",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/SecReading{?offset,limit,sensorid}"
      },
      {
        "function" : {
          "name" : "GetSensorMaxTemp",
          "description" : "Returns the maximum temperature recorded for a given sensor",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              },
              "sensorid" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query SensorMaxTemp($sensorid: Long, $limit: Int = 10, $offset: Int = 0) {\nSensorMaxTemp(sensorid: $sensorid, limit: $limit, offset: $offset) {\nsensorid\nwindow_time\nmaxTemp\n}\n\n}",
          "queryName" : "SensorMaxTemp",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/SensorMaxTemp{?offset,limit,sensorid}"
      },
      {
        "function" : {
          "name" : "GetSensorReading",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query SensorReading($limit: Int = 10, $offset: Int = 0) {\nSensorReading(limit: $limit, offset: $offset) {\nsensorid\ntime\ntemperature\nhumidity\ntimestamp\n}\n\n}",
          "queryName" : "SensorReading",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/SensorReading{?offset,limit}"
      }
    ],
    "schema" : {
      "type" : "string",
      "schema" : "\"An RFC-3339 compliant Full Date Scalar\"\nscalar Date\n\n\"A slightly refined version of RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"A JSON scalar\"\nscalar JSON\n\n\"24-hour clock time value string in the format `hh:mm:ss` or `hh:mm:ss.sss`.\"\nscalar LocalTime\n\n\"A 64-bit signed integer\"\nscalar Long\n\ntype Query {\n  \"\"\"\n  Returns the sensor temperature for a sensor by id from most recent.\n      Sensor temperature readings are averaged per second.\n  \"\"\"\n  SecReading(sensorid: Long!, limit: Int = 10, offset: Int = 0): [SecReading!]\n  \"Returns the maximum temperature recorded for a given sensor\"\n  SensorMaxTemp(sensorid: Long, limit: Int = 10, offset: Int = 0): [SensorMaxTemp!]\n  SensorReading(limit: Int = 10, offset: Int = 0): [SensorReading!]\n}\n\ntype SecReading {\n  sensorid: Long!\n  timeSec: DateTime!\n  temp: Float!\n}\n\ntype SensorMaxTemp {\n  sensorid: Long!\n  window_time: DateTime!\n  maxTemp: Float!\n}\n\ntype SensorReading {\n  sensorid: Long!\n  time: Long!\n  temperature: Float!\n  humidity: Float!\n  timestamp: DateTime!\n}\n\nenum _McpMethodType {\n  NONE\n  TOOL\n  RESOURCE\n}\n\nenum _RestMethodType {\n  NONE\n  GET\n  POST\n}\n\ndirective @api(mcp: _McpMethodType, rest: _RestMethodType, uri: String) on QUERY | MUTATION | FIELD_DEFINITION\n"
    }
  }
}
