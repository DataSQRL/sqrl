>>>pipeline_explain.txt
=== Customer
ID:     default_catalog.default_database.Customer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer__def
Annotations:
 - stream-root: Customer__def
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME*
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[TO_TIMESTAMP_LTZ($3, 0)])
      LogicalTableScan(table=[[default_catalog, default_database, Customer__def]])
SQL: CREATE VIEW `Customer`
AS
SELECT *
FROM `default_catalog`.`default_database`.`Customer__def`
=== CustomerUpdates
ID:     default_catalog.default_database.CustomerUpdates
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - features: STREAM_WINDOW_AGGREGATION (feature)
 - stream-root: Customer__def
Primary Key: -
Timestamp  : endOfMin
Schema:
 - customerid: BIGINT NOT NULL
 - endOfMin: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - total: BIGINT NOT NULL
Plan:
LogicalProject(customerid=[$0], endOfMin=[$3], total=[$4])
  LogicalAggregate(group=[{0, 1, 2, 3}], total=[COUNT()])
    LogicalProject(customerid=[$0], window_start=[$5], window_end=[$6], endOfMin=[$7])
      LogicalTableFunctionScan(invocation=[TUMBLE(DESCRIPTOR($4), 60000:INTERVAL MINUTE)], rowType=[RecordType(BIGINT customerid, VARCHAR(2147483647) email, VARCHAR(2147483647) name, BIGINT lastUpdated, TIMESTAMP_LTZ(3) *ROWTIME* timestamp, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP_LTZ(3) *ROWTIME* window_time)])
        LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
          LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW CustomerUpdates AS  SELECT
                          customerid, window_time AS endOfMin, COUNT(1) AS total
                      FROM TABLE(
                              TUMBLE(TABLE Customer, DESCRIPTOR(`timestamp`), INTERVAL '1' MINUTE)
                           )
                      GROUP BY
                          customerid, window_start, window_end, window_time;

=== DistinctCustomerUpdates
ID:     default_catalog.default_database.DistinctCustomerUpdates
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.CustomerUpdates
Annotations:
 - mostRecentDistinct: true
 - stream-root: Customer__def
Primary Key: customerid
Timestamp  : endOfMin
Schema:
 - customerid: BIGINT NOT NULL
 - endOfMin: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - total: BIGINT NOT NULL
Plan:
LogicalProject(customerid=[$0], endOfMin=[$1], total=[$2])
  LogicalFilter(condition=[=($3, 1)])
    LogicalProject(customerid=[$0], endOfMin=[$1], total=[$2], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, CustomerUpdates]])
SQL: CREATE VIEW `DistinctCustomerUpdates`
AS
SELECT `customerid`, `endOfMin`, `total`
FROM (SELECT `customerid`, `endOfMin`, `total`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `endOfMin` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`CustomerUpdates`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Customer__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Customer__def` (
  `timestamp` AS TO_TIMESTAMP_LTZ(`lastUpdated`, 0),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Customer__schema`;
CREATE VIEW `Customer`
AS
SELECT *
FROM `default_catalog`.`default_database`.`Customer__def`;
CREATE VIEW `CustomerUpdates`
AS
SELECT `customerid`, `window_time` AS `endOfMin`, COUNT(1) AS `total`
FROM TABLE(TUMBLE(TABLE `Customer`, DESCRIPTOR(`timestamp`), INTERVAL '1' MINUTE))
GROUP BY `customerid`, `window_start`, `window_end`, `window_time`;
CREATE VIEW `DistinctCustomerUpdates`
AS
SELECT `customerid`, `endOfMin`, `total`
FROM (SELECT `customerid`, `endOfMin`, `total`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `endOfMin` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`CustomerUpdates`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE TABLE `Customer_1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'Customer_1'
);
CREATE TABLE `CustomerUpdates_2` (
  `customerid` BIGINT NOT NULL,
  `endOfMin` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `total` BIGINT NOT NULL,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'CustomerUpdates_2'
);
CREATE TABLE `DistinctCustomerUpdates_3` (
  `customerid` BIGINT NOT NULL,
  `endOfMin` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `total` BIGINT NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'DistinctCustomerUpdates_3'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`Customer_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`Customer`)
;
INSERT INTO `default_catalog`.`default_database`.`CustomerUpdates_2`
 (SELECT `customerid`, `endOfMin`, `total`, HASHCOLUMNS(`customerid`, `endOfMin`, `total`) AS `__pk_hash`
  FROM `default_catalog`.`default_database`.`CustomerUpdates`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`DistinctCustomerUpdates_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`CustomerUpdates`)
  ;
  END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "Customer_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Customer_1\" (\"customerid\" BIGINT NOT NULL, \"email\" TEXT NOT NULL, \"name\" TEXT NOT NULL, \"lastUpdated\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE  , PRIMARY KEY (\"customerid\",\"lastUpdated\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "CustomerUpdates_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"CustomerUpdates_2\" (\"customerid\" BIGINT NOT NULL, \"endOfMin\" TIMESTAMP WITH TIME ZONE NOT NULL, \"total\" BIGINT NOT NULL, \"__pk_hash\" TEXT  , PRIMARY KEY (\"__pk_hash\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "endOfMin",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "__pk_hash",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "DistinctCustomerUpdates_3",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"DistinctCustomerUpdates_3\" (\"customerid\" BIGINT NOT NULL, \"endOfMin\" TIMESTAMP WITH TIME ZONE NOT NULL, \"total\" BIGINT NOT NULL , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "endOfMin",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Customer",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Customer\"(\"customerid\", \"email\", \"name\", \"lastUpdated\", \"timestamp\") AS SELECT *\nFROM \"Customer_1\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "CustomerUpdates",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"CustomerUpdates\"(\"customerid\", \"endOfMin\", \"total\") AS SELECT \"customerid\", \"endOfMin\", \"total\"\nFROM \"CustomerUpdates_2\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "endOfMin",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "DistinctCustomerUpdates",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"DistinctCustomerUpdates\"(\"customerid\", \"endOfMin\", \"total\") AS SELECT *\nFROM \"DistinctCustomerUpdates_3\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "endOfMin",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Customer",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"Customer_1\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CustomerUpdates",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"customerid\", \"endOfMin\", \"total\"\nFROM \"CustomerUpdates_2\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "DistinctCustomerUpdates",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"DistinctCustomerUpdates_3\"",
              "parameters" : [ ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "type Customer {\n  customerid: Float!\n  email: String!\n  name: String!\n  lastUpdated: Float!\n  timestamp: DateTime\n}\n\ntype CustomerUpdates {\n  customerid: Float!\n  endOfMin: DateTime!\n  total: Float!\n}\n\n\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\ntype DistinctCustomerUpdates {\n  customerid: Float!\n  endOfMin: DateTime!\n  total: Float!\n}\n\ntype Query {\n  Customer(limit: Int = 10, offset: Int = 0): [Customer!]\n  CustomerUpdates(limit: Int = 10, offset: Int = 0): [CustomerUpdates!]\n  DistinctCustomerUpdates(limit: Int = 10, offset: Int = 0): [DistinctCustomerUpdates!]\n}\n"
    }
  }
}
