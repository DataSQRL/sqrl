>>>pipeline_explain.txt
=== OrderCount
ID:     ordercount$1
Type:   stream
Stage:  streams
Inputs: orders$2
Primary Key: timeSec
Timestamp  : timeSec
Schema:
 - timeSec: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - number: BIGINT NOT NULL
 - volume: INTEGER NOT NULL
Plan:
LogicalAggregate(group=[{0}], number=[COUNT()], volume=[SUM($1)]) hints[TumbleAggregationHint options:[0, FUNCTION, 5, 1000, 0]]
  LogicalProject(timeSec=[endOfSecond($4)], quantity=[$6], id=[$0], time=[$2], productid=[$5], _source_time=[$4])
    LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{3}])
      LogicalTableScan(table=[[orders$2]])
      LogicalTableFunctionScan(invocation=[Orders.items($cor0.items)], rowType=[RecordType(INTEGER productid, INTEGER quantity, DOUBLE unit_price, DOUBLE discount)], elementType=[class [Ljava.lang.Object;])

=== Orders
ID:     orders$2
Type:   stream
Stage:  streams
Primary Key: id, time
Timestamp  : _source_time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - items: RecordType(INTEGER NOT NULL productid, INTEGER NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
 - _source_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptostring` AS 'com.datasqrl.time.TimestampToString' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofmonth` AS 'com.datasqrl.time.EndOfMonth' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `tojson` AS 'com.datasqrl.json.ToJson' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptoepochmilli` AS 'com.datasqrl.time.TimestampToEpochMilli' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofweek` AS 'com.datasqrl.time.EndOfWeek' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `parsetimestamp` AS 'com.datasqrl.time.ParseTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochmillitotimestamp` AS 'com.datasqrl.time.EpochMilliToTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofminute` AS 'com.datasqrl.time.EndOfMinute' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptoepoch` AS 'com.datasqrl.time.TimestampToEpoch' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofsecond` AS 'com.datasqrl.time.EndOfSecond' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochtotimestamp` AS 'com.datasqrl.time.EpochToTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofday` AS 'com.datasqrl.time.EndOfDay' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `atzone` AS 'com.datasqrl.time.AtZone' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofhour` AS 'com.datasqrl.time.EndOfHour' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofyear` AS 'com.datasqrl.time.EndOfYear' LANGUAGE JAVA;",
    "CREATE TEMPORARY TABLE `orders$1` (\n  `id` BIGINT NOT NULL,\n  `customerid` BIGINT NOT NULL,\n  `time` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `items` ROW(`productid` INTEGER NOT NULL, `quantity` INTEGER NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,\n  `_source_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL METADATA FROM 'timestamp',\n  WATERMARK FOR `_source_time` AS (`_source_time` - INTERVAL '0.0' SECOND)\n) WITH (\n  'format' = 'avro',\n  'bootstrap.servers' = '${sys:datasqrl.kafka_servers}',\n  'connector' = 'kafka',\n  'group.id' = 'datasqrl-orders'\n);",
    "CREATE TEMPORARY TABLE `ordercount$1` (\n  `timeSec` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `number` BIGINT NOT NULL,\n  `volume` INTEGER NOT NULL,\n  PRIMARY KEY (`timeSec`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'ordercount$1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `orders$2` (\n  `id` BIGINT NOT NULL,\n  `customerid` BIGINT NOT NULL,\n  `time` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `items` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),\n  `_source_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`, `time`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'orders$2',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT ENDOFSECOND(`$cor0`.`_source_time`) AS `timeSec`, `t00`.`quantity`, `$cor0`.`id`, `$cor0`.`time`, `t00`.`productid`, `$cor0`.`_source_time`\nFROM `orders$1` AS `$cor0`,\nUNNEST(`$cor0`.`items`) AS `t00` (`productid`, `quantity`, `unit_price`, `discount`);",
    "CREATE VIEW `table$2`\nAS\nSELECT `window_time` AS `timeSec`, COUNT(*) AS `number`, SUM(`quantity`) AS `volume`\nFROM TABLE(TUMBLE((TABLE `table$1`), (DESCRIPTOR(`_source_time`)), INTERVAL '1' SECOND(4), INTERVAL '0' SECOND(1))) AS `t2`\nGROUP BY `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$3`\nAS\nSELECT `id`, `customerid`, `time`, TOJSON(`items`) AS `items`, `_source_time`\nFROM `orders$1`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `ordercount$1`\n(SELECT *\nFROM `table$2`)\n;\nINSERT INTO `orders$2`\n(SELECT *\nFROM `table$3`)\n;\nEND;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "kafka"
  ],
  "formats" : [
    "avro"
  ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "ordercount$1",
      "columns" : [
        "\"timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"number\" BIGINT NOT NULL",
        "\"volume\" INTEGER NOT NULL"
      ],
      "primaryKeys" : [
        "\"timeSec\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS ordercount$1 (\"timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL,\"number\" BIGINT NOT NULL,\"volume\" INTEGER NOT NULL , PRIMARY KEY (\"timeSec\"));"
    },
    {
      "name" : "orders$2",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"customerid\" BIGINT NOT NULL",
        "\"time\" TEXT NOT NULL",
        "\"items\" JSONB NOT NULL",
        "\"_source_time\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"id\"",
        "\"time\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS orders$2 (\"id\" BIGINT NOT NULL,\"customerid\" BIGINT NOT NULL,\"time\" TEXT NOT NULL,\"items\" JSONB NOT NULL,\"_source_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"id\",\"time\"));"
    }
  ]
}
