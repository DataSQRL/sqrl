>>>pipeline_explain.txt
=== HighTemp
ID:     hightemp_1
Type:   stream
Stage:  flink
Inputs: secreading_1, sensors_3
Primary Key: sensorid, timeSec
Timestamp  : timeSec
Schema:
 - machineid: BIGINT NOT NULL
 - sensorid: BIGINT NOT NULL
 - temp: DOUBLE NOT NULL
 - timeSec: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - sort: #3: timeSec TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC
Plan:
LogicalProject(machineid=[$5], sensorid=[$0], temp=[$2], timeSec=[$1])
  LogicalJoin(condition=[=($4, $3)], joinType=[inner]) hints[TemporalJoinHint options:[1]]
    LogicalProject(sensorid=[$0], timeSec=[$1], temp=[$2], sensorid3=[$0])
      LogicalFilter(condition=[>($2, 35)])
        LogicalTableScan(table=[[secreading_1]])
    LogicalFilter(condition=[=($4, 1)]) hints[DedupHint]
      LogicalProject(id=[$0], machineId=[$1], placed=[$2], timestamp=[$3], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS FIRST)])
        LogicalTableScan(table=[[sensors_3]])

=== lastHour
ID:     lasthour_1
Type:   state
Stage:  flink
Inputs: secreading_1, sensors_3
Primary Key: __pk1_id
Timestamp  : _timeSec
Schema:
 - __pk1_id: BIGINT NOT NULL
 - maxTemp: DOUBLE NOT NULL
 - avgTemp: DOUBLE NOT NULL
 - _timeSec: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=__pk1_id limit=1 sort=#3: _timeSec TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalProject(__pk1_id=[$1], maxTemp=[$2], avgTemp=[$3], _timeSec=[$0])
  LogicalAggregate(group=[{1, 4}], maxTemp=[MAX($2)], avgTemp=[AVG($2)]) hints[SlidingAggregationHint options:[1, 3600000, 72000]]
    LogicalJoin(condition=[=($4, $3)], joinType=[inner]) hints[TemporalJoinHint options:[1]]
      LogicalProject(sensorid=[$0], timeSec=[$1], temp=[$2], sensorid3=[$0])
        LogicalTableScan(table=[[secreading_1]])
      LogicalFilter(condition=[=($4, 1)]) hints[DedupHint]
        LogicalProject(id=[$0], machineId=[$1], placed=[$2], timestamp=[$3], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS FIRST)])
          LogicalTableScan(table=[[sensors_3]])

=== Machine
ID:     machine_1
Type:   state
Stage:  flink
Inputs: secreading_1, sensors_3
Primary Key: machineid
Timestamp  : _timeSec
Schema:
 - machineid: BIGINT NOT NULL
 - maxTemp: DOUBLE NOT NULL
 - avgTemp: DOUBLE NOT NULL
 - _timeSec: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=machineid limit=1 sort=#3: _timeSec TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalProject(machineid=[$1], maxTemp=[$2], avgTemp=[$3], _timeSec=[$0])
  LogicalAggregate(group=[{1, 5}], maxTemp=[MAX($2)], avgTemp=[AVG($2)]) hints[SlidingAggregationHint options:[1, 3600000, 72000]]
    LogicalJoin(condition=[=($4, $3)], joinType=[inner]) hints[TemporalJoinHint options:[1]]
      LogicalProject(sensorid=[$0], timeSec=[$1], temp=[$2], sensorid3=[$0])
        LogicalTableScan(table=[[secreading_1]])
      LogicalFilter(condition=[=($4, 1)]) hints[DedupHint]
        LogicalProject(id=[$0], machineId=[$1], placed=[$2], timestamp=[$3], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS FIRST)])
          LogicalTableScan(table=[[sensors_3]])

=== SecReading
ID:     secreading_1
Type:   stream
Stage:  flink
Inputs: sensorreading_2
Primary Key: sensorid, timeSec
Timestamp  : timeSec
Schema:
 - sensorid: BIGINT NOT NULL
 - timeSec: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - temp: DOUBLE NOT NULL
Post Processors:
 - sort: #1: timeSec TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC
Plan:
LogicalAggregate(group=[{0, 1}], temp=[AVG($2)]) hints[TumbleAggregationHint options:[1, FUNCTION, 4, 1000, 0]]
  LogicalProject(sensorid=[$0], timeSec=[endOfSecond($4)], temperature=[$2], time=[$1], timestamp=[$4])
    LogicalTableScan(table=[[sensorreading_2]])

=== SensorReading
ID:     sensorreading_2
Type:   stream
Stage:  flink
Primary Key: sensorid, time
Timestamp  : timestamp
Schema:
 - sensorid: BIGINT NOT NULL
 - time: BIGINT NOT NULL
 - temperature: DOUBLE NOT NULL
 - humidity: DOUBLE NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[sensorreading_1]])

=== Sensors
ID:     sensors_2
Type:   stream
Stage:  flink
Primary Key: id, placed
Timestamp  : timestamp
Schema:
 - id: BIGINT NOT NULL
 - machineId: BIGINT NOT NULL
 - placed: BIGINT NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[sensors_1]])

=== Sensors
ID:     sensors_3
Type:   state
Stage:  flink
Inputs: sensors_2
Primary Key: id
Timestamp  : timestamp
Schema:
 - id: BIGINT NOT NULL
 - machineId: BIGINT NOT NULL
 - placed: BIGINT NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=id limit=1 sort=#3: timestamp TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC 
Plan:
LogicalTableScan(table=[[sensors_2]])

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochmillitotimestamp` AS 'com.datasqrl.time.EpochMilliToTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofsecond` AS 'com.datasqrl.time.EndOfSecond' LANGUAGE JAVA;",
    "CREATE TEMPORARY TABLE `sensorreading_1` (\n  `sensorid` BIGINT NOT NULL,\n  `time` BIGINT NOT NULL,\n  `temperature` DOUBLE NOT NULL,\n  `humidity` DOUBLE NOT NULL,\n  `timestamp` AS EPOCHMILLITOTIMESTAMP(`time`),\n  PRIMARY KEY (`sensorid`, `time`) NOT ENFORCED,\n  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND\n) WITH (\n  'format' = 'flexible-csv',\n  'path' = '${DATA_PATH}/sensorreading.csv.gz',\n  'connector' = 'filesystem',\n  'flexible-csv.skip-header' = 'true'\n);",
    "CREATE TEMPORARY TABLE `sensors_1` (\n  `id` BIGINT NOT NULL,\n  `machineId` BIGINT NOT NULL,\n  `placed` BIGINT NOT NULL,\n  `timestamp` AS EPOCHMILLITOTIMESTAMP(`placed`),\n  PRIMARY KEY (`id`, `placed`) NOT ENFORCED,\n  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND\n) WITH (\n  'format' = 'flexible-json',\n  'path' = '${DATA_PATH}/sensors.jsonl',\n  'connector' = 'filesystem'\n);",
    "CREATE TEMPORARY TABLE `hightemp_1` (\n  `machineid` BIGINT NOT NULL,\n  `sensorid` BIGINT NOT NULL,\n  `temp` DOUBLE NOT NULL,\n  `timeSec` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`sensorid`, `timeSec`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'hightemp_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `lasthour_1` (\n  `__pk1_id` BIGINT NOT NULL,\n  `maxTemp` DOUBLE NOT NULL,\n  `avgTemp` DOUBLE NOT NULL,\n  `_timeSec` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`__pk1_id`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'lasthour_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `machine_1` (\n  `machineid` BIGINT NOT NULL,\n  `maxTemp` DOUBLE NOT NULL,\n  `avgTemp` DOUBLE NOT NULL,\n  `_timeSec` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`machineid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'machine_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `secreading_1` (\n  `sensorid` BIGINT NOT NULL,\n  `timeSec` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `temp` DOUBLE NOT NULL,\n  PRIMARY KEY (`sensorid`, `timeSec`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'secreading_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `sensorreading_2` (\n  `sensorid` BIGINT NOT NULL,\n  `time` BIGINT NOT NULL,\n  `temperature` DOUBLE NOT NULL,\n  `humidity` DOUBLE NOT NULL,\n  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`sensorid`, `time`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'sensorreading_2',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `sensors_3` (\n  `id` BIGINT NOT NULL,\n  `machineId` BIGINT NOT NULL,\n  `placed` BIGINT NOT NULL,\n  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'sensors_3',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT *\nFROM (SELECT `id`, `machineId`, `placed`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `timestamp` DESC) AS `_rownum`\n  FROM `sensors_1`) AS `t`\nWHERE `_rownum` = 1;",
    "CREATE VIEW `table$2`\nAS\nSELECT `sensorid`, ENDOFSECOND(`timestamp`) AS `timeSec`, `temperature`, `time`, `timestamp`\nFROM `sensorreading_1`;",
    "CREATE VIEW `table$3`\nAS\nSELECT `t0`.`machineId` AS `machineid`, `$cor3`.`sensorid`, `$cor3`.`temp`, `$cor3`.`timeSec`\nFROM (SELECT `sensorid`, `timeSec`, `temp`, `sensorid` AS `sensorid3`\n  FROM (SELECT `sensorid`, `window_time` AS `timeSec`, AVG(`temperature`) AS `temp`\n    FROM TABLE(TUMBLE(TABLE `table$2`, DESCRIPTOR(`timestamp`), INTERVAL '1' SECOND(4), INTERVAL '0' SECOND(1))) AS `t2`\n    GROUP BY `sensorid`, `window_start`, `window_end`, `window_time`) AS `t4`\n  WHERE `temp` > 35) AS `$cor3`\n INNER JOIN `table$1` FOR SYSTEM_TIME AS OF `$cor3`.`timeSec` AS `t0` ON `t0`.`id` = `$cor3`.`sensorid3`;",
    "CREATE VIEW `table$4`\nAS\nSELECT *\nFROM (SELECT `id`, `machineId`, `placed`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `timestamp` DESC) AS `_rownum`\n  FROM `sensors_1`) AS `t`\nWHERE `_rownum` = 1;",
    "CREATE VIEW `table$5`\nAS\nSELECT `sensorid`, ENDOFSECOND(`timestamp`) AS `timeSec`, `temperature`, `time`, `timestamp`\nFROM `sensorreading_1`;",
    "CREATE VIEW `table$6`\nAS\nSELECT *\nFROM (SELECT `sensorid`, `window_time` AS `timeSec`, AVG(`temperature`) AS `temp`, `sensorid` AS `sensorid3`\n  FROM TABLE(TUMBLE(TABLE `table$5`, DESCRIPTOR(`timestamp`), INTERVAL '1' SECOND(4), INTERVAL '0' SECOND(1))) AS `t2`\n  GROUP BY `sensorid`, `window_start`, `window_end`, `window_time`) AS `$cor5`\n INNER JOIN `table$4` FOR SYSTEM_TIME AS OF `$cor5`.`timeSec` AS `t0` ON `t0`.`id` = `$cor5`.`sensorid3`;",
    "CREATE VIEW `table$7`\nAS\nSELECT `id` AS `__pk1_id`, MAX(`temp`) AS `maxTemp`, AVG(`temp`) AS `avgTemp`, `window_time` AS `_timeSec`\nFROM TABLE(HOP(TABLE `table$6`, DESCRIPTOR(`timeSec`), INTERVAL '72' SECOND(5), INTERVAL '3600' SECOND(7))) AS `t6`\nGROUP BY `id`, `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$8`\nAS\nSELECT *\nFROM (SELECT `id`, `machineId`, `placed`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `timestamp` DESC) AS `_rownum`\n  FROM `sensors_1`) AS `t`\nWHERE `_rownum` = 1;",
    "CREATE VIEW `table$9`\nAS\nSELECT `sensorid`, ENDOFSECOND(`timestamp`) AS `timeSec`, `temperature`, `time`, `timestamp`\nFROM `sensorreading_1`;",
    "CREATE VIEW `table$10`\nAS\nSELECT *\nFROM (SELECT `sensorid`, `window_time` AS `timeSec`, AVG(`temperature`) AS `temp`, `sensorid` AS `sensorid3`\n  FROM TABLE(TUMBLE(TABLE `table$9`, DESCRIPTOR(`timestamp`), INTERVAL '1' SECOND(4), INTERVAL '0' SECOND(1))) AS `t2`\n  GROUP BY `sensorid`, `window_start`, `window_end`, `window_time`) AS `$cor7`\n INNER JOIN `table$8` FOR SYSTEM_TIME AS OF `$cor7`.`timeSec` AS `t0` ON `t0`.`id` = `$cor7`.`sensorid3`;",
    "CREATE VIEW `table$11`\nAS\nSELECT `machineId` AS `machineid`, MAX(`temp`) AS `maxTemp`, AVG(`temp`) AS `avgTemp`, `window_time` AS `_timeSec`\nFROM TABLE(HOP(TABLE `table$10`, DESCRIPTOR(`timeSec`), INTERVAL '72' SECOND(5), INTERVAL '3600' SECOND(7))) AS `t6`\nGROUP BY `machineId`, `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$12`\nAS\nSELECT `sensorid`, ENDOFSECOND(`timestamp`) AS `timeSec`, `temperature`, `time`, `timestamp`\nFROM `sensorreading_1`;",
    "CREATE VIEW `table$13`\nAS\nSELECT `sensorid`, `window_time` AS `timeSec`, AVG(`temperature`) AS `temp`\nFROM TABLE(TUMBLE(TABLE `table$12`, DESCRIPTOR(`timestamp`), INTERVAL '1' SECOND(4), INTERVAL '0' SECOND(1))) AS `t0`\nGROUP BY `sensorid`, `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$14`\nAS\nSELECT *\nFROM `sensorreading_1`;",
    "CREATE VIEW `table$15`\nAS\nSELECT *\nFROM `sensors_1`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `hightemp_1`\n(SELECT *\n FROM `table$3`)\n;\nINSERT INTO `lasthour_1`\n (SELECT *\n  FROM `table$7`)\n ;\n INSERT INTO `machine_1`\n  (SELECT *\n   FROM `table$11`)\n  ;\n  INSERT INTO `secreading_1`\n   (SELECT *\n    FROM `table$13`)\n   ;\n   INSERT INTO `sensorreading_2`\n    (SELECT *\n     FROM `table$14`)\n    ;\n    INSERT INTO `sensors_3`\n     (SELECT *\n      FROM `table$15`)\n     ;\n     END;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "filesystem"
  ],
  "formats" : [
    "flexible-json",
    "flexible-csv"
  ],
  "compliedPlan" : "{\n  \"flinkVersion\" : \"1.19\",\n  \"nodes\" : [ {\n    \"id\" : 1222,\n    \"type\" : \"stream-exec-table-source-scan_1\",\n    \"scanTableSource\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`sensorreading_1`\"\n      }\n    },\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `time` BIGINT NOT NULL, `temperature` DOUBLE NOT NULL, `humidity` DOUBLE NOT NULL, `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>\",\n    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, sensorreading_1]], fields=[sensorid, time, temperature, humidity, timestamp])\",\n    \"inputProperties\" : [ ]\n  }, {\n    \"id\" : 1223,\n    \"type\" : \"stream-exec-watermark-assigner_1\",\n    \"watermarkExpr\" : {\n      \"kind\" : \"CALL\",\n      \"syntax\" : \"BINARY\",\n      \"internalName\" : \"$-$1\",\n      \"operands\" : [ {\n        \"kind\" : \"INPUT_REF\",\n        \"inputIndex\" : 4,\n        \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n      }, {\n        \"kind\" : \"LITERAL\",\n        \"value\" : \"1\",\n        \"type\" : \"INTERVAL SECOND(6) NOT NULL\"\n      } ],\n      \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n    },\n    \"rowtimeFieldIndex\" : 4,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"time\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"humidity\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"WatermarkAssigner(rowtime=[timestamp], watermark=[(timestamp - 1:INTERVAL SECOND)])\"\n  }, {\n    \"id\" : 1224,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 2,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[sensorid, temperature, timestamp])\"\n  }, {\n    \"id\" : 1225,\n    \"type\" : \"stream-exec-local-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"temp\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DOUBLE NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"TimeAttribute\",\n      \"window\" : {\n        \"type\" : \"TumblingWindow\",\n        \"size\" : \"PT1S\",\n        \"offset\" : \"PT0S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"timeAttributeIndex\" : 2,\n      \"isRowtime\" : true\n    },\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `sum$0` DOUBLE, `count$1` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"LocalWindowAggregate(groupBy=[sensorid], window=[TUMBLE(time_col=[timestamp], size=[1 s], offset=[0 ms])], select=[sensorid, AVG(temperature) AS (sum$0, count$1), slice_end('w$) AS $slice_end])\"\n  }, {\n    \"id\" : 1226,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `sum$0` DOUBLE, `count$1` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"Exchange(distribution=[hash[sensorid]])\"\n  }, {\n    \"id\" : 1227,\n    \"type\" : \"stream-exec-global-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"temp\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DOUBLE NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"SliceAttached\",\n      \"window\" : {\n        \"type\" : \"TumblingWindow\",\n        \"size\" : \"PT1S\",\n        \"offset\" : \"PT0S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"sliceEnd\" : 3,\n      \"isRowtime\" : true\n    },\n    \"namedWindowProperties\" : [ {\n      \"name\" : \"window_start\",\n      \"property\" : {\n        \"kind\" : \"WindowStart\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_end\",\n      \"property\" : {\n        \"kind\" : \"WindowEnd\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_time\",\n      \"property\" : {\n        \"kind\" : \"Rowtime\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    } ],\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"localAggInputRowType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"window_start\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_end\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"GlobalWindowAggregate(groupBy=[sensorid], window=[TUMBLE(slice_end=[$slice_end], size=[1 s], offset=[0 ms])], select=[sensorid, AVG((sum$0, count$1)) AS temp, start('w$) AS window_start, end('w$) AS window_end, rowtime('w$) AS window_time])\"\n  }, {\n    \"id\" : 1228,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    } ],\n    \"condition\" : {\n      \"kind\" : \"CALL\",\n      \"syntax\" : \"BINARY\",\n      \"internalName\" : \"$>$1\",\n      \"operands\" : [ {\n        \"kind\" : \"INPUT_REF\",\n        \"inputIndex\" : 1,\n        \"type\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"kind\" : \"LITERAL\",\n        \"value\" : 35,\n        \"type\" : \"INT NOT NULL\"\n      } ],\n      \"type\" : \"BOOLEAN NOT NULL\"\n    },\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"sensorid3\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Calc(select=[sensorid, window_time AS timeSec, temp, sensorid AS sensorid3], where=[(temp > 35)])\"\n  }, {\n    \"id\" : 1229,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 3 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"sensorid3\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Exchange(distribution=[hash[sensorid3]])\"\n  }, {\n    \"id\" : 1230,\n    \"type\" : \"stream-exec-table-source-scan_1\",\n    \"scanTableSource\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`sensors_1`\"\n      }\n    },\n    \"outputType\" : \"ROW<`id` BIGINT NOT NULL, `machineId` BIGINT NOT NULL, `placed` BIGINT NOT NULL, `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>\",\n    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, sensors_1]], fields=[id, machineId, placed, timestamp])\",\n    \"inputProperties\" : [ ]\n  }, {\n    \"id\" : 1231,\n    \"type\" : \"stream-exec-watermark-assigner_1\",\n    \"watermarkExpr\" : {\n      \"kind\" : \"CALL\",\n      \"syntax\" : \"BINARY\",\n      \"internalName\" : \"$-$1\",\n      \"operands\" : [ {\n        \"kind\" : \"INPUT_REF\",\n        \"inputIndex\" : 3,\n        \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n      }, {\n        \"kind\" : \"LITERAL\",\n        \"value\" : \"1\",\n        \"type\" : \"INTERVAL SECOND(6) NOT NULL\"\n      } ],\n      \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n    },\n    \"rowtimeFieldIndex\" : 3,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"machineId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placed\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"WatermarkAssigner(rowtime=[timestamp], watermark=[(timestamp - 1:INTERVAL SECOND)])\"\n  }, {\n    \"id\" : 1232,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"machineId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placed\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Exchange(distribution=[hash[id]])\"\n  }, {\n    \"id\" : 1233,\n    \"type\" : \"stream-exec-deduplicate_1\",\n    \"configuration\" : {\n      \"table.exec.deduplicate.insert-update-after-sensitive-enabled\" : \"true\",\n      \"table.exec.deduplicate.mini-batch.compact-changes-enabled\" : \"false\",\n      \"table.exec.mini-batch.enabled\" : \"false\",\n      \"table.exec.mini-batch.size\" : \"-1\"\n    },\n    \"uniqueKeys\" : [ 0 ],\n    \"isRowtime\" : true,\n    \"keepLastRow\" : true,\n    \"generateUpdateBefore\" : false,\n    \"state\" : [ {\n      \"index\" : 0,\n      \"ttl\" : \"0 ms\",\n      \"name\" : \"deduplicateState\"\n    } ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"machineId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placed\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Deduplicate(keep=[LastRow], key=[id], order=[ROWTIME])\"\n  }, {\n    \"id\" : 1234,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 3,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"machineId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[id, machineId, timestamp])\"\n  }, {\n    \"id\" : 1235,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"machineId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Exchange(distribution=[hash[id]])\"\n  }, {\n    \"id\" : 1236,\n    \"type\" : \"stream-exec-temporal-join_1\",\n    \"joinSpec\" : {\n      \"joinType\" : \"INNER\",\n      \"leftKeys\" : [ 3 ],\n      \"rightKeys\" : [ 0 ],\n      \"filterNulls\" : [ true ],\n      \"nonEquiCondition\" : null\n    },\n    \"isTemporalFunctionJoin\" : false,\n    \"leftTimeAttributeIndex\" : 1,\n    \"rightTimeAttributeIndex\" : 2,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    }, {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"sensorid3\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"machineId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"TemporalJoin(joinType=[InnerJoin], where=[((id = sensorid3) AND __TEMPORAL_JOIN_CONDITION(timeSec, timestamp, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(id), __TEMPORAL_JOIN_LEFT_KEY(sensorid3), __TEMPORAL_JOIN_RIGHT_KEY(id)))], select=[sensorid, timeSec, temp, sensorid3, id, machineId, timestamp])\"\n  }, {\n    \"id\" : 1237,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 5,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 2,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"machineid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[machineId AS machineid, sensorid, temp, timeSec])\"\n  }, {\n    \"id\" : 1238,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`hightemp_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"machineid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.hightemp_1], fields=[machineid, sensorid, temp, timeSec])\"\n  }, {\n    \"id\" : 1239,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"sensorid3\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Calc(select=[window_time AS timeSec, temp, sensorid3])\"\n  }, {\n    \"id\" : 1240,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 2 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"sensorid3\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Exchange(distribution=[hash[sensorid3]])\"\n  }, {\n    \"id\" : 1241,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 2,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 3,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placed\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[id, placed, timestamp])\"\n  }, {\n    \"id\" : 1242,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placed\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Exchange(distribution=[hash[id]])\"\n  }, {\n    \"id\" : 1243,\n    \"type\" : \"stream-exec-deduplicate_1\",\n    \"configuration\" : {\n      \"table.exec.deduplicate.insert-update-after-sensitive-enabled\" : \"true\",\n      \"table.exec.deduplicate.mini-batch.compact-changes-enabled\" : \"false\",\n      \"table.exec.mini-batch.enabled\" : \"false\",\n      \"table.exec.mini-batch.size\" : \"-1\"\n    },\n    \"uniqueKeys\" : [ 0 ],\n    \"isRowtime\" : true,\n    \"keepLastRow\" : true,\n    \"generateUpdateBefore\" : false,\n    \"state\" : [ {\n      \"index\" : 0,\n      \"ttl\" : \"0 ms\",\n      \"name\" : \"deduplicateState\"\n    } ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placed\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Deduplicate(keep=[LastRow], key=[id], order=[ROWTIME])\"\n  }, {\n    \"id\" : 1244,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 2,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[id, timestamp])\"\n  }, {\n    \"id\" : 1245,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Exchange(distribution=[hash[id]])\"\n  }, {\n    \"id\" : 1246,\n    \"type\" : \"stream-exec-temporal-join_1\",\n    \"joinSpec\" : {\n      \"joinType\" : \"INNER\",\n      \"leftKeys\" : [ 2 ],\n      \"rightKeys\" : [ 0 ],\n      \"filterNulls\" : [ true ],\n      \"nonEquiCondition\" : null\n    },\n    \"isTemporalFunctionJoin\" : false,\n    \"leftTimeAttributeIndex\" : 0,\n    \"rightTimeAttributeIndex\" : 1,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    }, {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"sensorid3\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"TemporalJoin(joinType=[InnerJoin], where=[((id = sensorid3) AND __TEMPORAL_JOIN_CONDITION(timeSec, timestamp, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(id), __TEMPORAL_JOIN_LEFT_KEY(sensorid3), __TEMPORAL_JOIN_RIGHT_KEY(id)))], select=[timeSec, temp, sensorid3, id, timestamp])\"\n  }, {\n    \"id\" : 1247,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 3,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"__pk1_id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[id AS __pk1_id, temp, timeSec])\"\n  }, {\n    \"id\" : 1248,\n    \"type\" : \"stream-exec-local-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"maxTemp\",\n      \"internalName\" : \"$MAX$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"name\" : \"avgTemp\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DOUBLE NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"TimeAttribute\",\n      \"window\" : {\n        \"type\" : \"HoppingWindow\",\n        \"size\" : \"PT1H\",\n        \"slide\" : \"PT1M12S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"timeAttributeIndex\" : 2,\n      \"isRowtime\" : true\n    },\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`__pk1_id` BIGINT NOT NULL, `max$0` DOUBLE, `sum$1` DOUBLE, `count$2` BIGINT, `count1$3` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"LocalWindowAggregate(groupBy=[__pk1_id], window=[HOP(time_col=[timeSec], size=[1 h], slide=[72 s])], select=[__pk1_id, MAX(temp) AS max$0, AVG(temp) AS (sum$1, count$2), COUNT(*) AS count1$3, slice_end('w$) AS $slice_end])\"\n  }, {\n    \"id\" : 1249,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`__pk1_id` BIGINT NOT NULL, `max$0` DOUBLE, `sum$1` DOUBLE, `count$2` BIGINT, `count1$3` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"Exchange(distribution=[hash[__pk1_id]])\"\n  }, {\n    \"id\" : 1250,\n    \"type\" : \"stream-exec-global-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"maxTemp\",\n      \"internalName\" : \"$MAX$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"name\" : \"avgTemp\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DOUBLE NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"SliceAttached\",\n      \"window\" : {\n        \"type\" : \"HoppingWindow\",\n        \"size\" : \"PT1H\",\n        \"slide\" : \"PT1M12S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"sliceEnd\" : 5,\n      \"isRowtime\" : true\n    },\n    \"namedWindowProperties\" : [ {\n      \"name\" : \"window_start\",\n      \"property\" : {\n        \"kind\" : \"WindowStart\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_end\",\n      \"property\" : {\n        \"kind\" : \"WindowEnd\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_time\",\n      \"property\" : {\n        \"kind\" : \"Rowtime\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    } ],\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"localAggInputRowType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"__pk1_id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"__pk1_id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"avgTemp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"window_start\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_end\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"GlobalWindowAggregate(groupBy=[__pk1_id], window=[HOP(slice_end=[$slice_end], size=[1 h], slide=[72 s])], select=[__pk1_id, MAX(max$0) AS maxTemp, AVG((sum$1, count$2)) AS avgTemp, COUNT(count1$3) AS window_start, start('w$) AS window_end, end('w$) AS window_time])\"\n  }, {\n    \"id\" : 1251,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 2,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 5,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"__pk1_id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"avgTemp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"_timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[__pk1_id, maxTemp, avgTemp, window_time AS _timeSec])\"\n  }, {\n    \"id\" : 1252,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`lasthour_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"__pk1_id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"avgTemp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"_timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.lasthour_1], fields=[__pk1_id, maxTemp, avgTemp, _timeSec])\"\n  }, {\n    \"id\" : 1253,\n    \"type\" : \"stream-exec-temporal-join_1\",\n    \"joinSpec\" : {\n      \"joinType\" : \"INNER\",\n      \"leftKeys\" : [ 2 ],\n      \"rightKeys\" : [ 0 ],\n      \"filterNulls\" : [ true ],\n      \"nonEquiCondition\" : null\n    },\n    \"isTemporalFunctionJoin\" : false,\n    \"leftTimeAttributeIndex\" : 0,\n    \"rightTimeAttributeIndex\" : 2,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    }, {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"sensorid3\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"machineId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"TemporalJoin(joinType=[InnerJoin], where=[((id = sensorid3) AND __TEMPORAL_JOIN_CONDITION(timeSec, timestamp, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(id), __TEMPORAL_JOIN_LEFT_KEY(sensorid3), __TEMPORAL_JOIN_RIGHT_KEY(id)))], select=[timeSec, temp, sensorid3, id, machineId, timestamp])\"\n  }, {\n    \"id\" : 1254,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"machineid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[machineId AS machineid, temp, timeSec])\"\n  }, {\n    \"id\" : 1255,\n    \"type\" : \"stream-exec-local-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"maxTemp\",\n      \"internalName\" : \"$MAX$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"name\" : \"avgTemp\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DOUBLE NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"TimeAttribute\",\n      \"window\" : {\n        \"type\" : \"HoppingWindow\",\n        \"size\" : \"PT1H\",\n        \"slide\" : \"PT1M12S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"timeAttributeIndex\" : 2,\n      \"isRowtime\" : true\n    },\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`machineid` BIGINT NOT NULL, `max$0` DOUBLE, `sum$1` DOUBLE, `count$2` BIGINT, `count1$3` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"LocalWindowAggregate(groupBy=[machineid], window=[HOP(time_col=[timeSec], size=[1 h], slide=[72 s])], select=[machineid, MAX(temp) AS max$0, AVG(temp) AS (sum$1, count$2), COUNT(*) AS count1$3, slice_end('w$) AS $slice_end])\"\n  }, {\n    \"id\" : 1256,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`machineid` BIGINT NOT NULL, `max$0` DOUBLE, `sum$1` DOUBLE, `count$2` BIGINT, `count1$3` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"Exchange(distribution=[hash[machineid]])\"\n  }, {\n    \"id\" : 1257,\n    \"type\" : \"stream-exec-global-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"maxTemp\",\n      \"internalName\" : \"$MAX$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"name\" : \"avgTemp\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DOUBLE NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"SliceAttached\",\n      \"window\" : {\n        \"type\" : \"HoppingWindow\",\n        \"size\" : \"PT1H\",\n        \"slide\" : \"PT1M12S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"sliceEnd\" : 5,\n      \"isRowtime\" : true\n    },\n    \"namedWindowProperties\" : [ {\n      \"name\" : \"window_start\",\n      \"property\" : {\n        \"kind\" : \"WindowStart\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_end\",\n      \"property\" : {\n        \"kind\" : \"WindowEnd\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_time\",\n      \"property\" : {\n        \"kind\" : \"Rowtime\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    } ],\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"localAggInputRowType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"machineid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"machineid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"avgTemp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"window_start\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_end\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"GlobalWindowAggregate(groupBy=[machineid], window=[HOP(slice_end=[$slice_end], size=[1 h], slide=[72 s])], select=[machineid, MAX(max$0) AS maxTemp, AVG((sum$1, count$2)) AS avgTemp, COUNT(count1$3) AS window_start, start('w$) AS window_end, end('w$) AS window_time])\"\n  }, {\n    \"id\" : 1258,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 2,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 5,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"machineid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"avgTemp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"_timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[machineid, maxTemp, avgTemp, window_time AS _timeSec])\"\n  }, {\n    \"id\" : 1259,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`machine_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"machineid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"avgTemp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"_timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.machine_1], fields=[machineid, maxTemp, avgTemp, _timeSec])\"\n  }, {\n    \"id\" : 1260,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DOUBLE NOT NULL\"\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Calc(select=[sensorid, window_time AS timeSec, temp])\"\n  }, {\n    \"id\" : 1261,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`secreading_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.secreading_1], fields=[sensorid, timeSec, temp])\"\n  }, {\n    \"id\" : 1262,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`sensorreading_2`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputUpsertKey\" : [ 0, 1 ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"time\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"humidity\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.sensorreading_2], fields=[sensorid, time, temperature, humidity, timestamp])\"\n  }, {\n    \"id\" : 1263,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`sensors_3`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputUpsertKey\" : [ 0, 2 ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"machineId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placed\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.sensors_3], fields=[id, machineId, placed, timestamp])\"\n  } ],\n  \"edges\" : [ {\n    \"source\" : 1222,\n    \"target\" : 1223,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1223,\n    \"target\" : 1224,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1224,\n    \"target\" : 1225,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1225,\n    \"target\" : 1226,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1226,\n    \"target\" : 1227,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1227,\n    \"target\" : 1228,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1228,\n    \"target\" : 1229,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1230,\n    \"target\" : 1231,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1231,\n    \"target\" : 1232,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1232,\n    \"target\" : 1233,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1233,\n    \"target\" : 1234,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1234,\n    \"target\" : 1235,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1229,\n    \"target\" : 1236,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1235,\n    \"target\" : 1236,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1236,\n    \"target\" : 1237,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1237,\n    \"target\" : 1238,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1227,\n    \"target\" : 1239,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1239,\n    \"target\" : 1240,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1231,\n    \"target\" : 1241,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1241,\n    \"target\" : 1242,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1242,\n    \"target\" : 1243,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1243,\n    \"target\" : 1244,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1244,\n    \"target\" : 1245,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1240,\n    \"target\" : 1246,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1245,\n    \"target\" : 1246,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1246,\n    \"target\" : 1247,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1247,\n    \"target\" : 1248,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1248,\n    \"target\" : 1249,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1249,\n    \"target\" : 1250,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1250,\n    \"target\" : 1251,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1251,\n    \"target\" : 1252,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1240,\n    \"target\" : 1253,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1235,\n    \"target\" : 1253,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1253,\n    \"target\" : 1254,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1254,\n    \"target\" : 1255,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1255,\n    \"target\" : 1256,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1256,\n    \"target\" : 1257,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1257,\n    \"target\" : 1258,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1258,\n    \"target\" : 1259,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1227,\n    \"target\" : 1260,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1260,\n    \"target\" : 1261,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1223,\n    \"target\" : 1262,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1231,\n    \"target\" : 1263,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  } ]\n}"
}
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "hightemp_1",
      "columns" : [
        "\"machineid\" BIGINT NOT NULL",
        "\"sensorid\" BIGINT NOT NULL",
        "\"temp\" DOUBLE PRECISION NOT NULL",
        "\"timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"sensorid\"",
        "\"timeSec\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS hightemp_1 (\"machineid\" BIGINT NOT NULL,\"sensorid\" BIGINT NOT NULL,\"temp\" DOUBLE PRECISION NOT NULL,\"timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"sensorid\",\"timeSec\"));"
    },
    {
      "name" : "lasthour_1",
      "columns" : [
        "\"__pk1_id\" BIGINT NOT NULL",
        "\"maxTemp\" DOUBLE PRECISION NOT NULL",
        "\"avgTemp\" DOUBLE PRECISION NOT NULL",
        "\"_timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"__pk1_id\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS lasthour_1 (\"__pk1_id\" BIGINT NOT NULL,\"maxTemp\" DOUBLE PRECISION NOT NULL,\"avgTemp\" DOUBLE PRECISION NOT NULL,\"_timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"__pk1_id\"));"
    },
    {
      "name" : "machine_1",
      "columns" : [
        "\"machineid\" BIGINT NOT NULL",
        "\"maxTemp\" DOUBLE PRECISION NOT NULL",
        "\"avgTemp\" DOUBLE PRECISION NOT NULL",
        "\"_timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"machineid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS machine_1 (\"machineid\" BIGINT NOT NULL,\"maxTemp\" DOUBLE PRECISION NOT NULL,\"avgTemp\" DOUBLE PRECISION NOT NULL,\"_timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"machineid\"));"
    },
    {
      "name" : "secreading_1",
      "columns" : [
        "\"sensorid\" BIGINT NOT NULL",
        "\"timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"temp\" DOUBLE PRECISION NOT NULL"
      ],
      "primaryKeys" : [
        "\"sensorid\"",
        "\"timeSec\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS secreading_1 (\"sensorid\" BIGINT NOT NULL,\"timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL,\"temp\" DOUBLE PRECISION NOT NULL , PRIMARY KEY (\"sensorid\",\"timeSec\"));"
    },
    {
      "name" : "sensorreading_2",
      "columns" : [
        "\"sensorid\" BIGINT NOT NULL",
        "\"time\" BIGINT NOT NULL",
        "\"temperature\" DOUBLE PRECISION NOT NULL",
        "\"humidity\" DOUBLE PRECISION NOT NULL",
        "\"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"sensorid\"",
        "\"time\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS sensorreading_2 (\"sensorid\" BIGINT NOT NULL,\"time\" BIGINT NOT NULL,\"temperature\" DOUBLE PRECISION NOT NULL,\"humidity\" DOUBLE PRECISION NOT NULL,\"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"sensorid\",\"time\"));"
    },
    {
      "name" : "sensors_3",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"machineId\" BIGINT NOT NULL",
        "\"placed\" BIGINT NOT NULL",
        "\"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"id\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS sensors_3 (\"id\" BIGINT NOT NULL,\"machineId\" BIGINT NOT NULL,\"placed\" BIGINT NOT NULL,\"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"id\"));"
    },
    {
      "indexName" : "hightemp_1_hash_c3",
      "tableName" : "hightemp_1",
      "columns" : [
        "timeSec"
      ],
      "type" : "HASH",
      "sql" : "CREATE INDEX IF NOT EXISTS hightemp_1_hash_c3 ON hightemp_1 USING hash (\"timeSec\");"
    },
    {
      "indexName" : "secreading_1_btree_c2",
      "tableName" : "secreading_1",
      "columns" : [
        "temp"
      ],
      "type" : "BTREE",
      "sql" : "CREATE INDEX IF NOT EXISTS secreading_1_btree_c2 ON secreading_1 USING btree (\"temp\");"
    },
    {
      "indexName" : "secreading_1_hash_c1",
      "tableName" : "secreading_1",
      "columns" : [
        "timeSec"
      ],
      "type" : "HASH",
      "sql" : "CREATE INDEX IF NOT EXISTS secreading_1_hash_c1 ON secreading_1 USING hash (\"timeSec\");"
    },
    {
      "indexName" : "sensorreading_2_hash_c1",
      "tableName" : "sensorreading_2",
      "columns" : [
        "time"
      ],
      "type" : "HASH",
      "sql" : "CREATE INDEX IF NOT EXISTS sensorreading_2_hash_c1 ON sensorreading_2 USING hash (\"time\");"
    },
    {
      "indexName" : "sensors_3_hash_c1",
      "tableName" : "sensors_3",
      "columns" : [
        "machineId"
      ],
      "type" : "HASH",
      "sql" : "CREATE INDEX IF NOT EXISTS sensors_3_hash_c1 ON sensors_3 USING hash (\"machineId\");"
    }
  ],
  "views" : [
    {
      "name" : "Machine",
      "sql" : "CREATE OR REPLACE VIEW \"Machine\"(\"machineid\", \"maxTemp\", \"avgTemp\", \"_timeSec\") AS SELECT *\nFROM \"machine_1\"\nORDER BY \"machineid\";"
    },
    {
      "name" : "Sensors",
      "sql" : "CREATE OR REPLACE VIEW \"Sensors\"(\"id\", \"machineId\", \"placed\", \"timestamp\") AS SELECT *\nFROM \"sensors_3\"\nORDER BY \"id\";"
    },
    {
      "name" : "HighTemp",
      "sql" : "CREATE OR REPLACE VIEW \"HighTemp\"(\"machineid\", \"sensorid\", \"temp\", \"timeSec\") AS SELECT *\nFROM \"hightemp_1\"\nORDER BY \"timeSec\" DESC, \"sensorid\";"
    },
    {
      "name" : "SecReading",
      "sql" : "CREATE OR REPLACE VIEW \"SecReading\"(\"sensorid\", \"timeSec\", \"temp\") AS SELECT *\nFROM \"secreading_1\"\nORDER BY \"timeSec\" DESC, \"sensorid\";"
    },
    {
      "name" : "SensorReading",
      "sql" : "CREATE OR REPLACE VIEW \"SensorReading\"(\"sensorid\", \"time\", \"temperature\", \"humidity\", \"timestamp\") AS SELECT *\nFROM \"sensorreading_2\"\nORDER BY \"timestamp\" DESC NULLS LAST, \"sensorid\", \"time\";"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "HighTemp",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"hightemp_1\"\nORDER BY \"timeSec\" DESC, \"sensorid\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "sensorid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "timeSec"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"hightemp_1\"\nWHERE \"sensorid\" = $1 AND \"timeSec\" = $2\nORDER BY \"timeSec\" DESC",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "sensorid"
                },
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "timeSec"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "sensorid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"hightemp_1\"\nWHERE \"sensorid\" = $1\nORDER BY \"timeSec\" DESC",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "sensorid"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "timeSec"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"hightemp_1\"\nWHERE \"timeSec\" = $1\nORDER BY \"timeSec\" DESC, \"sensorid\"",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "timeSec"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Machine",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "machineid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"machine_1\"\nWHERE \"machineid\" = $1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "machineid"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"machine_1\"\nORDER BY \"machineid\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Machine",
        "fieldName" : "sensors",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"sensors_3\"\nWHERE \"machineId\" = $1\nORDER BY \"id\"",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "machineid"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Sensors",
        "fieldName" : "lastHour",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"lasthour_1\"\nWHERE \"__pk1_id\" = $1",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "lastHour",
        "fieldName" : "parent",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"sensors_3\"\nWHERE \"id\" = $1",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "__pk1_id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Sensors",
        "fieldName" : "readings",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"secreading_1\"\nWHERE \"sensorid\" = $1\nORDER BY \"timeSec\" DESC",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SecReading",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"secreading_1\"\nORDER BY \"timeSec\" DESC, \"sensorid\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "sensorid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "timeSec"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"secreading_1\"\nWHERE \"sensorid\" = $1 AND \"timeSec\" = $2\nORDER BY \"timeSec\" DESC",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "sensorid"
                },
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "timeSec"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "timeSec"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"secreading_1\"\nWHERE \"timeSec\" = $1\nORDER BY \"timeSec\" DESC, \"sensorid\"",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "timeSec"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "sensorid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"secreading_1\"\nWHERE \"sensorid\" = $1\nORDER BY \"timeSec\" DESC",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "sensorid"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SecReadingByTemp",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "temp"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM (SELECT \"sensorid\", \"timeSec\", \"temp\"\n  FROM \"secreading_1\"\n  WHERE \"temp\" > $1\n  ORDER BY \"timeSec\"\n  FETCH NEXT 10 ROWS ONLY) AS \"t0\"\nORDER BY \"timeSec\" DESC",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "temp"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SensorReading",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "sensorid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "time"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"sensorreading_2\"\nWHERE \"sensorid\" = $1 AND \"time\" = $2\nORDER BY \"timestamp\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "sensorid"
                },
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "time"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "sensorid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"sensorreading_2\"\nWHERE \"sensorid\" = $1\nORDER BY \"timestamp\" DESC NULLS LAST, \"time\"",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "sensorid"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "time"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"sensorreading_2\"\nWHERE \"time\" = $1\nORDER BY \"timestamp\" DESC NULLS LAST, \"sensorid\"",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "time"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"sensorreading_2\"\nORDER BY \"timestamp\" DESC NULLS LAST, \"sensorid\", \"time\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Sensors",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"sensors_3\"\nORDER BY \"id\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "id"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"sensors_3\"\nWHERE \"id\" = $1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "id"
                }
              ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\ntype HighTemp {\n  machineid: Float!\n  sensorid: Float!\n  temp: Float!\n  timeSec: DateTime!\n}\n\ntype Machine {\n  machineid: Float!\n  maxTemp: Float!\n  avgTemp: Float!\n  sensors(limit: Int = 10, offset: Int = 0): [Sensors!]\n}\n\ntype Query {\n  HighTemp(sensorid: Float, timeSec: DateTime, limit: Int = 10, offset: Int = 0): [HighTemp!]\n  Machine(machineid: Float, limit: Int = 10, offset: Int = 0): [Machine!]\n  SecReading(sensorid: Float, timeSec: DateTime, limit: Int = 10, offset: Int = 0): [SecReading!]\n  SecReadingByTemp(temp: Int!): [SecReadingByTemp!]\n  SensorReading(sensorid: Float, time: Float, limit: Int = 10, offset: Int = 0): [SensorReading!]\n  Sensors(id: Float, limit: Int = 10, offset: Int = 0): [Sensors!]\n}\n\ntype SecReading {\n  sensorid: Float!\n  timeSec: DateTime!\n  temp: Float!\n}\n\ntype SecReadingByTemp {\n  sensorid: Float!\n  timeSec: DateTime!\n  temp: Float!\n}\n\ntype SensorReading {\n  sensorid: Float!\n  time: Float!\n  temperature: Float!\n  humidity: Float!\n  timestamp: DateTime!\n}\n\ntype Sensors {\n  id: Float!\n  machineId: Float!\n  placed: Float!\n  timestamp: DateTime!\n  lastHour: lastHour\n  readings(limit: Int = 10, offset: Int = 0): [SecReading!]\n}\n\ntype lastHour {\n  maxTemp: Float!\n  avgTemp: Float!\n  parent: Sensors!\n}\n"
    }
  }
}
