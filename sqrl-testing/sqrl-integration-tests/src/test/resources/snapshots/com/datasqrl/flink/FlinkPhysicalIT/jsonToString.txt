>>>customer$2-lp-stream
LogicalTableScan(table=[[customer$1]], hints=[[[WatermarkHint inheritPath:[] options:[1]], [TimestampHint inheritPath:[] options:[1]]]]) hints[WatermarkHint options:[1], TimestampHint options:[1]]

>>>product$2-lp-stream
LogicalTableScan(table=[[product$1]], hints=[[[WatermarkHint inheritPath:[] options:[1]], [TimestampHint inheritPath:[] options:[1]]]]) hints[WatermarkHint options:[1], TimestampHint options:[1]]

>>>Agg-lp-database
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(_name=[$0], agg=[$1], __timestamp=[$2])
    LogicalProject(_name=[$0], agg=[$1], __timestamp=[$2])
      LogicalAggregate(group=[{0}], agg=[jsonObjectAgg($1, $0)], __timestamp=[MAX($4)])
        LogicalProject(name=[$5], $f1=['key'], _uuid=[$0], _uuid0=[$1], __timestamp=[$12])
          LogicalProject(_uuid=[$0], _uuid0=[$6], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], _ingest_time0=[$7], productid=[$8], name0=[$9], description=[$10], category=[$11], __timestamp=[CASE(<($1, $7), $7, $1)])
            LogicalJoin(condition=[true], joinType=[inner]) hints[JoinCostHint options:[STREAM, STREAM, 0, NONE]]
              LogicalTableScan(table=[[customer$2]])
              LogicalTableScan(table=[[product$2]])

>>>Array-lp-database
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC])
  LogicalProject(_uuid=[$0], _uuid0=[$1], obj=[$2], __timestamp=[$3])
    LogicalProject(_uuid=[$0], _uuid0=[$1], obj=[jsonArray($3)], __timestamp=[$12])
      LogicalProject(_uuid=[$0], _uuid0=[$6], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], _ingest_time0=[$7], productid=[$8], name0=[$9], description=[$10], category=[$11], __timestamp=[CASE(<($1, $7), $7, $1)])
        LogicalJoin(condition=[true], joinType=[inner]) hints[JoinCostHint options:[STREAM, STREAM, 0, NONE]]
          LogicalTableScan(table=[[customer$2]])
          LogicalTableScan(table=[[product$2]])

>>>ArrayAgg-lp-database
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(_name=[$0], agg=[$1], __timestamp=[$2])
    LogicalProject(_name=[$0], agg=[$1], __timestamp=[$2])
      LogicalAggregate(group=[{5}], agg=[jsonArrayAgg($5)], __timestamp=[MAX($12)])
        LogicalProject(_uuid=[$0], _uuid0=[$6], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], _ingest_time0=[$7], productid=[$8], name0=[$9], description=[$10], category=[$11], __timestamp=[CASE(<($1, $7), $7, $1)])
          LogicalJoin(condition=[true], joinType=[inner]) hints[JoinCostHint options:[STREAM, STREAM, 0, NONE]]
            LogicalTableScan(table=[[customer$2]])
            LogicalTableScan(table=[[product$2]])

>>>Exist-lp-database
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC])
  LogicalProject(_uuid=[$0], _uuid0=[$1], obj=[$2], __timestamp=[$3])
    LogicalProject(_uuid=[$0], _uuid0=[$1], obj=[jsonExists(toJson('{"a": true}'), '$.a')], __timestamp=[$12])
      LogicalProject(_uuid=[$0], _uuid0=[$6], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], _ingest_time0=[$7], productid=[$8], name0=[$9], description=[$10], category=[$11], __timestamp=[CASE(<($1, $7), $7, $1)])
        LogicalJoin(condition=[true], joinType=[inner]) hints[JoinCostHint options:[STREAM, STREAM, 0, NONE]]
          LogicalTableScan(table=[[customer$2]])
          LogicalTableScan(table=[[product$2]])

>>>ObjComplex-lp-database
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC])
  LogicalProject(_uuid=[$0], _uuid0=[$1], obj=[$2], __timestamp=[$3])
    LogicalProject(_uuid=[$0], _uuid0=[$1], obj=[jsonObject(CONCAT('application#', $5), $3)], __timestamp=[$12])
      LogicalProject(_uuid=[$0], _uuid0=[$6], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], _ingest_time0=[$7], productid=[$8], name0=[$9], description=[$10], category=[$11], __timestamp=[CASE(<($1, $7), $7, $1)])
        LogicalJoin(condition=[true], joinType=[inner]) hints[JoinCostHint options:[STREAM, STREAM, 0, NONE]]
          LogicalTableScan(table=[[customer$2]])
          LogicalTableScan(table=[[product$2]])

>>>Query-lp-database
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC])
  LogicalProject(_uuid=[$0], _uuid0=[$1], obj=[$2], __timestamp=[$3])
    LogicalProject(_uuid=[$0], _uuid0=[$1], obj=[jsonQuery(toJson('{"a": {"b": 1}}'), '$.a')], __timestamp=[$12])
      LogicalProject(_uuid=[$0], _uuid0=[$6], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], _ingest_time0=[$7], productid=[$8], name0=[$9], description=[$10], category=[$11], __timestamp=[CASE(<($1, $7), $7, $1)])
        LogicalJoin(condition=[true], joinType=[inner]) hints[JoinCostHint options:[STREAM, STREAM, 0, NONE]]
          LogicalTableScan(table=[[customer$2]])
          LogicalTableScan(table=[[product$2]])

>>>ToString-lp-database
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC])
  LogicalProject(_uuid=[$0], _uuid0=[$1], obj=[$2], __timestamp=[$3])
    LogicalProject(_uuid=[$0], _uuid0=[$1], obj=[jsonToString(toJson('{}'))], __timestamp=[$12])
      LogicalProject(_uuid=[$0], _uuid0=[$6], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], _ingest_time0=[$7], productid=[$8], name0=[$9], description=[$10], category=[$11], __timestamp=[CASE(<($1, $7), $7, $1)])
        LogicalJoin(condition=[true], joinType=[inner]) hints[JoinCostHint options:[STREAM, STREAM, 0, NONE]]
          LogicalTableScan(table=[[customer$2]])
          LogicalTableScan(table=[[product$2]])

>>>Array-data
[1000101]
[1000101]
[1000101]
[1000101]
[1000101]
[1000101]
[1000107]
[1000107]
[1000107]
[1000107]
[1000107]
[1000107]
[1000121]
[1000121]
[1000121]
[1000121]
[1000121]
[1000121]
[1000131]
[1000131]
[1000131]
[1000131]
[1000131]
[1000131]
>>>Agg-data
Emily F. Ludies, {"key": "Emily F. Ludies"}
John Mekker, {"key": "John Mekker"}
Mark Spielman, {"key": "Mark Spielman"}
Michelle Dagnes, {"key": "Michelle Dagnes"}
>>>ToString-data
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
>>>Query-data
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
{"b": 1}
>>>Exist-data
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
>>>ArrayAgg-data
Emily F. Ludies, ["Emily F. Ludies", "Emily F. Ludies", "Emily F. Ludies", "Emily F. Ludies", "Emily F. Ludies", "Emily F. Ludies"]
John Mekker, ["John Mekker", "John Mekker", "John Mekker", "John Mekker", "John Mekker", "John Mekker"]
Mark Spielman, ["Mark Spielman", "Mark Spielman", "Mark Spielman", "Mark Spielman", "Mark Spielman", "Mark Spielman"]
Michelle Dagnes, ["Michelle Dagnes", "Michelle Dagnes", "Michelle Dagnes", "Michelle Dagnes", "Michelle Dagnes", "Michelle Dagnes"]
>>>ObjComplex-data
{"application#Emily F. Ludies": 1000107}
{"application#Emily F. Ludies": 1000107}
{"application#Emily F. Ludies": 1000107}
{"application#Emily F. Ludies": 1000107}
{"application#Emily F. Ludies": 1000107}
{"application#Emily F. Ludies": 1000107}
{"application#John Mekker": 1000101}
{"application#John Mekker": 1000101}
{"application#John Mekker": 1000101}
{"application#John Mekker": 1000101}
{"application#John Mekker": 1000101}
{"application#John Mekker": 1000101}
{"application#Mark Spielman": 1000131}
{"application#Mark Spielman": 1000131}
{"application#Mark Spielman": 1000131}
{"application#Mark Spielman": 1000131}
{"application#Mark Spielman": 1000131}
{"application#Mark Spielman": 1000131}
{"application#Michelle Dagnes": 1000121}
{"application#Michelle Dagnes": 1000121}
{"application#Michelle Dagnes": 1000121}
{"application#Michelle Dagnes": 1000121}
{"application#Michelle Dagnes": 1000121}
{"application#Michelle Dagnes": 1000121}
