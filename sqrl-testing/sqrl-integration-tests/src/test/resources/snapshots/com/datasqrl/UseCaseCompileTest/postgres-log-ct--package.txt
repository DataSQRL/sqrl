>>>pipeline_explain.txt
=== Data
ID:     data_2
Type:   stream
Stage:  streams
Primary Key: id
Timestamp  : timestamp
Schema:
 - id: BIGINT NOT NULL
 - epoch_timestamp: BIGINT NOT NULL
 - some_value: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[data_1]], hints=[[[WatermarkHint inheritPath:[] options:[3]]]]) hints[WatermarkHint options:[3]]

=== Event.Event
ID:     data_2_1
Type:   export
Stage:  streams
Inputs: data_2

=== Event
ID:     event_2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - ID: INTEGER
 - EPOCH_TIMESTAMP: INTEGER
 - SOME_VALUE: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - TIMESTAMP: TIMESTAMP(6)
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[event_1]], hints=[[[WatermarkHint inheritPath:[] options:[5]]]]) hints[WatermarkHint options:[5]]

=== logger.LogEvent
ID:     event_2_2
Type:   export
Stage:  streams
Inputs: event_2

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochmillitotimestamp` AS 'com.datasqrl.time.EpochMilliToTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY TABLE `event_1` (\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `ID` INTEGER,\n  `EPOCH_TIMESTAMP` INTEGER,\n  `SOME_VALUE` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,\n  `TIMESTAMP` TIMESTAMP(6),\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL METADATA FROM 'timestamp',\n  PRIMARY KEY (`_uuid`) NOT ENFORCED,\n  WATERMARK FOR `event_time` AS (`event_time` - INTERVAL '0.0' SECOND)\n) WITH (\n  'slot.name' = 'flink_slot',\n  'format' = 'flexible-json',\n  'hostname' = 'database',\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'postgres-cdc',\n  'port' = '5432',\n  'database-name' = 'datasqrl',\n  'schema-name' = 'public',\n  'decoding.plugin.name' = 'pgoutput',\n  'table-name' = 'Event',\n  'debezium.slot.drop_on_stop' = 'false',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `data_1` (\n  `id` BIGINT NOT NULL,\n  `epoch_timestamp` BIGINT NOT NULL,\n  `some_value` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `timestamp` AS EPOCHMILLITOTIMESTAMP(`epoch_timestamp`),\n  PRIMARY KEY (`id`) NOT ENFORCED,\n  WATERMARK FOR `timestamp` AS (`timestamp` - INTERVAL '0.001' SECOND)\n) WITH (\n  'fields.id.end' = '9',\n  'fields.epoch_timestamp.kind' = 'sequence',\n  'number-of-rows' = '10',\n  'connector' = 'datagen',\n  'fields.epoch_timestamp.end' = '1719319565',\n  'fields.some_value.kind' = 'random',\n  'fields.id.kind' = 'sequence',\n  'fields.id.start' = '0',\n  'fields.epoch_timestamp.start' = '1719318565'\n);",
    "CREATE TEMPORARY TABLE `data_2_1` (\n  `id` BIGINT NOT NULL,\n  `epoch_timestamp` BIGINT NOT NULL,\n  `some_value` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc',\n  'driver' = 'org.postgresql.Driver',\n  'format' = 'flexible-json',\n  'table-name' = 'Event',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `event_2_2` (\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `ID` INTEGER,\n  `EPOCH_TIMESTAMP` INTEGER,\n  `SOME_VALUE` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,\n  `TIMESTAMP` TIMESTAMP(6),\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\n) WITH (\n  'connector' = 'print',\n  'print-identifier' = 'LogEvent'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT *\nFROM `data_1`;",
    "CREATE VIEW `table$2`\nAS\nSELECT *\nFROM `event_1`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `data_2_1`\n(SELECT *\nFROM `table$1`)\n;\nINSERT INTO `event_2_2`\n(SELECT *\nFROM `table$2`)\n;\nEND;"
  ],
  "connectors" : [
    "print",
    "datagen",
    "jdbc",
    "postgres-cdc"
  ],
  "formats" : [
    "flexible-json"
  ]
}
>>>postgres-log.json
{
  "ddl" : [
    {
      "name" : "Event",
      "columns" : [
        "\"_uuid\" TEXT NOT NULL",
        "\"ID\" INTEGER ",
        "\"EPOCH_TIMESTAMP\" INTEGER ",
        "\"SOME_VALUE\" TEXT ",
        "\"TIMESTAMP\" TIMESTAMP WITHOUT TIME ZONE "
      ],
      "primaryKeys" : [ ],
      "sql" : "CREATE TABLE IF NOT EXISTS Event (\"_uuid\" TEXT NOT NULL,\"ID\" INTEGER ,\"EPOCH_TIMESTAMP\" INTEGER ,\"SOME_VALUE\" TEXT ,\"TIMESTAMP\" TIMESTAMP WITHOUT TIME ZONE  );"
    },
    {
      "tableName" : "Event",
      "primaryKey" : "_uuid",
      "sql" : "CREATE OR REPLACE FUNCTION notify_on_Event_insert()\nRETURNS TRIGGER AS $$\nBEGIN\n   PERFORM pg_notify('Event_notify', NEW._uuid::text);\n   RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER insert_notify_trigger\nAFTER INSERT ON Event\nFOR EACH ROW EXECUTE PROCEDURE notify_on_Event_insert();"
    }
  ]
}
