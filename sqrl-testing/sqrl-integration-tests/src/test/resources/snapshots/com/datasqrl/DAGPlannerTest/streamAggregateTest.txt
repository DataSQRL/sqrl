>>>pipeline_explain.txt
=== Customer
ID:     customer$2
Type:   stream
Stage:  streams
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[customer$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

=== OrderAgg1
ID:     orderagg1$1
Type:   state
Stage:  streams
Inputs: orders$2
Primary Key: customer
Timestamp  : __timestamp
Schema:
 - customer: BIGINT NOT NULL
 - order_count: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalAggregate(group=[{0}], order_count=[COUNT()], __timestamp=[MAX($2)])
  LogicalProject(customer=[$1], id=[$0], time=[$2])
    LogicalTableScan(table=[[orders$2]])

=== OrderAgg2
ID:     orderagg2$1
Type:   state
Stage:  streams
Inputs: orders$2
Primary Key: __pk
Timestamp  : __timestamp
Schema:
 - order_count: BIGINT NOT NULL
 - __pk: INTEGER NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)
Plan:
LogicalProject(order_count=[$0], __pk=[1], __timestamp=[$1])
  LogicalAggregate(group=[{}], order_count=[COUNT()], __timestamp=[MAX($2)])
    LogicalTableScan(table=[[orders$2]])

=== Orders
ID:     orders$2
Type:   stream
Stage:  streams
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType(INTEGER NOT NULL _idx, BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[2]]]]) hints[WatermarkHint options:[2]]

=== Ordertime1
ID:     ordertime1$1
Type:   stream
Stage:  streams
Inputs: orders$2
Primary Key: customer, bucket
Timestamp  : bucket
Schema:
 - customer: BIGINT NOT NULL
 - bucket: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - order_count: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], order_count=[COUNT()]) hints[TumbleAggregationHint options:[1, FUNCTION, 3, 1000, 0]]
  LogicalProject(customer=[$1], bucket=[endOfSecond($2)], id=[$0], time=[$2])
    LogicalTableScan(table=[[orders$2]])

=== Ordertime2
ID:     ordertime2$1
Type:   stream
Stage:  streams
Inputs: orders$2
Primary Key: customer, bucket
Timestamp  : bucket
Schema:
 - customer: BIGINT NOT NULL
 - bucket: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - order_count: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], order_count=[COUNT()]) hints[TumbleAggregationHint options:[1, FUNCTION, 3, 60000, 15000]]
  LogicalProject(customer=[$1], bucket=[endOfMinute($2, 1:BIGINT, 15:BIGINT)], id=[$0], time=[$2])
    LogicalTableScan(table=[[orders$2]])

=== Ordertime3
ID:     ordertime3$1
Type:   stream
Stage:  streams
Inputs: orders$2
Primary Key: customer, bucket
Timestamp  : bucket
Schema:
 - customer: BIGINT NOT NULL
 - bucket: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - order_count: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], order_count=[COUNT()]) hints[TumbleAggregationHint options:[1, FUNCTION, 3, 18000000, 1800000]]
  LogicalProject(customer=[$1], bucket=[endOfHour($2, 5:BIGINT, 30:BIGINT)], id=[$0], time=[$2])
    LogicalTableScan(table=[[orders$2]])

=== Product
ID:     product$2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - productid: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - description: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - category: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalTableScan(table=[[product$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>database-schema.sql
CREATE TABLE IF NOT EXISTS customer$2 ("customerid" BIGINT NOT NULL,"email" TEXT NOT NULL,"name" TEXT NOT NULL,"lastUpdated" BIGINT NOT NULL,"timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("customerid","lastUpdated"));
CREATE TABLE IF NOT EXISTS orderagg1$1 ("customer" BIGINT NOT NULL,"order_count" BIGINT NOT NULL,"__timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("customer"));
CREATE TABLE IF NOT EXISTS orderagg2$1 ("order_count" BIGINT NOT NULL,"__pk" INTEGER NOT NULL,"__timestamp" TIMESTAMP WITH TIME ZONE  , PRIMARY KEY ("__pk"));
CREATE TABLE IF NOT EXISTS orders$2 ("id" BIGINT NOT NULL,"customerid" BIGINT NOT NULL,"time" TIMESTAMP WITH TIME ZONE NOT NULL,"entries" JSONB NOT NULL , PRIMARY KEY ("id","time"));
CREATE TABLE IF NOT EXISTS ordertime1$1 ("customer" BIGINT NOT NULL,"bucket" TIMESTAMP WITH TIME ZONE NOT NULL,"order_count" BIGINT NOT NULL , PRIMARY KEY ("customer","bucket"));
CREATE TABLE IF NOT EXISTS ordertime2$1 ("customer" BIGINT NOT NULL,"bucket" TIMESTAMP WITH TIME ZONE NOT NULL,"order_count" BIGINT NOT NULL , PRIMARY KEY ("customer","bucket"));
CREATE TABLE IF NOT EXISTS ordertime3$1 ("customer" BIGINT NOT NULL,"bucket" TIMESTAMP WITH TIME ZONE NOT NULL,"order_count" BIGINT NOT NULL , PRIMARY KEY ("customer","bucket"));
CREATE TABLE IF NOT EXISTS product$2 ("productid" BIGINT NOT NULL,"name" TEXT NOT NULL,"description" TEXT NOT NULL,"category" TEXT NOT NULL,"_ingest_time" TIMESTAMP WITH TIME ZONE NOT NULL,"_uuid" TEXT NOT NULL , PRIMARY KEY ("_uuid"));
>>>flink-plan.sql
CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptostring` AS 'com.datasqrl.time.TimestampToString' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofmonth` AS 'com.datasqrl.time.EndOfMonth' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofweek` AS 'com.datasqrl.time.EndOfWeek' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `parsetimestamp` AS 'com.datasqrl.time.ParseTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `uuid` AS 'com.datasqrl.secure.Uuid' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochmillitotimestamp` AS 'com.datasqrl.time.EpochMilliToTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofminute` AS 'com.datasqrl.time.EndOfMinute' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptoepoch` AS 'com.datasqrl.time.TimestampToEpoch' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofsecond` AS 'com.datasqrl.time.EndOfSecond' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochtotimestamp` AS 'com.datasqrl.time.EpochToTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofday` AS 'com.datasqrl.time.EndOfDay' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `atzone` AS 'com.datasqrl.time.AtZone' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofhour` AS 'com.datasqrl.time.EndOfHour' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofyear` AS 'com.datasqrl.time.EndOfYear' LANGUAGE JAVA;

CREATE TEMPORARY TABLE `orders$1` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`_idx` INTEGER NOT NULL, `productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,
  PRIMARY KEY (`id`, `time`) NOT ENFORCED,
  WATERMARK FOR `time` AS (`time` - INTERVAL '0.001' SECOND)
) WITH (
  'format' = 'json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10000',
  'connector' = 'filesystem',
  'source.path.regex-pattern' = ''
);

CREATE TEMPORARY TABLE `product$1` (
  `productid` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `_uuid` AS UUID(),
  PRIMARY KEY (`_uuid`) NOT ENFORCED,
  WATERMARK FOR `_ingest_time` AS (`_ingest_time` - INTERVAL '0.001' SECOND)
) WITH (
  'format' = 'json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10000',
  'connector' = 'filesystem',
  'source.path.regex-pattern' = ''
);

CREATE TEMPORARY TABLE `customer$1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` AS EPOCHTOTIMESTAMP(`lastUpdated`),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS (`timestamp` - INTERVAL '0.001' SECOND)
) WITH (
  'format' = 'json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10000',
  'connector' = 'filesystem',
  'source.path.regex-pattern' = ''
);

CREATE TEMPORARY TABLE `customer$2` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'customer$2',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `orderagg1$1` (
  `customer` BIGINT NOT NULL,
  `order_count` BIGINT NOT NULL,
  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'orderagg1$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `orderagg2$1` (
  `order_count` BIGINT NOT NULL,
  `__pk` INTEGER NOT NULL,
  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'orderagg2$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `orders$2` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`_idx` INTEGER NOT NULL, `productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'orders$2',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `ordertime1$1` (
  `customer` BIGINT NOT NULL,
  `bucket` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `order_count` BIGINT NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'ordertime1$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `ordertime2$1` (
  `customer` BIGINT NOT NULL,
  `bucket` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `order_count` BIGINT NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'ordertime2$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `ordertime3$1` (
  `customer` BIGINT NOT NULL,
  `bucket` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `order_count` BIGINT NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'ordertime3$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `product$2` (
  `productid` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'product$2',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE VIEW `table$1`
AS
SELECT `customerid` AS `customer`, ENDOFSECOND(`time`) AS `bucket`, `id`, `time`
FROM `orders$1`;

CREATE VIEW `table$2`
AS
SELECT `customerid` AS `customer`, ENDOFMINUTE(`time`, 1, 15) AS `bucket`, `id`, `time`
FROM `orders$1`;

CREATE VIEW `table$3`
AS
SELECT `customerid` AS `customer`, ENDOFHOUR(`time`, 5, 30) AS `bucket`, `id`, `time`
FROM `orders$1`;

EXECUTE STATEMENT SET BEGIN
INSERT INTO `customer$2`
(SELECT *
FROM `customer$1`)
;
INSERT INTO `orderagg1$1`
(SELECT `customerid` AS `customer`, COUNT(*) AS `order_count`, MAX(`time`) AS `__timestamp`
FROM `orders$1`
GROUP BY `customerid`)
;
INSERT INTO `orderagg2$1`
(SELECT COUNT(*) AS `order_count`, 1 AS `__pk`, MAX(`time`) AS `__timestamp`
FROM `orders$1`)
;
INSERT INTO `orders$2`
(SELECT *
FROM `orders$1`)
;
INSERT INTO `ordertime1$1`
(SELECT `customer`, `window_time` AS `bucket`, COUNT(*) AS `order_count`
FROM TABLE(TUMBLE((TABLE `table$1`), (DESCRIPTOR(`time`)), INTERVAL '1' SECOND(4), INTERVAL '0' SECOND(1))) AS `t0`
GROUP BY `customer`, `window_start`, `window_end`, `window_time`)
;
INSERT INTO `ordertime2$1`
(SELECT `customer`, `window_time` AS `bucket`, COUNT(*) AS `order_count`
FROM TABLE(TUMBLE((TABLE `table$2`), (DESCRIPTOR(`time`)), INTERVAL '60' SECOND(5), INTERVAL '15' SECOND(5))) AS `t0`
GROUP BY `customer`, `window_start`, `window_end`, `window_time`)
;
INSERT INTO `ordertime3$1`
(SELECT `customer`, `window_time` AS `bucket`, COUNT(*) AS `order_count`
FROM TABLE(TUMBLE((TABLE `table$3`), (DESCRIPTOR(`time`)), INTERVAL '18000' SECOND(8), INTERVAL '1800' SECOND(7))) AS `t0`
GROUP BY `customer`, `window_start`, `window_end`, `window_time`)
;
INSERT INTO `product$2`
(SELECT *
FROM `product$1`)
;
END;
