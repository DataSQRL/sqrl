>>>pipeline_explain.txt
=== Schema
ID:     schema_2
Type:   stream
Stage:  flink
Primary Key: uuidField, timestampMillisField
Timestamp  : timestampMillisField
Schema:
 - uuidField: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - timestampMillisField: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - nullableTimestampMillisField: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)
 - timestampMicrosField: TIMESTAMP_WITH_LOCAL_TIME_ZONE(6) NOT NULL
 - nullableTimestampMicrosField: TIMESTAMP_WITH_LOCAL_TIME_ZONE(6)
 - dateField: DATE NOT NULL
 - nullableDateField: DATE
 - stringField: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - nullableStringField: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - intField: INTEGER NOT NULL
 - nullableIntField: INTEGER
 - longField: BIGINT NOT NULL
 - nullableLongField: BIGINT
 - floatField: FLOAT NOT NULL
 - nullableFloatField: FLOAT
 - doubleField: DOUBLE NOT NULL
 - nullableDoubleField: DOUBLE
 - booleanField: BOOLEAN NOT NULL
 - nullableBooleanField: BOOLEAN
 - enumField: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - nullableEnumField: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - decimalField: DECIMAL(10, 2) NOT NULL
Plan:
LogicalTableScan(table=[[schema_1]])

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY TABLE `schema_1` (\n  `uuidField` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `timestampMillisField` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `nullableTimestampMillisField` TIMESTAMP(3) WITH LOCAL TIME ZONE,\n  `timestampMicrosField` TIMESTAMP(6) WITH LOCAL TIME ZONE NOT NULL,\n  `nullableTimestampMicrosField` TIMESTAMP(6) WITH LOCAL TIME ZONE,\n  `dateField` DATE NOT NULL,\n  `nullableDateField` DATE,\n  `stringField` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `nullableStringField` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,\n  `intField` INTEGER NOT NULL,\n  `nullableIntField` INTEGER,\n  `longField` BIGINT NOT NULL,\n  `nullableLongField` BIGINT,\n  `floatField` FLOAT NOT NULL,\n  `nullableFloatField` FLOAT,\n  `doubleField` DOUBLE NOT NULL,\n  `nullableDoubleField` DOUBLE,\n  `booleanField` BOOLEAN NOT NULL,\n  `nullableBooleanField` BOOLEAN,\n  `enumField` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `nullableEnumField` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,\n  `decimalField` DECIMAL(10, 2) NOT NULL,\n  PRIMARY KEY (`uuidField`, `timestampMillisField`) NOT ENFORCED,\n  WATERMARK FOR `timestampMillisField` AS `timestampMillisField` - INTERVAL '0.0' SECOND\n) WITH (\n  'format' = 'flexible-json',\n  'path' = '${DATA_PATH}/schema.jsonl',\n  'connector' = 'filesystem'\n);",
    "CREATE TEMPORARY TABLE `schema_2` (\n  `uuidField` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `timestampMillisField` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `nullableTimestampMillisField` TIMESTAMP(3) WITH LOCAL TIME ZONE,\n  `timestampMicrosField` TIMESTAMP(6) WITH LOCAL TIME ZONE NOT NULL,\n  `nullableTimestampMicrosField` TIMESTAMP(6) WITH LOCAL TIME ZONE,\n  `dateField` DATE NOT NULL,\n  `nullableDateField` DATE,\n  `stringField` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `nullableStringField` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,\n  `intField` INTEGER NOT NULL,\n  `nullableIntField` INTEGER,\n  `longField` BIGINT NOT NULL,\n  `nullableLongField` BIGINT,\n  `floatField` FLOAT NOT NULL,\n  `nullableFloatField` FLOAT,\n  `doubleField` DOUBLE NOT NULL,\n  `nullableDoubleField` DOUBLE,\n  `booleanField` BOOLEAN NOT NULL,\n  `nullableBooleanField` BOOLEAN,\n  `enumField` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `nullableEnumField` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,\n  `decimalField` DECIMAL(10, 2) NOT NULL,\n  PRIMARY KEY (`uuidField`, `timestampMillisField`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'schema_2',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT *\nFROM `schema_1`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `schema_2`\n(SELECT *\n FROM `table$1`)\n;\nEND;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "filesystem"
  ],
  "formats" : [
    "flexible-json"
  ]
}
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "schema_2",
      "columns" : [
        "\"uuidField\" TEXT NOT NULL",
        "\"timestampMillisField\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"nullableTimestampMillisField\" TIMESTAMP WITH TIME ZONE ",
        "\"timestampMicrosField\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"nullableTimestampMicrosField\" TIMESTAMP WITH TIME ZONE ",
        "\"dateField\" DATE NOT NULL",
        "\"nullableDateField\" DATE ",
        "\"stringField\" TEXT NOT NULL",
        "\"nullableStringField\" TEXT ",
        "\"intField\" INTEGER NOT NULL",
        "\"nullableIntField\" INTEGER ",
        "\"longField\" BIGINT NOT NULL",
        "\"nullableLongField\" BIGINT ",
        "\"floatField\" FLOAT NOT NULL",
        "\"nullableFloatField\" FLOAT ",
        "\"doubleField\" DOUBLE PRECISION NOT NULL",
        "\"nullableDoubleField\" DOUBLE PRECISION ",
        "\"booleanField\" BOOLEAN NOT NULL",
        "\"nullableBooleanField\" BOOLEAN ",
        "\"enumField\" TEXT NOT NULL",
        "\"nullableEnumField\" TEXT ",
        "\"decimalField\" NUMERIC NOT NULL"
      ],
      "primaryKeys" : [
        "\"uuidField\"",
        "\"timestampMillisField\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS schema_2 (\"uuidField\" TEXT NOT NULL,\"timestampMillisField\" TIMESTAMP WITH TIME ZONE NOT NULL,\"nullableTimestampMillisField\" TIMESTAMP WITH TIME ZONE ,\"timestampMicrosField\" TIMESTAMP WITH TIME ZONE NOT NULL,\"nullableTimestampMicrosField\" TIMESTAMP WITH TIME ZONE ,\"dateField\" DATE NOT NULL,\"nullableDateField\" DATE ,\"stringField\" TEXT NOT NULL,\"nullableStringField\" TEXT ,\"intField\" INTEGER NOT NULL,\"nullableIntField\" INTEGER ,\"longField\" BIGINT NOT NULL,\"nullableLongField\" BIGINT ,\"floatField\" FLOAT NOT NULL,\"nullableFloatField\" FLOAT ,\"doubleField\" DOUBLE PRECISION NOT NULL,\"nullableDoubleField\" DOUBLE PRECISION ,\"booleanField\" BOOLEAN NOT NULL,\"nullableBooleanField\" BOOLEAN ,\"enumField\" TEXT NOT NULL,\"nullableEnumField\" TEXT ,\"decimalField\" NUMERIC NOT NULL , PRIMARY KEY (\"uuidField\",\"timestampMillisField\"));"
    },
    {
      "indexName" : "schema_2_hash_c1",
      "tableName" : "schema_2",
      "columns" : [
        "timestampMillisField"
      ],
      "type" : "HASH",
      "sql" : "CREATE INDEX IF NOT EXISTS schema_2_hash_c1 ON schema_2 USING hash (\"timestampMillisField\");"
    }
  ],
  "views" : [
    {
      "name" : "Schema",
      "sql" : "CREATE OR REPLACE VIEW \"Schema\"(\"uuidField\", \"timestampMillisField\", \"nullableTimestampMillisField\", \"timestampMicrosField\", \"nullableTimestampMicrosField\", \"dateField\", \"nullableDateField\", \"stringField\", \"nullableStringField\", \"intField\", \"nullableIntField\", \"longField\", \"nullableLongField\", \"floatField\", \"nullableFloatField\", \"doubleField\", \"nullableDoubleField\", \"booleanField\", \"nullableBooleanField\", \"enumField\", \"nullableEnumField\", \"decimalField\") AS SELECT *\nFROM \"schema_2\"\nORDER BY \"timestampMillisField\" DESC NULLS LAST, \"uuidField\";"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Schema",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "timestampMillisField"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"schema_2\"\nWHERE \"timestampMillisField\" = $1\nORDER BY \"timestampMillisField\" DESC NULLS LAST, \"uuidField\"",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "timestampMillisField"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"schema_2\"\nORDER BY \"timestampMillisField\" DESC NULLS LAST, \"uuidField\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "uuidField"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "timestampMillisField"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"schema_2\"\nWHERE \"uuidField\" = $1 AND \"timestampMillisField\" = $2\nORDER BY \"timestampMillisField\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "uuidField"
                },
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "timestampMillisField"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "uuidField"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"schema_2\"\nWHERE \"uuidField\" = $1\nORDER BY \"timestampMillisField\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "uuidField"
                }
              ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "\"An RFC-3339 compliant Full Date Scalar\"\nscalar Date\n\n\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\ntype Query {\n  Schema(uuidField: String, timestampMillisField: DateTime, limit: Int = 10, offset: Int = 0): [Schema!]\n}\n\ntype Schema {\n  uuidField: String!\n  timestampMillisField: DateTime!\n  nullableTimestampMillisField: DateTime\n  timestampMicrosField: DateTime!\n  nullableTimestampMicrosField: DateTime\n  dateField: Date!\n  nullableDateField: Date\n  stringField: String!\n  nullableStringField: String\n  intField: Int!\n  nullableIntField: Int\n  longField: Float!\n  nullableLongField: Float\n  floatField: Float!\n  nullableFloatField: Float\n  doubleField: Float!\n  nullableDoubleField: Float\n  booleanField: Boolean!\n  nullableBooleanField: Boolean\n  enumField: String!\n  nullableEnumField: String\n  decimalField: Float!\n}\n"
    }
  }
}
