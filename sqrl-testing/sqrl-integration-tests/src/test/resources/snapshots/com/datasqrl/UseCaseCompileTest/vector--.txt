>>>pipeline_explain.txt
=== CategoryCentroids
ID:     default_catalog.default_database.CategoryCentroids
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.VectorData
Primary Key: category_id
Timestamp  : -
Schema:
 - category_id: INTEGER NOT NULL
 - center_vector: DOUBLE NOT NULL ARRAY
Plan:
LogicalProject(category_id=[$0], center_vector=[vector_to_double($1)])
  LogicalAggregate(group=[{0}], agg#0=[CENTER($1)])
    LogicalProject(category_id=[$1], vector=[$2])
      LogicalTableScan(table=[[default_catalog, default_database, VectorData]])
SQL: CREATE VIEW CategoryCentroids AS  SELECT category_id, vector_to_double(CENTER(vector)) as center_vector FROM VectorData GROUP BY category_id;

=== DocumentSimilarity
ID:     default_catalog.default_database.DocumentSimilarity
Type:   query
Stage:  postgres
Inputs: default_catalog.default_database.VectorData
Annotations:
 - parameters: doc_id
 - base-table: DocumentSimilarity
Plan:
LogicalSort(sort0=[$1], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first])
  LogicalProject(doc_id=[$3], score=[cosine_similarity($2, $5)])
    LogicalFilter(condition=[=($0, ?0)])
      LogicalJoin(condition=[<>($0, $3)], joinType=[inner])
        LogicalTableScan(table=[[default_catalog, default_database, VectorData]])
        LogicalTableScan(table=[[default_catalog, default_database, VectorData]])
SQL: CREATE VIEW DocumentSimilarity AS  SELECT v2.doc_id, cosine_similarity(v1.vector, v2.vector) as score
                                           FROM VectorData v1 JOIN VectorData v2 ON v1.doc_id <> v2.doc_id
                                           WHERE v1.doc_id = ?      
                                           ORDER BY score DESC, doc_id ASC;

=== DocumentSimilarityIndex
ID:     default_catalog.default_database.DocumentSimilarityIndex
Type:   query
Stage:  postgres
Inputs: default_catalog.default_database.VectorData
Annotations:
 - parameters: doc_id
 - base-table: DocumentSimilarityIndex
Plan:
LogicalSort(sort0=[$3], dir0=[DESC-nulls-last])
  LogicalProject(doc_id=[$3], category_id=[$4], vector=[$5], EXPR$3=[cosine_similarity($2, $5)])
    LogicalFilter(condition=[AND(=($0, ?0), <>($0, $3))])
      LogicalJoin(condition=[>(cosine_similarity($2, $5), 0.5:DECIMAL(2, 1))], joinType=[inner])
        LogicalTableScan(table=[[default_catalog, default_database, VectorData]])
        LogicalTableScan(table=[[default_catalog, default_database, VectorData]])
SQL: CREATE VIEW DocumentSimilarityIndex AS   SELECT e.*
                        FROM VectorData i JOIN VectorData e ON cosine_similarity(i.vector, e.vector) > 0.5
                        WHERE i.doc_id = ?       AND i.doc_id <> e.doc_id
                        ORDER BY cosine_similarity(i.vector, e.vector) DESC;

=== VectorData
ID:     default_catalog.default_database.VectorData
Type:   state
Stage:  flink
Primary Key: doc_id
Timestamp  : -
Schema:
 - doc_id: INTEGER NOT NULL
 - category_id: INTEGER NOT NULL
 - vector: RAW('com.datasqrl.flinkrunner.types.vector.FlinkVectorType', 'AEdjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIudHlwZXMudmVjdG9yLkZsaW5rVmVjdG9yVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM=')
Plan:
LogicalProject(doc_id=[$0], category_id=[$1], vector=[double_to_vector(CAST($2):DOUBLE NOT NULL ARRAY)])
  LogicalProject(doc_id=[$0], category_id=[$1], vector=[$2])
    LogicalUnion(all=[true])
      LogicalProject(EXPR$0=[1], EXPR$1=[10], EXPR$2=[ARRAY(0.9:DECIMAL(3, 2), 0.8:DECIMAL(3, 2), 0.01:DECIMAL(3, 2), 0.1:DECIMAL(3, 2), 0.15:DECIMAL(3, 2))])
        LogicalValues(tuples=[[{ 0 }]])
      LogicalProject(EXPR$0=[2], EXPR$1=[10], EXPR$2=[ARRAY(0.85:DECIMAL(3, 2), 0.85:DECIMAL(3, 2), 0.03:DECIMAL(3, 2), 0.12:DECIMAL(3, 2), 0.09:DECIMAL(3, 2))])
        LogicalValues(tuples=[[{ 0 }]])
      LogicalProject(EXPR$0=[3], EXPR$1=[5], EXPR$2=[ARRAY(0.05:DECIMAL(3, 2), 0.1:DECIMAL(3, 2), 0.0:DECIMAL(3, 2), 0.9:DECIMAL(3, 2), 0.85:DECIMAL(3, 2))])
        LogicalValues(tuples=[[{ 0 }]])
      LogicalProject(EXPR$0=[4], EXPR$1=[5], EXPR$2=[ARRAY(0.1:DECIMAL(3, 2), 0.12:DECIMAL(3, 2), 0.05:DECIMAL(3, 2), 0.85:DECIMAL(3, 2), 0.9:DECIMAL(3, 2))])
        LogicalValues(tuples=[[{ 0 }]])
SQL: CREATE VIEW VectorData AS  SELECT doc_id, category_id, double_to_vector(vector) AS vector FROM (VALUES
             (1, 10, ARRAY[0.9, 0.8, 0.01, 0.1, 0.15]),
             (2, 10, ARRAY[0.85, 0.85, 0.03, 0.12, 0.09]),
             (3, 5, ARRAY[0.05, 0.1, 0.0, 0.9, 0.85]),
             (4, 5, ARRAY[0.1, 0.12, 0.05, 0.85, 0.9])
     ) AS data_table(doc_id, category_id, vector);

>>>flink-sql-no-functions.sql
CREATE VIEW `VectorData`
AS
SELECT `doc_id`, `category_id`, `double_to_vector`(`vector`) AS `vector`
FROM (VALUES ROW(1, 10, ARRAY[0.9, 0.8, 0.01, 0.1, 0.15]),
   ROW(2, 10, ARRAY[0.85, 0.85, 0.03, 0.12, 0.09]),
   ROW(3, 5, ARRAY[0.05, 0.1, 0.0, 0.9, 0.85]),
   ROW(4, 5, ARRAY[0.1, 0.12, 0.05, 0.85, 0.9])) AS `data_table` (`doc_id`, `category_id`, `vector`);
CREATE VIEW `CategoryCentroids`
AS
SELECT `category_id`, `vector_to_double`(`CENTER`(`vector`)) AS `center_vector`
FROM `VectorData`
GROUP BY `category_id`;
CREATE VIEW `CentroidTest`
AS
SELECT `category_id`, `center_vector`
FROM `CategoryCentroids`;
CREATE VIEW `DataTest`
AS
SELECT `doc_id`, `category_id`
FROM `VectorData`;
CREATE TABLE `CategoryCentroids_1` (
  `category_id` INTEGER NOT NULL,
  `center_vector` RAW('com.datasqrl.flinkrunner.types.json.FlinkJsonType', 'AENjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIudHlwZXMuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAw=='),
  PRIMARY KEY (`category_id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'CategoryCentroids_1'
);
CREATE TABLE `VectorData_2` (
  `doc_id` INTEGER NOT NULL,
  `category_id` INTEGER NOT NULL,
  `vector` RAW('com.datasqrl.flinkrunner.types.vector.FlinkVectorType', 'AEdjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIudHlwZXMudmVjdG9yLkZsaW5rVmVjdG9yVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  PRIMARY KEY (`doc_id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'VectorData_2'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`CategoryCentroids_1`
(SELECT `category_id`, `to_jsonb`(`center_vector`) AS `center_vector`
 FROM `default_catalog`.`default_database`.`CategoryCentroids`)
;
INSERT INTO `default_catalog`.`default_database`.`VectorData_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`VectorData`)
 ;
 END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres-schema.sql
CREATE EXTENSION IF NOT EXISTS vector;

CREATE TABLE IF NOT EXISTS "CategoryCentroids_1" ("category_id" INTEGER NOT NULL, "center_vector" JSONB  , PRIMARY KEY ("category_id"));
CREATE TABLE IF NOT EXISTS "VectorData_2" ("doc_id" INTEGER NOT NULL, "category_id" INTEGER NOT NULL, "vector" VECTOR(5)  , PRIMARY KEY ("doc_id"));

CREATE INDEX IF NOT EXISTS "VectorData_2_vector_cosine_c2" ON "VectorData_2" USING HNSW ("vector" vector_cosine_ops)
>>>postgres-views.sql
CREATE OR REPLACE VIEW "VectorData"("doc_id", "category_id", "vector") AS SELECT *
FROM "VectorData_2"
>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CategoryCentroids",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            },
            {
              "type" : "variable",
              "path" : "category_id"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"CategoryCentroids_1\"\nWHERE \"category_id\" = $1",
            "parameters" : [
              {
                "type" : "arg",
                "path" : "category_id"
              }
            ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "VectorData",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"VectorData_2\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "DocumentSimilarity",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "doc_id"
            },
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT \"VectorData_22\".\"doc_id\", 1 - (\"VectorData_20\".\"vector\" <=> \"VectorData_22\".\"vector\") AS \"score\"\nFROM \"VectorData_2\" AS \"VectorData_20\"\n INNER JOIN \"VectorData_2\" AS \"VectorData_22\" ON \"VectorData_20\".\"doc_id\" <> \"VectorData_22\".\"doc_id\"\nWHERE \"VectorData_20\".\"doc_id\" = $1\nORDER BY 1 - (\"VectorData_20\".\"vector\" <=> \"VectorData_22\".\"vector\") DESC NULLS LAST, \"VectorData_22\".\"doc_id\" NULLS FIRST",
            "parameters" : [
              {
                "type" : "arg",
                "path" : "doc_id"
              }
            ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "DocumentSimilarityIndex",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "doc_id"
            },
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT \"VectorData_22\".\"doc_id\", \"VectorData_22\".\"category_id\", \"VectorData_22\".\"vector\", 1 - (\"VectorData_20\".\"vector\" <=> \"VectorData_22\".\"vector\")\nFROM \"VectorData_2\" AS \"VectorData_20\"\n INNER JOIN \"VectorData_2\" AS \"VectorData_22\" ON 1 - (\"VectorData_20\".\"vector\" <=> \"VectorData_22\".\"vector\") > 0.5\nWHERE \"VectorData_20\".\"doc_id\" = $1 AND \"VectorData_20\".\"doc_id\" <> \"VectorData_22\".\"doc_id\"\nORDER BY 1 - (\"VectorData_20\".\"vector\" <=> \"VectorData_22\".\"vector\") DESC NULLS LAST",
            "parameters" : [
              {
                "type" : "arg",
                "path" : "doc_id"
              }
            ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "operations" : [
      {
        "function" : {
          "name" : "GetCategoryCentroids",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "category_id" : {
                "type" : "integer"
              },
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [
              "category_id"
            ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query CategoryCentroids($category_id: Int!, $limit: Int = 10, $offset: Int = 0) {\nCategoryCentroids(category_id: $category_id, limit: $limit, offset: $offset) {\ncategory_id\ncenter_vector\n}\n\n}",
          "queryName" : "CategoryCentroids",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/CategoryCentroids{?category_id,offset,limit}"
      },
      {
        "function" : {
          "name" : "GetVectorData",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query VectorData($limit: Int = 10, $offset: Int = 0) {\nVectorData(limit: $limit, offset: $offset) {\ndoc_id\ncategory_id\n}\n\n}",
          "queryName" : "VectorData",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/VectorData{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetDocumentSimilarity",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              },
              "doc_id" : {
                "type" : "integer"
              }
            },
            "required" : [
              "doc_id"
            ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query DocumentSimilarity($doc_id: Int!, $limit: Int = 10, $offset: Int = 0) {\nDocumentSimilarity(doc_id: $doc_id, limit: $limit, offset: $offset) {\ndoc_id\nscore\n}\n\n}",
          "queryName" : "DocumentSimilarity",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/DocumentSimilarity{?offset,limit,doc_id}"
      },
      {
        "function" : {
          "name" : "GetDocumentSimilarityIndex",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              },
              "doc_id" : {
                "type" : "integer"
              }
            },
            "required" : [
              "doc_id"
            ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query DocumentSimilarityIndex($doc_id: Int!, $limit: Int = 10, $offset: Int = 0) {\nDocumentSimilarityIndex(doc_id: $doc_id, limit: $limit, offset: $offset) {\ndoc_id\ncategory_id\n}\n\n}",
          "queryName" : "DocumentSimilarityIndex",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/DocumentSimilarityIndex{?offset,limit,doc_id}"
      }
    ],
    "schema" : {
      "type" : "string",
      "schema" : "type CategoryCentroids {\n  category_id: Int!\n  center_vector: [Float]\n}\n\ntype DocumentSimilarity {\n  doc_id: Int!\n  score: Float!\n}\n\ntype DocumentSimilarityIndex {\n  doc_id: Int!\n  category_id: Int!\n}\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype Query {\n  CategoryCentroids(category_id: Int!, limit: Int = 10, offset: Int = 0): [CategoryCentroids!]\n  VectorData(limit: Int = 10, offset: Int = 0): [VectorData!]\n  DocumentSimilarity(doc_id: Int!, limit: Int = 10, offset: Int = 0): [DocumentSimilarity!]\n  DocumentSimilarityIndex(doc_id: Int!, limit: Int = 10, offset: Int = 0): [DocumentSimilarityIndex!]\n}\n\ntype VectorData {\n  doc_id: Int!\n  category_id: Int!\n}\n"
    }
  }
}
