>>>pipeline_explain.txt
=== lastHour
ID:     lasthour$1
Type:   stream
Stage:  streams
Inputs: observationgroup$2, patientlasthour$1
Primary Key: __pk1$groupId, __pk3$created
Timestamp  : __pk3$created
Schema:
 - __pk1$groupId: BIGINT NOT NULL
 - __pk3$created: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - maxTemp: DECIMAL(10, 5) NOT NULL
 - minTemp: DECIMAL(10, 5) NOT NULL
Plan:
LogicalProject(__pk1$groupId=[$0], __pk3$created=[$1], maxTemp=[$2], minTemp=[$3])
  LogicalAggregate(group=[{0, 2}], maxTemp=[MAX($7)], minTemp=[MIN($8)]) hints[TumbleAggregationHint options:[2, INSTANT, 2, 1, 0]]
    LogicalJoin(condition=[=($4, $5)], joinType=[inner]) hints[TemporalJoinHint options:[2]]
      LogicalCorrelate(correlation=[$cor3], joinType=[inner], requiredColumns=[{3}])
        LogicalTableScan(table=[[observationgroup$2]])
        LogicalTableFunctionScan(invocation=[ObservationGroup.patients($cor3.patients)], rowType=[RecordType(BIGINT patientId)], elementType=[class [Ljava.lang.Object;])
      LogicalFilter(condition=[=($5, 1)]) hints[DedupHint]
        LogicalProject(patientid=[$0], avgTemp=[$1], maxTemp=[$2], minTemp=[$3], _timeMin=[$4], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
          LogicalTableScan(table=[[patientlasthour$1]])

=== ObservationGroup
ID:     observationgroup$2
Type:   stream
Stage:  streams
Primary Key: groupId, created
Timestamp  : created
Schema:
 - groupId: BIGINT NOT NULL
 - groupName: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - created: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - patients: RecordType(BIGINT NOT NULL patientId) NOT NULL ARRAY NOT NULL
Plan:
LogicalTableScan(table=[[observationgroup$1]], hints=[[[WatermarkHint inheritPath:[] options:[2]]]]) hints[WatermarkHint options:[2]]

=== PatientHourly
ID:     patienthourly$1
Type:   stream
Stage:  streams
Inputs: sensors$3, smoothreading$1
Primary Key: patientid, timeHour
Timestamp  : timeHour
Schema:
 - patientid: BIGINT NOT NULL
 - timeHour: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - avgTemp: DECIMAL(10, 5) NOT NULL
 - maxTemp: DECIMAL(10, 5) NOT NULL
 - minTemp: DECIMAL(10, 5) NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], avgTemp=[AVG($2)], maxTemp=[MAX($2)], minTemp=[MIN($2)]) hints[TumbleAggregationHint options:[1, FUNCTION, 4, 3600000, 0]]
  LogicalProject(patientid=[$5], timeHour=[endOfHour($1)], smoothTemp=[$2], sensorid=[$0], timeMin=[$1])
    LogicalJoin(condition=[=($4, $3)], joinType=[inner]) hints[TemporalJoinHint options:[1]]
      LogicalProject(sensorid=[$0], timeMin=[$1], smoothTemp=[$2], sensorid3=[$0])
        LogicalTableScan(table=[[smoothreading$1]])
      LogicalFilter(condition=[=($4, 1)]) hints[DedupHint]
        LogicalProject(id=[$0], patientid=[$1], placed=[$2], placedTimestamp=[$3], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST)])
          LogicalTableScan(table=[[sensors$3]])

=== PatientLastHour
ID:     patientlasthour$1
Type:   state
Stage:  streams
Inputs: sensors$3, smoothreading$1
Primary Key: patientid
Timestamp  : _timeMin
Schema:
 - patientid: BIGINT NOT NULL
 - avgTemp: DECIMAL(10, 5) NOT NULL
 - maxTemp: DECIMAL(10, 5) NOT NULL
 - minTemp: DECIMAL(10, 5) NOT NULL
 - _timeMin: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=patientid limit=1 sort=#4: _timeMin TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalProject(patientid=[$1], avgTemp=[$2], maxTemp=[$3], minTemp=[$4], _timeMin=[$0])
  LogicalAggregate(group=[{1, 5}], avgTemp=[AVG($2)], maxTemp=[MAX($2)], minTemp=[MIN($2)]) hints[SlidingAggregationHint options:[1, 3600000, 72000]]
    LogicalJoin(condition=[=($4, $3)], joinType=[inner]) hints[TemporalJoinHint options:[1]]
      LogicalProject(sensorid=[$0], timeMin=[$1], smoothTemp=[$2], sensorid3=[$0])
        LogicalTableScan(table=[[smoothreading$1]])
      LogicalFilter(condition=[=($4, 1)]) hints[DedupHint]
        LogicalProject(id=[$0], patientid=[$1], placed=[$2], placedTimestamp=[$3], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST)])
          LogicalTableScan(table=[[sensors$3]])

=== SensorReading
ID:     sensorreading$2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - sensorid: BIGINT NOT NULL
 - temperature: DECIMAL(10, 5) NOT NULL
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[sensorreading$1]], hints=[[[WatermarkHint inheritPath:[] options:[3]]]]) hints[WatermarkHint options:[3]]

=== Sensors
ID:     sensors$2
Type:   stream
Stage:  streams
Primary Key: id, placed
Timestamp  : placedTimestamp
Schema:
 - id: BIGINT NOT NULL
 - patientid: BIGINT NOT NULL
 - placed: BIGINT NOT NULL
 - placedTimestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[sensors$1]], hints=[[[WatermarkHint inheritPath:[] options:[3]]]]) hints[WatermarkHint options:[3]]

=== Sensors
ID:     sensors$3
Type:   state
Stage:  streams
Inputs: sensors$2
Primary Key: id
Timestamp  : placedTimestamp
Schema:
 - id: BIGINT NOT NULL
 - patientid: BIGINT NOT NULL
 - placed: BIGINT NOT NULL
 - placedTimestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=id limit=1 sort=#3: placedTimestamp TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalTableScan(table=[[sensors$2]])

=== SmoothReading
ID:     smoothreading$1
Type:   stream
Stage:  streams
Inputs: sensorreading$2
Primary Key: sensorid, timeMin
Timestamp  : timeMin
Schema:
 - sensorid: BIGINT NOT NULL
 - timeMin: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - smoothTemp: DECIMAL(10, 5) NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], smoothTemp=[AVG($2)]) hints[TumbleAggregationHint options:[1, FUNCTION, 4, 60000, 0]]
  LogicalProject(sensorid=[$0], timeMin=[endOfMinute($3)], temperature=[$1], _uuid=[$2], event_time=[$3])
    LogicalTableScan(table=[[sensorreading$2]])

=== TempAlert
ID:     tempalert$1
Type:   stream
Stage:  streams
Inputs: sensors$3, smoothreading$1
Primary Key: sensorid, timeMin
Timestamp  : timeMin
Schema:
 - patientid: BIGINT NOT NULL
 - sensorid: BIGINT NOT NULL
 - smoothTemp: DECIMAL(10, 5) NOT NULL
 - timeMin: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(patientid=[$5], sensorid=[$0], smoothTemp=[$2], timeMin=[$1])
  LogicalJoin(condition=[=($4, $3)], joinType=[inner]) hints[TemporalJoinHint options:[1]]
    LogicalProject(sensorid=[$0], timeMin=[$1], smoothTemp=[$2], sensorid3=[$0])
      LogicalFilter(condition=[SEARCH($2, Sarg[(-∞..95), (102..+∞)])])
        LogicalTableScan(table=[[smoothreading$1]])
    LogicalFilter(condition=[=($4, 1)]) hints[DedupHint]
      LogicalProject(id=[$0], patientid=[$1], placed=[$2], placedTimestamp=[$3], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST)])
        LogicalTableScan(table=[[sensors$3]])

=== print.tempWarning.tempWarning
ID:     tempalert$1$1
Type:   export
Stage:  streams
Inputs: tempalert$1

=== TempAlert.tempalert-1
ID:     tempalert$1$2
Type:   export
Stage:  streams
Inputs: tempalert$1

