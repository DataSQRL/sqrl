>>>pipeline_explain.txt
=== Orders
ID:     orders$2
Type:   stream
Stage:  streams
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - items: RecordType(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[2]]]]) hints[WatermarkHint options:[2]]

=== spending
ID:     spending$1
Type:   stream
Stage:  streams
Inputs: orders$2, totals$1, users$1
Primary Key: __pk1$id, week
Timestamp  : week
Schema:
 - __pk1$id: BIGINT NOT NULL
 - week: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - spend: DOUBLE NOT NULL
 - saved: DOUBLE NOT NULL
Post Processors:
 - sort: #0: __pk1$id BIGINT ASC, #1: week TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC
Plan:
LogicalProject(__pk1$id=[$0], week=[$1], spend=[$2], saved=[$3])
  LogicalAggregate(group=[{0, 1}], spend=[SUM($2)], saved=[SUM($3)]) hints[TumbleAggregationHint options:[1, FUNCTION, 5, 604800000, 0]]
    LogicalProject(__pk3$id=[$0], week=[endOfWeek($3)], price=[$7], saving=[$8], id=[$1], time=[$3])
      LogicalJoin(condition=[AND(=($1, $5), =($3, $6))], joinType=[inner]) hints[IntervalJoin]
        LogicalProject(__pk3$id=[$5], id=[$0], customerid=[$1], time=[$2], items=[$3])
          LogicalJoin(condition=[=($5, $4)], joinType=[inner]) hints[TemporalJoinHint options:[2]]
            LogicalProject(id=[$0], customerid=[$1], time=[$2], items=[$3], customerid4=[$1])
              LogicalTableScan(table=[[orders$2]])
            LogicalFilter(condition=[=($2, 1)]) hints[DedupHint]
              LogicalProject(id=[$0], _time=[$1], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST)])
                LogicalTableScan(table=[[users$1]])
        LogicalTableScan(table=[[totals$1]])

=== totals
ID:     totals$1
Type:   stream
Stage:  streams
Inputs: orders$2
Primary Key: __pk1$id, __pk3$time
Timestamp  : __pk3$time
Schema:
 - __pk1$id: BIGINT NOT NULL
 - __pk3$time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - price: DOUBLE NOT NULL
 - saving: DOUBLE NOT NULL
Plan:
LogicalProject(__pk1$id=[$0], __pk3$time=[$1], price=[$2], saving=[$3])
  LogicalAggregate(group=[{0, 1}], price=[SUM($2)], agg#1=[SUM($3)]) hints[TumbleAggregationHint options:[1, INSTANT, 1, 1, 0]]
    LogicalProject(__pk1$id=[$0], __pk2$time=[$2], $f2=[*($5, $6)], $f3=[COALESCE($7, 0.0:DECIMAL(2, 1))], productid=[$4])
      LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{3}])
        LogicalTableScan(table=[[orders$2]])
        LogicalTableFunctionScan(invocation=[Orders.items($cor0.items)], rowType=[RecordType(BIGINT productid, BIGINT quantity, DOUBLE unit_price, DOUBLE discount)], elementType=[class [Ljava.lang.Object;])

=== Users
ID:     users$1
Type:   state
Stage:  streams
Inputs: orders$2
Primary Key: id
Timestamp  : _time
Schema:
 - id: BIGINT NOT NULL
 - _time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=id limit=1 sort=#1: _time TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalProject(id=[$1], _time=[$2])
  LogicalTableScan(table=[[orders$2]])

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `tojson` AS 'com.datasqrl.json.ToJson' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofweek` AS 'com.datasqrl.time.EndOfWeek' LANGUAGE JAVA;",
    "CREATE TEMPORARY TABLE `orders$1` (\n  `id` BIGINT NOT NULL,\n  `customerid` BIGINT NOT NULL,\n  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `items` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,\n  PRIMARY KEY (`id`, `time`) NOT ENFORCED,\n  WATERMARK FOR `time` AS (`time` - INTERVAL '0.001' SECOND)\n) WITH (\n  'format' = 'json',\n  'path' = '/mnt/build/data',\n  'source.monitor-interval' = '0',\n  'connector' = 'filesystem',\n  'source.path.regex-pattern' = 'to be determined'\n);",
    "CREATE TEMPORARY TABLE `orders$2` (\n  `id` BIGINT NOT NULL,\n  `customerid` BIGINT NOT NULL,\n  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `items` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),\n  PRIMARY KEY (`id`, `time`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'orders$2',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `spending$1` (\n  `__pk1$id` BIGINT NOT NULL,\n  `week` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `spend` DOUBLE NOT NULL,\n  `saved` DOUBLE NOT NULL,\n  PRIMARY KEY (`__pk1$id`, `week`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'spending$1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `totals$1` (\n  `__pk1$id` BIGINT NOT NULL,\n  `__pk3$time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `price` DOUBLE NOT NULL,\n  `saving` DOUBLE NOT NULL,\n  PRIMARY KEY (`__pk1$id`, `__pk3$time`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'totals$1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `users$1` (\n  `id` BIGINT NOT NULL,\n  `_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'users$1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT *\nFROM (SELECT `id`, `_time`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `_time` DESC NULLS LAST)) AS `_rownum`\nFROM (SELECT `customerid` AS `id`, `time` AS `_time`\nFROM `orders$1`) AS `t`) AS `t0`\nWHERE (`_rownum` = 1);",
    "CREATE VIEW `table$2`\nAS\nSELECT `$cor0`.`id` AS `__pk1$id`, `$cor0`.`time` AS `__pk2$time`, (`t50`.`quantity` * `t50`.`unit_price`) AS `$f2`, COALESCE(`t50`.`discount`, 0.0) AS `$f3`, `t50`.`productid`\nFROM `orders$1` AS `$cor0`,\nUNNEST(`$cor0`.`items`) AS `t50`;",
    "CREATE VIEW `table$3`\nAS\nSELECT `t3`.`__pk3$id`, ENDOFWEEK(`t3`.`time`) AS `week`, `t10`.`price`, `t10`.`saving`, `t3`.`id`, `t3`.`time`\nFROM (SELECT `t1`.`id` AS `__pk3$id`, `$cor4`.`id`, `$cor4`.`customerid`, `$cor4`.`time`, `$cor4`.`items`\nFROM (SELECT `id`, `customerid`, `time`, `items`, `customerid` AS `customerid4`\nFROM `orders$1`) AS `$cor4`\nINNER JOIN `table$1` FOR SYSTEM_TIME AS OF `$cor4`.`time` AS `t1` ON (`t1`.`id` = `$cor4`.`customerid4`)) AS `t3`\nINNER JOIN (SELECT `__pk1$id`, `window_time` AS `__pk3$time`, SUM(`$f2`) AS `price`, SUM(`$f3`) AS `saving`\nFROM TABLE(TUMBLE((TABLE `table$2`), (DESCRIPTOR(`__pk2$time`)), INTERVAL '0.001' SECOND(1))) AS `t7`\nGROUP BY `__pk1$id`, `window_start`, `window_end`, `window_time`) AS `t10` ON ((`t3`.`id` = `t10`.`__pk1$id`) AND (`t3`.`time` = `t10`.`__pk3$time`));",
    "CREATE VIEW `table$4`\nAS\nSELECT `$cor0`.`id` AS `__pk1$id`, `$cor0`.`time` AS `__pk2$time`, (`t00`.`quantity` * `t00`.`unit_price`) AS `$f2`, COALESCE(`t00`.`discount`, 0.0) AS `$f3`, `t00`.`productid`\nFROM `orders$1` AS `$cor0`,\nUNNEST(`$cor0`.`items`) AS `t00`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `orders$2`\n(SELECT `id`, `customerid`, `time`, TOJSON(`items`) AS `items`\nFROM `orders$1`)\n;\nINSERT INTO `spending$1`\n(SELECT `__pk3$id` AS `__pk1$id`, `window_time` AS `week`, SUM(`price`) AS `spend`, SUM(`saving`) AS `saved`\nFROM TABLE(TUMBLE((TABLE `table$3`), (DESCRIPTOR(`time`)), INTERVAL '604800' SECOND(9), INTERVAL '0' SECOND(1))) AS `t12`\nGROUP BY `__pk3$id`, `window_start`, `window_end`, `window_time`)\n;\nINSERT INTO `totals$1`\n(SELECT `__pk1$id`, `window_time` AS `__pk3$time`, SUM(`$f2`) AS `price`, SUM(`$f3`) AS `saving`\nFROM TABLE(TUMBLE((TABLE `table$4`), (DESCRIPTOR(`__pk2$time`)), INTERVAL '0.001' SECOND(1))) AS `t2`\nGROUP BY `__pk1$id`, `window_start`, `window_end`, `window_time`)\n;\nINSERT INTO `users$1`\n(SELECT `customerid` AS `id`, `time` AS `_time`\nFROM `orders$1`)\n;\nEND;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "filesystem"
  ],
  "formats" : [
    "json"
  ]
}
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "orders$2",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"customerid\" BIGINT NOT NULL",
        "\"time\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"items\" JSONB NOT NULL"
      ],
      "primaryKeys" : [
        "\"id\"",
        "\"time\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS orders$2 (\"id\" BIGINT NOT NULL,\"customerid\" BIGINT NOT NULL,\"time\" TIMESTAMP WITH TIME ZONE NOT NULL,\"items\" JSONB NOT NULL , PRIMARY KEY (\"id\",\"time\"));"
    },
    {
      "name" : "spending$1",
      "columns" : [
        "\"__pk1$id\" BIGINT NOT NULL",
        "\"week\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"spend\" DOUBLE PRECISION NOT NULL",
        "\"saved\" DOUBLE PRECISION NOT NULL"
      ],
      "primaryKeys" : [
        "\"__pk1$id\"",
        "\"week\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS spending$1 (\"__pk1$id\" BIGINT NOT NULL,\"week\" TIMESTAMP WITH TIME ZONE NOT NULL,\"spend\" DOUBLE PRECISION NOT NULL,\"saved\" DOUBLE PRECISION NOT NULL , PRIMARY KEY (\"__pk1$id\",\"week\"));"
    },
    {
      "name" : "totals$1",
      "columns" : [
        "\"__pk1$id\" BIGINT NOT NULL",
        "\"__pk3$time\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"price\" DOUBLE PRECISION NOT NULL",
        "\"saving\" DOUBLE PRECISION NOT NULL"
      ],
      "primaryKeys" : [
        "\"__pk1$id\"",
        "\"__pk3$time\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS totals$1 (\"__pk1$id\" BIGINT NOT NULL,\"__pk3$time\" TIMESTAMP WITH TIME ZONE NOT NULL,\"price\" DOUBLE PRECISION NOT NULL,\"saving\" DOUBLE PRECISION NOT NULL , PRIMARY KEY (\"__pk1$id\",\"__pk3$time\"));"
    },
    {
      "name" : "users$1",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"_time\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"id\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS users$1 (\"id\" BIGINT NOT NULL,\"_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"id\"));"
    },
    {
      "indexName" : "orders$2_hash_c1",
      "tableName" : "orders$2",
      "columns" : [
        "customerid"
      ],
      "type" : "HASH",
      "sql" : "CREATE INDEX IF NOT EXISTS orders$2_hash_c1 ON orders$2 USING hash (\"customerid\");"
    },
    {
      "indexName" : "orders$2_hash_c2",
      "tableName" : "orders$2",
      "columns" : [
        "time"
      ],
      "type" : "HASH",
      "sql" : "CREATE INDEX IF NOT EXISTS orders$2_hash_c2 ON orders$2 USING hash (\"time\");"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Orders",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "time"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"orders$2\"\nWHERE \"time\" = $1\nORDER BY \"time\" DESC NULLS LAST, \"id\"",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "time"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"orders$2\"\nORDER BY \"time\" DESC NULLS LAST, \"id\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Orders",
        "fieldName" : "totals",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT \"__pk1$id\", \"__pk3$time\", \"price\", \"saving\", 1 AS \"__pk\"\nFROM \"totals$1\"\nWHERE \"__pk1$id\" = $1 AND \"__pk3$time\" = $2\nORDER BY \"__pk3$time\" DESC NULLS LAST, 1",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "id"
                },
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "time"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Users",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "id"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT \"id\", \"_time\", 1 AS \"__pk\"\nFROM \"users$1\"\nWHERE \"id\" = $1\nORDER BY 1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Users",
        "fieldName" : "purchases",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"orders$2\"\nWHERE \"customerid\" = $1\nORDER BY \"time\" DESC NULLS LAST, \"id\"",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "id"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"orders$2\"\nWHERE \"customerid\" = $1\nORDER BY \"time\" DESC NULLS LAST, \"id\"",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Users",
        "fieldName" : "spending",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"spending$1\"\nWHERE \"__pk1$id\" = $1\nORDER BY \"__pk1$id\", \"week\" DESC",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "id"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "week"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"__pk1$id\", \"week\", \"spend\", \"saved\", 1 AS \"__pk\"\nFROM (SELECT *\n  FROM \"spending$1\"\n  WHERE \"__pk1$id\" = $1) AS \"t\"\nWHERE \"week\" = $2\nORDER BY \"__pk1$id\", \"week\" DESC, 1",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "id"
                },
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "week"
                }
              ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "type Query {\n  Orders(time: String, limit: Int!, offset: Int = 0): [Orders!]\n  Users(id: Int!): Users\n}\n\ntype Users {\n  id: Int!\n  purchases(limit: Int!, offset: Int): [Orders!]\n  spending(week: String, limit: Int = 20): [spending!]\n}\n\ntype spending {\n  week: String!\n  spend: Float!\n  saved: Float!\n}\n\ntype Orders {\n  id: Int!\n  customerid: Int!\n  time: String!\n  items: [items!]\n  totals: totals\n}\n\ntype items {\n  productid: Int!\n  quantity: Int!\n  unit_price: Float!\n  discount: Float\n}\n\ntype totals {\n  price: Float!\n  saving: Float!\n}\n"
    }
  }
}
