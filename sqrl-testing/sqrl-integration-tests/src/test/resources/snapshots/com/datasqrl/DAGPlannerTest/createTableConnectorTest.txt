>>>pipeline_explain.txt
=== SensorReading
ID:     default_catalog.default_database.SensorReading
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.SensorReading__def
Primary Key: -
Timestamp  : timestamp
Schema:
 - uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - sensorid: BIGINT NOT NULL
 - epoch_timestamp: BIGINT NOT NULL
 - temperature: DOUBLE NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(uuid=[$0], sensorid=[$1], epoch_timestamp=[$2], temperature=[$3], timestamp=[$4])
  LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
    LogicalProject(uuid=[$0], sensorid=[$1], epoch_timestamp=[$2], temperature=[$3], timestamp=[EPOCHMILLITOTIMESTAMP($2)])
      LogicalTableScan(table=[[default_catalog, default_database, SensorReading__def]])
SQL: CREATE VIEW `SensorReading`
AS
SELECT *
FROM `default_catalog`.`default_database`.`SensorReading__def`
=== SensorTempByHour
ID:     default_catalog.default_database.SensorTempByHour
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.SensorReading
Annotations:
 - features: STREAM_WINDOW_AGGREGATION (feature)
Primary Key: sensorid, time_hour
Timestamp  : time_hour
Schema:
 - sensorid: BIGINT NOT NULL
 - time_hour: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - avg_temperature: DOUBLE NOT NULL
Plan:
LogicalProject(sensorid=[$0], time_hour=[$3], avg_temperature=[$4])
  LogicalAggregate(group=[{0, 1, 2, 3}], avg_temperature=[AVG($4)])
    LogicalProject(sensorid=[$1], window_start=[$5], window_end=[$6], time_hour=[$7], temperature=[$3])
      LogicalTableFunctionScan(invocation=[TUMBLE(DESCRIPTOR($4), 3600000:INTERVAL MINUTE)], rowType=[RecordType(VARCHAR(2147483647) uuid, BIGINT sensorid, BIGINT epoch_timestamp, DOUBLE temperature, TIMESTAMP_LTZ(3) *ROWTIME* timestamp, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP_LTZ(3) *ROWTIME* window_time)])
        LogicalProject(uuid=[$0], sensorid=[$1], epoch_timestamp=[$2], temperature=[$3], timestamp=[$4])
          LogicalTableScan(table=[[default_catalog, default_database, SensorReading]])
SQL: CREATE VIEW SensorTempByHour AS  SELECT sensorid, window_time as time_hour, AVG(temperature) AS avg_temperature
                     FROM TABLE(TUMBLE(TABLE SensorReading, DESCRIPTOR(`timestamp`), INTERVAL '60' MINUTES))
                     GROUP BY sensorid, window_start, window_end, window_time;

>>>flink-sql-no-functions.sql
CREATE TABLE `SensorReading__def` (
  `uuid` STRING NOT NULL,
  `sensorid` BIGINT NOT NULL,
  `epoch_timestamp` BIGINT NOT NULL,
  `temperature` DOUBLE NOT NULL,
  `timestamp` AS EPOCHMILLITOTIMESTAMP(`epoch_timestamp`),
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'connector' = 'datagen',
  'number-of-rows' = '1000',
  'fields.sensorid.kind' = 'sequence',
  'fields.sensorid.start' = '0',
  'fields.sensorid.end' = '9',
  'fields.epoch_timestamp.kind' = 'sequence',
  'fields.epoch_timestamp.start' = '1719318565000',
  'fields.epoch_timestamp.end' = '1719319565000',
  'fields.uuid.kind' = 'random',
  'fields.temperature.kind' = 'random'
);
CREATE VIEW `SensorReading`
AS
SELECT *
FROM `default_catalog`.`default_database`.`SensorReading__def`;
CREATE VIEW `SensorTempByHour`
AS
SELECT `sensorid`, `window_time` AS `time_hour`, AVG(`temperature`) AS `avg_temperature`
FROM TABLE(TUMBLE(TABLE `SensorReading`, DESCRIPTOR(`timestamp`), INTERVAL '60' MINUTE))
GROUP BY `sensorid`, `window_start`, `window_end`, `window_time`;
CREATE TABLE `SensorReading_1` (
  `uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `sensorid` BIGINT NOT NULL,
  `epoch_timestamp` BIGINT NOT NULL,
  `temperature` DOUBLE NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'SensorReading_1'
);
CREATE TABLE `SensorTempByHour_2` (
  `sensorid` BIGINT NOT NULL,
  `time_hour` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `avg_temperature` DOUBLE NOT NULL,
  PRIMARY KEY (`sensorid`, `time_hour`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'SensorTempByHour_2'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`SensorReading_1`
(SELECT `uuid`, `sensorid`, `epoch_timestamp`, `temperature`, `timestamp`, HASHCOLUMNS(`uuid`, `sensorid`, `epoch_timestamp`, `temperature`, `timestamp`) AS `__pk_hash`
 FROM `default_catalog`.`default_database`.`SensorReading`)
;
INSERT INTO `default_catalog`.`default_database`.`SensorTempByHour_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`SensorTempByHour`)
 ;
 END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "SensorReading_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"SensorReading_1\" (\"uuid\" TEXT NOT NULL, \"sensorid\" BIGINT NOT NULL, \"epoch_timestamp\" BIGINT NOT NULL, \"temperature\" DOUBLE PRECISION NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL, \"__pk_hash\" TEXT  , PRIMARY KEY (\"__pk_hash\"))",
      "fields" : [
        {
          "name" : "uuid",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "sensorid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "epoch_timestamp",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "temperature",
          "type" : "DOUBLE PRECISION",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "__pk_hash",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "SensorTempByHour_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"SensorTempByHour_2\" (\"sensorid\" BIGINT NOT NULL, \"time_hour\" TIMESTAMP WITH TIME ZONE NOT NULL, \"avg_temperature\" DOUBLE PRECISION NOT NULL , PRIMARY KEY (\"sensorid\",\"time_hour\"))",
      "fields" : [
        {
          "name" : "sensorid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time_hour",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "avg_temperature",
          "type" : "DOUBLE PRECISION",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "SensorReading",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"SensorReading\"(\"uuid\", \"sensorid\", \"epoch_timestamp\", \"temperature\", \"timestamp\") AS SELECT \"uuid\", \"sensorid\", \"epoch_timestamp\", \"temperature\", \"timestamp\"\nFROM \"SensorReading_1\"",
      "fields" : [
        {
          "name" : "uuid",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "sensorid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "epoch_timestamp",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "temperature",
          "type" : "DOUBLE PRECISION",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "SensorTempByHour",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"SensorTempByHour\"(\"sensorid\", \"time_hour\", \"avg_temperature\") AS SELECT *\nFROM \"SensorTempByHour_2\"",
      "fields" : [
        {
          "name" : "sensorid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time_hour",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "avg_temperature",
          "type" : "DOUBLE PRECISION",
          "nullable" : false
        }
      ]
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SensorReading",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"uuid\", \"sensorid\", \"epoch_timestamp\", \"temperature\", \"timestamp\"\nFROM \"SensorReading_1\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SensorTempByHour",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"SensorTempByHour_2\"",
              "parameters" : [ ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\ntype Query {\n  SensorReading(limit: Int = 10, offset: Int = 0): [SensorReading!]\n  SensorTempByHour(limit: Int = 10, offset: Int = 0): [SensorTempByHour!]\n}\n\ntype SensorReading {\n  uuid: String!\n  sensorid: Float!\n  epoch_timestamp: Float!\n  temperature: Float!\n  timestamp: DateTime!\n}\n\ntype SensorTempByHour {\n  sensorid: Float!\n  time_hour: DateTime!\n  avg_temperature: Float!\n}\n"
    }
  }
}
