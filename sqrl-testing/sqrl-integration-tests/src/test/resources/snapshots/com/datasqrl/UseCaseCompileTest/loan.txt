>>>pipeline_explain.txt
=== ApplicationAlert
ID:     applicationalert$1
Type:   stream
Stage:  streams
Inputs: applicationstatus$1
Primary Key: _uuid
Timestamp  : _event_time
Schema:
 - id: BIGINT NOT NULL
 - customer_id: BIGINT NOT NULL
 - loan_type_id: BIGINT NOT NULL
 - max_amount: DOUBLE NOT NULL
 - min_amount: DOUBLE NOT NULL
 - amount: DOUBLE NOT NULL
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - _event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(id=[$3], customer_id=[$4], loan_type_id=[$5], max_amount=[$8], min_amount=[$9], amount=[$6], _uuid=[$10], _event_time=[$2])
  LogicalFilter(condition=[AND(=($0, 'underwriting'), OR(>($6, $8), <($6, $9)))])
    LogicalTableScan(table=[[applicationstatus$1]])

=== ApplicationAlert.applicationalert-1
ID:     applicationalert$1$1
Type:   export
Stage:  streams
Inputs: applicationalert$1

=== Applications
ID:     applications$2
Type:   stream
Stage:  streams
Primary Key: id, updated_at
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - customer_id: BIGINT NOT NULL
 - loan_type_id: BIGINT NOT NULL
 - amount: DOUBLE NOT NULL
 - duration: BIGINT NOT NULL
 - application_date: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[applications$1]], hints=[[[WatermarkHint inheritPath:[] options:[6]]]]) hints[WatermarkHint options:[6]]

=== Applications
ID:     applications$3
Type:   state
Stage:  streams
Inputs: applications$2
Primary Key: id
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - customer_id: BIGINT NOT NULL
 - loan_type_id: BIGINT NOT NULL
 - amount: DOUBLE NOT NULL
 - duration: BIGINT NOT NULL
 - application_date: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=id limit=1 sort=#6: updated_at TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalTableScan(table=[[applications$2]])

=== ApplicationStatus
ID:     applicationstatus$1
Type:   stream
Stage:  streams
Inputs: applications$3, applicationupdates$2, loantypes$3
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - status: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - message: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - id: BIGINT NOT NULL
 - customer_id: BIGINT NOT NULL
 - loan_type_id: BIGINT NOT NULL
 - amount: DOUBLE NOT NULL
 - duration: BIGINT NOT NULL
 - max_amount: DOUBLE NOT NULL
 - min_amount: DOUBLE NOT NULL
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalProject(status=[$1], message=[$2], event_time=[$4], id=[$5], customer_id=[$6], loan_type_id=[$7], amount=[$8], duration=[$9], max_amount=[$17], min_amount=[$18], _uuid=[$3])
  LogicalJoin(condition=[=($13, $7)], joinType=[inner]) hints[TemporalJoinHint options:[4]]
    LogicalJoin(condition=[=($5, $0)], joinType=[inner]) hints[TemporalJoinHint options:[4]]
      LogicalTableScan(table=[[applicationupdates$2]])
      LogicalFilter(condition=[=($7, 1)]) hints[DedupHint]
        LogicalProject(id=[$0], customer_id=[$1], loan_type_id=[$2], amount=[$3], duration=[$4], application_date=[$5], updated_at=[$6], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $6 DESC NULLS LAST)])
          LogicalTableScan(table=[[applications$3]])
    LogicalFilter(condition=[=($9, 1)]) hints[DedupHint]
      LogicalProject(id=[$0], name=[$1], description=[$2], interest_rate=[$3], max_amount=[$4], min_amount=[$5], max_duration=[$6], min_duration=[$7], updated_at=[$8], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $8 DESC NULLS LAST)])
        LogicalTableScan(table=[[loantypes$3]])

=== ApplicationUpdates
ID:     applicationupdates$2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - loan_application_id: BIGINT NOT NULL
 - status: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - message: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[applicationupdates$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

=== Customers
ID:     customers$2
Type:   stream
Stage:  streams
Primary Key: id, updated_at
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - first_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - last_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - phone: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - address: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - date_of_birth: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[customers$1]], hints=[[[WatermarkHint inheritPath:[] options:[7]]]]) hints[WatermarkHint options:[7]]

=== Customers
ID:     customers$3
Type:   state
Stage:  streams
Inputs: customers$2
Primary Key: id
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - first_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - last_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - phone: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - address: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - date_of_birth: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=id limit=1 sort=#7: updated_at TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalTableScan(table=[[customers$2]])

=== LoanTypes
ID:     loantypes$2
Type:   stream
Stage:  streams
Primary Key: id, updated_at
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - description: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - interest_rate: DOUBLE NOT NULL
 - max_amount: DOUBLE NOT NULL
 - min_amount: DOUBLE NOT NULL
 - max_duration: BIGINT NOT NULL
 - min_duration: BIGINT NOT NULL
 - updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[loantypes$1]], hints=[[[WatermarkHint inheritPath:[] options:[8]]]]) hints[WatermarkHint options:[8]]

=== LoanTypes
ID:     loantypes$3
Type:   state
Stage:  streams
Inputs: loantypes$2
Primary Key: id
Timestamp  : updated_at
Schema:
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - description: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - interest_rate: DOUBLE NOT NULL
 - max_amount: DOUBLE NOT NULL
 - min_amount: DOUBLE NOT NULL
 - max_duration: BIGINT NOT NULL
 - min_duration: BIGINT NOT NULL
 - updated_at: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=id limit=1 sort=#8: updated_at TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalTableScan(table=[[loantypes$2]])

=== overview
ID:     overview$1
Type:   state
Stage:  streams
Inputs: applications$3, customers$3
Primary Key: __pk1$id, loan_type_id
Timestamp  : __timestamp
Schema:
 - __pk1$id: BIGINT NOT NULL
 - loan_type_id: BIGINT NOT NULL
 - total_amount: DOUBLE NOT NULL
 - total_loans: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(__pk1$id=[$0], loan_type_id=[$1], total_amount=[$2], total_loans=[$3], __timestamp=[$4])
  LogicalAggregate(group=[{0, 11}], total_amount=[SUM($12)], total_loans=[COUNT()], __timestamp=[MAX($17)])
    LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], phone=[$4], address=[$5], date_of_birth=[$6], updated_at=[$7], _rownum=[$8], id0=[$9], customer_id=[$10], loan_type_id=[$11], amount=[$12], duration=[$13], application_date=[$14], updated_at0=[$15], customer_id7=[$16], __timestamp=[CASE(<($7, $15), $15, $7)])
      LogicalJoin(condition=[=($0, $16)], joinType=[inner]) hints[JoinCostHint options:[VERSIONED_STATE, VERSIONED_STATE, 1, LEFT]]
        LogicalFilter(condition=[=($8, 1)]) hints[DedupHint]
          LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], phone=[$4], address=[$5], date_of_birth=[$6], updated_at=[$7], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $7 DESC NULLS LAST)])
            LogicalTableScan(table=[[customers$3]])
        LogicalProject(id=[$0], customer_id=[$1], loan_type_id=[$2], amount=[$3], duration=[$4], application_date=[$5], updated_at=[$6], customer_id7=[$1])
          LogicalFilter(condition=[=($7, 1)]) hints[DedupHint]
            LogicalProject(id=[$0], customer_id=[$1], loan_type_id=[$2], amount=[$3], duration=[$4], application_date=[$5], updated_at=[$6], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $6 DESC NULLS LAST)])
              LogicalTableScan(table=[[applications$3]])

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY TABLE `applicationupdates$1` (\n  `loan_application_id` BIGINT NOT NULL,\n  `status` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `message` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL METADATA FROM 'timestamp',\n  WATERMARK FOR `event_time` AS (`event_time` - INTERVAL '0.0' SECOND)\n) WITH (\n  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',\n  'properties.auto.offset.reset' = 'earliest',\n  'connector' = 'kafka',\n  'format' = 'json',\n  'properties.group.id' = 'groupid',\n  'topic' = 'loan-applicationupdates',\n  'scan.startup.mode' = 'earliest-offset'\n);",
    "CREATE TEMPORARY TABLE `customers$1` (\n  `id` BIGINT NOT NULL,\n  `first_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `last_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `phone` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `address` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `date_of_birth` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`, `updated_at`) NOT ENFORCED,\n  WATERMARK FOR `updated_at` AS (`updated_at` - INTERVAL '0.001' SECOND)\n) WITH (\n  'format' = 'flexible-json',\n  'path' = '/data/customers.jsonl',\n  'source.monitor-interval' = '1',\n  'connector' = 'filesystem'\n);",
    "CREATE TEMPORARY TABLE `applications$1` (\n  `id` BIGINT NOT NULL,\n  `customer_id` BIGINT NOT NULL,\n  `loan_type_id` BIGINT NOT NULL,\n  `amount` DOUBLE NOT NULL,\n  `duration` BIGINT NOT NULL,\n  `application_date` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`, `updated_at`) NOT ENFORCED,\n  WATERMARK FOR `updated_at` AS (`updated_at` - INTERVAL '0.001' SECOND)\n) WITH (\n  'format' = 'flexible-json',\n  'path' = '/data/applications.jsonl',\n  'source.monitor-interval' = '1',\n  'connector' = 'filesystem'\n);",
    "CREATE TEMPORARY TABLE `loantypes$1` (\n  `id` BIGINT NOT NULL,\n  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `interest_rate` DOUBLE NOT NULL,\n  `max_amount` DOUBLE NOT NULL,\n  `min_amount` DOUBLE NOT NULL,\n  `max_duration` BIGINT NOT NULL,\n  `min_duration` BIGINT NOT NULL,\n  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`, `updated_at`) NOT ENFORCED,\n  WATERMARK FOR `updated_at` AS (`updated_at` - INTERVAL '0.001' SECOND)\n) WITH (\n  'format' = 'flexible-json',\n  'path' = '/data/loan_types.jsonl',\n  'source.monitor-interval' = '1',\n  'connector' = 'filesystem'\n);",
    "CREATE TEMPORARY TABLE `applicationalert$1` (\n  `id` BIGINT NOT NULL,\n  `customer_id` BIGINT NOT NULL,\n  `loan_type_id` BIGINT NOT NULL,\n  `max_amount` DOUBLE NOT NULL,\n  `min_amount` DOUBLE NOT NULL,\n  `amount` DOUBLE NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `_event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'applicationalert$1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `applications$3` (\n  `id` BIGINT NOT NULL,\n  `customer_id` BIGINT NOT NULL,\n  `loan_type_id` BIGINT NOT NULL,\n  `amount` DOUBLE NOT NULL,\n  `duration` BIGINT NOT NULL,\n  `application_date` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'applications$3',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `applicationstatus$1` (\n  `status` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `message` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `id` BIGINT NOT NULL,\n  `customer_id` BIGINT NOT NULL,\n  `loan_type_id` BIGINT NOT NULL,\n  `amount` DOUBLE NOT NULL,\n  `duration` BIGINT NOT NULL,\n  `max_amount` DOUBLE NOT NULL,\n  `min_amount` DOUBLE NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'applicationstatus$1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `applicationupdates$2` (\n  `loan_application_id` BIGINT NOT NULL,\n  `status` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `message` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'applicationupdates$2',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `customers$3` (\n  `id` BIGINT NOT NULL,\n  `first_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `last_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `phone` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `address` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `date_of_birth` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'customers$3',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `loantypes$3` (\n  `id` BIGINT NOT NULL,\n  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `interest_rate` DOUBLE NOT NULL,\n  `max_amount` DOUBLE NOT NULL,\n  `min_amount` DOUBLE NOT NULL,\n  `max_duration` BIGINT NOT NULL,\n  `min_duration` BIGINT NOT NULL,\n  `updated_at` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'loantypes$3',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `overview$1` (\n  `__pk1$id` BIGINT NOT NULL,\n  `loan_type_id` BIGINT NOT NULL,\n  `total_amount` DOUBLE NOT NULL,\n  `total_loans` BIGINT NOT NULL,\n  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`__pk1$id`, `loan_type_id`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'overview$1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `applicationalert$1$1` (\n  `id` BIGINT NOT NULL,\n  `customer_id` BIGINT NOT NULL,\n  `loan_type_id` BIGINT NOT NULL,\n  `max_amount` DOUBLE NOT NULL,\n  `min_amount` DOUBLE NOT NULL,\n  `amount` DOUBLE NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `_event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\n) WITH (\n  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',\n  'properties.auto.offset.reset' = 'earliest',\n  'connector' = 'kafka',\n  'format' = 'json',\n  'properties.group.id' = 'groupid',\n  'topic' = 'applicationalert-1',\n  'scan.startup.mode' = 'earliest-offset'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT *\nFROM (SELECT `id`, `name`, `description`, `interest_rate`, `max_amount`, `min_amount`, `max_duration`, `min_duration`, `updated_at`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST)) AS `_rownum`\nFROM `loantypes$1`) AS `t`\nWHERE (`_rownum` = 1);",
    "CREATE VIEW `table$2`\nAS\nSELECT *\nFROM (SELECT `id`, `customer_id`, `loan_type_id`, `amount`, `duration`, `application_date`, `updated_at`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST)) AS `_rownum`\nFROM `applications$1`) AS `t1`\nWHERE (`_rownum` = 1);",
    "CREATE VIEW `table$3`\nAS\nSELECT `id`, `customer_id`, `loan_type_id`, `max_amount`, `min_amount`, `amount`, `_uuid`, `event_time` AS `_event_time`\nFROM (SELECT `$cor1`.`status`, `$cor1`.`message`, `$cor1`.`event_time`, `$cor1`.`id`, `$cor1`.`customer_id`, `$cor1`.`loan_type_id`, `$cor1`.`amount`, `$cor1`.`duration`, `t0`.`max_amount`, `t0`.`min_amount`, `$cor1`.`_uuid`\nFROM (SELECT *\nFROM `applicationupdates$1` AS `$cor2`\nINNER JOIN `table$2` FOR SYSTEM_TIME AS OF `$cor2`.`event_time` AS `t2` ON (`t2`.`id` = `$cor2`.`loan_application_id`)) AS `$cor1`\nINNER JOIN `table$1` FOR SYSTEM_TIME AS OF `$cor1`.`event_time` AS `t0` ON (`t0`.`id` = `$cor1`.`loan_type_id`)) AS `t4`\nWHERE ((`t4`.`status` = 'underwriting') AND ((`t4`.`amount` > `t4`.`max_amount`) OR (`t4`.`amount` < `t4`.`min_amount`)));",
    "CREATE VIEW `table$4`\nAS\nSELECT *\nFROM `applications$1`;",
    "CREATE VIEW `table$5`\nAS\nSELECT *\nFROM (SELECT `id`, `name`, `description`, `interest_rate`, `max_amount`, `min_amount`, `max_duration`, `min_duration`, `updated_at`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST)) AS `_rownum`\nFROM `loantypes$1`) AS `t`\nWHERE (`_rownum` = 1);",
    "CREATE VIEW `table$6`\nAS\nSELECT *\nFROM (SELECT `id`, `customer_id`, `loan_type_id`, `amount`, `duration`, `application_date`, `updated_at`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST)) AS `_rownum`\nFROM `applications$1`) AS `t1`\nWHERE (`_rownum` = 1);",
    "CREATE VIEW `table$7`\nAS\nSELECT `$cor3`.`status`, `$cor3`.`message`, `$cor3`.`event_time`, `$cor3`.`id`, `$cor3`.`customer_id`, `$cor3`.`loan_type_id`, `$cor3`.`amount`, `$cor3`.`duration`, `t0`.`max_amount`, `t0`.`min_amount`, `$cor3`.`_uuid`\nFROM (SELECT *\nFROM `applicationupdates$1` AS `$cor4`\nINNER JOIN `table$6` FOR SYSTEM_TIME AS OF `$cor4`.`event_time` AS `t2` ON (`t2`.`id` = `$cor4`.`loan_application_id`)) AS `$cor3`\nINNER JOIN `table$5` FOR SYSTEM_TIME AS OF `$cor3`.`event_time` AS `t0` ON (`t0`.`id` = `$cor3`.`loan_type_id`);",
    "CREATE VIEW `table$8`\nAS\nSELECT *\nFROM `applicationupdates$1`;",
    "CREATE VIEW `table$9`\nAS\nSELECT *\nFROM `customers$1`;",
    "CREATE VIEW `table$10`\nAS\nSELECT *\nFROM `loantypes$1`;",
    "CREATE VIEW `table$11`\nAS\nSELECT `t0`.`id` AS `__pk1$id`, `t3`.`loan_type_id`, SUM(`t3`.`amount`) AS `total_amount`, COUNT(*) AS `total_loans`, MAX((CASE WHEN (`t0`.`updated_at` < `t3`.`updated_at`) THEN `t3`.`updated_at` ELSE `t0`.`updated_at` END)) AS `__timestamp`\nFROM (SELECT *\nFROM (SELECT `id`, `first_name`, `last_name`, `email`, `phone`, `address`, `date_of_birth`, `updated_at`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST)) AS `_rownum`\nFROM `customers$1`) AS `t`\nWHERE (`_rownum` = 1)) AS `t0`\nINNER JOIN (SELECT `id`, `customer_id`, `loan_type_id`, `amount`, `duration`, `application_date`, `updated_at`, `customer_id` AS `customer_id7`\nFROM (SELECT `id`, `customer_id`, `loan_type_id`, `amount`, `duration`, `application_date`, `updated_at`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST)) AS `_rownum`\nFROM `applications$1`) AS `t1`\nWHERE (`_rownum` = 1)) AS `t3` ON (`t0`.`id` = `t3`.`customer_id7`)\nGROUP BY `t0`.`id`, `t3`.`loan_type_id`;",
    "CREATE VIEW `table$12`\nAS\nSELECT *\nFROM (SELECT `id`, `name`, `description`, `interest_rate`, `max_amount`, `min_amount`, `max_duration`, `min_duration`, `updated_at`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST)) AS `_rownum`\nFROM `loantypes$1`) AS `t`\nWHERE (`_rownum` = 1);",
    "CREATE VIEW `table$13`\nAS\nSELECT *\nFROM (SELECT `id`, `customer_id`, `loan_type_id`, `amount`, `duration`, `application_date`, `updated_at`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated_at` DESC NULLS LAST)) AS `_rownum`\nFROM `applications$1`) AS `t1`\nWHERE (`_rownum` = 1);",
    "CREATE VIEW `table$14`\nAS\nSELECT `id`, `customer_id`, `loan_type_id`, `max_amount`, `min_amount`, `amount`, `_uuid`, `event_time` AS `_event_time`\nFROM (SELECT `$cor5`.`status`, `$cor5`.`message`, `$cor5`.`event_time`, `$cor5`.`id`, `$cor5`.`customer_id`, `$cor5`.`loan_type_id`, `$cor5`.`amount`, `$cor5`.`duration`, `t0`.`max_amount`, `t0`.`min_amount`, `$cor5`.`_uuid`\nFROM (SELECT *\nFROM `applicationupdates$1` AS `$cor6`\nINNER JOIN `table$13` FOR SYSTEM_TIME AS OF `$cor6`.`event_time` AS `t2` ON (`t2`.`id` = `$cor6`.`loan_application_id`)) AS `$cor5`\nINNER JOIN `table$12` FOR SYSTEM_TIME AS OF `$cor5`.`event_time` AS `t0` ON (`t0`.`id` = `$cor5`.`loan_type_id`)) AS `t4`\nWHERE ((`t4`.`status` = 'underwriting') AND ((`t4`.`amount` > `t4`.`max_amount`) OR (`t4`.`amount` < `t4`.`min_amount`)));",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `applicationalert$1`\n(SELECT *\nFROM `table$3`)\n;\nINSERT INTO `applications$3`\n(SELECT *\nFROM `table$4`)\n;\nINSERT INTO `applicationstatus$1`\n(SELECT *\nFROM `table$7`)\n;\nINSERT INTO `applicationupdates$2`\n(SELECT *\nFROM `table$8`)\n;\nINSERT INTO `customers$3`\n(SELECT *\nFROM `table$9`)\n;\nINSERT INTO `loantypes$3`\n(SELECT *\nFROM `table$10`)\n;\nINSERT INTO `overview$1`\n(SELECT *\nFROM `table$11`)\n;\nINSERT INTO `applicationalert$1$1`\n(SELECT *\nFROM `table$14`)\n;\nEND;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "kafka",
    "filesystem"
  ],
  "formats" : [
    "flexible-json",
    "json"
  ]
}
>>>kafka.json
{
  "topics" : [
    {
      "name" : "applicationalert-1",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    },
    {
      "name" : "loan-applicationupdates",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    }
  ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "applicationalert$1",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"customer_id\" BIGINT NOT NULL",
        "\"loan_type_id\" BIGINT NOT NULL",
        "\"max_amount\" DOUBLE PRECISION NOT NULL",
        "\"min_amount\" DOUBLE PRECISION NOT NULL",
        "\"amount\" DOUBLE PRECISION NOT NULL",
        "\"_uuid\" TEXT NOT NULL",
        "\"_event_time\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"_uuid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS applicationalert$1 (\"id\" BIGINT NOT NULL,\"customer_id\" BIGINT NOT NULL,\"loan_type_id\" BIGINT NOT NULL,\"max_amount\" DOUBLE PRECISION NOT NULL,\"min_amount\" DOUBLE PRECISION NOT NULL,\"amount\" DOUBLE PRECISION NOT NULL,\"_uuid\" TEXT NOT NULL,\"_event_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"_uuid\"));"
    },
    {
      "name" : "applications$3",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"customer_id\" BIGINT NOT NULL",
        "\"loan_type_id\" BIGINT NOT NULL",
        "\"amount\" DOUBLE PRECISION NOT NULL",
        "\"duration\" BIGINT NOT NULL",
        "\"application_date\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"id\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS applications$3 (\"id\" BIGINT NOT NULL,\"customer_id\" BIGINT NOT NULL,\"loan_type_id\" BIGINT NOT NULL,\"amount\" DOUBLE PRECISION NOT NULL,\"duration\" BIGINT NOT NULL,\"application_date\" TIMESTAMP WITH TIME ZONE NOT NULL,\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"id\"));"
    },
    {
      "name" : "applicationstatus$1",
      "columns" : [
        "\"status\" TEXT NOT NULL",
        "\"message\" TEXT NOT NULL",
        "\"event_time\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"id\" BIGINT NOT NULL",
        "\"customer_id\" BIGINT NOT NULL",
        "\"loan_type_id\" BIGINT NOT NULL",
        "\"amount\" DOUBLE PRECISION NOT NULL",
        "\"duration\" BIGINT NOT NULL",
        "\"max_amount\" DOUBLE PRECISION NOT NULL",
        "\"min_amount\" DOUBLE PRECISION NOT NULL",
        "\"_uuid\" TEXT NOT NULL"
      ],
      "primaryKeys" : [
        "\"_uuid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS applicationstatus$1 (\"status\" TEXT NOT NULL,\"message\" TEXT NOT NULL,\"event_time\" TIMESTAMP WITH TIME ZONE NOT NULL,\"id\" BIGINT NOT NULL,\"customer_id\" BIGINT NOT NULL,\"loan_type_id\" BIGINT NOT NULL,\"amount\" DOUBLE PRECISION NOT NULL,\"duration\" BIGINT NOT NULL,\"max_amount\" DOUBLE PRECISION NOT NULL,\"min_amount\" DOUBLE PRECISION NOT NULL,\"_uuid\" TEXT NOT NULL , PRIMARY KEY (\"_uuid\"));"
    },
    {
      "name" : "applicationupdates$2",
      "columns" : [
        "\"loan_application_id\" BIGINT NOT NULL",
        "\"status\" TEXT NOT NULL",
        "\"message\" TEXT NOT NULL",
        "\"_uuid\" TEXT NOT NULL",
        "\"event_time\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"_uuid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS applicationupdates$2 (\"loan_application_id\" BIGINT NOT NULL,\"status\" TEXT NOT NULL,\"message\" TEXT NOT NULL,\"_uuid\" TEXT NOT NULL,\"event_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"_uuid\"));"
    },
    {
      "name" : "customers$3",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"first_name\" TEXT NOT NULL",
        "\"last_name\" TEXT NOT NULL",
        "\"email\" TEXT NOT NULL",
        "\"phone\" TEXT NOT NULL",
        "\"address\" TEXT NOT NULL",
        "\"date_of_birth\" TEXT NOT NULL",
        "\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"id\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS customers$3 (\"id\" BIGINT NOT NULL,\"first_name\" TEXT NOT NULL,\"last_name\" TEXT NOT NULL,\"email\" TEXT NOT NULL,\"phone\" TEXT NOT NULL,\"address\" TEXT NOT NULL,\"date_of_birth\" TEXT NOT NULL,\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"id\"));"
    },
    {
      "name" : "loantypes$3",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"name\" TEXT NOT NULL",
        "\"description\" TEXT NOT NULL",
        "\"interest_rate\" DOUBLE PRECISION NOT NULL",
        "\"max_amount\" DOUBLE PRECISION NOT NULL",
        "\"min_amount\" DOUBLE PRECISION NOT NULL",
        "\"max_duration\" BIGINT NOT NULL",
        "\"min_duration\" BIGINT NOT NULL",
        "\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"id\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS loantypes$3 (\"id\" BIGINT NOT NULL,\"name\" TEXT NOT NULL,\"description\" TEXT NOT NULL,\"interest_rate\" DOUBLE PRECISION NOT NULL,\"max_amount\" DOUBLE PRECISION NOT NULL,\"min_amount\" DOUBLE PRECISION NOT NULL,\"max_duration\" BIGINT NOT NULL,\"min_duration\" BIGINT NOT NULL,\"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"id\"));"
    },
    {
      "name" : "overview$1",
      "columns" : [
        "\"__pk1$id\" BIGINT NOT NULL",
        "\"loan_type_id\" BIGINT NOT NULL",
        "\"total_amount\" DOUBLE PRECISION NOT NULL",
        "\"total_loans\" BIGINT NOT NULL",
        "\"__timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"__pk1$id\"",
        "\"loan_type_id\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS overview$1 (\"__pk1$id\" BIGINT NOT NULL,\"loan_type_id\" BIGINT NOT NULL,\"total_amount\" DOUBLE PRECISION NOT NULL,\"total_loans\" BIGINT NOT NULL,\"__timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"__pk1$id\",\"loan_type_id\"));"
    },
    {
      "indexName" : "applications$3_hash_c1",
      "tableName" : "applications$3",
      "columns" : [
        "customer_id"
      ],
      "type" : "HASH",
      "sql" : "CREATE INDEX IF NOT EXISTS applications$3_hash_c1 ON applications$3 USING hash (\"customer_id\");"
    },
    {
      "indexName" : "applicationupdates$2_hash_c0",
      "tableName" : "applicationupdates$2",
      "columns" : [
        "loan_application_id"
      ],
      "type" : "HASH",
      "sql" : "CREATE INDEX IF NOT EXISTS applicationupdates$2_hash_c0 ON applicationupdates$2 USING hash (\"loan_application_id\");"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "ApplicationStatus",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"applicationstatus$1\"\nORDER BY \"event_time\" DESC NULLS LAST, \"_uuid\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Applications",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "id"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT \"id\", \"customer_id\", \"loan_type_id\", \"amount\", \"duration\", \"application_date\", \"updated_at\", 1 AS \"__pk\"\nFROM \"applications$3\"\nWHERE \"id\" = $1\nORDER BY 1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Applications",
        "fieldName" : "updates",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"applicationupdates$2\"\nWHERE $1 = \"loan_application_id\"\nORDER BY \"event_time\", \"_uuid\"",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "ApplicationUpdates",
        "fieldName" : "application",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT \"id\", \"customer_id\", \"loan_type_id\", \"amount\", \"duration\", \"application_date\", \"updated_at\", 1 AS \"__pk\"\nFROM \"applications$3\"\nWHERE $1 = \"id\"\nORDER BY 1",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "loan_application_id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Applications",
        "fieldName" : "loanType",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT \"id\", \"name\", \"description\", \"interest_rate\", \"max_amount\", \"min_amount\", \"max_duration\", \"min_duration\", \"updated_at\", 1 AS \"__pk\"\nFROM \"loantypes$3\"\nWHERE $1 = \"id\"\nORDER BY 1",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "loan_type_id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Customers",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "id"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT \"id\", \"first_name\", \"last_name\", \"email\", \"phone\", \"address\", \"date_of_birth\", \"updated_at\", 1 AS \"__pk\"\nFROM \"customers$3\"\nWHERE \"id\" = $1\nORDER BY 1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Customers",
        "fieldName" : "applications",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"applications$3\"\nWHERE $1 = \"customer_id\"\nORDER BY \"application_date\", \"id\"",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Customers",
        "fieldName" : "overview",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"overview$1\"\nWHERE \"__pk1$id\" = $1\nORDER BY \"loan_type_id\"",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "LoanTypes",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "id"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT \"id\", \"name\", \"description\", \"interest_rate\", \"max_amount\", \"min_amount\", \"max_duration\", \"min_duration\", \"updated_at\", 1 AS \"__pk\"\nFROM \"loantypes$3\"\nWHERE \"id\" = $1\nORDER BY 1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "id"
                }
              ]
            }
          },
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"loantypes$3\"\nORDER BY \"id\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "ApplicationAlert",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"applicationalert$1\"\nORDER BY \"_event_time\" DESC NULLS LAST, \"_uuid\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "ApplicationUpdates",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"applicationupdates$2\"\nORDER BY \"event_time\" DESC NULLS LAST, \"_uuid\"",
              "parameters" : [ ]
            }
          }
        ]
      }
    ],
    "mutations" : [
      {
        "fieldName" : "ApplicationUpdates",
        "topic" : "loan-applicationupdates",
        "sinkConfig" : {
          "value.serializer" : "com.datasqrl.graphql.kafka.JsonSerializer",
          "group.id" : "groupid",
          "bootstrap.servers" : "${PROPERTIES_BOOTSTRAP_SERVERS}",
          "key.serializer" : "com.datasqrl.graphql.kafka.JsonSerializer"
        }
      }
    ],
    "subscriptions" : [
      {
        "fieldName" : "ApplicationAlert",
        "topic" : "applicationalert-1",
        "sinkConfig" : {
          "key.deserializer" : "com.datasqrl.graphql.kafka.JsonDeserializer",
          "value.deserializer" : "com.datasqrl.graphql.kafka.JsonDeserializer",
          "group.id" : "groupid",
          "bootstrap.servers" : "${PROPERTIES_BOOTSTRAP_SERVERS}",
          "auto.offset.reset" : "earliest"
        },
        "filters" : { }
      }
    ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "type ApplicationAlert {\n  id: Int!\n  loan_type_id: Int!\n  customer_id: Int!\n  max_amount: Float!\n  min_amount: Float!\n  amount: Float!\n}\n\ntype ApplicationStatus {\n  status: String!\n  message: String!\n  id: Int!\n  customer_id: Int!\n  loan_type_id: Int!\n  amount: Float!\n  duration: Int!\n}\n\ntype ApplicationUpdates {\n  loan_application_id: Int!\n  status: String!\n  message: String!\n  event_time: String!\n  application: Applications!\n}\n\ntype Applications {\n  id: Int!\n  customer_id: Int!\n  loan_type_id: Int!\n  amount: Float!\n  duration: Int!\n  application_date: String!\n  updated_at: String!\n  updates: [ApplicationUpdates!]\n  loanType: LoanTypes!\n}\n\ntype Customers {\n  id: Int!\n  first_name: String!\n  last_name: String!\n  email: String!\n  phone: String!\n  address: String!\n  date_of_birth: String!\n  updated_at: String!\n  applications(limit: Int = 20, offset: Int = 0): [Applications!]\n  overview: [overview!]\n}\n\ntype LoanTypes {\n  id: Int!\n  name: String!\n  description: String!\n  interest_rate: Float!\n  max_amount: Float!\n  min_amount: Float!\n  max_duration: Int!\n  min_duration: Int!\n  updated_at: String!\n}\n\ntype Query {\n  ApplicationStatus: [ApplicationStatus!]\n  Applications(id: Int!): [Applications!]\n  Customers(id: Int!): [Customers!]\n  LoanTypes(id: Int): [LoanTypes!]\n  ApplicationAlert: [ApplicationAlert!]\n  ApplicationUpdates: [ApplicationUpdates!]\n}\n\ntype overview {\n  loan_type_id: Int!\n  total_amount: Float!\n  total_loans: Int!\n}\n\ntype Subscription {\n  ApplicationAlert: ApplicationAlert!\n}\n\ntype Mutation {\n  ApplicationUpdates(event: ApplicationUpdateEvent!): ApplicationUpdateEventResult!\n}\n\ninput ApplicationUpdateEvent {\n  loan_application_id: Int!\n  status: String!\n  message: String!\n}\n\ntype ApplicationUpdateEventResult {\n  loan_application_id: Int!\n  message: String!\n}\n"
    }
  }
}
