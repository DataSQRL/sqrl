>>>customer$3-lp-stream
LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
  LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[epochToTimestamp($5)]) hints[WatermarkHint options:[6]]
    LogicalTableScan(table=[[customer$i$1]])

>>>customerdedup$13-lp-stream
LogicalProject(customerid=[$0], _uuid=[$1], _ingest_time=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
  LogicalProject(customerid=[$2], _uuid=[$0], _ingest_time=[$1], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
    LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[epochToTimestamp($5)]) hints[WatermarkHint options:[6]]
      LogicalTableScan(table=[[customer$i$1]])

>>>ordercustomerdedup$15-lp-stream
LogicalProject(_uuid=[$0], id=[$1], name=[$2], customerid=[$3], rowtime=[$4])
  LogicalProject(_uuid=[$0], id=[$2], name=[$11], customerid=[$3], rowtime=[$6])
    LogicalJoin(condition=[=($3, $7)], joinType=[inner]) hints[TemporalJoinHint options:[6, 6, 0]]
      LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], rowtime=[$4]) hints[WatermarkHint options:[6]]
        LogicalTableScan(table=[[orders$i$4]])
      LogicalFilter(condition=[=($7, 1)]) hints[DedupHint]
        LogicalProject(customerid=[$0], _uuid=[$1], _ingest_time=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6], $f7=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $6 DESC NULLS LAST)])
          LogicalProject(customerid=[$2], _uuid=[$0], _ingest_time=[$1], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
            LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[epochToTimestamp($5)]) hints[WatermarkHint options:[6]]
              LogicalTableScan(table=[[customer$i$1]])

>>>ordercustomerinterval$11-lp-stream
LogicalProject(_uuid=[$0], _uuid0=[$1], id=[$2], name=[$3], customerid=[$4], rowtime=[$5])
  LogicalProject(_uuid=[$0], _uuid0=[$7], id=[$2], name=[$11], customerid=[$3], rowtime=[$6])
    LogicalJoin(condition=[AND(=($3, $9), >=($6, $13), <=($6, +($13, 31536000000:INTERVAL DAY(3))))], joinType=[inner]) hints[IntervalJoin]
      LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], rowtime=[$4]) hints[WatermarkHint options:[6]]
        LogicalTableScan(table=[[orders$i$4]])
      LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[epochToTimestamp($5)]) hints[WatermarkHint options:[6]]
        LogicalTableScan(table=[[customer$i$1]])

>>>orders$6-lp-stream
LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], rowtime=[$6])
  LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], rowtime=[$4]) hints[WatermarkHint options:[6]]
    LogicalTableScan(table=[[orders$i$4]])

>>>customerdedup-lp-database
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(customerid=[$0], _uuid=[$1], _ingest_time=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
    LogicalTableScan(table=[[customerdedup$13]])

>>>ordercustomer-lp-database
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC])
  LogicalProject(_uuid=[$0], _uuid0=[$1], id=[$2], name=[$3], customerid=[$4], __timestamp=[$5])
    LogicalProject(_uuid=[$0], _uuid0=[$6], id=[$2], name=[$10], customerid=[$3], __timestamp=[CASE(<($5, $12), $12, $5)])
      LogicalJoin(condition=[=($3, $8)], joinType=[inner]) hints[JoinCostHint options:[STREAM, STREAM, 1, NONE]]
        LogicalTableScan(table=[[orders$6]])
        LogicalTableScan(table=[[customer$3]])

>>>ordercustomerdedup-lp-database
LogicalSort(sort0=[$4], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC])
  LogicalProject(_uuid=[$0], id=[$1], name=[$2], customerid=[$3], rowtime=[$4])
    LogicalTableScan(table=[[ordercustomerdedup$15]])

>>>ordercustomerinterval-lp-database
LogicalSort(sort0=[$5], sort1=[$0], sort2=[$1], dir0=[DESC-nulls-last], dir1=[ASC], dir2=[ASC])
  LogicalProject(_uuid=[$0], _uuid0=[$1], id=[$2], name=[$3], customerid=[$4], rowtime=[$5])
    LogicalTableScan(table=[[ordercustomerinterval$11]])

>>>ordercustomer-data
10007140, Emily F. Ludies, 1000107
10007543, John Mekker, 1000101
10008231, Michelle Dagnes, 1000121
10008434, Emily F. Ludies, 1000107
>>>ordercustomerinterval-data

>>>customerdedup-data
1000101, john.mekker@gmail.com, John Mekker, 1645396849, 2022-02-20T22:40:49-08:00
1000107, emily.ludies@hotmail.com, Emily F. Ludies, 1650493189, 2022-04-20T22:19:49-07:00
1000121, lalelu@hottunes.org, Michelle Dagnes, 1650493449, 2022-04-20T22:24:09-07:00
1000131, hotbear753@yahoo.com, Mark Spielman, 1650494449, 2022-04-20T22:40:49-07:00
>>>ordercustomerdedup-data
10007140, Emily F. Ludies, 1000107, 2023-05-19T02:28:39.553-07:00
10007543, John Mekker, 1000101, 2023-05-19T01:29:39.553-07:00
10008231, Michelle Dagnes, 1000121, 2023-05-19T02:16:39.553-07:00
10008434, Emily F. Ludies, 1000107, 2023-05-19T01:45:39.553-07:00
