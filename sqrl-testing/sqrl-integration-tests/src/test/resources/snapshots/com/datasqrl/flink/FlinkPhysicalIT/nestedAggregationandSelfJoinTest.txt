>>>customer$3-lp-stream
LogicalProject(customerid=[$2], _uuid=[$0], _ingest_time=[$1], email=[$3], name=[$4], lastUpdated=[$5], updateTime=[$6]) hints[TimestampHint options:[6]]
  LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], updateTime=[epochToTimestamp($5)]) hints[WatermarkHint options:[6]]
    LogicalTableScan(table=[[customer$1]])

>>>orders$2-lp-stream
LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]], [TimestampHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4], TimestampHint options:[4]]

>>>orders_by_hour$1-lp-stream
LogicalProject(__customerid$pk$2=[$0], hour=[$1], total_price=[$2], total_num=[$3]) hints[TimestampHint options:[1]]
  LogicalAggregate(group=[{0, 1}], total_price=[SUM($2)], total_num=[SUM($3)]) hints[TumbleAggregationHint options:[1, FUNCTION, 3, 3600000, 0]]
    LogicalProject(__customerid$pk$2=[$6], hour=[endOfHour($3)], price=[$4], num=[$5], _uuid=[$0])
      LogicalJoin(condition=[=($2, $6)], joinType=[inner]) hints[TemporalJoinHint options:[3, 6, 0]]
        LogicalProject(_uuid=[$0], id=[$2], customerid=[$3], time=[$4], price=[$7], num=[$8])
          LogicalJoin(condition=[AND(=($0, $6), =($10, $4))], joinType=[inner]) hints[IntervalJoin]
            LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
            LogicalProject(___uuid$pk$1=[$0], price=[$2], num=[$3], discount=[$4], time=[$1])
              LogicalAggregate(group=[{0, 4}], price=[SUM($1)], num=[COUNT()], discount=[SUM($2)]) hints[TumbleAggregationHint options:[4, INSTANT, -1, 1, 0]]
                LogicalProject(___uuid$pk$1=[$0], $f1=[-(*($8, $9), $10)], discount=[$10], _idx=[$6], time=[$4])
                  LogicalCorrelate(correlation=[$cor7], joinType=[inner], requiredColumns=[{5}])
                    LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
                    Uncollect
                      LogicalProject($f0=[$cor7.entries])
                        LogicalValues(tuples=[[{ 0 }]])
        LogicalFilter(condition=[=($7, 1)]) hints[DedupHint]
          LogicalProject(customerid=[$0], _uuid=[$1], _ingest_time=[$2], email=[$3], name=[$4], lastUpdated=[$5], updateTime=[$6], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $6 DESC NULLS LAST)])
            LogicalProject(customerid=[$2], _uuid=[$0], _ingest_time=[$1], email=[$3], name=[$4], lastUpdated=[$5], updateTime=[$6])
              LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], updateTime=[epochToTimestamp($5)]) hints[WatermarkHint options:[6]]
                LogicalTableScan(table=[[customer$1]])

>>>ordersinline$1-lp-stream
LogicalProject(_uuid=[$0], id=[$2], customerid=[$3], time=[$4], price=[$7], num=[$8]) hints[TimestampHint options:[3]]
  LogicalJoin(condition=[AND(=($0, $6), =($10, $4))], joinType=[inner]) hints[IntervalJoin]
    LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
    LogicalProject(___uuid$pk$1=[$0], price=[$2], num=[$3], discount=[$4], time=[$1])
      LogicalAggregate(group=[{0, 4}], price=[SUM($1)], num=[COUNT()], discount=[SUM($2)]) hints[TumbleAggregationHint options:[4, INSTANT, -1, 1, 0]]
        LogicalProject(___uuid$pk$1=[$0], $f1=[-(*($8, $9), $10)], discount=[$10], _idx=[$6], time=[$4])
          LogicalCorrelate(correlation=[$cor7], joinType=[inner], requiredColumns=[{5}])
            LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
            Uncollect
              LogicalProject($f0=[$cor7.entries])
                LogicalValues(tuples=[[{ 0 }]])

>>>customer-lp-database
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(customerid=[$0], _uuid=[$1], _ingest_time=[$2], email=[$3], name=[$4], lastUpdated=[$5], updateTime=[$6])
    LogicalTableScan(table=[[customer$3]])

>>>orders-lp-database
LogicalSort(sort0=[$4], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC])
  LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4])
    LogicalTableScan(table=[[orders$2]])

>>>orders_by_hour-lp-database
LogicalSort(sort0=[$1], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC])
  LogicalProject(__customerid$pk$2=[$0], hour=[$1], total_price=[$2], total_num=[$3])
    LogicalTableScan(table=[[orders_by_hour$1]])

>>>ordersinline-lp-database
LogicalSort(sort0=[$3], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC])
  LogicalProject(_uuid=[$0], id=[$1], customerid=[$2], time=[$3], price=[$4], num=[$5])
    LogicalTableScan(table=[[ordersinline$1]])

>>>customer-data
1000101, john.mekker@gmail.com, John Mekker, 1645396849, 2022-02-20 22:40:49.0
1000107, emily.ludies@hotmail.com, Emily F. Ludies, 1650493189, 2022-04-20 22:19:49.0
1000121, lalelu@hottunes.org, Michelle Dagnes, 1650493449, 2022-04-20 22:24:09.0
1000131, hotbear753@yahoo.com, Mark Spielman, 1650494449, 2022-04-20 22:40:49.0
>>>orders-data
10007140, 1000107, 2023-05-19 02:28:39.553244
10007543, 1000101, 2023-05-19 01:29:39.553244
10008231, 1000121, 2023-05-19 02:16:39.553244
10008434, 1000107, 2023-05-19 01:45:39.553244
>>>ordersinline-data
10007140, 1000107, 2023-05-19 02:28:39.553, 36.95, 2
10007543, 1000101, 2023-05-19 01:29:39.553, 120.85, 2
10008231, 1000121, 2023-05-19 02:16:39.553, 166.5, 2
10008434, 1000107, 2023-05-19 01:45:39.553, 41.95, 1
>>>orders_by_hour-data
2023-05-19 01:59:59.999, 120.85, 2
2023-05-19 01:59:59.999, 41.95, 1
2023-05-19 02:59:59.999, 166.5, 2
2023-05-19 02:59:59.999, 36.95, 2
