>>>customer$9-lp-stream
LogicalProject(customerid=[$0], _uuid=[$1], _ingest_time=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
  LogicalProject(customerid=[$2], _uuid=[$0], _ingest_time=[$1], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
    LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[epochToTimestamp($5)]) hints[WatermarkHint options:[6]]
      LogicalTableScan(table=[[customer$i$5]])

>>>orders$3-lp-stream
LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4])
  LogicalTableScan(table=[[orders$i$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>orders_by_hour$15-lp-stream
LogicalProject(__pk_0=[$0], hour=[$1], total_price=[$2], total_num=[$3])
  LogicalProject(__pk_0=[$0], hour=[$1], total_price=[$2], total_num=[$3])
    LogicalAggregate(group=[{0, 1}], total_price=[SUM($2)], total_num=[SUM($3)]) hints[TumbleAggregationHint options:[1, FUNCTION, 3, 3600000]]
      LogicalProject(__pk_0=[$6], hour=[endOfHour($3)], price=[$4], num=[$5], _uuid=[$0])
        LogicalJoin(condition=[=($2, $6)], joinType=[inner]) hints[TemporalJoinHint options:[3, 6, 0]]
          LogicalProject(_uuid=[$0], id=[$2], customerid=[$3], time=[$4], price=[$7], num=[$8])
            LogicalJoin(condition=[AND(=($0, $6), =($10, $4))], joinType=[inner]) hints[IntervalJoin]
              LogicalTableScan(table=[[orders$i$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
              LogicalProject(__pk_0=[$0], price=[$2], num=[$3], discount=[$4], time=[$1])
                LogicalAggregate(group=[{0, 4}], price=[SUM($1)], num=[COUNT()], discount=[SUM($2)]) hints[TumbleAggregationHint options:[4, INSTANT, -1, 1]]
                  LogicalProject(__pk_0=[$0], $f1=[-(*($8, $9), $10)], discount=[$10], _idx=[$6], time=[$4])
                    LogicalCorrelate(correlation=[$cor5], joinType=[inner], requiredColumns=[{5}])
                      LogicalTableScan(table=[[orders$i$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
                      Uncollect
                        LogicalProject($f0=[$cor5.entries])
                          LogicalValues(tuples=[[{ 0 }]])
          LogicalFilter(condition=[=($7, 1)]) hints[DedupHint]
            LogicalProject(customerid=[$0], _uuid=[$1], _ingest_time=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6], $f7=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $6 DESC NULLS LAST)])
              LogicalProject(customerid=[$2], _uuid=[$0], _ingest_time=[$1], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
                LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[epochToTimestamp($5)]) hints[WatermarkHint options:[6]]
                  LogicalTableScan(table=[[customer$i$5]])

>>>ordersinline$13-lp-stream
LogicalProject(_uuid=[$0], id=[$1], customerid=[$2], time=[$3], price=[$4], num=[$5])
  LogicalProject(_uuid=[$0], id=[$2], customerid=[$3], time=[$4], price=[$7], num=[$8])
    LogicalJoin(condition=[AND(=($0, $6), =($10, $4))], joinType=[inner]) hints[IntervalJoin]
      LogicalTableScan(table=[[orders$i$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
      LogicalProject(__pk_0=[$0], price=[$2], num=[$3], discount=[$4], time=[$1])
        LogicalAggregate(group=[{0, 4}], price=[SUM($1)], num=[COUNT()], discount=[SUM($2)]) hints[TumbleAggregationHint options:[4, INSTANT, -1, 1]]
          LogicalProject(__pk_0=[$0], $f1=[-(*($8, $9), $10)], discount=[$10], _idx=[$6], time=[$4])
            LogicalCorrelate(correlation=[$cor5], joinType=[inner], requiredColumns=[{5}])
              LogicalTableScan(table=[[orders$i$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
              Uncollect
                LogicalProject($f0=[$cor5.entries])
                  LogicalValues(tuples=[[{ 0 }]])

>>>customer-lp-database
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(customerid=[$0], _uuid=[$1], _ingest_time=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
    LogicalTableScan(table=[[customer$9]])

>>>orders-lp-database
LogicalSort(sort0=[$4], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC])
  LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4])
    LogicalTableScan(table=[[orders$3]])

>>>orders_by_hour-lp-database
LogicalSort(sort0=[$1], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC])
  LogicalProject(__pk_0=[$0], hour=[$1], total_price=[$2], total_num=[$3])
    LogicalTableScan(table=[[orders_by_hour$15]])

>>>ordersinline-lp-database
LogicalSort(sort0=[$3], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC])
  LogicalProject(_uuid=[$0], id=[$1], customerid=[$2], time=[$3], price=[$4], num=[$5])
    LogicalTableScan(table=[[ordersinline$13]])

>>>customer-data
1000101, john.mekker@gmail.com, John Mekker, 1645396849, 2022-02-20T22:40:49-08:00
1000107, emily.ludies@hotmail.com, Emily F. Ludies, 1650493189, 2022-04-20T22:19:49-07:00
1000121, lalelu@hottunes.org, Michelle Dagnes, 1650493449, 2022-04-20T22:24:09-07:00
1000131, hotbear753@yahoo.com, Mark Spielman, 1650494449, 2022-04-20T22:40:49-07:00
>>>orders-data
10007140, 1000107, 2023-05-19T02:28:39.553244-07:00
10007543, 1000101, 2023-05-19T01:29:39.553244-07:00
10008231, 1000121, 2023-05-19T02:16:39.553244-07:00
10008434, 1000107, 2023-05-19T01:45:39.553244-07:00
>>>ordersinline-data
10007140, 1000107, 2023-05-19T02:28:39.553-07:00, 36.95, 2
10007543, 1000101, 2023-05-19T01:29:39.553-07:00, 120.85, 2
10008231, 1000121, 2023-05-19T02:16:39.553-07:00, 166.5, 2
10008434, 1000107, 2023-05-19T01:45:39.553-07:00, 41.95, 1
>>>orders_by_hour-data
2023-05-19T01:59:59.999-07:00, 120.85, 2
2023-05-19T01:59:59.999-07:00, 41.95, 1
2023-05-19T02:59:59.999-07:00, 166.5, 2
2023-05-19T02:59:59.999-07:00, 36.95, 2
