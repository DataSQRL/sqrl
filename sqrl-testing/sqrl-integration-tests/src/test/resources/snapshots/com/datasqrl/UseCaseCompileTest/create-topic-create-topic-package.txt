>>>pipeline_explain.txt
=== AddEvent
ID:     addevent_2
Type:   stream
Stage:  flink
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - timestamp: TIMESTAMP(3) NOT NULL
 - userId: DECIMAL(10, 5) NOT NULL
 - eventType: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[addevent_1]])

=== PgTable
ID:     pgtable_1
Type:   stream
Stage:  flink
Inputs: addevent_2
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - timestamp: TIMESTAMP(3) NOT NULL
 - userId: DECIMAL(10, 5) NOT NULL
 - eventType: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[addevent_2]])

=== kafka.PgTable
ID:     pgtable_1_1
Type:   export
Stage:  flink
Inputs: pgtable_1

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY TABLE `addevent_1` (\n  `timestamp` TIMESTAMP(3) NOT NULL,\n  `userId` DECIMAL(10, 5) NOT NULL,\n  `eventType` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL METADATA FROM 'timestamp',\n  WATERMARK FOR `event_time` AS `event_time` - INTERVAL '0.0' SECOND\n) WITH (\n  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',\n  'properties.auto.offset.reset' = 'earliest',\n  'connector' = 'kafka',\n  'format' = 'flexible-json',\n  'properties.group.id' = '${PROPERTIES_GROUP_ID}',\n  'topic' = 'create-topic-addevent',\n  'scan.startup.mode' = 'group-offsets'\n);",
    "CREATE TEMPORARY TABLE `pgtable_1` (\n  `timestamp` TIMESTAMP(3) NOT NULL,\n  `userId` DECIMAL(10, 5) NOT NULL,\n  `eventType` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'pgtable_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `pgtable_1_1` (\n  `timestamp` TIMESTAMP(3) NOT NULL,\n  `userId` DECIMAL(10, 5) NOT NULL,\n  `eventType` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\n) WITH (\n  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',\n  'properties.auto.offset.reset' = 'earliest',\n  'connector' = 'kafka',\n  'format' = 'flexible-json',\n  'properties.group.id' = '${PROPERTIES_GROUP_ID}',\n  'topic' = 'pgtable_1',\n  'scan.startup.mode' = 'group-offsets'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT *\nFROM `addevent_1`;",
    "CREATE VIEW `table$2`\nAS\nSELECT *\nFROM `addevent_1`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `pgtable_1`\n(SELECT *\n FROM `table$1`)\n;\nINSERT INTO `pgtable_1_1`\n (SELECT *\n  FROM `table$2`)\n ;\n END;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "kafka"
  ],
  "formats" : [
    "flexible-json"
  ],
  "compliedPlan" : "{\n  \"flinkVersion\" : \"1.19\",\n  \"nodes\" : [ {\n    \"id\" : 85,\n    \"type\" : \"stream-exec-table-source-scan_1\",\n    \"scanTableSource\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`addevent_1`\"\n      }\n    },\n    \"outputType\" : \"ROW<`timestamp` TIMESTAMP(3) NOT NULL, `userId` DECIMAL(10, 5) NOT NULL, `eventType` VARCHAR(2147483647) NOT NULL, `_uuid` VARCHAR(2147483647) NOT NULL, `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>\",\n    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, addevent_1]], fields=[timestamp, userId, eventType, _uuid, event_time])\",\n    \"inputProperties\" : [ ]\n  }, {\n    \"id\" : 86,\n    \"type\" : \"stream-exec-watermark-assigner_1\",\n    \"watermarkExpr\" : {\n      \"kind\" : \"CALL\",\n      \"syntax\" : \"BINARY\",\n      \"internalName\" : \"$-$1\",\n      \"operands\" : [ {\n        \"kind\" : \"INPUT_REF\",\n        \"inputIndex\" : 4,\n        \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n      }, {\n        \"kind\" : \"LITERAL\",\n        \"value\" : \"0\",\n        \"type\" : \"INTERVAL SECOND(6) NOT NULL\"\n      } ],\n      \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n    },\n    \"rowtimeFieldIndex\" : 4,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"userId\",\n        \"fieldType\" : \"DECIMAL(10, 5) NOT NULL\"\n      }, {\n        \"name\" : \"eventType\",\n        \"fieldType\" : \"VARCHAR(2147483647) NOT NULL\"\n      }, {\n        \"name\" : \"_uuid\",\n        \"fieldType\" : \"VARCHAR(2147483647) NOT NULL\"\n      }, {\n        \"name\" : \"event_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"WatermarkAssigner(rowtime=[event_time], watermark=[(event_time - 0:INTERVAL SECOND)])\"\n  }, {\n    \"id\" : 87,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`pgtable_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"userId\",\n        \"fieldType\" : \"DECIMAL(10, 5) NOT NULL\"\n      }, {\n        \"name\" : \"eventType\",\n        \"fieldType\" : \"VARCHAR(2147483647) NOT NULL\"\n      }, {\n        \"name\" : \"_uuid\",\n        \"fieldType\" : \"VARCHAR(2147483647) NOT NULL\"\n      }, {\n        \"name\" : \"event_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.pgtable_1], fields=[timestamp, userId, eventType, _uuid, event_time])\"\n  }, {\n    \"id\" : 88,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`pgtable_1_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"userId\",\n        \"fieldType\" : \"DECIMAL(10, 5) NOT NULL\"\n      }, {\n        \"name\" : \"eventType\",\n        \"fieldType\" : \"VARCHAR(2147483647) NOT NULL\"\n      }, {\n        \"name\" : \"_uuid\",\n        \"fieldType\" : \"VARCHAR(2147483647) NOT NULL\"\n      }, {\n        \"name\" : \"event_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.pgtable_1_1], fields=[timestamp, userId, eventType, _uuid, event_time])\"\n  } ],\n  \"edges\" : [ {\n    \"source\" : 85,\n    \"target\" : 86,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 86,\n    \"target\" : 87,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 86,\n    \"target\" : 88,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  } ]\n}"
}
>>>kafka.json
{
  "topics" : [
    {
      "name" : "create-topic-addevent",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    },
    {
      "name" : "pgtable_1",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    }
  ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "pgtable_1",
      "columns" : [
        "\"timestamp\" TIMESTAMP WITHOUT TIME ZONE NOT NULL",
        "\"userId\" NUMERIC NOT NULL",
        "\"eventType\" TEXT NOT NULL",
        "\"_uuid\" TEXT NOT NULL",
        "\"event_time\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"_uuid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS pgtable_1 (\"timestamp\" TIMESTAMP WITHOUT TIME ZONE NOT NULL,\"userId\" NUMERIC NOT NULL,\"eventType\" TEXT NOT NULL,\"_uuid\" TEXT NOT NULL,\"event_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"_uuid\"));"
    }
  ],
  "views" : [
    {
      "name" : "PgTable",
      "sql" : "CREATE OR REPLACE VIEW \"PgTable\"(\"timestamp\", \"userId\", \"eventType\", \"_uuid\", \"event_time\") AS SELECT *\nFROM \"pgtable_1\"\nORDER BY \"event_time\" DESC NULLS LAST, \"_uuid\";"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "PgTable",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"pgtable_1\"\nORDER BY \"event_time\" DESC NULLS LAST, \"_uuid\"",
              "parameters" : [ ]
            }
          }
        ]
      }
    ],
    "mutations" : [
      {
        "type" : "kafka",
        "fieldName" : "AddEvent",
        "topic" : "create-topic-addevent",
        "sinkConfig" : { }
      }
    ],
    "subscriptions" : [
      {
        "fieldName" : "PgTable",
        "topic" : "pgtable_1",
        "sinkConfig" : { },
        "filters" : {
          "eventType" : "eventType"
        }
      }
    ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\ntype PgTable {\n    timestamp: DateTime!\n    userId: Float!\n    eventType: String!\n}\n\ntype Query {\n    PgTable(limit: Int = 10, offset: Int = 0): [PgTable!]\n}\n\ntype Mutation {\n    AddEvent(event: EventInput!): AddedEvent\n}\n\ninput EventInput {\n    timestamp: DateTime!\n    userId : Float!\n    eventType: String!\n}\n\ntype AddedEvent {\n    timestamp: DateTime!\n    userId: Float!\n    eventType: String!\n}\n\ntype Subscription {\n    PgTable(eventType: String): PgTable\n}\n"
    }
  }
}
