>>>pipeline_explain.txt
=== Orders
ID:     orders_2
Type:   stream
Stage:  flink
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - productid: BIGINT NOT NULL
 - quantity: BIGINT NOT NULL
 - unit_price: DOUBLE NOT NULL
 - discount: DOUBLE
Plan:
LogicalTableScan(table=[[orders_1]], hints=[[[WatermarkHint inheritPath:[] options:[2]]]]) hints[WatermarkHint options:[2]]

=== ProductRevenue
ID:     productrevenue_1
Type:   stream
Stage:  flink
Inputs: orders_2
Primary Key: productid, week
Timestamp  : week
Schema:
 - productid: BIGINT NOT NULL
 - week: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - revenue: DOUBLE NOT NULL
Plan:
LogicalProject(productid=[$0], week=[$1], revenue=[$2])
  LogicalAggregate(group=[{0, 1}], agg#0=[SUM($2)]) hints[TumbleAggregationHint options:[1, FUNCTION, 4, 604800000, 0]]
    LogicalProject(productid=[$3], week=[endOfWeek($2)], $f2=[-(*($4, $5), COALESCE($6, 0.0:DECIMAL(2, 1)))], id=[$0], time=[$2])
      LogicalTableScan(table=[[orders_2]])

=== print.Revenue
ID:     productrevenue_1_1
Type:   export
Stage:  flink
Inputs: productrevenue_1

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofweek` AS 'com.datasqrl.time.EndOfWeek' LANGUAGE JAVA;",
    "CREATE TEMPORARY TABLE `orders_1` (\n  `id` BIGINT NOT NULL,\n  `customerid` BIGINT NOT NULL,\n  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `productid` BIGINT NOT NULL,\n  `quantity` BIGINT NOT NULL,\n  `unit_price` DOUBLE NOT NULL,\n  `discount` DOUBLE,\n  PRIMARY KEY (`id`, `time`) NOT ENFORCED,\n  WATERMARK FOR `time` AS `time` - INTERVAL '0.001' SECOND\n) WITH (\n  'format' = 'flexible-json',\n  'path' = '/data/orders.jsonl',\n  'connector' = 'filesystem'\n);",
    "CREATE TEMPORARY TABLE `productrevenue_1_1` (\n  `productid` BIGINT NOT NULL,\n  `week` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `revenue` DOUBLE NOT NULL\n) WITH (\n  'connector' = 'print',\n  'print-identifier' = 'Revenue'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT `productid`, ENDOFWEEK(`time`) AS `week`, `quantity` * `unit_price` - COALESCE(`discount`, 0.0) AS `$f2`, `id`, `time`\nFROM `orders_1`;",
    "CREATE VIEW `table$2`\nAS\nSELECT `productid`, `window_time` AS `week`, SUM(`$f2`) AS `revenue`\nFROM TABLE(TUMBLE(TABLE `table$1`, DESCRIPTOR(`time`), INTERVAL '604800' SECOND(9), INTERVAL '0' SECOND(1))) AS `t1`\nGROUP BY `productid`, `window_start`, `window_end`, `window_time`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `productrevenue_1_1`\n(SELECT *\n FROM `table$2`)\n;\nEND;"
  ],
  "connectors" : [
    "print",
    "filesystem"
  ],
  "formats" : [
    "flexible-json"
  ]
}
