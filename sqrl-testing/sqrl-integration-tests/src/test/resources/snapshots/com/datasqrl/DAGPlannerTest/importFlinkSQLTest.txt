>>>pipeline_explain.txt
=== Category
ID:     default_catalog.default_database.Category
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Category__base
Primary Key: -
Timestamp  : updateTime
Schema:
 - categoryid: INTEGER NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - description: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - updateTime: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[updateTime], watermark=[-($3, 1:INTERVAL SECOND)])
  LogicalProject(categoryid=[$0], name=[$1], description=[$2], updateTime=[NOW()])
    LogicalTableScan(table=[[default_catalog, default_database, Category]])
SQL: CREATE VIEW `Category__view`
AS
SELECT `Category`.`categoryid`, `Category`.`name`, `Category`.`description`, `Category`.`updateTime`
FROM `default_catalog`.`default_database`.`Category` AS `Category`
=== CategoryDistinct
ID:     default_catalog.default_database.CategoryDistinct
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Category
Annotations:
 - mostRecentDistinct: true
Primary Key: categoryid
Timestamp  : updateTime
Schema:
 - categoryid: INTEGER NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - description: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - updateTime: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(categoryid=[$0], name=[$1], description=[$2], updateTime=[$3])
  LogicalFilter(condition=[=($4, 1)])
    LogicalProject(categoryid=[$0], name=[$1], description=[$2], updateTime=[$3], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, Category]])
SQL: CREATE VIEW `CategoryDistinct`
AS
SELECT `categoryid`, `name`, `description`, `updateTime`
FROM (SELECT `categoryid`, `name`, `description`, `updateTime`, ROW_NUMBER() OVER (PARTITION BY `categoryid` ORDER BY `updateTime` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`Category`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
>>>flink-sql-no-functions.sql
CREATE TABLE `Category` (
  `categoryid` INTEGER NOT NULL,
  `name` STRING NOT NULL,
  `description` STRING,
  `updateTime` AS `NOW`(),
  WATERMARK FOR `updateTime` AS `updateTime` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
);
CREATE VIEW `CategoryDistinct`
AS
SELECT `categoryid`, `name`, `description`, `updateTime`
FROM (SELECT `categoryid`, `name`, `description`, `updateTime`, ROW_NUMBER() OVER (PARTITION BY `categoryid` ORDER BY `updateTime` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`Category`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE TABLE `Category_1` (
  `categoryid` INTEGER NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `updateTime` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'Category_1',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `CategoryDistinct_2` (
  `categoryid` INTEGER NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `updateTime` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`categoryid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'CategoryDistinct_2',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`Category_1`
(SELECT `categoryid`, `name`, `description`, `updateTime`, `hash_columns`(`categoryid`, `name`, `description`, `updateTime`) AS `__pk_hash`
 FROM `default_catalog`.`default_database`.`Category`)
;
INSERT INTO `default_catalog`.`default_database`.`CategoryDistinct_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`Category`)
 ;
 END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "Category_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Category_1\" (\"categoryid\" INTEGER NOT NULL, \"name\" TEXT NOT NULL, \"description\" TEXT , \"updateTime\" TIMESTAMP WITH TIME ZONE NOT NULL, \"__pk_hash\" TEXT  , PRIMARY KEY (\"__pk_hash\"))",
      "fields" : [
        {
          "name" : "categoryid",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "description",
          "type" : "TEXT",
          "nullable" : true
        },
        {
          "name" : "updateTime",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "__pk_hash",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "CategoryDistinct_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"CategoryDistinct_2\" (\"categoryid\" INTEGER NOT NULL, \"name\" TEXT NOT NULL, \"description\" TEXT , \"updateTime\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"categoryid\"))",
      "fields" : [
        {
          "name" : "categoryid",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "description",
          "type" : "TEXT",
          "nullable" : true
        },
        {
          "name" : "updateTime",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Category",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Category\"(\"categoryid\", \"name\", \"description\", \"updateTime\") AS SELECT \"categoryid\", \"name\", \"description\", \"updateTime\"\nFROM \"Category_1\"",
      "fields" : [
        {
          "name" : "categoryid",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "description",
          "type" : "TEXT",
          "nullable" : true
        },
        {
          "name" : "updateTime",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CategoryDistinct",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"CategoryDistinct\"(\"categoryid\", \"name\", \"description\", \"updateTime\") AS SELECT *\nFROM \"CategoryDistinct_2\"",
      "fields" : [
        {
          "name" : "categoryid",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "description",
          "type" : "TEXT",
          "nullable" : true
        },
        {
          "name" : "updateTime",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    }
  ]
}
>>>vertx-config.json
{
  "servletConfig": {
    "graphiQLEndpoint": "/graphiql*",
    "graphQLEndpoint": "/graphql",
    "usePgPool": true
  },
  "graphQLHandlerOptions": {
    "requestBatchingEnabled": false,
    "requestMultipartEnabled": false
  },
  "graphiQLHandlerOptions": {
    "enabled": true,
    "httpEnabled": true,
    "graphQLUri": "/graphql",
    "graphQLWSEnabled": true,
    "graphQLWSUri": "/graphql",
    "headers": null,
    "wsConnectionParams": null,
    "query": null,
    "variables": null
  },
  "httpServerOptions": {
    "sendBufferSize": -1,
    "receiveBufferSize": -1,
    "trafficClass": -1,
    "reuseAddress": true,
    "logActivity": false,
    "activityLogDataFormat": "HEX_DUMP",
    "reusePort": false,
    "tcpNoDelay": true,
    "tcpKeepAlive": false,
    "soLinger": -1,
    "idleTimeout": 0,
    "readIdleTimeout": 0,
    "writeIdleTimeout": 0,
    "idleTimeoutUnit": "SECONDS",
    "ssl": false,
    "sslEngineOptions": null,
    "sslOptions": {
      "sslHandshakeTimeout": 10,
      "sslHandshakeTimeoutUnit": "SECONDS",
      "keyCertOptions": null,
      "trustOptions": null,
      "enabledCipherSuites": [],
      "crlPaths": [],
      "crlValues": [],
      "useAlpn": false,
      "enabledSecureTransportProtocols": [
        "TLSv1",
        "TLSv1.1",
        "TLSv1.2"
      ],
      "applicationLayerProtocols": null,
      "clientAuth": "NONE",
      "sni": false
    },
    "tcpFastOpen": false,
    "tcpCork": false,
    "tcpQuickAck": false,
    "tcpUserTimeout": 0,
    "enabledCipherSuites": [],
    "crlPaths": [],
    "crlValues": [],
    "port": 8888,
    "host": "0.0.0.0",
    "acceptBacklog": -1,
    "useProxyProtocol": false,
    "proxyProtocolTimeout": 10,
    "proxyProtocolTimeoutUnit": "SECONDS",
    "registerWriteHandler": false,
    "trafficShapingOptions": null,
    "compressionSupported": false,
    "compressionLevel": 6,
    "compressionContentSizeThreshold": 0,
    "compressors": null,
    "maxWebSocketFrameSize": 65536,
    "maxWebSocketMessageSize": 262144,
    "webSocketSubProtocols": [
      "graphql-transport-ws",
      "graphql-ws"
    ],
    "handle100ContinueAutomatically": false,
    "maxChunkSize": 8192,
    "maxInitialLineLength": 4096,
    "maxHeaderSize": 8192,
    "maxFormAttributeSize": 8192,
    "maxFormFields": 256,
    "maxFormBufferedBytes": 1024,
    "initialSettings": {
      "headerTableSize": 4096,
      "pushEnabled": true,
      "maxConcurrentStreams": 100,
      "initialWindowSize": 65535,
      "maxFrameSize": 16384,
      "maxHeaderListSize": 8192,
      "extraSettings": null
    },
    "alpnVersions": [
      "HTTP_2",
      "HTTP_1_1"
    ],
    "http2ClearTextEnabled": true,
    "http2ConnectionWindowSize": -1,
    "decompressionSupported": false,
    "acceptUnmaskedFrames": false,
    "decoderInitialBufferSize": 128,
    "perFrameWebSocketCompressionSupported": true,
    "perMessageWebSocketCompressionSupported": true,
    "webSocketCompressionLevel": 6,
    "webSocketAllowServerNoContext": false,
    "webSocketPreferredClientNoContext": false,
    "webSocketClosingTimeout": 10,
    "tracingPolicy": "ALWAYS",
    "registerWebSocketWriteHandlers": false,
    "http2RstFloodMaxRstFramePerWindow": 200,
    "http2RstFloodWindowDuration": 30,
    "http2RstFloodWindowDurationTimeUnit": "SECONDS",
    "strictThreadMode": false,
    "useAlpn": false,
    "keyCertOptions": null,
    "trustOptions": null,
    "clientAuth": "NONE",
    "enabledSecureTransportProtocols": [
      "TLSv1",
      "TLSv1.1",
      "TLSv1.2"
    ],
    "sslHandshakeTimeout": 10,
    "sslHandshakeTimeoutUnit": "SECONDS",
    "sni": false,
    "fileRegionEnabled": true
  },
  "pgConnectOptions": {
    "host": "${PGHOST}",
    "port": 5432,
    "user": "${PGUSER}",
    "password": "${PGPASSWORD}",
    "database": "${PGDATABASE}",
    "cachePreparedStatements": false,
    "preparedStatementCacheMaxSize": 256,
    "preparedStatementCacheSqlFilter": { },
    "properties": {
      "DateStyle": "ISO",
      "client_encoding": "utf8",
      "application_name": "vertx-pg-client",
      "extra_float_digits": "2"
    },
    "tracingPolicy": null,
    "reconnectAttempts": 0,
    "reconnectInterval": 1000,
    "metricsName": "",
    "sslOptions": null,
    "pipeliningLimit": 256,
    "sslMode": "DISABLE",
    "useLayer7Proxy": false,
    "socketAddress": {
      "inetSocket": true,
      "domainSocket": false
    },
    "usingDomainSocket": false
  },
  "poolOptions": {
    "maxSize": 4,
    "maxWaitQueueSize": -1,
    "idleTimeout": 0,
    "idleTimeoutUnit": "SECONDS",
    "maxLifetime": 0,
    "maxLifetimeUnit": "SECONDS",
    "poolCleanerPeriod": 1000,
    "connectionTimeout": 30,
    "connectionTimeoutUnit": "SECONDS",
    "shared": false,
    "name": "__vertx.DEFAULT",
    "eventLoopSize": 0
  },
  "corsHandlerOptions": {
    "allowedOrigin": "*",
    "allowedOrigins": null,
    "allowCredentials": false,
    "maxAgeSeconds": -1,
    "allowPrivateNetwork": false,
    "allowedMethods": [
      "POST",
      "GET"
    ],
    "allowedHeaders": [],
    "exposedHeaders": []
  },
  "jwtAuth": null
}
>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Category",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT \"categoryid\", \"name\", \"description\", \"updateTime\"\nFROM \"Category_1\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CategoryDistinct",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"CategoryDistinct_2\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "schema" : "type Category {\n  categoryid: Int!\n  name: String!\n  description: String\n  updateTime: DateTime!\n}\n\ntype CategoryDistinct {\n  categoryid: Int!\n  name: String!\n  description: String\n  updateTime: DateTime!\n}\n\n\"A slightly refined version of RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype Query {\n  Category(limit: Int = 10, offset: Int = 0): [Category!]\n  CategoryDistinct(limit: Int = 10, offset: Int = 0): [CategoryDistinct!]\n}\n"
    }
  }
}
