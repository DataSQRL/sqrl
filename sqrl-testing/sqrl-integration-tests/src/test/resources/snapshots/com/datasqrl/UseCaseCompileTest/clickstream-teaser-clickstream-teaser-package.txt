>>>pipeline_explain.txt
=== Click
ID:     click_2
Type:   stream
Stage:  flink
Primary Key: url, userid, timestamp
Timestamp  : timestamp
Schema:
 - url: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - userid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalTableScan(table=[[click_1]])

=== Recommendation
ID:     recommendation_1
Type:   state
Stage:  flink
Inputs: visitafter_1
Primary Key: url, rec
Timestamp  : __timestamp
Schema:
 - url: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - rec: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - frequency: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - sort: #0: url VARCHAR(2147483647) ASC, #2: frequency BIGINT DESC
Plan:
LogicalProject(url=[$0], rec=[$1], frequency=[$2], __timestamp=[$3])
  LogicalAggregate(group=[{0, 1}], frequency=[COUNT()], __timestamp=[MAX($2)])
    LogicalTableScan(table=[[visitafter_1]])

=== Trending
ID:     trending_1
Type:   state
Stage:  flink
Inputs: click_2
Primary Key: url
Timestamp  : _timestamp
Schema:
 - url: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - total: BIGINT NOT NULL
 - _timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=url limit=1 sort=#2: _timestamp TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
 - sort: #1: total BIGINT DESC
Plan:
LogicalProject(url=[$0], total=[$2], _timestamp=[$1])
  LogicalAggregate(group=[{0, 1}], total=[COUNT()]) hints[SlidingAggregationHint options:[1, 86400000, 1728000]]
    LogicalTableScan(table=[[click_2]])

=== VisitAfter
ID:     visitafter_1
Type:   stream
Stage:  flink
Inputs: click_2
Primary Key: beforeURL, _userid, _timestamp0, afterURL, timestamp
Timestamp  : timestamp
Schema:
 - beforeURL: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - afterURL: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _userid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - _timestamp0: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(beforeURL=[$0], afterURL=[$3], timestamp=[$4], _userid=[$2], _timestamp0=[$1])
  LogicalJoin(condition=[AND(=($2, $5), <($1, $4), >=($1, -($4, *(60000:INTERVAL MINUTE, 10))))], joinType=[inner]) hints[IntervalJoin]
    LogicalTableScan(table=[[click_2]])
    LogicalTableScan(table=[[click_2]])

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY TABLE `click_1` (\n  `url` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `userid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  PRIMARY KEY (`url`, `userid`, `timestamp`) NOT ENFORCED,\n  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '1.0' SECOND\n) WITH (\n  'format' = 'flexible-json',\n  'path' = '/data/click.jsonl',\n  'connector' = 'filesystem'\n);",
    "CREATE TEMPORARY TABLE `recommendation_1` (\n  `url` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `rec` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `frequency` BIGINT NOT NULL,\n  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`url`, `rec`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'recommendation_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `trending_1` (\n  `url` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `total` BIGINT NOT NULL,\n  `_timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`url`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'trending_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT `click_1`.`url`, `click_10`.`url` AS `rec`, COUNT(*) AS `frequency`, MAX(`click_10`.`timestamp`) AS `__timestamp`\nFROM `click_1`\n INNER JOIN `click_1` AS `click_10` ON `click_1`.`userid` = `click_10`.`userid` AND `click_1`.`timestamp` < `click_10`.`timestamp` AND `click_1`.`timestamp` >= `click_10`.`timestamp` - INTERVAL '1' MINUTE * 10\nGROUP BY `click_1`.`url`, `click_10`.`url`;",
    "CREATE VIEW `table$2`\nAS\nSELECT *\nFROM `click_1`;",
    "CREATE VIEW `table$3`\nAS\nSELECT `url`, COUNT(*) AS `total`, `window_time` AS `_timestamp`\nFROM TABLE(HOP(TABLE `table$2`, DESCRIPTOR(`timestamp`), INTERVAL '1728' SECOND(7), INTERVAL '86400' SECOND(8))) AS `t`\nGROUP BY `url`, `window_start`, `window_end`, `window_time`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `recommendation_1`\n(SELECT *\n FROM `table$1`)\n;\nINSERT INTO `trending_1`\n (SELECT *\n  FROM `table$3`)\n ;\n END;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "filesystem"
  ],
  "formats" : [
    "flexible-json"
  ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "recommendation_1",
      "columns" : [
        "\"url\" TEXT NOT NULL",
        "\"rec\" TEXT NOT NULL",
        "\"frequency\" BIGINT NOT NULL",
        "\"__timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"url\"",
        "\"rec\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS recommendation_1 (\"url\" TEXT NOT NULL,\"rec\" TEXT NOT NULL,\"frequency\" BIGINT NOT NULL,\"__timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"url\",\"rec\"));"
    },
    {
      "name" : "trending_1",
      "columns" : [
        "\"url\" TEXT NOT NULL",
        "\"total\" BIGINT NOT NULL",
        "\"_timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"url\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS trending_1 (\"url\" TEXT NOT NULL,\"total\" BIGINT NOT NULL,\"_timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"url\"));"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Recommendation",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "url"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"recommendation_1\"\nWHERE \"url\" = $1\nORDER BY \"url\", \"frequency\" DESC, \"rec\"",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "url"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Trending",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"trending_1\"\nORDER BY \"total\" DESC, \"url\"",
              "parameters" : [ ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "type Query {\n  Recommendation(url: String!): [Recommendation!]\n  Trending(limit: Int!): [Trending!]\n}\n\ntype Recommendation {\n  url: String!\n  rec: String!\n  frequency: Int!\n}\n\ntype Trending {\n  url: String!\n  total: Int!\n}\n"
    }
  }
}
