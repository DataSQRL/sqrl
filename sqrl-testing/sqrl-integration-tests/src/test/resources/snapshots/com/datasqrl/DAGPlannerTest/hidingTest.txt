>>>pipeline_explain.txt
=== AnotherCustomer
ID:     default_catalog.default_database.AnotherCustomer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database._customer
Annotations:
 - stream-root: _customer
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[>($0, 0)])
    LogicalTableScan(table=[[default_catalog, default_database, _customer]])
SQL: CREATE VIEW AnotherCustomer AS  SELECT * FROM _customer WHERE customerid > 0;

=== Customer
ID:     default_catalog.default_database.Customer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer__base
Annotations:
 - stream-root: Customer
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
  LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[COALESCE(TO_TIMESTAMP_LTZ($3, 0), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `Customer__view`
AS
SELECT `Customer`.`customerid`, `Customer`.`email`, `Customer`.`name`, `Customer`.`lastUpdated`, `Customer`.`timestamp`
FROM `default_catalog`.`default_database`.`Customer` AS `Customer`
=== FinalCustomer
ID:     default_catalog.default_database.FinalCustomer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database._SomeCustomer
Annotations:
 - stream-root: Customer
Primary Key: customerid, lastUpdated
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - lastUpdated: BIGINT NOT NULL
Plan:
LogicalProject(customerid=[$0], lastUpdated=[$3])
  LogicalTableScan(table=[[default_catalog, default_database, _SomeCustomer]])
SQL: CREATE VIEW FinalCustomer AS  SELECT customerid, lastUpdated FROM _SomeCustomer;

=== _SomeCustomer
ID:     default_catalog.default_database._SomeCustomer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[>($0, 1)])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW _SomeCustomer AS  SELECT * FROM Customer WHERE customerid > 1;

=== _customer
ID:     default_catalog.default_database._customer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database._customer__base
Annotations:
 - stream-root: _customer
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
  LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[COALESCE(TO_TIMESTAMP_LTZ($3, 0), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
    LogicalTableScan(table=[[default_catalog, default_database, _customer]])
SQL: CREATE VIEW `_customer__view`
AS
SELECT `_customer`.`customerid`, `_customer`.`email`, `_customer`.`name`, `_customer`.`lastUpdated`, `_customer`.`timestamp`
FROM `default_catalog`.`default_database`.`_customer` AS `_customer`
>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Customer__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Customer` (
  `timestamp` AS COALESCE(`TO_TIMESTAMP_LTZ`(`lastUpdated`, 0), TIMESTAMP '1970-01-01 00:00:00.000'),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Customer__schema`;
CREATE TEMPORARY TABLE `_HiddenCustomer__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `_HiddenCustomer` (
  `timestamp` AS COALESCE(`TO_TIMESTAMP_LTZ`(`lastUpdated`, 0), TIMESTAMP '1970-01-01 00:00:00.000'),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `_HiddenCustomer__schema`;
CREATE TEMPORARY TABLE `_customer__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `_customer` (
  `timestamp` AS COALESCE(`TO_TIMESTAMP_LTZ`(`lastUpdated`, 0), TIMESTAMP '1970-01-01 00:00:00.000'),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `_customer__schema`;
CREATE TEMPORARY TABLE `_orders__schema` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `_orders` (
  PRIMARY KEY (`id`, `time`) NOT ENFORCED,
  WATERMARK FOR `time` AS `time` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `_orders__schema`;
CREATE TEMPORARY TABLE `_product__schema` (
  `productid` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `_product` (
  PRIMARY KEY (`productid`, `name`, `description`, `category`) NOT ENFORCED,
  WATERMARK FOR `_ingest_time` AS `_ingest_time` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `_product__schema`;
CREATE VIEW `AnotherCustomer`
AS
SELECT *
FROM `_customer`
WHERE `customerid` > 0;
CREATE VIEW `_SomeCustomer`
AS
SELECT *
FROM `Customer`
WHERE `customerid` > 1;
CREATE VIEW `FinalCustomer`
AS
SELECT `customerid`, `lastUpdated`
FROM `_SomeCustomer`;
CREATE TABLE `AnotherCustomer_1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'AnotherCustomer_1',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `Customer_2` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'Customer_2',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `FinalCustomer_3` (
  `customerid` BIGINT NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'FinalCustomer_3',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`AnotherCustomer_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`AnotherCustomer`)
;
INSERT INTO `default_catalog`.`default_database`.`Customer_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`Customer`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`FinalCustomer_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`FinalCustomer`)
  ;
  END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "AnotherCustomer_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"AnotherCustomer_1\" (\"customerid\" BIGINT NOT NULL, \"email\" TEXT NOT NULL, \"name\" TEXT NOT NULL, \"lastUpdated\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"customerid\",\"lastUpdated\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Customer_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Customer_2\" (\"customerid\" BIGINT NOT NULL, \"email\" TEXT NOT NULL, \"name\" TEXT NOT NULL, \"lastUpdated\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"customerid\",\"lastUpdated\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "FinalCustomer_3",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"FinalCustomer_3\" (\"customerid\" BIGINT NOT NULL, \"lastUpdated\" BIGINT NOT NULL , PRIMARY KEY (\"customerid\",\"lastUpdated\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "AnotherCustomer",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"AnotherCustomer\"(\"customerid\", \"email\", \"name\", \"lastUpdated\", \"timestamp\") AS SELECT *\nFROM \"AnotherCustomer_1\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Customer",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Customer\"(\"customerid\", \"email\", \"name\", \"lastUpdated\", \"timestamp\") AS SELECT *\nFROM \"Customer_2\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "FinalCustomer",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"FinalCustomer\"(\"customerid\", \"lastUpdated\") AS SELECT *\nFROM \"FinalCustomer_3\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    }
  ]
}
>>>vertx-config.json
{
  "servletConfig": {
    "graphiQLEndpoint": "/graphiql*",
    "graphQLEndpoint": "/graphql",
    "usePgPool": true
  },
  "graphQLHandlerOptions": {
    "requestBatchingEnabled": false,
    "requestMultipartEnabled": false
  },
  "graphiQLHandlerOptions": {
    "enabled": true,
    "httpEnabled": true,
    "graphQLUri": "/graphql",
    "graphQLWSEnabled": true,
    "graphQLWSUri": "/graphql",
    "headers": null,
    "wsConnectionParams": null,
    "query": null,
    "variables": null
  },
  "httpServerOptions": {
    "sendBufferSize": -1,
    "receiveBufferSize": -1,
    "trafficClass": -1,
    "reuseAddress": true,
    "logActivity": false,
    "activityLogDataFormat": "HEX_DUMP",
    "reusePort": false,
    "tcpNoDelay": true,
    "tcpKeepAlive": false,
    "soLinger": -1,
    "idleTimeout": 0,
    "readIdleTimeout": 0,
    "writeIdleTimeout": 0,
    "idleTimeoutUnit": "SECONDS",
    "ssl": false,
    "sslEngineOptions": null,
    "sslOptions": {
      "sslHandshakeTimeout": 10,
      "sslHandshakeTimeoutUnit": "SECONDS",
      "keyCertOptions": null,
      "trustOptions": null,
      "enabledCipherSuites": [],
      "crlPaths": [],
      "crlValues": [],
      "useAlpn": false,
      "enabledSecureTransportProtocols": [
        "TLSv1",
        "TLSv1.1",
        "TLSv1.2"
      ],
      "applicationLayerProtocols": null,
      "clientAuth": "NONE",
      "sni": false
    },
    "tcpFastOpen": false,
    "tcpCork": false,
    "tcpQuickAck": false,
    "tcpUserTimeout": 0,
    "enabledCipherSuites": [],
    "crlPaths": [],
    "crlValues": [],
    "port": 8888,
    "host": "0.0.0.0",
    "acceptBacklog": -1,
    "useProxyProtocol": false,
    "proxyProtocolTimeout": 10,
    "proxyProtocolTimeoutUnit": "SECONDS",
    "registerWriteHandler": false,
    "trafficShapingOptions": null,
    "compressionSupported": false,
    "compressionLevel": 6,
    "compressionContentSizeThreshold": 0,
    "compressors": null,
    "maxWebSocketFrameSize": 65536,
    "maxWebSocketMessageSize": 262144,
    "webSocketSubProtocols": [
      "graphql-transport-ws",
      "graphql-ws"
    ],
    "handle100ContinueAutomatically": false,
    "maxChunkSize": 8192,
    "maxInitialLineLength": 4096,
    "maxHeaderSize": 8192,
    "maxFormAttributeSize": 8192,
    "maxFormFields": 256,
    "maxFormBufferedBytes": 1024,
    "initialSettings": {
      "headerTableSize": 4096,
      "pushEnabled": true,
      "maxConcurrentStreams": 100,
      "initialWindowSize": 65535,
      "maxFrameSize": 16384,
      "maxHeaderListSize": 8192,
      "extraSettings": null
    },
    "alpnVersions": [
      "HTTP_2",
      "HTTP_1_1"
    ],
    "http2ClearTextEnabled": true,
    "http2ConnectionWindowSize": -1,
    "decompressionSupported": false,
    "acceptUnmaskedFrames": false,
    "decoderInitialBufferSize": 128,
    "perFrameWebSocketCompressionSupported": true,
    "perMessageWebSocketCompressionSupported": true,
    "webSocketCompressionLevel": 6,
    "webSocketAllowServerNoContext": false,
    "webSocketPreferredClientNoContext": false,
    "webSocketClosingTimeout": 10,
    "tracingPolicy": "ALWAYS",
    "registerWebSocketWriteHandlers": false,
    "http2RstFloodMaxRstFramePerWindow": 200,
    "http2RstFloodWindowDuration": 30,
    "http2RstFloodWindowDurationTimeUnit": "SECONDS",
    "strictThreadMode": false,
    "useAlpn": false,
    "keyCertOptions": null,
    "trustOptions": null,
    "clientAuth": "NONE",
    "enabledSecureTransportProtocols": [
      "TLSv1",
      "TLSv1.1",
      "TLSv1.2"
    ],
    "sslHandshakeTimeout": 10,
    "sslHandshakeTimeoutUnit": "SECONDS",
    "sni": false,
    "fileRegionEnabled": true
  },
  "pgConnectOptions": {
    "host": "${PGHOST}",
    "port": 5432,
    "user": "${PGUSER}",
    "password": "${PGPASSWORD}",
    "database": "${PGDATABASE}",
    "cachePreparedStatements": false,
    "preparedStatementCacheMaxSize": 256,
    "preparedStatementCacheSqlFilter": { },
    "properties": {
      "DateStyle": "ISO",
      "client_encoding": "utf8",
      "application_name": "vertx-pg-client",
      "extra_float_digits": "2"
    },
    "tracingPolicy": null,
    "reconnectAttempts": 0,
    "reconnectInterval": 1000,
    "metricsName": "",
    "sslOptions": null,
    "pipeliningLimit": 256,
    "sslMode": "DISABLE",
    "useLayer7Proxy": false,
    "socketAddress": {
      "inetSocket": true,
      "domainSocket": false
    },
    "usingDomainSocket": false
  },
  "poolOptions": {
    "maxSize": 4,
    "maxWaitQueueSize": -1,
    "idleTimeout": 0,
    "idleTimeoutUnit": "SECONDS",
    "maxLifetime": 0,
    "maxLifetimeUnit": "SECONDS",
    "poolCleanerPeriod": 1000,
    "connectionTimeout": 30,
    "connectionTimeoutUnit": "SECONDS",
    "shared": false,
    "name": "__vertx.DEFAULT",
    "eventLoopSize": 0
  },
  "corsHandlerOptions": {
    "allowedOrigin": "*",
    "allowedOrigins": null,
    "allowCredentials": false,
    "maxAgeSeconds": -1,
    "allowPrivateNetwork": false,
    "allowedMethods": [
      "POST",
      "GET"
    ],
    "allowedHeaders": [],
    "exposedHeaders": []
  },
  "jwtAuth": null
}
>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "AnotherCustomer",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"AnotherCustomer_1\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Customer",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Customer_2\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "FinalCustomer",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"FinalCustomer_3\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "schema" : "type AnotherCustomer {\n  customerid: GraphQLBigInteger!\n  email: String!\n  name: String!\n  lastUpdated: GraphQLBigInteger!\n  timestamp: DateTime!\n}\n\ntype Customer {\n  customerid: GraphQLBigInteger!\n  email: String!\n  name: String!\n  lastUpdated: GraphQLBigInteger!\n  timestamp: DateTime!\n}\n\n\"A slightly refined version of RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\ntype FinalCustomer {\n  customerid: GraphQLBigInteger!\n  lastUpdated: GraphQLBigInteger!\n}\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype Query {\n  AnotherCustomer(limit: Int = 10, offset: Int = 0): [AnotherCustomer!]\n  Customer(limit: Int = 10, offset: Int = 0): [Customer!]\n  FinalCustomer(limit: Int = 10, offset: Int = 0): [FinalCustomer!]\n}\n"
    }
  }
}
