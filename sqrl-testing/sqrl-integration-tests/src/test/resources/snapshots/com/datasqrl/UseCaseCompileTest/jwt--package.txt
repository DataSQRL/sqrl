>>>pipeline_explain.txt
=== MyTable
ID:     default_catalog.default_database.MyTable
Type:   state
Stage:  flink
Annotations:
 - sort: [0 ASC-nulls-first]
Primary Key: val
Timestamp  : -
Schema:
 - val: INTEGER NOT NULL
Plan:
LogicalProject(val=[$0])
  LogicalValues(tuples=[[{ 1 }, { 2 }, { 3 }, { 4 }, { 5 }, { 6 }, { 7 }, { 8 }, { 9 }, { 10 }]])
SQL: CREATE VIEW MyTable AS  SELECT val
           FROM (VALUES ((1)), ((2)), ((3)), ((4)), ((5)),
            ((6)), ((7)), ((8)), ((9)), ((10))) AS t(val) ORDER BY val;

>>>flink-sql-no-functions.sql
CREATE VIEW `MyTable`
AS
SELECT `val`
FROM (VALUES ROW(1),
   ROW(2),
   ROW(3),
   ROW(4),
   ROW(5),
   ROW(6),
   ROW(7),
   ROW(8),
   ROW(9),
   ROW(10)) AS `t` (`val`);
CREATE VIEW `MyTableTest`
AS
SELECT *
FROM `MyTable`;
CREATE TABLE `MyTable_1` (
  `val` INTEGER NOT NULL,
  PRIMARY KEY (`val`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'MyTable_1',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`MyTable_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`MyTable`)
;
END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres-schema.sql
CREATE TABLE IF NOT EXISTS "MyTable_1" ("val" INTEGER NOT NULL , PRIMARY KEY ("val"))
>>>postgres-views.sql
CREATE OR REPLACE VIEW "MyTable"("val") AS SELECT *
FROM (SELECT "val"
  FROM "MyTable_1"
  ORDER BY "val" NULLS FIRST) AS "t1"
>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "MyTable",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM (SELECT \"val\"\n  FROM \"MyTable_1\"\n  ORDER BY \"val\" NULLS FIRST) AS \"t\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "schema" : "\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype MyTable {\n  val: Int!\n}\n\ntype Query {\n  MyTable(limit: Int = 10, offset: Int = 0): [MyTable!]\n}\n"
    }
  }
}
