>>>pipeline_explain.txt
=== MyTable
ID:     mytable_1
Type:   state
Stage:  flink
Primary Key: val
Timestamp  : -
Schema:
 - val: INTEGER NOT NULL
 - myFnc: BIGINT
Plan:
LogicalProject(val=[$0], myFnc=[MyScalarFunction(CAST($0):BIGINT, CAST($0):BIGINT)])
  LogicalValues(tuples=[[{ 1 }, { 2 }, { 3 }, { 4 }, { 5 }, { 6 }, { 7 }, { 8 }, { 9 }, { 10 }]])

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `MyAsyncScalarFunction` AS 'com.myudf.MyAsyncScalarFunction' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `MyScalarFunction` AS 'com.myudf.MyScalarFunction' LANGUAGE JAVA;",
    "CREATE TEMPORARY TABLE `mytable_1` (\n  `val` INTEGER NOT NULL,\n  `myFnc` BIGINT,\n  PRIMARY KEY (`val`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'mytable_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT `val`, `default_catalog`.`default_database`.`MyScalarFunction`(CAST(`val` AS BIGINT), CAST(`val` AS BIGINT)) AS `myFnc`\nFROM (VALUES (1),\n    (2),\n    (3),\n    (4),\n    (5),\n    (6),\n    (7),\n    (8),\n    (9),\n    (10)) AS `t` (`val`);",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `mytable_1`\n(SELECT *\n FROM `table$1`)\n;\nEND;"
  ],
  "connectors" : [
    "jdbc-sqrl"
  ],
  "formats" : [ ]
}
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "mytable_1",
      "columns" : [
        "\"val\" INTEGER NOT NULL",
        "\"myFnc\" BIGINT "
      ],
      "primaryKeys" : [
        "\"val\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS mytable_1 (\"val\" INTEGER NOT NULL,\"myFnc\" BIGINT  , PRIMARY KEY (\"val\"));"
    }
  ],
  "views" : [
    {
      "name" : "MyTable",
      "sql" : "CREATE OR REPLACE VIEW \"MyTable\"(\"val\", \"myFnc\") AS SELECT *\nFROM \"mytable_1\"\nORDER BY \"val\";"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "MyTable",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "val"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"mytable_1\"\nWHERE \"val\" = $1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "val"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"mytable_1\"\nORDER BY \"val\"",
              "parameters" : [ ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "\"An RFC-3339 compliant Full Date Scalar\"\nscalar Date\n\n\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"A JSON scalar\"\nscalar JSON\n\n\"24-hour clock time value string in the format `hh:mm:ss` or `hh:mm:ss.sss`.\"\nscalar LocalTime\n\ntype MyTable {\n  val: Int!\n  myFnc: Float\n}\n\ntype Query {\n  MyTable(val: Int, limit: Int = 10, offset: Int = 0): [MyTable!]\n}\n"
    }
  }
}
