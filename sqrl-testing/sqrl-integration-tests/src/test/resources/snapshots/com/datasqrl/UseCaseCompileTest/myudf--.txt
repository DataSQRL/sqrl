>>>pipeline_explain.txt
=== MyTable
ID:     default_catalog.default_database.MyTable
Type:   state
Stage:  flink
Primary Key: val
Timestamp  : -
Schema:
 - val: INTEGER NOT NULL
 - myFnc: BIGINT
Plan:
LogicalProject(val=[$0], myFnc=[MyScalarFunction(CAST($0):BIGINT, CAST($0):BIGINT)])
  LogicalValues(tuples=[[{ 1 }, { 2 }, { 3 }, { 4 }, { 5 }, { 6 }, { 7 }, { 8 }, { 9 }, { 10 }]])
SQL: CREATE VIEW MyTable AS  SELECT val, MyScalarFunction(val, val) AS myFnc
           FROM (VALUES ((1)), ((2)), ((3)), ((4)), ((5)),
            ((6)), ((7)), ((8)), ((9)), ((10))) AS t(val);

=== MyTableAnother
ID:     default_catalog.default_database.MyTableAnother
Type:   state
Stage:  flink
Primary Key: val
Timestamp  : -
Schema:
 - val: INTEGER NOT NULL
 - myFnc: BIGINT
Plan:
LogicalProject(val=[$0], myFnc=[AnotherFunction(CAST($0):BIGINT, CAST($0):BIGINT)])
  LogicalValues(tuples=[[{ 1 }, { 2 }]])
SQL: CREATE VIEW MyTableAnother AS  SELECT val, AnotherFunction(val, val) AS myFnc
           FROM (VALUES ((1)), ((2))) AS t(val);

>>>flink-sql-no-functions.sql
CREATE VIEW `MyTable`
AS
SELECT `val`, MYSCALARFUNCTION(`val`, `val`) AS `myFnc`
FROM (VALUES ROW(1),
   ROW(2),
   ROW(3),
   ROW(4),
   ROW(5),
   ROW(6),
   ROW(7),
   ROW(8),
   ROW(9),
   ROW(10)) AS `t` (`val`);
CREATE VIEW `MyTableAnother`
AS
SELECT `val`, ANOTHERFUNCTION(`val`, `val`) AS `myFnc`
FROM (VALUES ROW(1),
   ROW(2)) AS `t` (`val`);
CREATE VIEW `MyAsyncTable`
AS
SELECT `val`, MYASYNCSCALARFUNCTION(`val`, `ival`) AS `myFnc`
FROM (VALUES ROW('1', 1),
   ROW('2', 2),
   ROW('3', 3)) AS `t` (`val`, `ival`);
CREATE TABLE `MyTable_1` (
  `val` INTEGER NOT NULL,
  `myFnc` BIGINT,
  PRIMARY KEY (`val`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'MyTable_1'
);
CREATE TABLE `MyTableAnother_2` (
  `val` INTEGER NOT NULL,
  `myFnc` BIGINT,
  PRIMARY KEY (`val`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'MyTableAnother_2'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`MyTable_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`MyTable`)
;
INSERT INTO `default_catalog`.`default_database`.`MyTableAnother_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`MyTableAnother`)
 ;
 END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres-schema.sql
CREATE TABLE IF NOT EXISTS "MyTable_1" ("val" INTEGER NOT NULL, "myFnc" BIGINT  , PRIMARY KEY ("val"));
CREATE TABLE IF NOT EXISTS "MyTableAnother_2" ("val" INTEGER NOT NULL, "myFnc" BIGINT  , PRIMARY KEY ("val"))
>>>postgres-views.sql
CREATE OR REPLACE VIEW "MyTable"("val", "myFnc") AS SELECT *
FROM "MyTable_1";
CREATE OR REPLACE VIEW "MyTableAnother"("val", "myFnc") AS SELECT *
FROM "MyTableAnother_2"
>>>vertx.json
{ }
