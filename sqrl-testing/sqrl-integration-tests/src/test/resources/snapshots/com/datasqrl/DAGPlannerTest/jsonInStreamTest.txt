>>>pipeline_explain.txt
=== Customer
ID:     default_catalog.default_database.Customer
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.CustomerStream
Annotations:
 - mostRecentDistinct: true
 - stream-root: CustomerStream
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[=($5, 1)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, CustomerStream]])
SQL: CREATE VIEW `Customer`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `timestamp` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`CustomerStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== CustomerStream
ID:     default_catalog.default_database.CustomerStream
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.CustomerStream__base
Annotations:
 - stream-root: CustomerStream
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
  LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[COALESCE(TO_TIMESTAMP_LTZ($3, 0), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
    LogicalTableScan(table=[[default_catalog, default_database, CustomerStream]])
SQL: CREATE VIEW `CustomerStream__view`
AS
SELECT `CustomerStream`.`customerid`, `CustomerStream`.`email`, `CustomerStream`.`name`, `CustomerStream`.`lastUpdated`, `CustomerStream`.`timestamp`
FROM `default_catalog`.`default_database`.`CustomerStream` AS `CustomerStream`
=== ObjComplex
ID:     default_catalog.default_database.ObjComplex
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM=')
Plan:
LogicalProject(customerid=[$0], obj=[jsonb_object(CONCAT('application#', $2), $0)])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW ObjComplex AS  SELECT customerid, jsonb_object(concat('application#',CAST(name AS VARCHAR)), customerid) AS obj FROM Customer;

=== jsonArrayAggTable
ID:     default_catalog.default_database.jsonArrayAggTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Primary Key: name
Timestamp  : -
Schema:
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - agg: RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM=')
Plan:
LogicalAggregate(group=[{0}], agg=[jsonb_array_agg($0)])
  LogicalProject(name=[$2])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW jsonArrayAggTable AS  SELECT name, jsonb_array_agg(name) AS agg FROM Customer GROUP BY name;

=== jsonArrayTable
ID:     default_catalog.default_database.jsonArrayTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM=')
Plan:
LogicalProject(customerid=[$0], obj=[jsonb_array($0)])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW jsonArrayTable AS  SELECT customerid, jsonb_array(customerid) AS obj FROM Customer;

=== jsonConcatTable
ID:     default_catalog.default_database.jsonConcatTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM=')
Plan:
LogicalProject(customerid=[$0], obj=[jsonb_concat(to_jsonb('{"a": true}'), to_jsonb('{"a": false}'))])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW jsonConcatTable AS  SELECT customerid, jsonb_concat(to_jsonb('{"a": true}'), to_jsonb('{"a": false}')) AS obj FROM Customer;

=== jsonExistsTable
ID:     default_catalog.default_database.jsonExistsTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: BOOLEAN
Plan:
LogicalProject(customerid=[$0], obj=[jsonb_exists(to_jsonb('{"a": true}'), '$.a')])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW jsonExistsTable AS  SELECT customerid, jsonb_exists(to_jsonb('{"a": true}'), '$.a') AS obj FROM Customer;

=== jsonExtractTable
ID:     default_catalog.default_database.jsonExtractTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
Plan:
LogicalProject(customerid=[$0], obj=[jsonb_extract(to_jsonb('{"a": "hello"}'), '$.a':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", 'default':VARCHAR(2147483647) CHARACTER SET "UTF-16LE")])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW jsonExtractTable AS  SELECT customerid, jsonb_extract(to_jsonb('{"a": "hello"}'), CAST('$.a' AS varchar), CAST('default' AS varchar)) AS obj FROM Customer;

=== jsonObjectAggTable
ID:     default_catalog.default_database.jsonObjectAggTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Primary Key: name
Timestamp  : -
Schema:
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - agg: RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM=')
Plan:
LogicalAggregate(group=[{0}], agg=[jsonb_object_agg($1, $0)])
  LogicalProject(name=[$2], $f1=['key'])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW jsonObjectAggTable AS  SELECT name, jsonb_object_agg('key', name) AS agg FROM Customer GROUP BY name;

=== jsonQueryTable
ID:     default_catalog.default_database.jsonQueryTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
Plan:
LogicalProject(customerid=[$0], obj=[jsonb_query(to_jsonb('{"a": {"b": 1}}'), '$.a')])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW jsonQueryTable AS  SELECT customerid, jsonb_query(to_jsonb('{"a": {"b": 1}}'), '$.a') AS obj FROM Customer;

=== jsonToStringTable
ID:     default_catalog.default_database.jsonToStringTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
Plan:
LogicalProject(customerid=[$0], obj=[jsonb_to_string(to_jsonb('{"a": 1}'))])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW jsonToStringTable AS  SELECT customerid, jsonb_to_string(to_jsonb('{"a": 1}')) AS obj FROM Customer;

=== toJsonTable
ID:     default_catalog.default_database.toJsonTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM=')
Plan:
LogicalProject(customerid=[$0], obj=[to_jsonb('{"a": 1}')])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW toJsonTable AS  SELECT customerid, to_jsonb('{"a": 1}') AS obj FROM Customer;

>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `CustomerStream__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `CustomerStream` (
  `timestamp` AS COALESCE(`TO_TIMESTAMP_LTZ`(`lastUpdated`, 0), TIMESTAMP '1970-01-01 00:00:00.000'),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `CustomerStream__schema`;
CREATE VIEW `Customer`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `timestamp` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`CustomerStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `toJsonTable`
AS
SELECT `customerid`, `to_jsonb`('{"a": 1}') AS `obj`
FROM `Customer`;
CREATE VIEW `jsonArrayTable`
AS
SELECT `customerid`, `jsonb_array`(`customerid`) AS `obj`
FROM `Customer`;
CREATE VIEW `jsonObjectAggTable`
AS
SELECT `name`, `jsonb_object_agg`('key', `name`) AS `agg`
FROM `Customer`
GROUP BY `name`;
CREATE VIEW `jsonToStringTable`
AS
SELECT `customerid`, `jsonb_to_string`(`to_jsonb`('{"a": 1}')) AS `obj`
FROM `Customer`;
CREATE VIEW `jsonExtractTable`
AS
SELECT `customerid`, `jsonb_extract`(`to_jsonb`('{"a": "hello"}'), CAST('$.a' AS VARCHAR), CAST('default' AS VARCHAR)) AS `obj`
FROM `Customer`;
CREATE VIEW `jsonQueryTable`
AS
SELECT `customerid`, `jsonb_query`(`to_jsonb`('{"a": {"b": 1}}'), '$.a') AS `obj`
FROM `Customer`;
CREATE VIEW `jsonExistsTable`
AS
SELECT `customerid`, `jsonb_exists`(`to_jsonb`('{"a": true}'), '$.a') AS `obj`
FROM `Customer`;
CREATE VIEW `jsonConcatTable`
AS
SELECT `customerid`, `jsonb_concat`(`to_jsonb`('{"a": true}'), `to_jsonb`('{"a": false}')) AS `obj`
FROM `Customer`;
CREATE VIEW `jsonArrayAggTable`
AS
SELECT `name`, `jsonb_array_agg`(`name`) AS `agg`
FROM `Customer`
GROUP BY `name`;
CREATE VIEW `ObjComplex`
AS
SELECT `customerid`, `jsonb_object`(`concat`('application#', CAST(`name` AS VARCHAR)), `customerid`) AS `obj`
FROM `Customer`;
CREATE TABLE `Customer_1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'table-name' = 'Customer_1',
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}'
);
CREATE TABLE `CustomerStream_2` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'table-name' = 'CustomerStream_2',
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}'
);
CREATE TABLE `ObjComplex_3` (
  `customerid` BIGINT NOT NULL,
  `obj` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'table-name' = 'ObjComplex_3',
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}'
);
CREATE TABLE `jsonArrayAggTable_4` (
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `agg` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  PRIMARY KEY (`name`) NOT ENFORCED
) WITH (
  'table-name' = 'jsonArrayAggTable_4',
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}'
);
CREATE TABLE `jsonArrayTable_5` (
  `customerid` BIGINT NOT NULL,
  `obj` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'table-name' = 'jsonArrayTable_5',
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}'
);
CREATE TABLE `jsonConcatTable_6` (
  `customerid` BIGINT NOT NULL,
  `obj` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'table-name' = 'jsonConcatTable_6',
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}'
);
CREATE TABLE `jsonExistsTable_7` (
  `customerid` BIGINT NOT NULL,
  `obj` BOOLEAN,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'table-name' = 'jsonExistsTable_7',
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}'
);
CREATE TABLE `jsonExtractTable_8` (
  `customerid` BIGINT NOT NULL,
  `obj` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'table-name' = 'jsonExtractTable_8',
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}'
);
CREATE TABLE `jsonObjectAggTable_9` (
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `agg` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  PRIMARY KEY (`name`) NOT ENFORCED
) WITH (
  'table-name' = 'jsonObjectAggTable_9',
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}'
);
CREATE TABLE `jsonQueryTable_10` (
  `customerid` BIGINT NOT NULL,
  `obj` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'table-name' = 'jsonQueryTable_10',
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}'
);
CREATE TABLE `jsonToStringTable_11` (
  `customerid` BIGINT NOT NULL,
  `obj` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'table-name' = 'jsonToStringTable_11',
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}'
);
CREATE TABLE `toJsonTable_12` (
  `customerid` BIGINT NOT NULL,
  `obj` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'table-name' = 'toJsonTable_12',
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`Customer_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`CustomerStream`)
;
INSERT INTO `default_catalog`.`default_database`.`CustomerStream_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`CustomerStream`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`ObjComplex_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`ObjComplex`)
  ;
  INSERT INTO `default_catalog`.`default_database`.`jsonArrayAggTable_4`
   (SELECT *
    FROM `default_catalog`.`default_database`.`jsonArrayAggTable`)
   ;
   INSERT INTO `default_catalog`.`default_database`.`jsonArrayTable_5`
    (SELECT *
     FROM `default_catalog`.`default_database`.`jsonArrayTable`)
    ;
    INSERT INTO `default_catalog`.`default_database`.`jsonConcatTable_6`
     (SELECT *
      FROM `default_catalog`.`default_database`.`jsonConcatTable`)
     ;
     INSERT INTO `default_catalog`.`default_database`.`jsonExistsTable_7`
      (SELECT *
       FROM `default_catalog`.`default_database`.`jsonExistsTable`)
      ;
      INSERT INTO `default_catalog`.`default_database`.`jsonExtractTable_8`
       (SELECT *
        FROM `default_catalog`.`default_database`.`jsonExtractTable`)
       ;
       INSERT INTO `default_catalog`.`default_database`.`jsonObjectAggTable_9`
        (SELECT *
         FROM `default_catalog`.`default_database`.`jsonObjectAggTable`)
        ;
        INSERT INTO `default_catalog`.`default_database`.`jsonQueryTable_10`
         (SELECT *
          FROM `default_catalog`.`default_database`.`jsonQueryTable`)
         ;
         INSERT INTO `default_catalog`.`default_database`.`jsonToStringTable_11`
          (SELECT *
           FROM `default_catalog`.`default_database`.`jsonToStringTable`)
          ;
          INSERT INTO `default_catalog`.`default_database`.`toJsonTable_12`
           (SELECT *
            FROM `default_catalog`.`default_database`.`toJsonTable`)
           ;
           END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "Customer_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Customer_1\" (\"customerid\" BIGINT NOT NULL, \"email\" TEXT NOT NULL, \"name\" TEXT NOT NULL, \"lastUpdated\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CustomerStream_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"CustomerStream_2\" (\"customerid\" BIGINT NOT NULL, \"email\" TEXT NOT NULL, \"name\" TEXT NOT NULL, \"lastUpdated\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"customerid\",\"lastUpdated\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "ObjComplex_3",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"ObjComplex_3\" (\"customerid\" BIGINT NOT NULL, \"obj\" JSONB  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonArrayAggTable_4",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"jsonArrayAggTable_4\" (\"name\" TEXT NOT NULL, \"agg\" JSONB  , PRIMARY KEY (\"name\"))",
      "fields" : [
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "agg",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonArrayTable_5",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"jsonArrayTable_5\" (\"customerid\" BIGINT NOT NULL, \"obj\" JSONB  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonConcatTable_6",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"jsonConcatTable_6\" (\"customerid\" BIGINT NOT NULL, \"obj\" JSONB  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonExistsTable_7",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"jsonExistsTable_7\" (\"customerid\" BIGINT NOT NULL, \"obj\" BOOLEAN  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "BOOLEAN",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonExtractTable_8",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"jsonExtractTable_8\" (\"customerid\" BIGINT NOT NULL, \"obj\" TEXT  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonObjectAggTable_9",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"jsonObjectAggTable_9\" (\"name\" TEXT NOT NULL, \"agg\" JSONB  , PRIMARY KEY (\"name\"))",
      "fields" : [
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "agg",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonQueryTable_10",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"jsonQueryTable_10\" (\"customerid\" BIGINT NOT NULL, \"obj\" TEXT  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonToStringTable_11",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"jsonToStringTable_11\" (\"customerid\" BIGINT NOT NULL, \"obj\" TEXT  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "toJsonTable_12",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"toJsonTable_12\" (\"customerid\" BIGINT NOT NULL, \"obj\" JSONB  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "Customer",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Customer\"(\"customerid\", \"email\", \"name\", \"lastUpdated\", \"timestamp\") AS SELECT *\nFROM \"Customer_1\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CustomerStream",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"CustomerStream\"(\"customerid\", \"email\", \"name\", \"lastUpdated\", \"timestamp\") AS SELECT *\nFROM \"CustomerStream_2\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "ObjComplex",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"ObjComplex\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"ObjComplex_3\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonArrayAggTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonArrayAggTable\"(\"name\", \"agg\") AS SELECT *\nFROM \"jsonArrayAggTable_4\"",
      "fields" : [
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "agg",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonArrayTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonArrayTable\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"jsonArrayTable_5\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonConcatTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonConcatTable\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"jsonConcatTable_6\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonExistsTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonExistsTable\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"jsonExistsTable_7\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "BOOLEAN",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonExtractTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonExtractTable\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"jsonExtractTable_8\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonObjectAggTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonObjectAggTable\"(\"name\", \"agg\") AS SELECT *\nFROM \"jsonObjectAggTable_9\"",
      "fields" : [
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "agg",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonQueryTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonQueryTable\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"jsonQueryTable_10\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonToStringTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonToStringTable\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"jsonToStringTable_11\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "toJsonTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"toJsonTable\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"toJsonTable_12\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    }
  ]
}
>>>vertx-config.json
{
  "servletConfig": {
    "graphiQLEndpoint": "/graphiql*",
    "graphQLEndpoint": "/graphql",
    "usePgPool": true,
    "useApolloWs": false,
    "graphQLWsEndpoint": "/graphql-ws"
  },
  "graphQLHandlerOptions": {
    "requestBatchingEnabled": false,
    "requestMultipartEnabled": false
  },
  "graphiQLHandlerOptions": {
    "enabled": true
  },
  "httpServerOptions": {
    "sendBufferSize": -1,
    "receiveBufferSize": -1,
    "trafficClass": -1,
    "reuseAddress": true,
    "logActivity": false,
    "activityLogDataFormat": "HEX_DUMP",
    "reusePort": false,
    "tcpNoDelay": true,
    "tcpKeepAlive": false,
    "soLinger": -1,
    "idleTimeout": 0,
    "readIdleTimeout": 0,
    "writeIdleTimeout": 0,
    "idleTimeoutUnit": "SECONDS",
    "ssl": false,
    "sslHandshakeTimeout": 10,
    "sslHandshakeTimeoutUnit": "SECONDS",
    "enabledCipherSuites": [],
    "crlPaths": [],
    "crlValues": [],
    "useAlpn": false,
    "enabledSecureTransportProtocols": [
      "TLSv1",
      "TLSv1.1",
      "TLSv1.2"
    ],
    "tcpFastOpen": false,
    "tcpCork": false,
    "tcpQuickAck": false,
    "tcpUserTimeout": 0,
    "port": 8888,
    "host": "0.0.0.0",
    "acceptBacklog": -1,
    "clientAuth": "NONE",
    "sni": false,
    "useProxyProtocol": false,
    "proxyProtocolTimeout": 10,
    "proxyProtocolTimeoutUnit": "SECONDS",
    "compressionSupported": false,
    "compressionLevel": 6,
    "maxWebSocketFrameSize": 65536,
    "maxWebSocketMessageSize": 262144,
    "webSocketSubProtocols": [
      "graphql-transport-ws",
      "graphql-ws"
    ],
    "handle100ContinueAutomatically": false,
    "maxChunkSize": 8192,
    "maxInitialLineLength": 4096,
    "maxHeaderSize": 8192,
    "maxFormAttributeSize": 8192,
    "initialSettings": {
      "headerTableSize": 4096,
      "pushEnabled": true,
      "maxConcurrentStreams": 100,
      "initialWindowSize": 65535,
      "maxFrameSize": 16384,
      "maxHeaderListSize": 8192
    },
    "alpnVersions": [
      "HTTP_2",
      "HTTP_1_1"
    ],
    "http2ConnectionWindowSize": -1,
    "decompressionSupported": false,
    "acceptUnmaskedFrames": false,
    "decoderInitialBufferSize": 128,
    "perFrameWebSocketCompressionSupported": true,
    "perMessageWebSocketCompressionSupported": true,
    "webSocketCompressionLevel": 6,
    "webSocketAllowServerNoContext": false,
    "webSocketPreferredClientNoContext": false,
    "webSocketClosingTimeout": 10,
    "tracingPolicy": "ALWAYS"
  },
  "pgConnectOptions": {
    "sendBufferSize": -1,
    "receiveBufferSize": -1,
    "trafficClass": -1,
    "reuseAddress": true,
    "logActivity": false,
    "activityLogDataFormat": "HEX_DUMP",
    "reusePort": false,
    "tcpNoDelay": true,
    "tcpKeepAlive": false,
    "soLinger": -1,
    "idleTimeout": 0,
    "readIdleTimeout": 0,
    "writeIdleTimeout": 0,
    "idleTimeoutUnit": "SECONDS",
    "ssl": false,
    "sslHandshakeTimeout": 10,
    "sslHandshakeTimeoutUnit": "SECONDS",
    "enabledCipherSuites": [],
    "crlPaths": [],
    "crlValues": [],
    "useAlpn": false,
    "enabledSecureTransportProtocols": [
      "TLSv1",
      "TLSv1.1",
      "TLSv1.2"
    ],
    "tcpFastOpen": false,
    "tcpCork": false,
    "tcpQuickAck": false,
    "tcpUserTimeout": 0,
    "connectTimeout": 60000,
    "trustAll": false,
    "metricsName": "",
    "reconnectAttempts": 0,
    "reconnectInterval": 1000,
    "hostnameVerificationAlgorithm": "",
    "host": "${PGHOST}",
    "port": 5432,
    "user": "${PGUSER}",
    "password": "${PGPASSWORD}",
    "database": "${PGDATABASE}",
    "cachePreparedStatements": false,
    "preparedStatementCacheMaxSize": 256,
    "preparedStatementCacheSqlFilter": {},
    "properties": {
      "DateStyle": "ISO",
      "client_encoding": "utf8",
      "application_name": "vertx-pg-client",
      "extra_float_digits": "2"
    },
    "pipeliningLimit": 256,
    "sslMode": "DISABLE",
    "socketAddress": {
      "domainSocket": false,
      "inetSocket": true
    },
    "usingDomainSocket": false
  },
  "poolOptions": {
    "maxSize": 4,
    "maxWaitQueueSize": -1,
    "idleTimeout": 0,
    "idleTimeoutUnit": "SECONDS",
    "poolCleanerPeriod": 1000,
    "connectionTimeout": 30,
    "connectionTimeoutUnit": "SECONDS",
    "shared": false,
    "name": "__vertx.DEFAULT",
    "eventLoopSize": 0
  },
  "corsHandlerOptions": {
    "allowedOrigin": "*",
    "allowCredentials": false,
    "maxAgeSeconds": -1,
    "allowPrivateNetwork": false,
    "allowedMethods": [
      "GET",
      "POST"
    ],
    "allowedHeaders": [],
    "exposedHeaders": []
  },
  "apolloWSOptions": {
    "keepAlive": 30000
  }
}

>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Customer",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Customer_1\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CustomerStream",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"CustomerStream_2\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "ObjComplex",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"ObjComplex_3\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "jsonArrayAggTable",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"jsonArrayAggTable_4\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "jsonArrayTable",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"jsonArrayTable_5\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "jsonConcatTable",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"jsonConcatTable_6\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "jsonExistsTable",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"jsonExistsTable_7\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "jsonExtractTable",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"jsonExtractTable_8\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "jsonObjectAggTable",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"jsonObjectAggTable_9\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "jsonQueryTable",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"jsonQueryTable_10\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "jsonToStringTable",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"jsonToStringTable_11\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "toJsonTable",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"toJsonTable_12\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "schema" : "type Customer {\n  customerid: GraphQLBigInteger!\n  email: String!\n  name: String!\n  lastUpdated: GraphQLBigInteger!\n  timestamp: DateTime!\n}\n\ntype CustomerStream {\n  customerid: GraphQLBigInteger!\n  email: String!\n  name: String!\n  lastUpdated: GraphQLBigInteger!\n  timestamp: DateTime!\n}\n\n\"A slightly refined version of RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\n\"A JSON scalar\"\nscalar JSON\n\ntype ObjComplex {\n  customerid: GraphQLBigInteger!\n  obj: JSON\n}\n\ntype Query {\n  Customer(limit: Int = 10, offset: Int = 0): [Customer!]\n  CustomerStream(limit: Int = 10, offset: Int = 0): [CustomerStream!]\n  ObjComplex(limit: Int = 10, offset: Int = 0): [ObjComplex!]\n  jsonArrayAggTable(limit: Int = 10, offset: Int = 0): [jsonArrayAggTable!]\n  jsonArrayTable(limit: Int = 10, offset: Int = 0): [jsonArrayTable!]\n  jsonConcatTable(limit: Int = 10, offset: Int = 0): [jsonConcatTable!]\n  jsonExistsTable(limit: Int = 10, offset: Int = 0): [jsonExistsTable!]\n  jsonExtractTable(limit: Int = 10, offset: Int = 0): [jsonExtractTable!]\n  jsonObjectAggTable(limit: Int = 10, offset: Int = 0): [jsonObjectAggTable!]\n  jsonQueryTable(limit: Int = 10, offset: Int = 0): [jsonQueryTable!]\n  jsonToStringTable(limit: Int = 10, offset: Int = 0): [jsonToStringTable!]\n  toJsonTable(limit: Int = 10, offset: Int = 0): [toJsonTable!]\n}\n\ntype jsonArrayAggTable {\n  name: String!\n  agg: JSON\n}\n\ntype jsonArrayTable {\n  customerid: GraphQLBigInteger!\n  obj: JSON\n}\n\ntype jsonConcatTable {\n  customerid: GraphQLBigInteger!\n  obj: JSON\n}\n\ntype jsonExistsTable {\n  customerid: GraphQLBigInteger!\n  obj: Boolean\n}\n\ntype jsonExtractTable {\n  customerid: GraphQLBigInteger!\n  obj: String\n}\n\ntype jsonObjectAggTable {\n  name: String!\n  agg: JSON\n}\n\ntype jsonQueryTable {\n  customerid: GraphQLBigInteger!\n  obj: String\n}\n\ntype jsonToStringTable {\n  customerid: GraphQLBigInteger!\n  obj: String\n}\n\ntype toJsonTable {\n  customerid: GraphQLBigInteger!\n  obj: JSON\n}\n"
    }
  }
}
