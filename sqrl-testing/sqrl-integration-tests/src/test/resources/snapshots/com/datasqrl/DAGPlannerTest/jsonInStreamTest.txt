>>>pipeline_explain.txt
=== Customer
ID:     default_catalog.default_database.Customer
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.CustomerStream
Annotations:
 - mostRecentDistinct: true
 - stream-root: CustomerStream__def
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME*
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[=($5, 1)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, CustomerStream]])
SQL: CREATE VIEW `Customer`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `timestamp` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`CustomerStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== CustomerStream
ID:     default_catalog.default_database.CustomerStream
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.CustomerStream__def
Annotations:
 - stream-root: CustomerStream__def
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME*
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[TO_TIMESTAMP_LTZ($3, 0)])
      LogicalTableScan(table=[[default_catalog, default_database, CustomerStream__def]])
SQL: CREATE VIEW `CustomerStream`
AS
SELECT *
FROM `default_catalog`.`default_database`.`CustomerStream__def`
=== ObjComplex
ID:     default_catalog.default_database.ObjComplex
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream__def
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI=')
Plan:
LogicalProject(customerid=[$0], obj=[jsonObject(CONCAT('application#', $2), $0)])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW ObjComplex AS  SELECT customerid, jsonObject(concat('application#',CAST(name AS VARCHAR)), customerid) AS obj FROM Customer;

=== jsonArrayTable
ID:     default_catalog.default_database.jsonArrayTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream__def
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI=')
Plan:
LogicalProject(customerid=[$0], obj=[jsonArray($0)])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW jsonArrayTable AS  SELECT customerid, jsonArray(customerid) AS obj FROM Customer;

=== jsonConcatTable
ID:     default_catalog.default_database.jsonConcatTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream__def
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI=')
Plan:
LogicalProject(customerid=[$0], obj=[jsonConcat(toJson('{"a": true}'), toJson('{"a": false}'))])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW jsonConcatTable AS  SELECT customerid, jsonConcat(toJson('{"a": true}'), toJson('{"a": false}')) AS obj FROM Customer;

=== jsonExistsTable
ID:     default_catalog.default_database.jsonExistsTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream__def
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: BOOLEAN
Plan:
LogicalProject(customerid=[$0], obj=[jsonExists(toJson('{"a": true}'), '$.a')])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW jsonExistsTable AS  SELECT customerid, jsonExists(toJson('{"a": true}'), '$.a') AS obj FROM Customer;

=== jsonExtractTable
ID:     default_catalog.default_database.jsonExtractTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream__def
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
Plan:
LogicalProject(customerid=[$0], obj=[jsonExtract(toJson('{"a": "hello"}'), '$.a':VARCHAR(2147483647) CHARACTER SET "UTF-16LE", 'default':VARCHAR(2147483647) CHARACTER SET "UTF-16LE")])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW jsonExtractTable AS  SELECT customerid, jsonExtract(toJson('{"a": "hello"}'), CAST('$.a' AS varchar), CAST('default' AS varchar)) AS obj FROM Customer;

=== jsonQueryTable
ID:     default_catalog.default_database.jsonQueryTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream__def
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
Plan:
LogicalProject(customerid=[$0], obj=[jsonQuery(toJson('{"a": {"b": 1}}'), '$.a')])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW jsonQueryTable AS  SELECT customerid, jsonQuery(toJson('{"a": {"b": 1}}'), '$.a') AS obj FROM Customer;

=== jsonToStringTable
ID:     default_catalog.default_database.jsonToStringTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream__def
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
Plan:
LogicalProject(customerid=[$0], obj=[jsonToString(toJson('{"a": 1}'))])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW jsonToStringTable AS  SELECT customerid, jsonToString(toJson('{"a": 1}')) AS obj FROM Customer;

=== toJsonTable
ID:     default_catalog.default_database.toJsonTable
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: CustomerStream__def
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - obj: RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI=')
Plan:
LogicalProject(customerid=[$0], obj=[toJson('{"a": 1}')])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW toJsonTable AS  SELECT customerid, toJson('{"a": 1}') AS obj FROM Customer;

>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `CustomerStream__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `CustomerStream__def` (
  `timestamp` AS TO_TIMESTAMP_LTZ(`lastUpdated`, 0),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `CustomerStream__schema`;
CREATE VIEW `CustomerStream`
AS
SELECT *
FROM `default_catalog`.`default_database`.`CustomerStream__def`;
CREATE VIEW `Customer`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `timestamp` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`CustomerStream`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `toJsonTable`
AS
SELECT `customerid`, TOJSON('{"a": 1}') AS `obj`
FROM `Customer`;
CREATE VIEW `jsonArrayTable`
AS
SELECT `customerid`, JSONARRAY(`customerid`) AS `obj`
FROM `Customer`;
CREATE VIEW `jsonObjectAggTable`
AS
SELECT JSONOBJECTAGG('key', `name`) AS `agg`
FROM `Customer`
GROUP BY `name`;
CREATE VIEW `jsonToStringTable`
AS
SELECT `customerid`, JSONTOSTRING(TOJSON('{"a": 1}')) AS `obj`
FROM `Customer`;
CREATE VIEW `jsonExtractTable`
AS
SELECT `customerid`, JSONEXTRACT(TOJSON('{"a": "hello"}'), CAST('$.a' AS VARCHAR), CAST('default' AS VARCHAR)) AS `obj`
FROM `Customer`;
CREATE VIEW `jsonQueryTable`
AS
SELECT `customerid`, JSONQUERY(TOJSON('{"a": {"b": 1}}'), '$.a') AS `obj`
FROM `Customer`;
CREATE VIEW `jsonExistsTable`
AS
SELECT `customerid`, JSONEXISTS(TOJSON('{"a": true}'), '$.a') AS `obj`
FROM `Customer`;
CREATE VIEW `jsonConcatTable`
AS
SELECT `customerid`, JSONCONCAT(TOJSON('{"a": true}'), TOJSON('{"a": false}')) AS `obj`
FROM `Customer`;
CREATE VIEW `jsonArrayAggTable`
AS
SELECT JSONARRAYAGG(`name`) AS `agg`
FROM `Customer`
GROUP BY `name`;
CREATE VIEW `ObjComplex`
AS
SELECT `customerid`, JSONOBJECT(CONCAT('application#', CAST(`name` AS VARCHAR)), `customerid`) AS `obj`
FROM `Customer`;
CREATE TABLE `Customer_1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'Customer_1'
);
CREATE TABLE `CustomerStream_2` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'CustomerStream_2'
);
CREATE TABLE `ObjComplex_3` (
  `customerid` BIGINT NOT NULL,
  `obj` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'ObjComplex_3'
);
CREATE TABLE `jsonArrayTable_4` (
  `customerid` BIGINT NOT NULL,
  `obj` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'jsonArrayTable_4'
);
CREATE TABLE `jsonConcatTable_5` (
  `customerid` BIGINT NOT NULL,
  `obj` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'jsonConcatTable_5'
);
CREATE TABLE `jsonExistsTable_6` (
  `customerid` BIGINT NOT NULL,
  `obj` BOOLEAN,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'jsonExistsTable_6'
);
CREATE TABLE `jsonExtractTable_7` (
  `customerid` BIGINT NOT NULL,
  `obj` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'jsonExtractTable_7'
);
CREATE TABLE `jsonQueryTable_8` (
  `customerid` BIGINT NOT NULL,
  `obj` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'jsonQueryTable_8'
);
CREATE TABLE `jsonToStringTable_9` (
  `customerid` BIGINT NOT NULL,
  `obj` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'jsonToStringTable_9'
);
CREATE TABLE `toJsonTable_10` (
  `customerid` BIGINT NOT NULL,
  `obj` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_URL}',
  'table-name' = 'toJsonTable_10'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`Customer_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`CustomerStream`)
;
INSERT INTO `default_catalog`.`default_database`.`CustomerStream_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`CustomerStream`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`ObjComplex_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`ObjComplex`)
  ;
  INSERT INTO `default_catalog`.`default_database`.`jsonArrayTable_4`
   (SELECT *
    FROM `default_catalog`.`default_database`.`jsonArrayTable`)
   ;
   INSERT INTO `default_catalog`.`default_database`.`jsonConcatTable_5`
    (SELECT *
     FROM `default_catalog`.`default_database`.`jsonConcatTable`)
    ;
    INSERT INTO `default_catalog`.`default_database`.`jsonExistsTable_6`
     (SELECT *
      FROM `default_catalog`.`default_database`.`jsonExistsTable`)
     ;
     INSERT INTO `default_catalog`.`default_database`.`jsonExtractTable_7`
      (SELECT *
       FROM `default_catalog`.`default_database`.`jsonExtractTable`)
      ;
      INSERT INTO `default_catalog`.`default_database`.`jsonQueryTable_8`
       (SELECT *
        FROM `default_catalog`.`default_database`.`jsonQueryTable`)
       ;
       INSERT INTO `default_catalog`.`default_database`.`jsonToStringTable_9`
        (SELECT *
         FROM `default_catalog`.`default_database`.`jsonToStringTable`)
        ;
        INSERT INTO `default_catalog`.`default_database`.`toJsonTable_10`
         (SELECT *
          FROM `default_catalog`.`default_database`.`toJsonTable`)
         ;
         END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "Customer_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Customer_1\" (\"customerid\" BIGINT NOT NULL, \"email\" TEXT NOT NULL, \"name\" TEXT NOT NULL, \"lastUpdated\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "CustomerStream_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"CustomerStream_2\" (\"customerid\" BIGINT NOT NULL, \"email\" TEXT NOT NULL, \"name\" TEXT NOT NULL, \"lastUpdated\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE  , PRIMARY KEY (\"customerid\",\"lastUpdated\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "ObjComplex_3",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"ObjComplex_3\" (\"customerid\" BIGINT NOT NULL, \"obj\" JSONB  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonArrayTable_4",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"jsonArrayTable_4\" (\"customerid\" BIGINT NOT NULL, \"obj\" JSONB  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonConcatTable_5",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"jsonConcatTable_5\" (\"customerid\" BIGINT NOT NULL, \"obj\" JSONB  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonExistsTable_6",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"jsonExistsTable_6\" (\"customerid\" BIGINT NOT NULL, \"obj\" BOOLEAN  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "BOOLEAN",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonExtractTable_7",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"jsonExtractTable_7\" (\"customerid\" BIGINT NOT NULL, \"obj\" TEXT  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonQueryTable_8",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"jsonQueryTable_8\" (\"customerid\" BIGINT NOT NULL, \"obj\" TEXT  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonToStringTable_9",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"jsonToStringTable_9\" (\"customerid\" BIGINT NOT NULL, \"obj\" TEXT  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "toJsonTable_10",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"toJsonTable_10\" (\"customerid\" BIGINT NOT NULL, \"obj\" JSONB  , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "Customer",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Customer\"(\"customerid\", \"email\", \"name\", \"lastUpdated\", \"timestamp\") AS SELECT *\nFROM \"Customer_1\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "CustomerStream",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"CustomerStream\"(\"customerid\", \"email\", \"name\", \"lastUpdated\", \"timestamp\") AS SELECT *\nFROM \"CustomerStream_2\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "ObjComplex",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"ObjComplex\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"ObjComplex_3\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonArrayAggTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonArrayAggTable\"(\"agg\") AS SELECT JSONB_AGG(\"name\") AS \"agg\"\nFROM \"Customer_1\"\nGROUP BY \"name\"",
      "fields" : [
        {
          "name" : "agg",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonArrayTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonArrayTable\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"jsonArrayTable_4\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonConcatTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonConcatTable\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"jsonConcatTable_5\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonExistsTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonExistsTable\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"jsonExistsTable_6\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "BOOLEAN",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonExtractTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonExtractTable\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"jsonExtractTable_7\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonObjectAggTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonObjectAggTable\"(\"agg\") AS SELECT JSONB_OBJECT_AGG('key', \"name\") AS \"agg\"\nFROM \"Customer_1\"\nGROUP BY \"name\"",
      "fields" : [
        {
          "name" : "agg",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonQueryTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonQueryTable\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"jsonQueryTable_8\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "jsonToStringTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"jsonToStringTable\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"jsonToStringTable_9\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "toJsonTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"toJsonTable\"(\"customerid\", \"obj\") AS SELECT *\nFROM \"toJsonTable_10\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "obj",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    }
  ]
}
>>>vertx.json
{ }
