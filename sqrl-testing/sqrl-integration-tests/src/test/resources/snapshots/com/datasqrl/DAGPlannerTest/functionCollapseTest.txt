>>>pipeline_explain.txt
=== Customer
ID:     default_catalog.default_database.Customer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer__def
Annotations:
 - stream-root: Customer__def
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[COALESCE(TO_TIMESTAMP_LTZ($3, 0), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
      LogicalTableScan(table=[[default_catalog, default_database, Customer__def]])
SQL: CREATE VIEW `Customer`
AS
SELECT *
FROM `default_catalog`.`default_database`.`Customer__def`
=== CustomerHighCount
ID:     default_catalog.default_database.CustomerHighCount
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.CustomerTimeWindow
Primary Key: window_start, window_end
Timestamp  : -
Schema:
 - window_start: TIMESTAMP(3) NOT NULL
 - window_end: TIMESTAMP(3) NOT NULL
 - unique_email_count: BIGINT NOT NULL
Plan:
LogicalProject(window_start=[$0], window_end=[$1], unique_email_count=[$2])
  LogicalFilter(condition=[>($2, 1)])
    LogicalTableScan(table=[[default_catalog, default_database, CustomerTimeWindow]])
SQL: CREATE VIEW CustomerHighCount AS  SELECT * FROM CustomerTimeWindow WHERE unique_email_count > 1;

=== CustomerTimeWindow
ID:     default_catalog.default_database.CustomerTimeWindow
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - features: STREAM_WINDOW_AGGREGATION (feature)
Primary Key: window_start, window_end
Timestamp  : -
Schema:
 - window_start: TIMESTAMP(3) NOT NULL
 - window_end: TIMESTAMP(3) NOT NULL
 - unique_email_count: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], unique_email_count=[COUNT(DISTINCT $2)])
  LogicalProject(window_start=[$5], window_end=[$6], email=[$1])
    LogicalTableFunctionScan(invocation=[TUMBLE(DESCRIPTOR($4), 60000:INTERVAL MINUTE)], rowType=[RecordType(BIGINT customerid, VARCHAR(2147483647) email, VARCHAR(2147483647) name, BIGINT lastUpdated, TIMESTAMP_LTZ(3) *ROWTIME* timestamp, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP_LTZ(3) *ROWTIME* window_time)])
      LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
        LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW CustomerTimeWindow AS  SELECT
                          window_start, window_end,
                          COUNT(DISTINCT email) AS unique_email_count
                      FROM TABLE(
                              TUMBLE(TABLE Customer, DESCRIPTOR(`timestamp`), INTERVAL '1' MINUTE)
                           )
                      GROUP BY
                          window_start, window_end;

>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Customer__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Customer__def` (
  `timestamp` AS COALESCE(TO_TIMESTAMP_LTZ(`lastUpdated`, 0), TIMESTAMP '1970-01-01 00:00:00.000'),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Customer__schema`;
CREATE VIEW `Customer`
AS
SELECT *
FROM `default_catalog`.`default_database`.`Customer__def`;
CREATE VIEW `CustomerTimeWindow`
AS
SELECT `window_start`, `window_end`, COUNT(DISTINCT `email`) AS `unique_email_count`
FROM TABLE(TUMBLE(TABLE `Customer`, DESCRIPTOR(`timestamp`), INTERVAL '1' MINUTE))
GROUP BY `window_start`, `window_end`;
CREATE VIEW `CustomerHighCount`
AS
SELECT *
FROM `CustomerTimeWindow`
WHERE `unique_email_count` > 1;
CREATE TABLE `Customer_1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'Customer_1'
);
CREATE TABLE `CustomerHighCount_2` (
  `window_start` TIMESTAMP(3) NOT NULL,
  `window_end` TIMESTAMP(3) NOT NULL,
  `unique_email_count` BIGINT NOT NULL,
  PRIMARY KEY (`window_start`, `window_end`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'CustomerHighCount_2'
);
CREATE TABLE `CustomerTimeWindow_3` (
  `window_start` TIMESTAMP(3) NOT NULL,
  `window_end` TIMESTAMP(3) NOT NULL,
  `unique_email_count` BIGINT NOT NULL,
  PRIMARY KEY (`window_start`, `window_end`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'CustomerTimeWindow_3'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`Customer_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`Customer`)
;
INSERT INTO `default_catalog`.`default_database`.`CustomerHighCount_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`CustomerHighCount`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`CustomerTimeWindow_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`CustomerTimeWindow`)
  ;
  END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "Customer_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Customer_1\" (\"customerid\" BIGINT NOT NULL, \"email\" TEXT NOT NULL, \"name\" TEXT NOT NULL, \"lastUpdated\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"customerid\",\"lastUpdated\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CustomerHighCount_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"CustomerHighCount_2\" (\"window_start\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"window_end\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"unique_email_count\" BIGINT NOT NULL , PRIMARY KEY (\"window_start\",\"window_end\"))",
      "fields" : [
        {
          "name" : "window_start",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "unique_email_count",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CustomerTimeWindow_3",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"CustomerTimeWindow_3\" (\"window_start\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"window_end\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"unique_email_count\" BIGINT NOT NULL , PRIMARY KEY (\"window_start\",\"window_end\"))",
      "fields" : [
        {
          "name" : "window_start",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "unique_email_count",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Customer",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Customer\"(\"customerid\", \"email\", \"name\", \"lastUpdated\", \"timestamp\") AS SELECT *\nFROM \"Customer_1\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CustomerHighCount",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"CustomerHighCount\"(\"window_start\", \"window_end\", \"unique_email_count\") AS SELECT *\nFROM \"CustomerHighCount_2\"",
      "fields" : [
        {
          "name" : "window_start",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "unique_email_count",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CustomerTimeWindow",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"CustomerTimeWindow\"(\"window_start\", \"window_end\", \"unique_email_count\") AS SELECT *\nFROM \"CustomerTimeWindow_3\"",
      "fields" : [
        {
          "name" : "window_start",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "unique_email_count",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Customer",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Customer_1\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CustomerHighCount",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"CustomerHighCount_2\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CustomerTimeWindow",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"CustomerTimeWindow_3\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "schema" : "type Customer {\n  customerid: GraphQLBigInteger!\n  email: String!\n  name: String!\n  lastUpdated: GraphQLBigInteger!\n  timestamp: DateTime!\n}\n\ntype CustomerTimeWindow {\n  window_start: DateTime!\n  window_end: DateTime!\n  unique_email_count: GraphQLBigInteger!\n}\n\n\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype Query {\n  Customer(limit: Int = 10, offset: Int = 0): [Customer!]\n  CustomerHighCount(limit: Int = 10, offset: Int = 0): [CustomerTimeWindow!]\n  CustomerTimeWindow(limit: Int = 10, offset: Int = 0): [CustomerTimeWindow!]\n}\n"
    }
  }
}
