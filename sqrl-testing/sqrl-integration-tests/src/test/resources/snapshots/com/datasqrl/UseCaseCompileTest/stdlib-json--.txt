>>>pipeline_explain.txt
=== Json
ID:     default_catalog.default_database.Json
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Json__base
Annotations:
 - stream-root: Json
Primary Key: id
Timestamp  : timestamp
Schema:
 - id: BIGINT NOT NULL
 - val: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($2, 1:INTERVAL SECOND)])
  LogicalTableScan(table=[[default_catalog, default_database, Json]])
SQL: CREATE VIEW `Json__view`
AS
SELECT `Json`.`id`, `Json`.`val`, `Json`.`timestamp`
FROM `default_catalog`.`default_database`.`Json` AS `Json`
=== UnmodifiedJsonData
ID:     default_catalog.default_database.UnmodifiedJsonData
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Json
Annotations:
 - stream-root: Json
 - sort: [0 ASC-nulls-first]
Primary Key: id
Timestamp  : -
Schema:
 - id: BIGINT NOT NULL
 - val: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - json_col: RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM=')
 - json_col_2: RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM=')
 - json_col_3: RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM=')
 - json_col_4: RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM=')
Plan:
LogicalProject(id=[$0], val=[$1], json_col=[TO_JSONB('{"a": 1}')], json_col_2=[TO_JSONB('{"a": 2}')], json_col_3=[TO_JSONB('{"b": 1}')], json_col_4=[TO_JSONB('{"b": 2}')])
  LogicalTableScan(table=[[default_catalog, default_database, Json]])
SQL: CREATE VIEW UnmodifiedJsonData AS  SELECT id,
                             val,
                             TO_JSONB('{"a": 1}') AS json_col,
                             TO_JSONB('{"a": 2}') AS json_col_2,
                             TO_JSONB('{"b": 1}') AS json_col_3,
                             TO_JSONB('{"b": 2}') AS json_col_4
                     FROM Json
                     ORDER BY id;

>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Json__schema` (
  `id` BIGINT NOT NULL,
  `val` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Json` (
  PRIMARY KEY (`id`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = '${DATA_PATH}/json.jsonl',
  'connector' = 'filesystem'
)
LIKE `Json__schema`;
CREATE VIEW `UnmodifiedJsonData`
AS
SELECT `id`, `val`, `TO_JSONB`('{"a": 1}') AS `json_col`, `TO_JSONB`('{"a": 2}') AS `json_col_2`, `TO_JSONB`('{"b": 1}') AS `json_col_3`, `TO_JSONB`('{"b": 2}') AS `json_col_4`
FROM `Json`;
CREATE VIEW `JsonArrayTest`
AS
SELECT `id`, `JSONB_ARRAY`(`id`, `json_col`) AS `json_array_string_function`, `JSONB_ARRAY`(`json_col`, `json_col_2`) AS `json_array_json_function`
FROM `UnmodifiedJsonData`;
CREATE VIEW `JsonConcatTest`
AS
SELECT `id`, `JSONB_CONCAT`(`json_col`, `json_col_2`) AS `json_concat_same_key_function`, `JSONB_CONCAT`(`json_col`, `json_col_3`) AS `json_concat_diff_key_function`
FROM `UnmodifiedJsonData`;
CREATE VIEW `JsonExistsTest`
AS
SELECT `id`, `JSONB_EXISTS`(`json_col`, '$.a') AS `json_exists_function`, `JSONB_EXISTS`(`json_col`, '$.nonExistentPath') AS `json_not_exists_function`
FROM `UnmodifiedJsonData`;
CREATE VIEW `JsonExtractTest`
AS
SELECT `id`, `JSONB_EXTRACT`(`json_col`, '$.a') AS `json_extract_function`, `JSONB_EXTRACT`(`json_col`, '$.nonExistentPath') AS `json_extract_not_exists_function`, `JSONB_EXTRACT`(`json_col`, '$.nonExistentPath', 'default') AS `json_extract_with_default_function`, `JSONB_EXTRACT`(`json_col`, '$.a', 100) AS `json_extract_with_default_int_function`
FROM `UnmodifiedJsonData`;
CREATE VIEW `JsonArrayAggTest`
AS
SELECT `val`, `JSONB_ARRAY_AGG`(`json_col`) AS `json_array_agg_function`
FROM `UnmodifiedJsonData`
GROUP BY `val`;
CREATE VIEW `JsonObjectAggTest`
AS
SELECT `val`, `jsonb_object_agg`('key', `json_col`) AS `json_object_agg_function`
FROM `UnmodifiedJsonData`
GROUP BY `val`;
CREATE VIEW `ToJsonTest`
AS
SELECT `id`, `TO_JSONB`(`json_col`) AS `to_json_function`
FROM `UnmodifiedJsonData`;
CREATE TABLE `Json_1` (
  `id` BIGINT NOT NULL,
  `val` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'Json',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `UnmodifiedJsonData_2` (
  `id` BIGINT NOT NULL,
  `val` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `json_col` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  `json_col_2` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  `json_col_3` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  `json_col_4` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'UnmodifiedJsonData',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`Json_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`Json`)
;
INSERT INTO `default_catalog`.`default_database`.`UnmodifiedJsonData_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`UnmodifiedJsonData`)
 ;
 END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres-schema.sql
CREATE TABLE IF NOT EXISTS "Json" ("id" BIGINT NOT NULL, "val" TEXT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id"));
CREATE TABLE IF NOT EXISTS "UnmodifiedJsonData" ("id" BIGINT NOT NULL, "val" TEXT NOT NULL, "json_col" JSONB , "json_col_2" JSONB , "json_col_3" JSONB , "json_col_4" JSONB  , PRIMARY KEY ("id"))
>>>postgres-views.sql

>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Json",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Json\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES",
            "modifiers" : [ ]
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "UnmodifiedJsonData",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM (SELECT \"id\", \"val\", \"json_col\", \"json_col_2\", \"json_col_3\", \"json_col_4\"\n  FROM \"UnmodifiedJsonData\"\n  ORDER BY \"id\" NULLS FIRST) AS \"t\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES",
            "modifiers" : [ ]
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "operations" : [
      {
        "function" : {
          "name" : "GetJson",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query Json($limit: Int = 10, $offset: Int = 0) {\nJson(limit: $limit, offset: $offset) {\nid\nval\ntimestamp\n}\n\n}",
          "queryName" : "Json",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/Json{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetUnmodifiedJsonData",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query UnmodifiedJsonData($limit: Int = 10, $offset: Int = 0) {\nUnmodifiedJsonData(limit: $limit, offset: $offset) {\nid\nval\njson_col\njson_col_2\njson_col_3\njson_col_4\n}\n\n}",
          "queryName" : "UnmodifiedJsonData",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/UnmodifiedJsonData{?offset,limit}"
      }
    ],
    "schema" : {
      "type" : "string",
      "schema" : "\"A slightly refined version of RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\n\"A JSON scalar\"\nscalar JSON\n\ntype Json {\n  id: GraphQLBigInteger!\n  val: String!\n  timestamp: DateTime!\n}\n\ntype Query {\n  Json(limit: Int = 10, offset: Int = 0): [Json!]\n  UnmodifiedJsonData(limit: Int = 10, offset: Int = 0): [UnmodifiedJsonData!]\n}\n\ntype UnmodifiedJsonData {\n  id: GraphQLBigInteger!\n  val: String!\n  json_col: JSON\n  json_col_2: JSON\n  json_col_3: JSON\n  json_col_4: JSON\n}\n\nenum _McpMethodType {\n  NONE\n  TOOL\n  RESOURCE\n}\n\nenum _RestMethodType {\n  NONE\n  GET\n  POST\n}\n\ndirective @api(mcp: _McpMethodType, rest: _RestMethodType, uri: String) on QUERY | MUTATION | FIELD_DEFINITION\n"
    }
  }
}
