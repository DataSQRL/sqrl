>>>pipeline_explain.txt
=== CombinedState
ID:     default_catalog.default_database.CombinedState
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
Plan:
LogicalUnion(all=[false])
  LogicalProject(customerid=[$1])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
  LogicalProject(customerid=[$0])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW CombinedState AS  SELECT o.customerid FROM Orders o UNION SELECT c.customerid FROM Customer c;

=== CombinedStream
ID:     default_catalog.default_database.CombinedStream
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: -
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
Plan:
LogicalUnion(all=[true])
  LogicalProject(customerid=[$1])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
  LogicalProject(customerid=[$0])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW CombinedStream AS  SELECT o.customerid FROM Orders o UNION ALL SELECT c.customerid FROM Customer c;

=== Customer
ID:     default_catalog.default_database.Customer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer__base
Annotations:
 - stream-root: Customer
Primary Key: customerid, lastUpdated
Timestamp  : _ingest_time
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - _ingest_time: TIMESTAMP_LTZ(3) *PROCTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], _ingest_time=[PROCTIME()])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `Customer__view`
AS
SELECT `Customer`.`customerid`, `Customer`.`email`, `Customer`.`name`, `Customer`.`lastUpdated`, `Customer`.`_ingest_time`
FROM `default_catalog`.`default_database`.`Customer` AS `Customer`
=== Orders
ID:     default_catalog.default_database.Orders
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Orders__base
Annotations:
 - features: DENORMALIZE (feature)
 - stream-root: Orders
Primary Key: id, time
Timestamp  : _ingest_time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
 - _ingest_time: TIMESTAMP_LTZ(3) *PROCTIME* NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], _ingest_time=[PROCTIME()])
  LogicalTableScan(table=[[default_catalog, default_database, Orders]])
SQL: CREATE VIEW `Orders__view`
AS
SELECT `Orders`.`id`, `Orders`.`customerid`, `Orders`.`time`, `Orders`.`entries`, `Orders`.`_ingest_time`
FROM `default_catalog`.`default_database`.`Orders` AS `Orders`
>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Customer__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Customer` (
  `_ingest_time` AS `PROCTIME`(),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'format' = 'json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Customer__schema`;
CREATE TEMPORARY TABLE `Orders__schema` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Orders` (
  `_ingest_time` AS `PROCTIME`(),
  PRIMARY KEY (`id`, `time`) NOT ENFORCED
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Orders__schema`;
CREATE VIEW `CombinedStream`
AS
SELECT `o`.`customerid`
FROM `Orders` AS `o`
UNION ALL
SELECT `c`.`customerid`
FROM `Customer` AS `c`;
CREATE VIEW `CombinedState`
AS
SELECT `o`.`customerid`
FROM `Orders` AS `o`
UNION
SELECT `c`.`customerid`
FROM `Customer` AS `c`;
CREATE TABLE `CombinedState_1` (
  `customerid` BIGINT NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'CombinedState_1',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `CombinedStream_2` (
  `customerid` BIGINT NOT NULL,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'CombinedStream_2',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `Customer_3` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'Customer_3',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `Orders_4` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`, `time`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'Orders_4',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`CombinedState_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`CombinedState`)
;
INSERT INTO `default_catalog`.`default_database`.`CombinedStream_2`
 (SELECT `customerid`, `hash_columns`(`customerid`) AS `__pk_hash`
  FROM `default_catalog`.`default_database`.`CombinedStream`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`Customer_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`Customer`)
  ;
  INSERT INTO `default_catalog`.`default_database`.`Orders_4`
   (SELECT `id`, `customerid`, `time`, `to_jsonb`(`entries`) AS `entries`, `_ingest_time`
    FROM `default_catalog`.`default_database`.`Orders`)
   ;
   END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "CombinedState_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"CombinedState_1\" (\"customerid\" BIGINT NOT NULL , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CombinedStream_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"CombinedStream_2\" (\"customerid\" BIGINT NOT NULL, \"__pk_hash\" TEXT  , PRIMARY KEY (\"__pk_hash\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "__pk_hash",
          "type" : "TEXT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "Customer_3",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Customer_3\" (\"customerid\" BIGINT NOT NULL, \"email\" TEXT , \"name\" TEXT NOT NULL, \"lastUpdated\" BIGINT NOT NULL, \"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"customerid\",\"lastUpdated\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : true
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "_ingest_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Orders_4",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Orders_4\" (\"id\" BIGINT NOT NULL, \"customerid\" BIGINT NOT NULL, \"time\" TIMESTAMP WITH TIME ZONE NOT NULL, \"entries\" JSONB , \"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"id\",\"time\"))",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        },
        {
          "name" : "_ingest_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CombinedState",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"CombinedState\"(\"customerid\") AS SELECT *\nFROM \"CombinedState_1\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CombinedStream",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"CombinedStream\"(\"customerid\") AS SELECT \"customerid\"\nFROM \"CombinedStream_2\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Customer",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Customer\"(\"customerid\", \"email\", \"name\", \"lastUpdated\", \"_ingest_time\") AS SELECT *\nFROM \"Customer_3\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : true
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "_ingest_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Orders",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Orders\"(\"id\", \"customerid\", \"time\", \"entries\", \"_ingest_time\") AS SELECT *\nFROM \"Orders_4\"",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        },
        {
          "name" : "_ingest_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CombinedState",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"CombinedState_1\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CombinedStream",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT \"customerid\"\nFROM \"CombinedStream_2\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Customer",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Customer_3\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Orders",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Orders_4\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "operations" : [
      {
        "function" : {
          "name" : "GetCombinedState",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query CombinedState($limit: Int = 10, $offset: Int = 0) {\nCombinedState(limit: $limit, offset: $offset) {\ncustomerid\n}\n\n}",
          "queryName" : "CombinedState",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/CombinedState{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetCombinedStream",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query CombinedStream($limit: Int = 10, $offset: Int = 0) {\nCombinedStream(limit: $limit, offset: $offset) {\ncustomerid\n}\n\n}",
          "queryName" : "CombinedStream",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/CombinedStream{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetCustomer",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query Customer($limit: Int = 10, $offset: Int = 0) {\nCustomer(limit: $limit, offset: $offset) {\ncustomerid\nemail\nname\nlastUpdated\n}\n\n}",
          "queryName" : "Customer",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/Customer{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrders",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query Orders($limit: Int = 10, $offset: Int = 0) {\nOrders(limit: $limit, offset: $offset) {\nid\ncustomerid\ntime\nentries {\nproductid\nquantity\nunit_price\ndiscount\n}\n}\n\n}",
          "queryName" : "Orders",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/Orders{?offset,limit}"
      }
    ],
    "schema" : {
      "type" : "string",
      "schema" : "type CombinedState {\n  customerid: Long!\n}\n\ntype CombinedStream {\n  customerid: Long!\n}\n\ntype Customer {\n  customerid: Long!\n  email: String\n  name: String!\n  lastUpdated: Long!\n}\n\n\"A slightly refined version of RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"A 64-bit signed integer\"\nscalar Long\n\ntype Orders {\n  id: Long!\n  customerid: Long!\n  time: DateTime!\n  entries: [Orders_entriesOutput]!\n}\n\ntype Orders_entriesOutput {\n  productid: Long!\n  quantity: Long!\n  unit_price: Float!\n  discount: Float\n}\n\ntype Query {\n  CombinedState(limit: Int = 10, offset: Int = 0): [CombinedState!]\n  CombinedStream(limit: Int = 10, offset: Int = 0): [CombinedStream!]\n  Customer(limit: Int = 10, offset: Int = 0): [Customer!]\n  Orders(limit: Int = 10, offset: Int = 0): [Orders!]\n}\n\nenum _McpMethodType {\n  NONE\n  TOOL\n  RESOURCE\n}\n\nenum _RestMethodType {\n  NONE\n  GET\n  POST\n}\n\ndirective @api(mcp: _McpMethodType, rest: _RestMethodType, uri: String) on QUERY | MUTATION | FIELD_DEFINITION\n"
    }
  }
}
