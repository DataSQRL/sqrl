>>>pipeline_explain.txt
=== lastHour
ID:     lasthour_1
Type:   stream
Stage:  flink
Inputs: observationgroup_2, patientlasthour_1
Primary Key: __pk1_groupId, __pk3_created
Timestamp  : __pk3_created
Schema:
 - __pk1_groupId: BIGINT NOT NULL
 - __pk3_created: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - maxTemp: DECIMAL(38, 6) NOT NULL
 - minTemp: DECIMAL(38, 6) NOT NULL
Plan:
LogicalProject(__pk1_groupId=[$0], __pk3_created=[$1], maxTemp=[$2], minTemp=[$3])
  LogicalAggregate(group=[{0, 2}], maxTemp=[MAX($7)], minTemp=[MIN($8)]) hints[TumbleAggregationHint options:[2, INSTANT, 2, 1, 0]]
    LogicalJoin(condition=[=($4, $5)], joinType=[inner]) hints[TemporalJoinHint options:[2]]
      LogicalCorrelate(correlation=[$cor3], joinType=[inner], requiredColumns=[{3}])
        LogicalTableScan(table=[[observationgroup_2]])
        LogicalTableFunctionScan(invocation=[ObservationGroup.patients($cor3.patients)], rowType=[RecordType(BIGINT patientId)], elementType=[class [Ljava.lang.Object;])
      LogicalFilter(condition=[=($5, 1)]) hints[DedupHint]
        LogicalProject(patientid=[$0], avgTemp=[$1], maxTemp=[$2], minTemp=[$3], _timeMin=[$4], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
          LogicalTableScan(table=[[patientlasthour_1]])

=== ObservationGroup
ID:     observationgroup_2
Type:   stream
Stage:  flink
Primary Key: groupId, created
Timestamp  : created
Schema:
 - groupId: BIGINT NOT NULL
 - groupName: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - created: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - patients: RecordType(BIGINT NOT NULL patientId) NOT NULL ARRAY NOT NULL
Plan:
LogicalTableScan(table=[[observationgroup_1]])

=== PatientHourly
ID:     patienthourly_1
Type:   stream
Stage:  flink
Inputs: sensors_3, smoothreading_1
Primary Key: patientid, timeHour
Timestamp  : timeHour
Schema:
 - patientid: BIGINT NOT NULL
 - timeHour: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - avgTemp: DECIMAL(38, 6) NOT NULL
 - maxTemp: DECIMAL(38, 6) NOT NULL
 - minTemp: DECIMAL(38, 6) NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], avgTemp=[AVG($2)], maxTemp=[MAX($2)], minTemp=[MIN($2)]) hints[TumbleAggregationHint options:[1, FUNCTION, 4, 3600000, 0]]
  LogicalProject(patientid=[$5], timeHour=[endOfHour($1)], smoothTemp=[$2], sensorid=[$0], timeMin=[$1])
    LogicalJoin(condition=[=($4, $3)], joinType=[inner]) hints[TemporalJoinHint options:[1]]
      LogicalProject(sensorid=[$0], timeMin=[$1], smoothTemp=[$2], sensorid3=[$0])
        LogicalTableScan(table=[[smoothreading_1]])
      LogicalFilter(condition=[=($4, 1)]) hints[DedupHint]
        LogicalProject(id=[$0], patientid=[$1], placed=[$2], placedTimestamp=[$3], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS FIRST)])
          LogicalTableScan(table=[[sensors_3]])

=== PatientLastHour
ID:     patientlasthour_1
Type:   state
Stage:  flink
Inputs: sensors_3, smoothreading_1
Primary Key: patientid
Timestamp  : _timeMin
Schema:
 - patientid: BIGINT NOT NULL
 - avgTemp: DECIMAL(38, 6) NOT NULL
 - maxTemp: DECIMAL(38, 6) NOT NULL
 - minTemp: DECIMAL(38, 6) NOT NULL
 - _timeMin: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=patientid limit=1 sort=#4: _timeMin TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalProject(patientid=[$1], avgTemp=[$2], maxTemp=[$3], minTemp=[$4], _timeMin=[$0])
  LogicalAggregate(group=[{1, 5}], avgTemp=[AVG($2)], maxTemp=[MAX($2)], minTemp=[MIN($2)]) hints[SlidingAggregationHint options:[1, 3600000, 72000]]
    LogicalJoin(condition=[=($4, $3)], joinType=[inner]) hints[TemporalJoinHint options:[1]]
      LogicalProject(sensorid=[$0], timeMin=[$1], smoothTemp=[$2], sensorid3=[$0])
        LogicalTableScan(table=[[smoothreading_1]])
      LogicalFilter(condition=[=($4, 1)]) hints[DedupHint]
        LogicalProject(id=[$0], patientid=[$1], placed=[$2], placedTimestamp=[$3], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS FIRST)])
          LogicalTableScan(table=[[sensors_3]])

=== SensorReading
ID:     sensorreading_2
Type:   stream
Stage:  flink
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - sensorid: BIGINT NOT NULL
 - temperature: DECIMAL(10, 5) NOT NULL
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[sensorreading_1]])

=== Sensors
ID:     sensors_2
Type:   stream
Stage:  flink
Primary Key: id, placed
Timestamp  : placedTimestamp
Schema:
 - id: BIGINT NOT NULL
 - patientid: BIGINT NOT NULL
 - placed: BIGINT NOT NULL
 - placedTimestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[sensors_1]])

=== Sensors
ID:     sensors_3
Type:   state
Stage:  flink
Inputs: sensors_2
Primary Key: id
Timestamp  : placedTimestamp
Schema:
 - id: BIGINT NOT NULL
 - patientid: BIGINT NOT NULL
 - placed: BIGINT NOT NULL
 - placedTimestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=id limit=1 sort=#3: placedTimestamp TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC 
Plan:
LogicalTableScan(table=[[sensors_2]])

=== SmoothReading
ID:     smoothreading_1
Type:   stream
Stage:  flink
Inputs: sensorreading_2
Primary Key: sensorid, timeMin
Timestamp  : timeMin
Schema:
 - sensorid: BIGINT NOT NULL
 - timeMin: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - smoothTemp: DECIMAL(38, 6) NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], smoothTemp=[AVG($2)]) hints[TumbleAggregationHint options:[1, FUNCTION, 4, 60000, 0]]
  LogicalProject(sensorid=[$0], timeMin=[endOfMinute($3)], temperature=[$1], _uuid=[$2], event_time=[$3])
    LogicalTableScan(table=[[sensorreading_2]])

=== TempAlert
ID:     tempalert_1
Type:   stream
Stage:  flink
Inputs: sensors_3, smoothreading_1
Primary Key: sensorid, timeMin
Timestamp  : timeMin
Schema:
 - patientid: BIGINT NOT NULL
 - sensorid: BIGINT NOT NULL
 - smoothTemp: DECIMAL(38, 6) NOT NULL
 - timeMin: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(patientid=[$5], sensorid=[$0], smoothTemp=[$2], timeMin=[$1])
  LogicalJoin(condition=[=($4, $3)], joinType=[inner]) hints[TemporalJoinHint options:[1]]
    LogicalProject(sensorid=[$0], timeMin=[$1], smoothTemp=[$2], sensorid3=[$0])
      LogicalFilter(condition=[SEARCH($2, Sarg[(-∞..95), (102..+∞)])])
        LogicalTableScan(table=[[smoothreading_1]])
    LogicalFilter(condition=[=($4, 1)]) hints[DedupHint]
      LogicalProject(id=[$0], patientid=[$1], placed=[$2], placedTimestamp=[$3], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS FIRST)])
        LogicalTableScan(table=[[sensors_3]])

=== print.tempWarning
ID:     tempalert_1_1
Type:   export
Stage:  flink
Inputs: tempalert_1

=== kafka.TempAlert
ID:     tempalert_1_2
Type:   export
Stage:  flink
Inputs: tempalert_1

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptostring` AS 'com.datasqrl.time.TimestampToString' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofmonth` AS 'com.datasqrl.time.EndOfMonth' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptoepochmilli` AS 'com.datasqrl.time.TimestampToEpochMilli' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofweek` AS 'com.datasqrl.time.EndOfWeek' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `parsetimestamp` AS 'com.datasqrl.time.ParseTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochmillitotimestamp` AS 'com.datasqrl.time.EpochMilliToTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `ToJson` AS 'com.datasqrl.json.ToJson' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofminute` AS 'com.datasqrl.time.EndOfMinute' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptoepoch` AS 'com.datasqrl.time.TimestampToEpoch' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofsecond` AS 'com.datasqrl.time.EndOfSecond' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochtotimestamp` AS 'com.datasqrl.time.EpochToTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `atzone` AS 'com.datasqrl.time.AtZone' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofday` AS 'com.datasqrl.time.EndOfDay' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofhour` AS 'com.datasqrl.time.EndOfHour' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofyear` AS 'com.datasqrl.time.EndOfYear' LANGUAGE JAVA;",
    "CREATE TEMPORARY TABLE `sensorreading_1` (\n  `sensorid` BIGINT NOT NULL,\n  `temperature` DECIMAL(10, 5) NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL METADATA FROM 'timestamp',\n  WATERMARK FOR `event_time` AS `event_time` - INTERVAL '0.0' SECOND\n) WITH (\n  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',\n  'properties.auto.offset.reset' = 'earliest',\n  'connector' = 'kafka',\n  'format' = 'flexible-json',\n  'properties.group.id' = '${PROPERTIES_GROUP_ID}',\n  'topic' = 'patient-sensor-addreading',\n  'scan.startup.mode' = 'group-offsets'\n);",
    "CREATE TEMPORARY TABLE `observationgroup_1` (\n  `groupId` BIGINT NOT NULL,\n  `groupName` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `created` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `patients` ROW(`patientId` BIGINT NOT NULL) NOT NULL ARRAY NOT NULL,\n  PRIMARY KEY (`groupId`, `created`) NOT ENFORCED,\n  WATERMARK FOR `created` AS `created` - INTERVAL '0.001' SECOND\n) WITH (\n  'format' = 'json',\n  'path' = '/mnt/build/data',\n  'connector' = 'filesystem',\n  'source.path.regex-pattern' = 'to be determined'\n);",
    "CREATE TEMPORARY TABLE `sensors_1` (\n  `id` BIGINT NOT NULL,\n  `patientid` BIGINT NOT NULL,\n  `placed` BIGINT NOT NULL,\n  `placedTimestamp` AS EPOCHMILLITOTIMESTAMP(`placed`),\n  PRIMARY KEY (`id`, `placed`) NOT ENFORCED,\n  WATERMARK FOR `placedTimestamp` AS `placedTimestamp` - INTERVAL '0.001' SECOND\n) WITH (\n  'format' = 'json',\n  'path' = '/mnt/build/data',\n  'connector' = 'filesystem'\n);",
    "CREATE TEMPORARY TABLE `lasthour_1` (\n  `__pk1_groupId` BIGINT NOT NULL,\n  `__pk3_created` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `maxTemp` DECIMAL(38, 6) NOT NULL,\n  `minTemp` DECIMAL(38, 6) NOT NULL,\n  PRIMARY KEY (`__pk1_groupId`, `__pk3_created`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'lasthour_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `observationgroup_2` (\n  `groupId` BIGINT NOT NULL,\n  `groupName` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `created` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `patients` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),\n  PRIMARY KEY (`groupId`, `created`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'observationgroup_2',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `patienthourly_1` (\n  `patientid` BIGINT NOT NULL,\n  `timeHour` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `avgTemp` DECIMAL(38, 6) NOT NULL,\n  `maxTemp` DECIMAL(38, 6) NOT NULL,\n  `minTemp` DECIMAL(38, 6) NOT NULL,\n  PRIMARY KEY (`patientid`, `timeHour`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'patienthourly_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `patientlasthour_1` (\n  `patientid` BIGINT NOT NULL,\n  `avgTemp` DECIMAL(38, 6) NOT NULL,\n  `maxTemp` DECIMAL(38, 6) NOT NULL,\n  `minTemp` DECIMAL(38, 6) NOT NULL,\n  `_timeMin` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`patientid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'patientlasthour_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `tempalert_1_1` (\n  `patientid` BIGINT NOT NULL,\n  `sensorid` BIGINT NOT NULL,\n  `smoothTemp` DECIMAL(38, 6) NOT NULL,\n  `timeMin` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\n) WITH (\n  'connector' = 'print',\n  'print-identifier' = 'tempWarning'\n);",
    "CREATE TEMPORARY TABLE `tempalert_1_2` (\n  `patientid` BIGINT NOT NULL,\n  `sensorid` BIGINT NOT NULL,\n  `smoothTemp` DECIMAL(38, 6) NOT NULL,\n  `timeMin` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\n) WITH (\n  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',\n  'properties.auto.offset.reset' = 'earliest',\n  'connector' = 'kafka',\n  'format' = 'flexible-json',\n  'properties.group.id' = '${PROPERTIES_GROUP_ID}',\n  'topic' = 'tempalert_1',\n  'scan.startup.mode' = 'group-offsets'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT *\nFROM (SELECT `id`, `patientid`, `placed`, `placedTimestamp`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `placedTimestamp` DESC) AS `_rownum`\n  FROM `sensors_1`) AS `t`\nWHERE `_rownum` = 1;",
    "CREATE VIEW `table$2`\nAS\nSELECT `sensorid`, ENDOFMINUTE(`event_time`) AS `timeMin`, `temperature`, `_uuid`, `event_time`\nFROM `sensorreading_1`;",
    "CREATE VIEW `table$3`\nAS\nSELECT *\nFROM (SELECT `sensorid`, `window_time` AS `timeMin`, AVG(`temperature`) AS `smoothTemp`, `sensorid` AS `sensorid3`\n  FROM TABLE(TUMBLE(TABLE `table$2`, DESCRIPTOR(`event_time`), INTERVAL '60' SECOND(5), INTERVAL '0' SECOND(1))) AS `t2`\n  GROUP BY `sensorid`, `window_start`, `window_end`, `window_time`) AS `$cor5`\n INNER JOIN `table$1` FOR SYSTEM_TIME AS OF `$cor5`.`timeMin` AS `t0` ON `t0`.`id` = `$cor5`.`sensorid3`;",
    "CREATE VIEW `table$4`\nAS\nSELECT *\nFROM (SELECT `patientid`, `avgTemp`, `maxTemp`, `minTemp`, `_timeMin`, ROW_NUMBER() OVER (PARTITION BY `patientid` ORDER BY `_timeMin` DESC NULLS LAST) AS `_rownum`\n  FROM (SELECT `patientid`, AVG(`smoothTemp`) AS `avgTemp`, MAX(`smoothTemp`) AS `maxTemp`, MIN(`smoothTemp`) AS `minTemp`, `window_time` AS `_timeMin`\n    FROM TABLE(HOP(TABLE `table$3`, DESCRIPTOR(`timeMin`), INTERVAL '72' SECOND(5), INTERVAL '3600' SECOND(7))) AS `t6`\n    GROUP BY `patientid`, `window_start`, `window_end`, `window_time`) AS `t9`) AS `t10`\nWHERE `_rownum` = 1;",
    "CREATE VIEW `table$5`\nAS\nSELECT *\nFROM (SELECT *\n  FROM `observationgroup_1` AS `$cor3`,\n   UNNEST(`$cor3`.`patients`) AS `t130` (`patientId`)) AS `$cor4`\n INNER JOIN `table$4` FOR SYSTEM_TIME AS OF `$cor4`.`created` AS `t11` ON `$cor4`.`patientId` = `t11`.`patientid`;",
    "CREATE VIEW `table$6`\nAS\nSELECT `groupId` AS `__pk1_groupId`, `window_time` AS `__pk3_created`, MAX(`maxTemp`) AS `maxTemp`, MIN(`minTemp`) AS `minTemp`\nFROM TABLE(TUMBLE(TABLE `table$5`, DESCRIPTOR(`created`), INTERVAL '0.001' SECOND(1))) AS `t15`\nGROUP BY `groupId`, `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$7`\nAS\nSELECT `groupId`, `groupName`, `created`, TOJSON(`patients`) AS `patients`\nFROM `observationgroup_1`;",
    "CREATE VIEW `table$8`\nAS\nSELECT *\nFROM (SELECT `id`, `patientid`, `placed`, `placedTimestamp`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `placedTimestamp` DESC) AS `_rownum`\n  FROM `sensors_1`) AS `t`\nWHERE `_rownum` = 1;",
    "CREATE VIEW `table$9`\nAS\nSELECT `sensorid`, ENDOFMINUTE(`event_time`) AS `timeMin`, `temperature`, `_uuid`, `event_time`\nFROM `sensorreading_1`;",
    "CREATE VIEW `table$10`\nAS\nSELECT `t0`.`patientid`, ENDOFHOUR(`$cor7`.`timeMin`) AS `timeHour`, `$cor7`.`smoothTemp`, `$cor7`.`sensorid`, `$cor7`.`timeMin`\nFROM (SELECT `sensorid`, `window_time` AS `timeMin`, AVG(`temperature`) AS `smoothTemp`, `sensorid` AS `sensorid3`\n  FROM TABLE(TUMBLE(TABLE `table$9`, DESCRIPTOR(`event_time`), INTERVAL '60' SECOND(5), INTERVAL '0' SECOND(1))) AS `t2`\n  GROUP BY `sensorid`, `window_start`, `window_end`, `window_time`) AS `$cor7`\n INNER JOIN `table$8` FOR SYSTEM_TIME AS OF `$cor7`.`timeMin` AS `t0` ON `t0`.`id` = `$cor7`.`sensorid3`;",
    "CREATE VIEW `table$11`\nAS\nSELECT `patientid`, `window_time` AS `timeHour`, AVG(`smoothTemp`) AS `avgTemp`, MAX(`smoothTemp`) AS `maxTemp`, MIN(`smoothTemp`) AS `minTemp`\nFROM TABLE(TUMBLE(TABLE `table$10`, DESCRIPTOR(`timeMin`), INTERVAL '3600' SECOND(7), INTERVAL '0' SECOND(1))) AS `t7`\nGROUP BY `patientid`, `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$12`\nAS\nSELECT *\nFROM (SELECT `id`, `patientid`, `placed`, `placedTimestamp`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `placedTimestamp` DESC) AS `_rownum`\n  FROM `sensors_1`) AS `t`\nWHERE `_rownum` = 1;",
    "CREATE VIEW `table$13`\nAS\nSELECT `sensorid`, ENDOFMINUTE(`event_time`) AS `timeMin`, `temperature`, `_uuid`, `event_time`\nFROM `sensorreading_1`;",
    "CREATE VIEW `table$14`\nAS\nSELECT *\nFROM (SELECT `sensorid`, `window_time` AS `timeMin`, AVG(`temperature`) AS `smoothTemp`, `sensorid` AS `sensorid3`\n  FROM TABLE(TUMBLE(TABLE `table$13`, DESCRIPTOR(`event_time`), INTERVAL '60' SECOND(5), INTERVAL '0' SECOND(1))) AS `t2`\n  GROUP BY `sensorid`, `window_start`, `window_end`, `window_time`) AS `$cor9`\n INNER JOIN `table$12` FOR SYSTEM_TIME AS OF `$cor9`.`timeMin` AS `t0` ON `t0`.`id` = `$cor9`.`sensorid3`;",
    "CREATE VIEW `table$15`\nAS\nSELECT `patientid`, AVG(`smoothTemp`) AS `avgTemp`, MAX(`smoothTemp`) AS `maxTemp`, MIN(`smoothTemp`) AS `minTemp`, `window_time` AS `_timeMin`\nFROM TABLE(HOP(TABLE `table$14`, DESCRIPTOR(`timeMin`), INTERVAL '72' SECOND(5), INTERVAL '3600' SECOND(7))) AS `t6`\nGROUP BY `patientid`, `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$16`\nAS\nSELECT *\nFROM (SELECT `id`, `patientid`, `placed`, `placedTimestamp`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `placedTimestamp` DESC) AS `_rownum`\n  FROM `sensors_1`) AS `t`\nWHERE `_rownum` = 1;",
    "CREATE VIEW `table$17`\nAS\nSELECT `sensorid`, ENDOFMINUTE(`event_time`) AS `timeMin`, `temperature`, `_uuid`, `event_time`\nFROM `sensorreading_1`;",
    "CREATE VIEW `table$18`\nAS\nSELECT `t0`.`patientid`, `$cor11`.`sensorid`, `$cor11`.`smoothTemp`, `$cor11`.`timeMin`\nFROM (SELECT `sensorid`, `timeMin`, `smoothTemp`, `sensorid` AS `sensorid3`\n  FROM (SELECT `sensorid`, `window_time` AS `timeMin`, AVG(`temperature`) AS `smoothTemp`\n    FROM TABLE(TUMBLE(TABLE `table$17`, DESCRIPTOR(`event_time`), INTERVAL '60' SECOND(5), INTERVAL '0' SECOND(1))) AS `t2`\n    GROUP BY `sensorid`, `window_start`, `window_end`, `window_time`) AS `t4`\n  WHERE `smoothTemp` < 95 OR `smoothTemp` > 102) AS `$cor11`\n INNER JOIN `table$16` FOR SYSTEM_TIME AS OF `$cor11`.`timeMin` AS `t0` ON `t0`.`id` = `$cor11`.`sensorid3`;",
    "CREATE VIEW `table$19`\nAS\nSELECT *\nFROM (SELECT `id`, `patientid`, `placed`, `placedTimestamp`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `placedTimestamp` DESC) AS `_rownum`\n  FROM `sensors_1`) AS `t`\nWHERE `_rownum` = 1;",
    "CREATE VIEW `table$20`\nAS\nSELECT `sensorid`, ENDOFMINUTE(`event_time`) AS `timeMin`, `temperature`, `_uuid`, `event_time`\nFROM `sensorreading_1`;",
    "CREATE VIEW `table$21`\nAS\nSELECT `t0`.`patientid`, `$cor12`.`sensorid`, `$cor12`.`smoothTemp`, `$cor12`.`timeMin`\nFROM (SELECT `sensorid`, `timeMin`, `smoothTemp`, `sensorid` AS `sensorid3`\n  FROM (SELECT `sensorid`, `window_time` AS `timeMin`, AVG(`temperature`) AS `smoothTemp`\n    FROM TABLE(TUMBLE(TABLE `table$20`, DESCRIPTOR(`event_time`), INTERVAL '60' SECOND(5), INTERVAL '0' SECOND(1))) AS `t2`\n    GROUP BY `sensorid`, `window_start`, `window_end`, `window_time`) AS `t4`\n  WHERE `smoothTemp` < 95 OR `smoothTemp` > 102) AS `$cor12`\n INNER JOIN `table$19` FOR SYSTEM_TIME AS OF `$cor12`.`timeMin` AS `t0` ON `t0`.`id` = `$cor12`.`sensorid3`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `lasthour_1`\n(SELECT *\n FROM `table$6`)\n;\nINSERT INTO `observationgroup_2`\n (SELECT *\n  FROM `table$7`)\n ;\n INSERT INTO `patienthourly_1`\n  (SELECT *\n   FROM `table$11`)\n  ;\n  INSERT INTO `patientlasthour_1`\n   (SELECT *\n    FROM `table$15`)\n   ;\n   INSERT INTO `tempalert_1_1`\n    (SELECT *\n     FROM `table$18`)\n    ;\n    INSERT INTO `tempalert_1_2`\n     (SELECT *\n      FROM `table$21`)\n     ;\n     END;"
  ],
  "connectors" : [
    "print",
    "jdbc-sqrl",
    "kafka",
    "filesystem"
  ],
  "formats" : [
    "flexible-json",
    "json"
  ],
  "compliedPlan" : "{\n  \"flinkVersion\" : \"1.19\",\n  \"nodes\" : [ {\n    \"id\" : 189,\n    \"type\" : \"stream-exec-table-source-scan_1\",\n    \"scanTableSource\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`observationgroup_1`\"\n      }\n    },\n    \"outputType\" : \"ROW<`groupId` BIGINT NOT NULL, `groupName` VARCHAR(2147483647) NOT NULL, `created` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL, `patients` ARRAY<ROW<`patientId` BIGINT NOT NULL> NOT NULL> NOT NULL>\",\n    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, observationgroup_1]], fields=[groupId, groupName, created, patients])\",\n    \"inputProperties\" : [ ]\n  }, {\n    \"id\" : 190,\n    \"type\" : \"stream-exec-watermark-assigner_1\",\n    \"watermarkExpr\" : {\n      \"kind\" : \"CALL\",\n      \"syntax\" : \"BINARY\",\n      \"internalName\" : \"$-$1\",\n      \"operands\" : [ {\n        \"kind\" : \"INPUT_REF\",\n        \"inputIndex\" : 2,\n        \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n      }, {\n        \"kind\" : \"LITERAL\",\n        \"value\" : \"1\",\n        \"type\" : \"INTERVAL SECOND(6) NOT NULL\"\n      } ],\n      \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n    },\n    \"rowtimeFieldIndex\" : 2,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"groupId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"groupName\",\n        \"fieldType\" : \"VARCHAR(2147483647) NOT NULL\"\n      }, {\n        \"name\" : \"created\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"patients\",\n        \"fieldType\" : \"ARRAY<ROW<`patientId` BIGINT NOT NULL> NOT NULL> NOT NULL\"\n      } ]\n    },\n    \"description\" : \"WatermarkAssigner(rowtime=[created], watermark=[(created - 1:INTERVAL SECOND)])\"\n  }, {\n    \"id\" : 191,\n    \"type\" : \"stream-exec-correlate_1\",\n    \"joinType\" : \"INNER\",\n    \"functionCall\" : {\n      \"kind\" : \"CALL\",\n      \"internalName\" : \"$UNNEST_ROWS$1\",\n      \"operands\" : [ {\n        \"kind\" : \"FIELD_ACCESS\",\n        \"name\" : \"patients\",\n        \"expr\" : {\n          \"kind\" : \"CORREL_VARIABLE\",\n          \"correl\" : \"$cor14\",\n          \"type\" : {\n            \"type\" : \"ROW\",\n            \"nullable\" : false,\n            \"fields\" : [ {\n              \"name\" : \"groupId\",\n              \"fieldType\" : \"BIGINT NOT NULL\"\n            }, {\n              \"name\" : \"groupName\",\n              \"fieldType\" : \"VARCHAR(2147483647) NOT NULL\"\n            }, {\n              \"name\" : \"created\",\n              \"fieldType\" : {\n                \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n                \"nullable\" : false,\n                \"precision\" : 3,\n                \"kind\" : \"ROWTIME\"\n              }\n            }, {\n              \"name\" : \"patients\",\n              \"fieldType\" : \"ARRAY<ROW<`patientId` BIGINT NOT NULL> NOT NULL> NOT NULL\"\n            }, {\n              \"name\" : \"patientId\",\n              \"fieldType\" : \"BIGINT NOT NULL\"\n            } ]\n          }\n        }\n      } ],\n      \"type\" : \"ROW<`patientId` BIGINT NOT NULL> NOT NULL\"\n    },\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"groupId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"groupName\",\n        \"fieldType\" : \"VARCHAR(2147483647) NOT NULL\"\n      }, {\n        \"name\" : \"created\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"patients\",\n        \"fieldType\" : \"ARRAY<ROW<`patientId` BIGINT NOT NULL> NOT NULL> NOT NULL\"\n      }, {\n        \"name\" : \"patientId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Correlate(invocation=[$UNNEST_ROWS$1($cor14.patients)], correlate=[table($UNNEST_ROWS$1($cor14.patients))], select=[groupId,groupName,created,patients,patientId], rowType=[RecordType(BIGINT groupId, VARCHAR(2147483647) groupName, TIMESTAMP_LTZ(3) *ROWTIME* created, RecordType:peek_no_expand(BIGINT patientId) ARRAY patients, BIGINT patientId)], joinType=[INNER])\"\n  }, {\n    \"id\" : 192,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 2,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : \"BIGINT NOT NULL\"\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"groupId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"created\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"patientId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Calc(select=[groupId, created, patientId])\"\n  }, {\n    \"id\" : 193,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 2 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"groupId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"created\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"patientId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Exchange(distribution=[hash[patientId]])\"\n  }, {\n    \"id\" : 194,\n    \"type\" : \"stream-exec-table-source-scan_1\",\n    \"scanTableSource\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`sensorreading_1`\"\n      }\n    },\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `temperature` DECIMAL(10, 5) NOT NULL, `_uuid` VARCHAR(2147483647) NOT NULL, `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>\",\n    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, sensorreading_1]], fields=[sensorid, temperature, _uuid, event_time])\",\n    \"inputProperties\" : [ ]\n  }, {\n    \"id\" : 195,\n    \"type\" : \"stream-exec-watermark-assigner_1\",\n    \"watermarkExpr\" : {\n      \"kind\" : \"CALL\",\n      \"syntax\" : \"BINARY\",\n      \"internalName\" : \"$-$1\",\n      \"operands\" : [ {\n        \"kind\" : \"INPUT_REF\",\n        \"inputIndex\" : 3,\n        \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n      }, {\n        \"kind\" : \"LITERAL\",\n        \"value\" : \"0\",\n        \"type\" : \"INTERVAL SECOND(6) NOT NULL\"\n      } ],\n      \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n    },\n    \"rowtimeFieldIndex\" : 3,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DECIMAL(10, 5) NOT NULL\"\n      }, {\n        \"name\" : \"_uuid\",\n        \"fieldType\" : \"VARCHAR(2147483647) NOT NULL\"\n      }, {\n        \"name\" : \"event_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"WatermarkAssigner(rowtime=[event_time], watermark=[(event_time - 0:INTERVAL SECOND)])\"\n  }, {\n    \"id\" : 196,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DECIMAL(10, 5) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 3,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DECIMAL(10, 5) NOT NULL\"\n      }, {\n        \"name\" : \"event_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[sensorid, temperature, event_time])\"\n  }, {\n    \"id\" : 197,\n    \"type\" : \"stream-exec-local-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"smoothTemp\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"TimeAttribute\",\n      \"window\" : {\n        \"type\" : \"TumblingWindow\",\n        \"size\" : \"PT1M\",\n        \"offset\" : \"PT0S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"timeAttributeIndex\" : 2,\n      \"isRowtime\" : true\n    },\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `sum$0` DECIMAL(38, 5), `count$1` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"LocalWindowAggregate(groupBy=[sensorid], window=[TUMBLE(time_col=[event_time], size=[1 min], offset=[0 ms])], select=[sensorid, AVG(temperature) AS (sum$0, count$1), slice_end('w$) AS $slice_end])\"\n  }, {\n    \"id\" : 198,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `sum$0` DECIMAL(38, 5), `count$1` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"Exchange(distribution=[hash[sensorid]])\"\n  }, {\n    \"id\" : 199,\n    \"type\" : \"stream-exec-global-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"smoothTemp\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"SliceAttached\",\n      \"window\" : {\n        \"type\" : \"TumblingWindow\",\n        \"size\" : \"PT1M\",\n        \"offset\" : \"PT0S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"sliceEnd\" : 3,\n      \"isRowtime\" : true\n    },\n    \"namedWindowProperties\" : [ {\n      \"name\" : \"window_start\",\n      \"property\" : {\n        \"kind\" : \"WindowStart\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_end\",\n      \"property\" : {\n        \"kind\" : \"WindowEnd\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_time\",\n      \"property\" : {\n        \"kind\" : \"Rowtime\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    } ],\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"localAggInputRowType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DECIMAL(10, 5) NOT NULL\"\n      }, {\n        \"name\" : \"event_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"smoothTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"window_start\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_end\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"GlobalWindowAggregate(groupBy=[sensorid], window=[TUMBLE(slice_end=[$slice_end], size=[1 min], offset=[0 ms])], select=[sensorid, AVG((sum$0, count$1)) AS smoothTemp, start('w$) AS window_start, end('w$) AS window_end, rowtime('w$) AS window_time])\"\n  }, {\n    \"id\" : 200,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"smoothTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"sensorid3\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Calc(select=[window_time AS timeMin, smoothTemp, sensorid3])\"\n  }, {\n    \"id\" : 201,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 2 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"smoothTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"sensorid3\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Exchange(distribution=[hash[sensorid3]])\"\n  }, {\n    \"id\" : 202,\n    \"type\" : \"stream-exec-table-source-scan_1\",\n    \"scanTableSource\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`sensors_1`\"\n      }\n    },\n    \"outputType\" : \"ROW<`id` BIGINT NOT NULL, `patientid` BIGINT NOT NULL, `placed` BIGINT NOT NULL, `placedTimestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>\",\n    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, sensors_1]], fields=[id, patientid, placed, placedTimestamp])\",\n    \"inputProperties\" : [ ]\n  }, {\n    \"id\" : 203,\n    \"type\" : \"stream-exec-watermark-assigner_1\",\n    \"watermarkExpr\" : {\n      \"kind\" : \"CALL\",\n      \"syntax\" : \"BINARY\",\n      \"internalName\" : \"$-$1\",\n      \"operands\" : [ {\n        \"kind\" : \"INPUT_REF\",\n        \"inputIndex\" : 3,\n        \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n      }, {\n        \"kind\" : \"LITERAL\",\n        \"value\" : \"1\",\n        \"type\" : \"INTERVAL SECOND(6) NOT NULL\"\n      } ],\n      \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n    },\n    \"rowtimeFieldIndex\" : 3,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placed\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placedTimestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"WatermarkAssigner(rowtime=[placedTimestamp], watermark=[(placedTimestamp - 1:INTERVAL SECOND)])\"\n  }, {\n    \"id\" : 204,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placed\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placedTimestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Exchange(distribution=[hash[id]])\"\n  }, {\n    \"id\" : 205,\n    \"type\" : \"stream-exec-deduplicate_1\",\n    \"configuration\" : {\n      \"table.exec.deduplicate.insert-update-after-sensitive-enabled\" : \"true\",\n      \"table.exec.deduplicate.mini-batch.compact-changes-enabled\" : \"false\",\n      \"table.exec.mini-batch.enabled\" : \"false\",\n      \"table.exec.mini-batch.size\" : \"-1\"\n    },\n    \"uniqueKeys\" : [ 0 ],\n    \"isRowtime\" : true,\n    \"keepLastRow\" : true,\n    \"generateUpdateBefore\" : false,\n    \"state\" : [ {\n      \"index\" : 0,\n      \"ttl\" : \"0 ms\",\n      \"name\" : \"deduplicateState\"\n    } ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placed\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placedTimestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Deduplicate(keep=[LastRow], key=[id], order=[ROWTIME])\"\n  }, {\n    \"id\" : 206,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 3,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placedTimestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[id, patientid, placedTimestamp])\"\n  }, {\n    \"id\" : 207,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placedTimestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Exchange(distribution=[hash[id]])\"\n  }, {\n    \"id\" : 208,\n    \"type\" : \"stream-exec-temporal-join_1\",\n    \"joinSpec\" : {\n      \"joinType\" : \"INNER\",\n      \"leftKeys\" : [ 2 ],\n      \"rightKeys\" : [ 0 ],\n      \"filterNulls\" : [ true ],\n      \"nonEquiCondition\" : null\n    },\n    \"isTemporalFunctionJoin\" : false,\n    \"leftTimeAttributeIndex\" : 0,\n    \"rightTimeAttributeIndex\" : 2,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    }, {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"smoothTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"sensorid3\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placedTimestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"TemporalJoin(joinType=[InnerJoin], where=[((id = sensorid3) AND __TEMPORAL_JOIN_CONDITION(timeMin, placedTimestamp, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(id), __TEMPORAL_JOIN_LEFT_KEY(sensorid3), __TEMPORAL_JOIN_RIGHT_KEY(id)))], select=[timeMin, smoothTemp, sensorid3, id, patientid, placedTimestamp])\"\n  }, {\n    \"id\" : 209,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"smoothTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[patientid, smoothTemp, timeMin])\"\n  }, {\n    \"id\" : 210,\n    \"type\" : \"stream-exec-local-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"avgTemp\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"name\" : \"maxTemp\",\n      \"internalName\" : \"$MAX$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"name\" : \"minTemp\",\n      \"internalName\" : \"$MIN$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"TimeAttribute\",\n      \"window\" : {\n        \"type\" : \"HoppingWindow\",\n        \"size\" : \"PT1H\",\n        \"slide\" : \"PT1M12S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"timeAttributeIndex\" : 2,\n      \"isRowtime\" : true\n    },\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`patientid` BIGINT NOT NULL, `sum$0` DECIMAL(38, 6), `count$1` BIGINT, `max$2` DECIMAL(38, 6), `min$3` DECIMAL(38, 6), `count1$4` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"LocalWindowAggregate(groupBy=[patientid], window=[HOP(time_col=[timeMin], size=[1 h], slide=[72 s])], select=[patientid, AVG(smoothTemp) AS (sum$0, count$1), MAX(smoothTemp) AS max$2, MIN(smoothTemp) AS min$3, COUNT(*) AS count1$4, slice_end('w$) AS $slice_end])\"\n  }, {\n    \"id\" : 211,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`patientid` BIGINT NOT NULL, `sum$0` DECIMAL(38, 6), `count$1` BIGINT, `max$2` DECIMAL(38, 6), `min$3` DECIMAL(38, 6), `count1$4` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"Exchange(distribution=[hash[patientid]])\"\n  }, {\n    \"id\" : 212,\n    \"type\" : \"stream-exec-global-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"avgTemp\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"name\" : \"maxTemp\",\n      \"internalName\" : \"$MAX$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"name\" : \"minTemp\",\n      \"internalName\" : \"$MIN$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"SliceAttached\",\n      \"window\" : {\n        \"type\" : \"HoppingWindow\",\n        \"size\" : \"PT1H\",\n        \"slide\" : \"PT1M12S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"sliceEnd\" : 6,\n      \"isRowtime\" : true\n    },\n    \"namedWindowProperties\" : [ {\n      \"name\" : \"window_start\",\n      \"property\" : {\n        \"kind\" : \"WindowStart\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_end\",\n      \"property\" : {\n        \"kind\" : \"WindowEnd\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_time\",\n      \"property\" : {\n        \"kind\" : \"Rowtime\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    } ],\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"localAggInputRowType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"smoothTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"avgTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"window_start\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_end\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"GlobalWindowAggregate(groupBy=[patientid], window=[HOP(slice_end=[$slice_end], size=[1 h], slide=[72 s])], select=[patientid, AVG((sum$0, count$1)) AS avgTemp, MAX(max$2) AS maxTemp, MIN(min$3) AS minTemp, COUNT(count1$4) AS window_start, start('w$) AS window_end, end('w$) AS window_time])\"\n  }, {\n    \"id\" : 213,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : \"TIMESTAMP(3) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 5,\n      \"type\" : \"TIMESTAMP(3) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 6,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 2,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 3,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"window_start\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_end\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"_timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Calc(select=[patientid, window_start, window_end, window_time AS _timeMin, maxTemp, minTemp])\"\n  }, {\n    \"id\" : 214,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"window_start\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_end\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"_timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Exchange(distribution=[hash[patientid]])\"\n  }, {\n    \"id\" : 215,\n    \"type\" : \"stream-exec-deduplicate_1\",\n    \"configuration\" : {\n      \"table.exec.deduplicate.insert-update-after-sensitive-enabled\" : \"true\",\n      \"table.exec.deduplicate.mini-batch.compact-changes-enabled\" : \"false\",\n      \"table.exec.mini-batch.enabled\" : \"false\",\n      \"table.exec.mini-batch.size\" : \"-1\"\n    },\n    \"uniqueKeys\" : [ 0 ],\n    \"isRowtime\" : true,\n    \"keepLastRow\" : true,\n    \"generateUpdateBefore\" : false,\n    \"state\" : [ {\n      \"index\" : 0,\n      \"ttl\" : \"0 ms\",\n      \"name\" : \"deduplicateState\"\n    } ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"window_start\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_end\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"_timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Deduplicate(keep=[LastRow], key=[patientid], order=[ROWTIME])\"\n  }, {\n    \"id\" : 216,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 5,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 3,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"_timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[patientid, maxTemp, minTemp, _timeMin])\"\n  }, {\n    \"id\" : 217,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"_timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Exchange(distribution=[hash[patientid]])\"\n  }, {\n    \"id\" : 218,\n    \"type\" : \"stream-exec-temporal-join_1\",\n    \"joinSpec\" : {\n      \"joinType\" : \"INNER\",\n      \"leftKeys\" : [ 2 ],\n      \"rightKeys\" : [ 0 ],\n      \"filterNulls\" : [ true ],\n      \"nonEquiCondition\" : null\n    },\n    \"isTemporalFunctionJoin\" : false,\n    \"leftTimeAttributeIndex\" : 1,\n    \"rightTimeAttributeIndex\" : 3,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    }, {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"groupId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"created\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"patientId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"_timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"TemporalJoin(joinType=[InnerJoin], where=[((patientId = patientid) AND __TEMPORAL_JOIN_CONDITION(created, _timeMin, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(patientid), __TEMPORAL_JOIN_LEFT_KEY(patientId), __TEMPORAL_JOIN_RIGHT_KEY(patientid)))], select=[groupId, created, patientId, patientid, maxTemp, minTemp, _timeMin])\"\n  }, {\n    \"id\" : 219,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 5,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"__pk1_groupId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"created\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[groupId AS __pk1_groupId, maxTemp, minTemp, created])\"\n  }, {\n    \"id\" : 220,\n    \"type\" : \"stream-exec-local-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"maxTemp\",\n      \"internalName\" : \"$MAX$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"name\" : \"minTemp\",\n      \"internalName\" : \"$MIN$1\",\n      \"argList\" : [ 2 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"TimeAttribute\",\n      \"window\" : {\n        \"type\" : \"TumblingWindow\",\n        \"size\" : \"PT0.001S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"timeAttributeIndex\" : 3,\n      \"isRowtime\" : true\n    },\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`__pk1_groupId` BIGINT NOT NULL, `max$0` DECIMAL(38, 6), `min$1` DECIMAL(38, 6), `$slice_end` BIGINT>\",\n    \"description\" : \"LocalWindowAggregate(groupBy=[__pk1_groupId], window=[TUMBLE(time_col=[created], size=[1 ms])], select=[__pk1_groupId, MAX(maxTemp) AS max$0, MIN(minTemp) AS min$1, slice_end('w$) AS $slice_end])\"\n  }, {\n    \"id\" : 221,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`__pk1_groupId` BIGINT NOT NULL, `max$0` DECIMAL(38, 6), `min$1` DECIMAL(38, 6), `$slice_end` BIGINT>\",\n    \"description\" : \"Exchange(distribution=[hash[__pk1_groupId]])\"\n  }, {\n    \"id\" : 222,\n    \"type\" : \"stream-exec-global-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"maxTemp\",\n      \"internalName\" : \"$MAX$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"name\" : \"minTemp\",\n      \"internalName\" : \"$MIN$1\",\n      \"argList\" : [ 2 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"SliceAttached\",\n      \"window\" : {\n        \"type\" : \"TumblingWindow\",\n        \"size\" : \"PT0.001S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"sliceEnd\" : 3,\n      \"isRowtime\" : true\n    },\n    \"namedWindowProperties\" : [ {\n      \"name\" : \"window_start\",\n      \"property\" : {\n        \"kind\" : \"WindowStart\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_end\",\n      \"property\" : {\n        \"kind\" : \"WindowEnd\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_time\",\n      \"property\" : {\n        \"kind\" : \"Rowtime\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    } ],\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"localAggInputRowType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"__pk1_groupId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"created\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"__pk1_groupId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"window_start\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_end\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"GlobalWindowAggregate(groupBy=[__pk1_groupId], window=[TUMBLE(slice_end=[$slice_end], size=[1 ms])], select=[__pk1_groupId, MAX(max$0) AS maxTemp, MIN(min$1) AS minTemp, start('w$) AS window_start, end('w$) AS window_end, rowtime('w$) AS window_time])\"\n  }, {\n    \"id\" : 223,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 5,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 2,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"__pk1_groupId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"__pk3_created\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Calc(select=[__pk1_groupId, window_time AS __pk3_created, maxTemp, minTemp])\"\n  }, {\n    \"id\" : 224,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`lasthour_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"__pk1_groupId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"__pk3_created\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.lasthour_1], fields=[__pk1_groupId, __pk3_created, maxTemp, minTemp])\"\n  }, {\n    \"id\" : 225,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"VARCHAR(2147483647) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 2,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    }, {\n      \"kind\" : \"CALL\",\n      \"catalogName\" : \"`default_catalog`.`default_database`.`TOJSON`\",\n      \"operands\" : [ {\n        \"kind\" : \"INPUT_REF\",\n        \"inputIndex\" : 3,\n        \"type\" : \"ARRAY<ROW<`patientId` BIGINT NOT NULL> NOT NULL> NOT NULL\"\n      } ],\n      \"type\" : \"RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI=')\"\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"groupId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"groupName\",\n        \"fieldType\" : \"VARCHAR(2147483647) NOT NULL\"\n      }, {\n        \"name\" : \"created\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"patients\",\n        \"fieldType\" : \"RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI=')\"\n      } ]\n    },\n    \"description\" : \"Calc(select=[groupId, groupName, created, TOJSON(patients) AS patients])\"\n  }, {\n    \"id\" : 226,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`observationgroup_2`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputUpsertKey\" : [ 0, 2 ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"groupId\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"groupName\",\n        \"fieldType\" : \"VARCHAR(2147483647) NOT NULL\"\n      }, {\n        \"name\" : \"created\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"patients\",\n        \"fieldType\" : \"RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI=')\"\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.observationgroup_2], fields=[groupId, groupName, created, patients])\"\n  }, {\n    \"id\" : 227,\n    \"type\" : \"stream-exec-local-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"avgTemp\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"name\" : \"maxTemp\",\n      \"internalName\" : \"$MAX$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"name\" : \"minTemp\",\n      \"internalName\" : \"$MIN$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"TimeAttribute\",\n      \"window\" : {\n        \"type\" : \"TumblingWindow\",\n        \"size\" : \"PT1H\",\n        \"offset\" : \"PT0S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"timeAttributeIndex\" : 2,\n      \"isRowtime\" : true\n    },\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`patientid` BIGINT NOT NULL, `sum$0` DECIMAL(38, 6), `count$1` BIGINT, `max$2` DECIMAL(38, 6), `min$3` DECIMAL(38, 6), `$slice_end` BIGINT>\",\n    \"description\" : \"LocalWindowAggregate(groupBy=[patientid], window=[TUMBLE(time_col=[timeMin], size=[1 h], offset=[0 ms])], select=[patientid, AVG(smoothTemp) AS (sum$0, count$1), MAX(smoothTemp) AS max$2, MIN(smoothTemp) AS min$3, slice_end('w$) AS $slice_end])\"\n  }, {\n    \"id\" : 228,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`patientid` BIGINT NOT NULL, `sum$0` DECIMAL(38, 6), `count$1` BIGINT, `max$2` DECIMAL(38, 6), `min$3` DECIMAL(38, 6), `$slice_end` BIGINT>\",\n    \"description\" : \"Exchange(distribution=[hash[patientid]])\"\n  }, {\n    \"id\" : 229,\n    \"type\" : \"stream-exec-global-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"avgTemp\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"name\" : \"maxTemp\",\n      \"internalName\" : \"$MAX$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"name\" : \"minTemp\",\n      \"internalName\" : \"$MIN$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"SliceAttached\",\n      \"window\" : {\n        \"type\" : \"TumblingWindow\",\n        \"size\" : \"PT1H\",\n        \"offset\" : \"PT0S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"sliceEnd\" : 5,\n      \"isRowtime\" : true\n    },\n    \"namedWindowProperties\" : [ {\n      \"name\" : \"window_start\",\n      \"property\" : {\n        \"kind\" : \"WindowStart\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_end\",\n      \"property\" : {\n        \"kind\" : \"WindowEnd\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_time\",\n      \"property\" : {\n        \"kind\" : \"Rowtime\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    } ],\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"localAggInputRowType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"smoothTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"avgTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"window_start\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_end\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"GlobalWindowAggregate(groupBy=[patientid], window=[TUMBLE(slice_end=[$slice_end], size=[1 h], offset=[0 ms])], select=[patientid, AVG((sum$0, count$1)) AS avgTemp, MAX(max$2) AS maxTemp, MIN(min$3) AS minTemp, start('w$) AS window_start, end('w$) AS window_end, rowtime('w$) AS window_time])\"\n  }, {\n    \"id\" : 230,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 6,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 2,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 3,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timeHour\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"avgTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Calc(select=[patientid, window_time AS timeHour, avgTemp, maxTemp, minTemp])\"\n  }, {\n    \"id\" : 231,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`patienthourly_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timeHour\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"avgTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.patienthourly_1], fields=[patientid, timeHour, avgTemp, maxTemp, minTemp])\"\n  }, {\n    \"id\" : 232,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 2,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 3,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 6,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"avgTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"_timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[patientid, avgTemp, maxTemp, minTemp, window_time AS _timeMin])\"\n  }, {\n    \"id\" : 233,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`patientlasthour_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"avgTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"minTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"_timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.patientlasthour_1], fields=[patientid, avgTemp, maxTemp, minTemp, _timeMin])\"\n  }, {\n    \"id\" : 234,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    } ],\n    \"condition\" : {\n      \"kind\" : \"CALL\",\n      \"syntax\" : \"INTERNAL\",\n      \"internalName\" : \"$SEARCH$1\",\n      \"operands\" : [ {\n        \"kind\" : \"INPUT_REF\",\n        \"inputIndex\" : 1,\n        \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"kind\" : \"LITERAL\",\n        \"sarg\" : {\n          \"ranges\" : [ {\n            \"upper\" : {\n              \"value\" : 95,\n              \"boundType\" : \"OPEN\"\n            }\n          }, {\n            \"lower\" : {\n              \"value\" : 102,\n              \"boundType\" : \"OPEN\"\n            }\n          } ],\n          \"nullAs\" : \"UNKNOWN\"\n        },\n        \"type\" : \"INT NOT NULL\"\n      } ],\n      \"type\" : \"BOOLEAN NOT NULL\"\n    },\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"smoothTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"sensorid3\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Calc(select=[sensorid, window_time AS timeMin, smoothTemp, sensorid AS sensorid3], where=[SEARCH(smoothTemp, Sarg[(-∞..95), (102..+∞)])])\"\n  }, {\n    \"id\" : 235,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 3 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"smoothTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"sensorid3\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Exchange(distribution=[hash[sensorid3]])\"\n  }, {\n    \"id\" : 236,\n    \"type\" : \"stream-exec-temporal-join_1\",\n    \"joinSpec\" : {\n      \"joinType\" : \"INNER\",\n      \"leftKeys\" : [ 3 ],\n      \"rightKeys\" : [ 0 ],\n      \"filterNulls\" : [ true ],\n      \"nonEquiCondition\" : null\n    },\n    \"isTemporalFunctionJoin\" : false,\n    \"leftTimeAttributeIndex\" : 1,\n    \"rightTimeAttributeIndex\" : 2,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    }, {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"smoothTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"sensorid3\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"id\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"placedTimestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"TemporalJoin(joinType=[InnerJoin], where=[((id = sensorid3) AND __TEMPORAL_JOIN_CONDITION(timeMin, placedTimestamp, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(id), __TEMPORAL_JOIN_LEFT_KEY(sensorid3), __TEMPORAL_JOIN_RIGHT_KEY(id)))], select=[sensorid, timeMin, smoothTemp, sensorid3, id, patientid, placedTimestamp])\"\n  }, {\n    \"id\" : 237,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 5,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 2,\n      \"type\" : \"DECIMAL(38, 6) NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"smoothTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[patientid, sensorid, smoothTemp, timeMin])\"\n  }, {\n    \"id\" : 238,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`tempalert_1_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"smoothTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.tempalert_1_1], fields=[patientid, sensorid, smoothTemp, timeMin])\"\n  }, {\n    \"id\" : 239,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`tempalert_1_2`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"patientid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"smoothTemp\",\n        \"fieldType\" : \"DECIMAL(38, 6) NOT NULL\"\n      }, {\n        \"name\" : \"timeMin\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.tempalert_1_2], fields=[patientid, sensorid, smoothTemp, timeMin])\"\n  } ],\n  \"edges\" : [ {\n    \"source\" : 189,\n    \"target\" : 190,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 190,\n    \"target\" : 191,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 191,\n    \"target\" : 192,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 192,\n    \"target\" : 193,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 194,\n    \"target\" : 195,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 195,\n    \"target\" : 196,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 196,\n    \"target\" : 197,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 197,\n    \"target\" : 198,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 198,\n    \"target\" : 199,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 199,\n    \"target\" : 200,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 200,\n    \"target\" : 201,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 202,\n    \"target\" : 203,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 203,\n    \"target\" : 204,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 204,\n    \"target\" : 205,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 205,\n    \"target\" : 206,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 206,\n    \"target\" : 207,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 201,\n    \"target\" : 208,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 207,\n    \"target\" : 208,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 208,\n    \"target\" : 209,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 209,\n    \"target\" : 210,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 210,\n    \"target\" : 211,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 211,\n    \"target\" : 212,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 212,\n    \"target\" : 213,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 213,\n    \"target\" : 214,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 214,\n    \"target\" : 215,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 215,\n    \"target\" : 216,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 216,\n    \"target\" : 217,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 193,\n    \"target\" : 218,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 217,\n    \"target\" : 218,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 218,\n    \"target\" : 219,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 219,\n    \"target\" : 220,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 220,\n    \"target\" : 221,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 221,\n    \"target\" : 222,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 222,\n    \"target\" : 223,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 223,\n    \"target\" : 224,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 190,\n    \"target\" : 225,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 225,\n    \"target\" : 226,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 209,\n    \"target\" : 227,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 227,\n    \"target\" : 228,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 228,\n    \"target\" : 229,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 229,\n    \"target\" : 230,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 230,\n    \"target\" : 231,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 212,\n    \"target\" : 232,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 232,\n    \"target\" : 233,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 199,\n    \"target\" : 234,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 234,\n    \"target\" : 235,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 235,\n    \"target\" : 236,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 207,\n    \"target\" : 236,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 236,\n    \"target\" : 237,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 237,\n    \"target\" : 238,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 237,\n    \"target\" : 239,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  } ]\n}"
}
>>>kafka.json
{
  "topics" : [
    {
      "name" : "patient-sensor-addreading",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    },
    {
      "name" : "tempalert_1",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    }
  ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "lasthour_1",
      "columns" : [
        "\"__pk1_groupId\" BIGINT NOT NULL",
        "\"__pk3_created\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"maxTemp\" NUMERIC NOT NULL",
        "\"minTemp\" NUMERIC NOT NULL"
      ],
      "primaryKeys" : [
        "\"__pk1_groupId\"",
        "\"__pk3_created\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS lasthour_1 (\"__pk1_groupId\" BIGINT NOT NULL,\"__pk3_created\" TIMESTAMP WITH TIME ZONE NOT NULL,\"maxTemp\" NUMERIC NOT NULL,\"minTemp\" NUMERIC NOT NULL , PRIMARY KEY (\"__pk1_groupId\",\"__pk3_created\"));"
    },
    {
      "name" : "observationgroup_2",
      "columns" : [
        "\"groupId\" BIGINT NOT NULL",
        "\"groupName\" TEXT NOT NULL",
        "\"created\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"patients\" JSONB NOT NULL"
      ],
      "primaryKeys" : [
        "\"groupId\"",
        "\"created\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS observationgroup_2 (\"groupId\" BIGINT NOT NULL,\"groupName\" TEXT NOT NULL,\"created\" TIMESTAMP WITH TIME ZONE NOT NULL,\"patients\" JSONB NOT NULL , PRIMARY KEY (\"groupId\",\"created\"));"
    },
    {
      "name" : "patienthourly_1",
      "columns" : [
        "\"patientid\" BIGINT NOT NULL",
        "\"timeHour\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"avgTemp\" NUMERIC NOT NULL",
        "\"maxTemp\" NUMERIC NOT NULL",
        "\"minTemp\" NUMERIC NOT NULL"
      ],
      "primaryKeys" : [
        "\"patientid\"",
        "\"timeHour\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS patienthourly_1 (\"patientid\" BIGINT NOT NULL,\"timeHour\" TIMESTAMP WITH TIME ZONE NOT NULL,\"avgTemp\" NUMERIC NOT NULL,\"maxTemp\" NUMERIC NOT NULL,\"minTemp\" NUMERIC NOT NULL , PRIMARY KEY (\"patientid\",\"timeHour\"));"
    },
    {
      "name" : "patientlasthour_1",
      "columns" : [
        "\"patientid\" BIGINT NOT NULL",
        "\"avgTemp\" NUMERIC NOT NULL",
        "\"maxTemp\" NUMERIC NOT NULL",
        "\"minTemp\" NUMERIC NOT NULL",
        "\"_timeMin\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"patientid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS patientlasthour_1 (\"patientid\" BIGINT NOT NULL,\"avgTemp\" NUMERIC NOT NULL,\"maxTemp\" NUMERIC NOT NULL,\"minTemp\" NUMERIC NOT NULL,\"_timeMin\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"patientid\"));"
    }
  ],
  "views" : [
    {
      "name" : "ObservationGroup",
      "sql" : "CREATE OR REPLACE VIEW \"ObservationGroup\"(\"groupId\", \"groupName\", \"created\", \"patients\") AS SELECT *\nFROM \"observationgroup_2\"\nORDER BY \"created\" DESC NULLS LAST, \"groupId\";"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "ObservationGroup",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"observationgroup_2\"\nORDER BY \"created\" DESC NULLS LAST, \"groupId\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "groupId"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"observationgroup_2\"\nWHERE \"groupId\" = $1\nORDER BY \"created\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "groupId"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "ObservationGroup",
        "fieldName" : "lastHour",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"lasthour_1\"\nWHERE \"__pk1_groupId\" = $1 AND \"__pk3_created\" = $2\nORDER BY \"__pk3_created\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "groupId"
                },
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "created"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "PatientHourly",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "patientid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"patienthourly_1\"\nWHERE \"patientid\" = $1\nORDER BY \"timeHour\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "patientid"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "PatientLastHour",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "patientid"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"patientlasthour_1\"\nWHERE \"patientid\" = $1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "patientid"
                }
              ]
            }
          }
        ]
      }
    ],
    "mutations" : [
      {
        "type" : "kafka",
        "fieldName" : "AddReading",
        "topic" : "patient-sensor-addreading",
        "sinkConfig" : { }
      }
    ],
    "subscriptions" : [
      {
        "fieldName" : "TempAlert",
        "topic" : "tempalert_1",
        "sinkConfig" : { },
        "filters" : {
          "patientId" : "patientid"
        }
      }
    ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "type Query {\n  ObservationGroup(groupId: Int): [ObservationGroup!]\n  PatientHourly(patientid: Int!, limit: Int = 20, offset: Int = 0): [PatientHourly!]\n  PatientLastHour(patientid: Int!): PatientLastHour!\n}\n\ntype ObservationGroup {\n  groupId: Int!\n  groupName: String!\n  created: String!\n  patients: [patients!]\n  lastHour: lastHour!\n}\n\ntype patients {\n  patientId: Int!\n}\n\ntype lastHour {\n  maxTemp: Float!\n  minTemp: Float!\n}\n\ntype PatientHourly {\n  patientid: Int!\n  timeHour: String!\n  avgTemp: Float!\n  maxTemp: Float!\n  minTemp: Float!\n}\n\ntype PatientLastHour {\n  patientid: Int!\n  avgTemp: Float!\n  maxTemp: Float!\n  minTemp: Float!\n}\n\n# ---\n\ntype Subscription {\n  TempAlert(patientId: Int): TempAlert\n}\n\ntype TempAlert {\n  sensorid: Int!\n  timeMin: String!\n  patientid: Int!\n  smoothTemp: Float!\n}\n\n# ---\n\ntype Mutation {\n  AddReading(tempReading: ReadingInput!): CreatedReading\n}\n\ninput ReadingInput {\n  sensorid: Int!\n  temperature: Float!\n}\n\ntype CreatedReading {\n  event_time: String!\n  sensorid: Int!\n}\n"
    }
  }
}
