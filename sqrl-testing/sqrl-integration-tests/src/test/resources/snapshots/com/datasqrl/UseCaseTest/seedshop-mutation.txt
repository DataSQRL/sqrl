>>>pipeline_explain.txt
=== _OrderItems
ID:     _orderitems$1
Type:   stream
Stage:  streams
Inputs: orders$2
Primary Key: id, time, productid
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - customerid: BIGINT NOT NULL
 - productid: BIGINT NOT NULL
 - quantity: BIGINT NOT NULL
 - unit_price: DOUBLE NOT NULL
 - discount: DOUBLE
Plan:
LogicalProject(id=[$0], time=[$2], customerid=[$1], productid=[$4], quantity=[$5], unit_price=[$6], discount=[$7])
  LogicalCorrelate(correlation=[$cor8], joinType=[inner], requiredColumns=[{3}])
    LogicalTableScan(table=[[orders$2]])
    LogicalTableFunctionScan(invocation=[Orders.items($cor8.items)], rowType=[RecordType(BIGINT productid, BIGINT quantity, DOUBLE unit_price, DOUBLE discount)], elementType=[class [Ljava.lang.Object;])

=== category_visits
ID:     category_visits$1
Type:   state
Stage:  streams
Inputs: customers$3, products$3, productvisit$2
Primary Key: __pk1$id, category
Timestamp  : _event_time
Schema:
 - __pk1$id: BIGINT NOT NULL
 - category: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - visits: BIGINT NOT NULL
 - _event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=__pk1$id, category limit=1 sort=#3: _event_time TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
 - sort: #0: __pk1$id BIGINT ASC, #2: visits BIGINT DESC
Plan:
LogicalProject(__pk1$id=[$1], category=[$2], visits=[$3], _event_time=[$0])
  LogicalAggregate(group=[{3, 4, 19}], visits=[COUNT()]) hints[SlidingAggregationHint options:[3, 86400000, 1728000]]
    LogicalJoin(condition=[=($1, $14)], joinType=[inner]) hints[TemporalJoinHint options:[3]]
      LogicalJoin(condition=[=($4, $0)], joinType=[inner]) hints[TemporalJoinHint options:[3]]
        LogicalTableScan(table=[[productvisit$2]])
        LogicalFilter(condition=[=($9, 1)]) hints[DedupHint]
          LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], ip_address=[$4], country=[$5], changed_on=[$6], timestamp=[$7], country0=[$8], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $7 DESC NULLS LAST)])
            LogicalTableScan(table=[[customers$3]])
      LogicalFilter(condition=[=($8, 1)]) hints[DedupHint]
        LogicalProject(id=[$0], name=[$1], sizing=[$2], weight_in_gram=[$3], type=[$4], category=[$5], usda_id=[$6], updated=[$7], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $7 DESC NULLS LAST)])
          LogicalTableScan(table=[[products$3]])

=== Customers
ID:     customers$2
Type:   stream
Stage:  streams
Primary Key: id, changed_on
Timestamp  : timestamp
Schema:
 - id: BIGINT NOT NULL
 - first_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - last_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - ip_address: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - country: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - changed_on: BIGINT NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[customers$1]], hints=[[[WatermarkHint inheritPath:[] options:[7]]]]) hints[WatermarkHint options:[7]]

=== Customers
ID:     customers$3
Type:   state
Stage:  streams
Inputs: customers$2
Primary Key: id
Timestamp  : timestamp
Schema:
 - id: BIGINT NOT NULL
 - first_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - last_name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - ip_address: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - country: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - changed_on: BIGINT NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - country0: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Post Processors:
 - topN: partition=id limit=1 sort=#7: timestamp TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], ip_address=[$4], country=[$5], changed_on=[$6], timestamp=[$7], country0=[COALESCE($5, 'none')])
  LogicalTableScan(table=[[customers$2]])

=== monthly_by_country
ID:     monthly_by_country$1
Type:   stream
Stage:  streams
Inputs: _orderitems$1, customers$3, products$3
Primary Key: __pk1$id, country, month
Timestamp  : month
Schema:
 - __pk1$id: BIGINT NOT NULL
 - country: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - month: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - quantity: BIGINT NOT NULL
 - spend: DOUBLE NOT NULL
 - weight: BIGINT NOT NULL
Plan:
LogicalProject(__pk1$id=[$0], country=[$1], month=[$2], quantity=[$3], spend=[$4], weight=[$5])
  LogicalAggregate(group=[{0, 1, 2}], quantity=[SUM($3)], spend=[SUM($4)], weight=[SUM($5)]) hints[TumbleAggregationHint options:[2, FUNCTION, 7, 2629746000, 0]]
    LogicalProject(__pk6$id=[$7], country=[$24], month=[endOfMonth($1)], quantity=[$4], $f4=[*($4, $5)], $f5=[*($4, $10)], id=[$0], time=[$1], productid=[$3])
      LogicalJoin(condition=[=($2, $16)], joinType=[inner]) hints[TemporalJoinHint options:[1]]
        LogicalJoin(condition=[=($3, $7)], joinType=[inner]) hints[TemporalJoinHint options:[1]]
          LogicalTableScan(table=[[_orderitems$1]])
          LogicalFilter(condition=[=($8, 1)]) hints[DedupHint]
            LogicalProject(id=[$0], name=[$1], sizing=[$2], weight_in_gram=[$3], type=[$4], category=[$5], usda_id=[$6], updated=[$7], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $7 DESC NULLS LAST)])
              LogicalTableScan(table=[[products$3]])
        LogicalFilter(condition=[=($9, 1)]) hints[DedupHint]
          LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], ip_address=[$4], country=[$5], changed_on=[$6], timestamp=[$7], country0=[$8], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $7 DESC NULLS LAST)])
            LogicalTableScan(table=[[customers$3]])

=== Orders
ID:     orders$2
Type:   stream
Stage:  streams
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - items: RecordType(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[2]]]]) hints[WatermarkHint options:[2]]

=== past_purchases
ID:     past_purchases$1
Type:   state
Stage:  streams
Inputs: customers$3, orders$2
Primary Key: __pk1$id, productid
Timestamp  : __timestamp
Schema:
 - __pk1$id: BIGINT NOT NULL
 - productid: BIGINT NOT NULL
 - num_orders: BIGINT NOT NULL
 - total_quantity: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - sort: #0: __pk1$id BIGINT ASC, #2: num_orders BIGINT DESC, #3: total_quantity BIGINT DESC
Plan:
LogicalProject(__pk1$id=[$0], productid=[$1], num_orders=[$2], total_quantity=[$3], __timestamp=[$4])
  LogicalAggregate(group=[{4, 14}], num_orders=[COUNT()], total_quantity=[SUM($15)], __timestamp=[MAX($2)])
    LogicalCorrelate(correlation=[$cor7], joinType=[inner], requiredColumns=[{3}])
      LogicalJoin(condition=[=($1, $4)], joinType=[inner]) hints[TemporalJoinHint options:[2]]
        LogicalTableScan(table=[[orders$2]])
        LogicalFilter(condition=[=($9, 1)]) hints[DedupHint]
          LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], ip_address=[$4], country=[$5], changed_on=[$6], timestamp=[$7], country0=[$8], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $7 DESC NULLS LAST)])
            LogicalTableScan(table=[[customers$3]])
      LogicalTableFunctionScan(invocation=[Orders.items($cor7.items)], rowType=[RecordType(BIGINT productid, BIGINT quantity, DOUBLE unit_price, DOUBLE discount)], elementType=[class [Ljava.lang.Object;])

=== product_visits
ID:     product_visits$1
Type:   state
Stage:  streams
Inputs: customers$3, productvisit$2
Primary Key: __pk1$id, productid
Timestamp  : _event_time
Schema:
 - __pk1$id: BIGINT NOT NULL
 - productid: BIGINT NOT NULL
 - visits: BIGINT NOT NULL
 - _event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=__pk1$id, productid limit=1 sort=#3: _event_time TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
 - sort: #0: __pk1$id BIGINT ASC, #2: visits BIGINT DESC
Plan:
LogicalProject(__pk1$id=[$2], productid=[$0], visits=[$3], _event_time=[$1])
  LogicalAggregate(group=[{1, 3, 4}], visits=[COUNT()]) hints[SlidingAggregationHint options:[3, 2592000000, 51840000]]
    LogicalJoin(condition=[=($4, $0)], joinType=[inner]) hints[TemporalJoinHint options:[3]]
      LogicalTableScan(table=[[productvisit$2]])
      LogicalFilter(condition=[=($9, 1)]) hints[DedupHint]
        LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], ip_address=[$4], country=[$5], changed_on=[$6], timestamp=[$7], country0=[$8], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $7 DESC NULLS LAST)])
          LogicalTableScan(table=[[customers$3]])

=== Products
ID:     products$2
Type:   stream
Stage:  streams
Primary Key: id, updated
Timestamp  : updated
Schema:
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - sizing: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - weight_in_gram: BIGINT NOT NULL
 - type: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - category: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - usda_id: BIGINT NOT NULL
 - updated: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[products$1]], hints=[[[WatermarkHint inheritPath:[] options:[7]]]]) hints[WatermarkHint options:[7]]

=== Products
ID:     products$3
Type:   state
Stage:  streams
Inputs: products$2
Primary Key: id
Timestamp  : updated
Schema:
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - sizing: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - weight_in_gram: BIGINT NOT NULL
 - type: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - category: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - usda_id: BIGINT NOT NULL
 - updated: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=id limit=1 sort=#7: updated TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalTableScan(table=[[products$2]])

=== ProductVisit
ID:     productvisit$2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - customerid: BIGINT NOT NULL
 - productid: BIGINT NOT NULL
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[productvisit$1]], hints=[[[WatermarkHint inheritPath:[] options:[3]]]]) hints[WatermarkHint options:[3]]

=== spending
ID:     spending$1
Type:   stream
Stage:  streams
Inputs: customers$3, orders$2, totals$1
Primary Key: __pk1$id, week
Timestamp  : week
Schema:
 - __pk1$id: BIGINT NOT NULL
 - week: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - spend: DOUBLE NOT NULL
 - saved: DOUBLE NOT NULL
Post Processors:
 - sort: #0: __pk1$id BIGINT ASC, #1: week TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC
Plan:
LogicalProject(__pk1$id=[$0], week=[$1], spend=[$2], saved=[$3])
  LogicalAggregate(group=[{0, 1}], spend=[SUM($2)], saved=[SUM($3)]) hints[TumbleAggregationHint options:[1, FUNCTION, 5, 604800000, 0]]
    LogicalProject(__pk3$id=[$0], week=[endOfWeek($3)], price=[$7], saving=[$8], id=[$1], time=[$3])
      LogicalJoin(condition=[AND(=($1, $5), =($3, $6))], joinType=[inner]) hints[IntervalJoin]
        LogicalProject(__pk3$id=[$5], id=[$0], customerid=[$1], time=[$2], items=[$3])
          LogicalJoin(condition=[=($5, $4)], joinType=[inner]) hints[TemporalJoinHint options:[2]]
            LogicalProject(id=[$0], customerid=[$1], time=[$2], items=[$3], customerid4=[$1])
              LogicalTableScan(table=[[orders$2]])
            LogicalFilter(condition=[=($9, 1)]) hints[DedupHint]
              LogicalProject(id=[$0], first_name=[$1], last_name=[$2], email=[$3], ip_address=[$4], country=[$5], changed_on=[$6], timestamp=[$7], country0=[$8], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $7 DESC NULLS LAST)])
                LogicalTableScan(table=[[customers$3]])
        LogicalTableScan(table=[[totals$1]])

=== totals
ID:     totals$1
Type:   stream
Stage:  streams
Inputs: orders$2
Primary Key: __pk1$id, __pk3$time
Timestamp  : __pk3$time
Schema:
 - __pk1$id: BIGINT NOT NULL
 - __pk3$time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - price: DOUBLE NOT NULL
 - saving: DOUBLE NOT NULL
Plan:
LogicalProject(__pk1$id=[$0], __pk3$time=[$1], price=[$2], saving=[$3])
  LogicalAggregate(group=[{0, 1}], agg#0=[SUM($2)], agg#1=[SUM($3)]) hints[TumbleAggregationHint options:[1, INSTANT, 1, 1, 0]]
    LogicalProject(__pk1$id=[$0], __pk2$time=[$2], $f2=[-(*($5, $6), COALESCE($7, 0.0:DECIMAL(2, 1)))], $f3=[COALESCE($7, 0.0:DECIMAL(2, 1))], productid=[$4])
      LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{3}])
        LogicalTableScan(table=[[orders$2]])
        LogicalTableFunctionScan(invocation=[Orders.items($cor0.items)], rowType=[RecordType(BIGINT productid, BIGINT quantity, DOUBLE unit_price, DOUBLE discount)], elementType=[class [Ljava.lang.Object;])

>>>database-schema.sql
CREATE TABLE IF NOT EXISTS category_visits$1 ("__pk1$id" BIGINT NOT NULL,"category" TEXT NOT NULL,"visits" BIGINT NOT NULL,"_event_time" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("__pk1$id","category"));
CREATE TABLE IF NOT EXISTS customers$3 ("id" BIGINT NOT NULL,"first_name" TEXT NOT NULL,"last_name" TEXT NOT NULL,"email" TEXT NOT NULL,"ip_address" TEXT ,"country" TEXT ,"changed_on" BIGINT NOT NULL,"timestamp" TIMESTAMP WITH TIME ZONE NOT NULL,"country0" TEXT NOT NULL , PRIMARY KEY ("id"));
CREATE TABLE IF NOT EXISTS monthly_by_country$1 ("__pk1$id" BIGINT NOT NULL,"country" TEXT NOT NULL,"month" TIMESTAMP WITH TIME ZONE NOT NULL,"quantity" BIGINT NOT NULL,"spend" DOUBLE PRECISION NOT NULL,"weight" BIGINT NOT NULL , PRIMARY KEY ("__pk1$id","country","month"));
CREATE TABLE IF NOT EXISTS orders$2 ("id" BIGINT NOT NULL,"customerid" BIGINT NOT NULL,"time" TIMESTAMP WITH TIME ZONE NOT NULL,"items" JSONB NOT NULL , PRIMARY KEY ("id","time"));
CREATE TABLE IF NOT EXISTS past_purchases$1 ("__pk1$id" BIGINT NOT NULL,"productid" BIGINT NOT NULL,"num_orders" BIGINT NOT NULL,"total_quantity" BIGINT NOT NULL,"__timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("__pk1$id","productid"));
CREATE TABLE IF NOT EXISTS product_visits$1 ("__pk1$id" BIGINT NOT NULL,"productid" BIGINT NOT NULL,"visits" BIGINT NOT NULL,"_event_time" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("__pk1$id","productid"));
CREATE TABLE IF NOT EXISTS products$3 ("id" BIGINT NOT NULL,"name" TEXT NOT NULL,"sizing" TEXT NOT NULL,"weight_in_gram" BIGINT NOT NULL,"type" TEXT NOT NULL,"category" TEXT NOT NULL,"usda_id" BIGINT NOT NULL,"updated" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id"));
CREATE TABLE IF NOT EXISTS spending$1 ("__pk1$id" BIGINT NOT NULL,"week" TIMESTAMP WITH TIME ZONE NOT NULL,"spend" DOUBLE PRECISION NOT NULL,"saved" DOUBLE PRECISION NOT NULL , PRIMARY KEY ("__pk1$id","week"));
CREATE TABLE IF NOT EXISTS totals$1 ("__pk1$id" BIGINT NOT NULL,"__pk3$time" TIMESTAMP WITH TIME ZONE NOT NULL,"price" DOUBLE PRECISION NOT NULL,"saving" DOUBLE PRECISION NOT NULL , PRIMARY KEY ("__pk1$id","__pk3$time"));
CREATE INDEX IF NOT EXISTS orders$2_hash_c1 ON orders$2 USING hash ("customerid");
CREATE INDEX IF NOT EXISTS products$3_btree_c1c5 ON products$3 USING btree ("name","category");
CREATE INDEX IF NOT EXISTS products$3_hash_c5 ON products$3 USING hash ("category");

>>>flink-plan.sql
CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptostring` AS 'com.datasqrl.time.TimestampToString' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofmonth` AS 'com.datasqrl.time.EndOfMonth' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `tojson` AS 'com.datasqrl.json.ToJson' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofweek` AS 'com.datasqrl.time.EndOfWeek' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `parsetimestamp` AS 'com.datasqrl.time.ParseTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochmillitotimestamp` AS 'com.datasqrl.time.EpochMilliToTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofminute` AS 'com.datasqrl.time.EndOfMinute' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptoepoch` AS 'com.datasqrl.time.TimestampToEpoch' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofsecond` AS 'com.datasqrl.time.EndOfSecond' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochtotimestamp` AS 'com.datasqrl.time.EpochToTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofday` AS 'com.datasqrl.time.EndOfDay' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `atzone` AS 'com.datasqrl.time.AtZone' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofhour` AS 'com.datasqrl.time.EndOfHour' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofyear` AS 'com.datasqrl.time.EndOfYear' LANGUAGE JAVA;

CREATE TEMPORARY TABLE `orders$1` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `items` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,
  PRIMARY KEY (`id`, `time`) NOT ENFORCED,
  WATERMARK FOR `time` AS (`time` - INTERVAL '0.001' SECOND)
) WITH (
  'format' = 'json',
  'path' = '/mnt/build/data',
  'source.monitor-interval' = '0',
  'connector' = 'filesystem',
  'source.path.regex-pattern' = 'to be determined'
);

CREATE TEMPORARY TABLE `customers$1` (
  `id` BIGINT NOT NULL,
  `first_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `last_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `ip_address` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `country` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `changed_on` BIGINT NOT NULL,
  `timestamp` AS EPOCHMILLITOTIMESTAMP(`changed_on`),
  PRIMARY KEY (`id`, `changed_on`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS (`timestamp` - INTERVAL '0.001' SECOND)
) WITH (
  'format' = 'json',
  'path' = '/mnt/build/data',
  'source.monitor-interval' = '0',
  'connector' = 'filesystem',
  'source.path.regex-pattern' = 'to be determined'
);

CREATE TEMPORARY TABLE `productvisit$1` (
  `customerid` BIGINT NOT NULL,
  `productid` BIGINT NOT NULL,
  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL METADATA FROM 'timestamp',
  WATERMARK FOR `event_time` AS (`event_time` - INTERVAL '0.0' SECOND)
) WITH (
  'properties.bootstrap.servers' = 'kafka:9092',
  'properties.auto.offset.reset' = 'earliest',
  'connector' = 'kafka',
  'format' = 'json',
  'properties.group.id' = 'groupid',
  'topic' = 'seedshop-mutation-productvisit',
  'scan.startup.mode' = 'earliest-offset'
);

CREATE TEMPORARY TABLE `products$1` (
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `sizing` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `weight_in_gram` BIGINT NOT NULL,
  `type` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `usda_id` BIGINT NOT NULL,
  `updated` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`, `updated`) NOT ENFORCED,
  WATERMARK FOR `updated` AS (`updated` - INTERVAL '0.001' SECOND)
) WITH (
  'format' = 'json',
  'path' = '/mnt/build/data',
  'source.monitor-interval' = '0',
  'connector' = 'filesystem',
  'source.path.regex-pattern' = 'to be determined'
);

CREATE TEMPORARY TABLE `category_visits$1` (
  `__pk1$id` BIGINT NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `visits` BIGINT NOT NULL,
  `_event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`__pk1$id`, `category`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'category_visits$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `customers$3` (
  `id` BIGINT NOT NULL,
  `first_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `last_name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `ip_address` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `country` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `changed_on` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `country0` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'customers$3',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `monthly_by_country$1` (
  `__pk1$id` BIGINT NOT NULL,
  `country` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `month` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `quantity` BIGINT NOT NULL,
  `spend` DOUBLE NOT NULL,
  `weight` BIGINT NOT NULL,
  PRIMARY KEY (`__pk1$id`, `country`, `month`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'monthly_by_country$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `orders$2` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `items` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),
  PRIMARY KEY (`id`, `time`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'orders$2',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `past_purchases$1` (
  `__pk1$id` BIGINT NOT NULL,
  `productid` BIGINT NOT NULL,
  `num_orders` BIGINT NOT NULL,
  `total_quantity` BIGINT NOT NULL,
  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`__pk1$id`, `productid`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'past_purchases$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `product_visits$1` (
  `__pk1$id` BIGINT NOT NULL,
  `productid` BIGINT NOT NULL,
  `visits` BIGINT NOT NULL,
  `_event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`__pk1$id`, `productid`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'product_visits$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `products$3` (
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `sizing` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `weight_in_gram` BIGINT NOT NULL,
  `type` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `usda_id` BIGINT NOT NULL,
  `updated` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'products$3',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `spending$1` (
  `__pk1$id` BIGINT NOT NULL,
  `week` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `spend` DOUBLE NOT NULL,
  `saved` DOUBLE NOT NULL,
  PRIMARY KEY (`__pk1$id`, `week`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'spending$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `totals$1` (
  `__pk1$id` BIGINT NOT NULL,
  `__pk3$time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `price` DOUBLE NOT NULL,
  `saving` DOUBLE NOT NULL,
  PRIMARY KEY (`__pk1$id`, `__pk3$time`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'totals$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE VIEW `table$1`
AS
SELECT *
FROM (SELECT `id`, `name`, `sizing`, `weight_in_gram`, `type`, `category`, `usda_id`, `updated`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated` DESC NULLS LAST)) AS `_rownum`
FROM `products$1`) AS `t`
WHERE (`_rownum` = 1);

CREATE VIEW `table$2`
AS
SELECT *
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `ip_address`, `country`, `changed_on`, `timestamp`, `country0`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `timestamp` DESC NULLS LAST)) AS `_rownum`
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `ip_address`, `country`, `changed_on`, `timestamp`, COALESCE(`country`, 'none') AS `country0`
FROM `customers$1`) AS `t1`) AS `t2`
WHERE (`_rownum` = 1);

CREATE VIEW `table$3`
AS
SELECT *
FROM (SELECT *
FROM `productvisit$1` AS `$cor10`
INNER JOIN `table$2` FOR SYSTEM_TIME AS OF `$cor10`.`event_time` AS `t3` ON (`t3`.`id` = `$cor10`.`customerid`)) AS `$cor9`
INNER JOIN `table$1` FOR SYSTEM_TIME AS OF `$cor9`.`event_time` AS `t0` ON (`$cor9`.`productid` = `t0`.`id`);

CREATE VIEW `table$4`
AS
SELECT *
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `ip_address`, `country`, `changed_on`, `timestamp`, `country0`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `timestamp` DESC NULLS LAST)) AS `_rownum`
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `ip_address`, `country`, `changed_on`, `timestamp`, COALESCE(`country`, 'none') AS `country0`
FROM `customers$1`) AS `t`) AS `t0`
WHERE (`_rownum` = 1);

CREATE VIEW `table$5`
AS
SELECT *
FROM (SELECT `id`, `name`, `sizing`, `weight_in_gram`, `type`, `category`, `usda_id`, `updated`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `updated` DESC NULLS LAST)) AS `_rownum`
FROM `products$1`) AS `t2`
WHERE (`_rownum` = 1);

CREATE VIEW `table$6`
AS
SELECT `$cor11`.`id0` AS `__pk6$id`, `t1`.`country0` AS `country`, ENDOFMONTH(`$cor11`.`time`) AS `month`, `$cor11`.`quantity`, (`$cor11`.`quantity` * `$cor11`.`unit_price`) AS `$f4`, (`$cor11`.`quantity` * `$cor11`.`weight_in_gram`) AS `$f5`, `$cor11`.`id`, `$cor11`.`time`, `$cor11`.`productid`
FROM (SELECT *
FROM (SELECT `$cor8`.`id`, `$cor8`.`time`, `$cor8`.`customerid`, `t50`.`productid`, `t50`.`quantity`, `t50`.`unit_price`, `t50`.`discount`
FROM `orders$1` AS `$cor8`,
UNNEST(`$cor8`.`items`) AS `t50`) AS `$cor12`
INNER JOIN `table$5` FOR SYSTEM_TIME AS OF `$cor12`.`time` AS `t3` ON (`$cor12`.`productid` = `t3`.`id`)) AS `$cor11`
INNER JOIN `table$4` FOR SYSTEM_TIME AS OF `$cor11`.`time` AS `t1` ON (`$cor11`.`customerid` = `t1`.`id`);

CREATE VIEW `table$7`
AS
SELECT *
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `ip_address`, `country`, `changed_on`, `timestamp`, `country0`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `timestamp` DESC NULLS LAST)) AS `_rownum`
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `ip_address`, `country`, `changed_on`, `timestamp`, COALESCE(`country`, 'none') AS `country0`
FROM `customers$1`) AS `t`) AS `t0`
WHERE (`_rownum` = 1);

CREATE VIEW `table$8`
AS
SELECT *
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `ip_address`, `country`, `changed_on`, `timestamp`, `country0`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `timestamp` DESC NULLS LAST)) AS `_rownum`
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `ip_address`, `country`, `changed_on`, `timestamp`, COALESCE(`country`, 'none') AS `country0`
FROM `customers$1`) AS `t`) AS `t0`
WHERE (`_rownum` = 1);

CREATE VIEW `table$9`
AS
SELECT *
FROM `productvisit$1` AS `$cor14`
INNER JOIN `table$8` FOR SYSTEM_TIME AS OF `$cor14`.`event_time` AS `t1` ON (`t1`.`id` = `$cor14`.`customerid`);

CREATE VIEW `table$10`
AS
SELECT *
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `ip_address`, `country`, `changed_on`, `timestamp`, `country0`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `timestamp` DESC NULLS LAST)) AS `_rownum`
FROM (SELECT `id`, `first_name`, `last_name`, `email`, `ip_address`, `country`, `changed_on`, `timestamp`, COALESCE(`country`, 'none') AS `country0`
FROM `customers$1`) AS `t`) AS `t0`
WHERE (`_rownum` = 1);

CREATE VIEW `table$11`
AS
SELECT `$cor0`.`id` AS `__pk1$id`, `$cor0`.`time` AS `__pk2$time`, ((`t50`.`quantity` * `t50`.`unit_price`) - COALESCE(`t50`.`discount`, 0.0)) AS `$f2`, COALESCE(`t50`.`discount`, 0.0) AS `$f3`, `t50`.`productid`
FROM `orders$1` AS `$cor0`,
UNNEST(`$cor0`.`items`) AS `t50`;

CREATE VIEW `table$12`
AS
SELECT `t3`.`__pk3$id`, ENDOFWEEK(`t3`.`time`) AS `week`, `t10`.`price`, `t10`.`saving`, `t3`.`id`, `t3`.`time`
FROM (SELECT `t1`.`id` AS `__pk3$id`, `$cor15`.`id`, `$cor15`.`customerid`, `$cor15`.`time`, `$cor15`.`items`
FROM (SELECT `id`, `customerid`, `time`, `items`, `customerid` AS `customerid4`
FROM `orders$1`) AS `$cor15`
INNER JOIN `table$10` FOR SYSTEM_TIME AS OF `$cor15`.`time` AS `t1` ON (`t1`.`id` = `$cor15`.`customerid4`)) AS `t3`
INNER JOIN (SELECT `__pk1$id`, `window_time` AS `__pk3$time`, SUM(`$f2`) AS `price`, SUM(`$f3`) AS `saving`
FROM TABLE(TUMBLE((TABLE `table$11`), (DESCRIPTOR(`__pk2$time`)), INTERVAL '0.001' SECOND(1))) AS `t7`
GROUP BY `__pk1$id`, `window_start`, `window_end`, `window_time`) AS `t10` ON ((`t3`.`id` = `t10`.`__pk1$id`) AND (`t3`.`time` = `t10`.`__pk3$time`));

CREATE VIEW `table$13`
AS
SELECT `$cor0`.`id` AS `__pk1$id`, `$cor0`.`time` AS `__pk2$time`, ((`t00`.`quantity` * `t00`.`unit_price`) - COALESCE(`t00`.`discount`, 0.0)) AS `$f2`, COALESCE(`t00`.`discount`, 0.0) AS `$f3`, `t00`.`productid`
FROM `orders$1` AS `$cor0`,
UNNEST(`$cor0`.`items`) AS `t00`;

EXECUTE STATEMENT SET BEGIN
INSERT INTO `category_visits$1`
(SELECT `id` AS `__pk1$id`, `category`, COUNT(*) AS `visits`, `window_time` AS `_event_time`
FROM TABLE(HOP((TABLE `table$3`), (DESCRIPTOR(`event_time`)), INTERVAL '1728' SECOND(7), INTERVAL '86400' SECOND(8))) AS `t5`
GROUP BY `id`, `category`, `window_start`, `window_end`, `window_time`)
;
INSERT INTO `customers$3`
(SELECT `id`, `first_name`, `last_name`, `email`, `ip_address`, `country`, `changed_on`, `timestamp`, COALESCE(`country`, 'none') AS `country0`
FROM `customers$1`)
;
INSERT INTO `monthly_by_country$1`
(SELECT `__pk6$id` AS `__pk1$id`, `country`, `window_time` AS `month`, SUM(`quantity`) AS `quantity`, SUM(`$f4`) AS `spend`, SUM(`$f5`) AS `weight`
FROM TABLE(TUMBLE((TABLE `table$6`), (DESCRIPTOR(`time`)), INTERVAL '2629746' SECOND(10), INTERVAL '0' SECOND(1))) AS `t9`
GROUP BY `__pk6$id`, `country`, `window_start`, `window_end`, `window_time`)
;
INSERT INTO `orders$2`
(SELECT `id`, `customerid`, `time`, TOJSON(`items`) AS `items`
FROM `orders$1`)
;
INSERT INTO `past_purchases$1`
(SELECT `$cor7`.`id0` AS `__pk1$id`, `t40`.`productid`, COUNT(*) AS `num_orders`, SUM(`t40`.`quantity`) AS `total_quantity`, MAX(`$cor7`.`time`) AS `__timestamp`
FROM (SELECT *
FROM `orders$1` AS `$cor13`
INNER JOIN `table$7` FOR SYSTEM_TIME AS OF `$cor13`.`time` AS `t1` ON (`$cor13`.`customerid` = `t1`.`id`)) AS `$cor7`,
UNNEST(`$cor7`.`items`) AS `t40`
GROUP BY `$cor7`.`id0`, `t40`.`productid`)
;
INSERT INTO `product_visits$1`
(SELECT `id` AS `__pk1$id`, `productid`, COUNT(*) AS `visits`, `window_time` AS `_event_time`
FROM TABLE(HOP((TABLE `table$9`), (DESCRIPTOR(`event_time`)), INTERVAL '51840' SECOND(8), INTERVAL '2592000' SECOND(10))) AS `t2`
GROUP BY `productid`, `id`, `window_start`, `window_end`, `window_time`)
;
INSERT INTO `products$3`
(SELECT *
FROM `products$1`)
;
INSERT INTO `spending$1`
(SELECT `__pk3$id` AS `__pk1$id`, `window_time` AS `week`, SUM(`price`) AS `spend`, SUM(`saving`) AS `saved`
FROM TABLE(TUMBLE((TABLE `table$12`), (DESCRIPTOR(`time`)), INTERVAL '604800' SECOND(9), INTERVAL '0' SECOND(1))) AS `t12`
GROUP BY `__pk3$id`, `window_start`, `window_end`, `window_time`)
;
INSERT INTO `totals$1`
(SELECT `__pk1$id`, `window_time` AS `__pk3$time`, SUM(`$f2`) AS `price`, SUM(`$f3`) AS `saving`
FROM TABLE(TUMBLE((TABLE `table$13`), (DESCRIPTOR(`__pk2$time`)), INTERVAL '0.001' SECOND(1))) AS `t2`
GROUP BY `__pk1$id`, `window_start`, `window_end`, `window_time`)
;
END;


