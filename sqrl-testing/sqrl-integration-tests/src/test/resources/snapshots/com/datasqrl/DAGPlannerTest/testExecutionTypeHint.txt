>>>pipeline_explain.txt
=== Customer
ID:     customer_2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalTableScan(table=[[customer_1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

=== CustomerAgg1
ID:     customeragg1_1
Type:   state
Stage:  streams
Inputs: customer_2
Primary Key: customerid
Timestamp  : _ingest_time
Schema:
 - customerid: BIGINT NOT NULL
 - num: BIGINT NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=customerid limit=1 sort=#2: _ingest_time TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalProject(customerid=[$0], num=[$2], _ingest_time=[$1])
  LogicalAggregate(group=[{0, 4}], num=[COUNT()]) hints[SlidingAggregationHint options:[4, 3600000, 72000]]
    LogicalTableScan(table=[[customer_2]])

=== CustomerAgg2
ID:     customeragg2_1
Type:   state
Stage:  database
Inputs: customer_2
Primary Key: customerid
Timestamp  : _ingest_time
Schema:
 - customerid: BIGINT NOT NULL
 - num: BIGINT NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalAggregate(group=[{0}], num=[COUNT()], __timestamp=[MAX($4)])
  LogicalFilter(condition=[<(NOW(), +($4, 3600000:INTERVAL SECOND(7)))])
    LogicalTableScan(table=[[customer_2]])

=== CustomerAgg3
ID:     customeragg3_1
Type:   state
Stage:  streams
Inputs: customer_2
Primary Key: customerid
Timestamp  : _ingest_time
Schema:
 - customerid: BIGINT NOT NULL
 - num: BIGINT NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=customerid limit=1 sort=#2: _ingest_time TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalProject(customerid=[$0], num=[$2], _ingest_time=[$1])
  LogicalAggregate(group=[{0, 4}], num=[COUNT()]) hints[SlidingAggregationHint options:[4, 3600000, 72000]]
    LogicalTableScan(table=[[customer_2]])

=== Orders
ID:     orders_2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalTableScan(table=[[orders_1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

=== Product
ID:     product_2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - productid: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - description: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - category: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalTableScan(table=[[product_1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptostring` AS 'com.datasqrl.time.TimestampToString' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofmonth` AS 'com.datasqrl.time.EndOfMonth' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptoepochmilli` AS 'com.datasqrl.time.TimestampToEpochMilli' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofweek` AS 'com.datasqrl.time.EndOfWeek' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `parsetimestamp` AS 'com.datasqrl.time.ParseTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `uuid` AS 'com.datasqrl.secure.Uuid' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochmillitotimestamp` AS 'com.datasqrl.time.EpochMilliToTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `ToJson` AS 'com.datasqrl.json.ToJson' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofminute` AS 'com.datasqrl.time.EndOfMinute' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptoepoch` AS 'com.datasqrl.time.TimestampToEpoch' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofsecond` AS 'com.datasqrl.time.EndOfSecond' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochtotimestamp` AS 'com.datasqrl.time.EpochToTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofday` AS 'com.datasqrl.time.EndOfDay' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `atzone` AS 'com.datasqrl.time.AtZone' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofhour` AS 'com.datasqrl.time.EndOfHour' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofyear` AS 'com.datasqrl.time.EndOfYear' LANGUAGE JAVA;",
    "CREATE TEMPORARY TABLE `customer_1` (\n  `customerid` BIGINT NOT NULL,\n  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `lastUpdated` BIGINT NOT NULL,\n  `_ingest_time` AS PROCTIME(),\n  `_uuid` AS UUID(),\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'format' = 'json',\n  'path' = 'file:/mock',\n  'source.monitor-interval' = '10000',\n  'connector' = 'filesystem',\n  'source.path.regex-pattern' = ''\n);",
    "CREATE TEMPORARY TABLE `orders_1` (\n  `id` BIGINT NOT NULL,\n  `customerid` BIGINT NOT NULL,\n  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `entries` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,\n  `_ingest_time` AS PROCTIME(),\n  `_uuid` AS UUID(),\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'format' = 'json',\n  'path' = 'file:/mock',\n  'source.monitor-interval' = '10000',\n  'connector' = 'filesystem',\n  'source.path.regex-pattern' = ''\n);",
    "CREATE TEMPORARY TABLE `product_1` (\n  `productid` BIGINT NOT NULL,\n  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `_ingest_time` AS PROCTIME(),\n  `_uuid` AS UUID(),\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'format' = 'json',\n  'path' = 'file:/mock',\n  'source.monitor-interval' = '10000',\n  'connector' = 'filesystem',\n  'source.path.regex-pattern' = ''\n);",
    "CREATE TEMPORARY TABLE `customer_2` (\n  `customerid` BIGINT NOT NULL,\n  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `lastUpdated` BIGINT NOT NULL,\n  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'customer_2',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `customeragg1_1` (\n  `customerid` BIGINT NOT NULL,\n  `num` BIGINT NOT NULL,\n  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`customerid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'customeragg1_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `customeragg3_1` (\n  `customerid` BIGINT NOT NULL,\n  `num` BIGINT NOT NULL,\n  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`customerid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'customeragg3_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `orders_2` (\n  `id` BIGINT NOT NULL,\n  `customerid` BIGINT NOT NULL,\n  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `entries` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),\n  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'orders_2',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `product_2` (\n  `productid` BIGINT NOT NULL,\n  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'product_2',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT *\nFROM `customer_1`;",
    "CREATE VIEW `table$2`\nAS\nSELECT *\nFROM `customer_1`;",
    "CREATE VIEW `table$3`\nAS\nSELECT `customerid`, COUNT(*) AS `num`, `window_time` AS `_ingest_time`\nFROM TABLE(HOP((TABLE `table$2`), (DESCRIPTOR(`_ingest_time`)), INTERVAL '72' SECOND(5), INTERVAL '3600' SECOND(7))) AS `t`\nGROUP BY `customerid`, `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$4`\nAS\nSELECT *\nFROM `customer_1`;",
    "CREATE VIEW `table$5`\nAS\nSELECT `customerid`, COUNT(*) AS `num`, `window_time` AS `_ingest_time`\nFROM TABLE(HOP((TABLE `table$4`), (DESCRIPTOR(`_ingest_time`)), INTERVAL '72' SECOND(5), INTERVAL '3600' SECOND(7))) AS `t`\nGROUP BY `customerid`, `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$6`\nAS\nSELECT `id`, `customerid`, `time`, TOJSON(`entries`) AS `entries`, `_ingest_time`, `_uuid`\nFROM `orders_1`;",
    "CREATE VIEW `table$7`\nAS\nSELECT *\nFROM `product_1`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `customer_2`\n(SELECT *\nFROM `table$1`)\n;\nINSERT INTO `customeragg1_1`\n(SELECT *\nFROM `table$3`)\n;\nINSERT INTO `customeragg3_1`\n(SELECT *\nFROM `table$5`)\n;\nINSERT INTO `orders_2`\n(SELECT *\nFROM `table$6`)\n;\nINSERT INTO `product_2`\n(SELECT *\nFROM `table$7`)\n;\nEND;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "filesystem"
  ],
  "formats" : [
    "json"
  ]
}
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "customer_2",
      "columns" : [
        "\"customerid\" BIGINT NOT NULL",
        "\"email\" TEXT NOT NULL",
        "\"name\" TEXT NOT NULL",
        "\"lastUpdated\" BIGINT NOT NULL",
        "\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"_uuid\" TEXT NOT NULL"
      ],
      "primaryKeys" : [
        "\"_uuid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS customer_2 (\"customerid\" BIGINT NOT NULL,\"email\" TEXT NOT NULL,\"name\" TEXT NOT NULL,\"lastUpdated\" BIGINT NOT NULL,\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL,\"_uuid\" TEXT NOT NULL , PRIMARY KEY (\"_uuid\"));"
    },
    {
      "name" : "customeragg1_1",
      "columns" : [
        "\"customerid\" BIGINT NOT NULL",
        "\"num\" BIGINT NOT NULL",
        "\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"customerid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS customeragg1_1 (\"customerid\" BIGINT NOT NULL,\"num\" BIGINT NOT NULL,\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"customerid\"));"
    },
    {
      "name" : "customeragg3_1",
      "columns" : [
        "\"customerid\" BIGINT NOT NULL",
        "\"num\" BIGINT NOT NULL",
        "\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"customerid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS customeragg3_1 (\"customerid\" BIGINT NOT NULL,\"num\" BIGINT NOT NULL,\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"customerid\"));"
    },
    {
      "name" : "orders_2",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"customerid\" BIGINT NOT NULL",
        "\"time\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"entries\" JSONB NOT NULL",
        "\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"_uuid\" TEXT NOT NULL"
      ],
      "primaryKeys" : [
        "\"_uuid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS orders_2 (\"id\" BIGINT NOT NULL,\"customerid\" BIGINT NOT NULL,\"time\" TIMESTAMP WITH TIME ZONE NOT NULL,\"entries\" JSONB NOT NULL,\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL,\"_uuid\" TEXT NOT NULL , PRIMARY KEY (\"_uuid\"));"
    },
    {
      "name" : "product_2",
      "columns" : [
        "\"productid\" BIGINT NOT NULL",
        "\"name\" TEXT NOT NULL",
        "\"description\" TEXT NOT NULL",
        "\"category\" TEXT NOT NULL",
        "\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"_uuid\" TEXT NOT NULL"
      ],
      "primaryKeys" : [
        "\"_uuid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS product_2 (\"productid\" BIGINT NOT NULL,\"name\" TEXT NOT NULL,\"description\" TEXT NOT NULL,\"category\" TEXT NOT NULL,\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL,\"_uuid\" TEXT NOT NULL , PRIMARY KEY (\"_uuid\"));"
    },
    {
      "indexName" : "customer_2_btree_c0c4",
      "tableName" : "customer_2",
      "columns" : [
        "customerid",
        "_ingest_time"
      ],
      "type" : "BTREE",
      "sql" : "CREATE INDEX IF NOT EXISTS customer_2_btree_c0c4 ON customer_2 USING btree (\"customerid\",\"_ingest_time\");"
    },
    {
      "indexName" : "customer_2_btree_c4",
      "tableName" : "customer_2",
      "columns" : [
        "_ingest_time"
      ],
      "type" : "BTREE",
      "sql" : "CREATE INDEX IF NOT EXISTS customer_2_btree_c4 ON customer_2 USING btree (\"_ingest_time\");"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Customer",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"customer_2\"\nORDER BY \"_ingest_time\" DESC NULLS LAST, \"_uuid\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CustomerAgg1",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "customerid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"customerid\", \"num\", \"_ingest_time\", 1 AS \"__pk\"\nFROM \"customeragg1_1\"\nWHERE \"customerid\" = $1\nORDER BY 1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "customerid"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"customeragg1_1\"\nORDER BY \"customerid\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CustomerAgg2",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"customerid\", COUNT(*) AS \"num\", MAX(\"_ingest_time\") AS \"__timestamp\"\nFROM \"customer_2\"\nWHERE CURRENT_TIMESTAMP < (\"_ingest_time\" + INTERVAL '3600' SECOND(7))\nGROUP BY \"customerid\"\nORDER BY \"customerid\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "customerid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"customerid\", COUNT(*) AS \"num\", MAX(\"_ingest_time\") AS \"_ingest_time\", 1 AS \"__pk\"\nFROM \"customer_2\"\nWHERE CURRENT_TIMESTAMP < (\"_ingest_time\" + INTERVAL '3600' SECOND(7))\nGROUP BY \"customerid\"\nHAVING \"customerid\" = $1\nORDER BY 1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "customerid"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CustomerAgg3",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"customeragg3_1\"\nORDER BY \"customerid\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "customerid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"customerid\", \"num\", \"_ingest_time\", 1 AS \"__pk\"\nFROM \"customeragg3_1\"\nWHERE \"customerid\" = $1\nORDER BY 1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "customerid"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Orders",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"orders_2\"\nORDER BY \"_ingest_time\" DESC NULLS LAST, \"_uuid\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Product",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"product_2\"\nORDER BY \"_ingest_time\" DESC NULLS LAST, \"_uuid\"",
              "parameters" : [ ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "type Customer {\n  customerid: Float!\n  email: String!\n  name: String!\n  lastUpdated: Float!\n}\n\ntype CustomerAgg1 {\n  customerid: Float!\n  num: Float!\n}\n\ntype CustomerAgg2 {\n  customerid: Float!\n  num: Float!\n}\n\ntype CustomerAgg3 {\n  customerid: Float!\n  num: Float!\n}\n\n\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\ntype Orders {\n  id: Float!\n  customerid: Float!\n  time: DateTime!\n  entries(limit: Int = 10, offset: Int = 0): [entries!]\n}\n\ntype Product {\n  productid: Float!\n  name: String!\n  description: String!\n  category: String!\n}\n\ntype Query {\n  Customer(limit: Int = 10, offset: Int = 0): [Customer!]\n  CustomerAgg1(customerid: Float, limit: Int = 10, offset: Int = 0): [CustomerAgg1!]\n  CustomerAgg2(customerid: Float, limit: Int = 10, offset: Int = 0): [CustomerAgg2!]\n  CustomerAgg3(customerid: Float, limit: Int = 10, offset: Int = 0): [CustomerAgg3!]\n  Orders(limit: Int = 10, offset: Int = 0): [Orders!]\n  Product(limit: Int = 10, offset: Int = 0): [Product!]\n}\n\ntype entries {\n  productid: Float!\n  quantity: Float!\n  unit_price: Float!\n  discount: Float\n}\n"
    }
  }
}
