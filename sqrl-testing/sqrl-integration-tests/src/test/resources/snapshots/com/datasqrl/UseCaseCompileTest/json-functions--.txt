>>>pipeline_explain.txt
=== json
ID:     json_2
Type:   stream
Stage:  flink
Primary Key: id
Timestamp  : timestamp
Schema:
 - id: BIGINT NOT NULL
 - val: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[json_1]])

=== UnmodifiedJsonData
ID:     unmodifiedjsondata_1
Type:   stream
Stage:  flink
Inputs: json_2
Primary Key: id
Timestamp  : _timestamp
Schema:
 - id: BIGINT NOT NULL
 - val: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - json_col: RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI=')
 - json_col_2: RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI=')
 - json_col_3: RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI=')
 - json_col_4: RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI=')
 - _timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - sort: #0: id BIGINT ASC
Plan:
LogicalProject(id=[$0], val=[$1], json_col=[TOJSON('{"a": 1}')], json_col_2=[TOJSON('{"a": 2}')], json_col_3=[TOJSON('{"b": 1}')], json_col_4=[TOJSON('{"b": 2}')], _timestamp=[$2])
  LogicalTableScan(table=[[json_2]])

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `jsonExtract` AS 'com.datasqrl.json.JsonExtract' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `jsonQuery` AS 'com.datasqrl.json.JsonQuery' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `toJson` AS 'com.datasqrl.json.ToJson' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `jsonArrayAgg` AS 'com.datasqrl.json.JsonArrayAgg' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `jsonObjectAgg` AS 'com.datasqrl.json.JsonObjectAgg' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `jsonExists` AS 'com.datasqrl.json.JsonExists' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `jsonConcat` AS 'com.datasqrl.json.JsonConcat' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `jsonObject` AS 'com.datasqrl.json.JsonObject' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `jsonArray` AS 'com.datasqrl.json.JsonArray' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `jsonToString` AS 'com.datasqrl.json.JsonToString' LANGUAGE JAVA;",
    "CREATE TABLE `json_1` (\n  `id` BIGINT NOT NULL,\n  `val` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`) NOT ENFORCED,\n  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND\n) WITH (\n  'format' = 'flexible-json',\n  'path' = '${DATA_PATH}/json.jsonl',\n  'connector' = 'filesystem'\n);",
    "CREATE TABLE `json_2` (\n  `id` BIGINT NOT NULL,\n  `val` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'json_2',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TABLE `unmodifiedjsondata_1` (\n  `id` BIGINT NOT NULL,\n  `val` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `json_col` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),\n  `json_col_2` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),\n  `json_col_3` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),\n  `json_col_4` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),\n  `_timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`id`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'unmodifiedjsondata_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT *\nFROM `json_1`;",
    "CREATE VIEW `table$2`\nAS\nSELECT `id`, `val`, `default_catalog`.`default_database`.`TOJSON`('{\"a\": 1}') AS `json_col`, `default_catalog`.`default_database`.`TOJSON`('{\"a\": 2}') AS `json_col_2`, `default_catalog`.`default_database`.`TOJSON`('{\"b\": 1}') AS `json_col_3`, `default_catalog`.`default_database`.`TOJSON`('{\"b\": 2}') AS `json_col_4`, `timestamp` AS `_timestamp`\nFROM `json_1`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `json_2`\n(SELECT *\n FROM `table$1`)\n;\nINSERT INTO `unmodifiedjsondata_1`\n (SELECT *\n  FROM `table$2`)\n ;\n END;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "filesystem"
  ],
  "formats" : [
    "flexible-json"
  ]
}
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "json_2",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"val\" TEXT NOT NULL",
        "\"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"id\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS json_2 (\"id\" BIGINT NOT NULL,\"val\" TEXT NOT NULL,\"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"id\"));"
    },
    {
      "name" : "unmodifiedjsondata_1",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"val\" TEXT NOT NULL",
        "\"json_col\" JSONB ",
        "\"json_col_2\" JSONB ",
        "\"json_col_3\" JSONB ",
        "\"json_col_4\" JSONB ",
        "\"_timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"id\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS unmodifiedjsondata_1 (\"id\" BIGINT NOT NULL,\"val\" TEXT NOT NULL,\"json_col\" JSONB ,\"json_col_2\" JSONB ,\"json_col_3\" JSONB ,\"json_col_4\" JSONB ,\"_timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"id\"));"
    }
  ],
  "views" : [
    {
      "name" : "json",
      "sql" : "CREATE OR REPLACE VIEW \"json\"(\"id\", \"val\", \"timestamp\") AS SELECT *\nFROM \"json_2\"\nORDER BY \"timestamp\" DESC NULLS LAST, \"id\";"
    },
    {
      "name" : "UnmodifiedJsonData",
      "sql" : "CREATE OR REPLACE VIEW \"UnmodifiedJsonData\"(\"id\", \"val\", \"json_col\", \"json_col_2\", \"json_col_3\", \"json_col_4\", \"_timestamp\") AS SELECT *\nFROM \"unmodifiedjsondata_1\"\nORDER BY \"id\";"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "json",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"json_2\"\nORDER BY \"timestamp\" DESC NULLS LAST, \"id\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "id"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"json_2\"\nWHERE \"id\" = $1\nORDER BY \"timestamp\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "id"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "UnmodifiedJsonData",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"unmodifiedjsondata_1\"\nORDER BY \"id\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "id"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"unmodifiedjsondata_1\"\nWHERE \"id\" = $1\nORDER BY \"id\"",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "id"
                }
              ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "\"An RFC-3339 compliant Full Date Scalar\"\nscalar Date\n\n\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"A JSON scalar\"\nscalar JSON\n\n\"24-hour clock time value string in the format `hh:mm:ss` or `hh:mm:ss.sss`.\"\nscalar LocalTime\n\ntype Query {\n  json(id: Float, limit: Int = 10, offset: Int = 0): [json!]\n  UnmodifiedJsonData(id: Float, limit: Int = 10, offset: Int = 0): [UnmodifiedJsonData!]\n}\n\ntype UnmodifiedJsonData {\n  id: Float!\n  val: String!\n  json_col: JSON\n  json_col_2: JSON\n  json_col_3: JSON\n  json_col_4: JSON\n}\n\ntype json {\n  id: Float!\n  val: String!\n  timestamp: DateTime!\n}\n"
    }
  }
}
