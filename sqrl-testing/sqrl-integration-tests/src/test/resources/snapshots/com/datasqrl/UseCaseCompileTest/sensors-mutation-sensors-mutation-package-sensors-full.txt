>>>pipeline_explain.txt
=== HighTempAlert
ID:     hightempalert_1
Type:   stream
Stage:  flink
Inputs: sensorreading_2
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - sensorid: BIGINT NOT NULL
 - temperature: DECIMAL(10, 5) NOT NULL
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalFilter(condition=[>($1, 50)])
  LogicalTableScan(table=[[sensorreading_2]])

=== kafka.HighTempAlert
ID:     hightempalert_1_1
Type:   export
Stage:  flink
Inputs: hightempalert_1

=== SecReading
ID:     secreading_1
Type:   stream
Stage:  flink
Inputs: sensorreading_2
Primary Key: sensorid, timeSec
Timestamp  : timeSec
Schema:
 - sensorid: BIGINT NOT NULL
 - timeSec: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - temperature: DECIMAL(38, 6) NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], temperature=[AVG($2)]) hints[TumbleAggregationHint options:[1, FUNCTION, 4, 1000, 0]]
  LogicalProject(sensorid=[$0], timeSec=[endOfSecond($3)], temperature=[$1], _uuid=[$2], event_time=[$3])
    LogicalTableScan(table=[[sensorreading_2]])

=== SensorMaxTemp
ID:     sensormaxtemp_1
Type:   state
Stage:  flink
Inputs: sensorreading_2
Primary Key: sensorid
Timestamp  : __timestamp
Schema:
 - sensorid: BIGINT NOT NULL
 - maxTemp: DECIMAL(10, 5) NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalAggregate(group=[{0}], maxTemp=[MAX($1)], __timestamp=[MAX($3)])
  LogicalTableScan(table=[[sensorreading_2]])

=== SensorReading
ID:     sensorreading_2
Type:   stream
Stage:  flink
Primary Key: _uuid
Timestamp  : event_time
Schema:
 - sensorid: BIGINT NOT NULL
 - temperature: DECIMAL(10, 5) NOT NULL
 - _uuid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[sensorreading_1]])

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofsecond` AS 'com.datasqrl.time.EndOfSecond' LANGUAGE JAVA;",
    "CREATE TEMPORARY TABLE `sensorreading_1` (\n  `sensorid` BIGINT NOT NULL,\n  `temperature` DECIMAL(10, 5) NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL METADATA FROM 'timestamp',\n  WATERMARK FOR `event_time` AS `event_time` - INTERVAL '0.0' SECOND\n) WITH (\n  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',\n  'properties.auto.offset.reset' = 'earliest',\n  'connector' = 'kafka',\n  'format' = 'flexible-json',\n  'properties.group.id' = '${PROPERTIES_GROUP_ID}',\n  'topic' = 'sensors-mutation-addreading',\n  'scan.startup.mode' = 'group-offsets'\n);",
    "CREATE TEMPORARY TABLE `secreading_1` (\n  `sensorid` BIGINT NOT NULL,\n  `timeSec` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `temperature` DECIMAL(38, 6) NOT NULL,\n  PRIMARY KEY (`sensorid`, `timeSec`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'secreading_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `sensormaxtemp_1` (\n  `sensorid` BIGINT NOT NULL,\n  `maxTemp` DECIMAL(10, 5) NOT NULL,\n  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`sensorid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'sensormaxtemp_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `hightempalert_1_1` (\n  `sensorid` BIGINT NOT NULL,\n  `temperature` DECIMAL(10, 5) NOT NULL,\n  `_uuid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\n) WITH (\n  'properties.bootstrap.servers' = '${PROPERTIES_BOOTSTRAP_SERVERS}',\n  'properties.auto.offset.reset' = 'earliest',\n  'connector' = 'kafka',\n  'format' = 'flexible-json',\n  'properties.group.id' = '${PROPERTIES_GROUP_ID}',\n  'topic' = 'hightempalert_1',\n  'scan.startup.mode' = 'group-offsets'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT `sensorid`, ENDOFSECOND(`event_time`) AS `timeSec`, `temperature`, `_uuid`, `event_time`\nFROM `sensorreading_1`;",
    "CREATE VIEW `table$2`\nAS\nSELECT `sensorid`, `window_time` AS `timeSec`, AVG(`temperature`) AS `temperature`\nFROM TABLE(TUMBLE(TABLE `table$1`, DESCRIPTOR(`event_time`), INTERVAL '1' SECOND(4), INTERVAL '0' SECOND(1))) AS `t0`\nGROUP BY `sensorid`, `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$3`\nAS\nSELECT `sensorid`, MAX(`temperature`) AS `maxTemp`, MAX(`event_time`) AS `__timestamp`\nFROM `sensorreading_1`\nGROUP BY `sensorid`;",
    "CREATE VIEW `table$4`\nAS\nSELECT *\nFROM `sensorreading_1`\nWHERE `temperature` > 50;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `secreading_1`\n(SELECT *\n FROM `table$2`)\n;\nINSERT INTO `sensormaxtemp_1`\n (SELECT *\n  FROM `table$3`)\n ;\n INSERT INTO `hightempalert_1_1`\n  (SELECT *\n   FROM `table$4`)\n  ;\n  END;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "kafka"
  ],
  "formats" : [
    "flexible-json"
  ]
}
>>>kafka.json
{
  "topics" : [
    {
      "name" : "hightempalert_1",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    },
    {
      "name" : "sensors-mutation-addreading",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "replicasAssignments" : { },
      "config" : { }
    }
  ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "secreading_1",
      "columns" : [
        "\"sensorid\" BIGINT NOT NULL",
        "\"timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"temperature\" NUMERIC NOT NULL"
      ],
      "primaryKeys" : [
        "\"sensorid\"",
        "\"timeSec\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS secreading_1 (\"sensorid\" BIGINT NOT NULL,\"timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL,\"temperature\" NUMERIC NOT NULL , PRIMARY KEY (\"sensorid\",\"timeSec\"));"
    },
    {
      "name" : "sensormaxtemp_1",
      "columns" : [
        "\"sensorid\" BIGINT NOT NULL",
        "\"maxTemp\" NUMERIC NOT NULL",
        "\"__timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"sensorid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS sensormaxtemp_1 (\"sensorid\" BIGINT NOT NULL,\"maxTemp\" NUMERIC NOT NULL,\"__timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"sensorid\"));"
    }
  ],
  "views" : [
    {
      "name" : "SensorMaxTemp",
      "sql" : "CREATE OR REPLACE VIEW \"SensorMaxTemp\"(\"sensorid\", \"maxTemp\", \"__timestamp\") AS SELECT *\nFROM \"sensormaxtemp_1\"\nORDER BY \"sensorid\";"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SecReading",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "sensorid"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"secreading_1\"\nWHERE \"sensorid\" = $1\nORDER BY \"timeSec\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "sensorid"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SensorMaxTemp",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"sensormaxtemp_1\"\nORDER BY \"sensorid\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "sensorid"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"sensormaxtemp_1\"\nWHERE \"sensorid\" = $1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "sensorid"
                }
              ]
            }
          }
        ]
      }
    ],
    "mutations" : [
      {
        "type" : "kafka",
        "fieldName" : "AddReading",
        "topic" : "sensors-mutation-addreading",
        "sinkConfig" : { }
      }
    ],
    "subscriptions" : [
      {
        "type" : "kafka",
        "fieldName" : "HighTempAlert",
        "topic" : "hightempalert_1",
        "sinkConfig" : { },
        "filters" : {
          "sensorid" : "sensorid"
        }
      }
    ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "type Query {\n  SecReading(sensorid: Int!): [SecReading!]\n  SensorMaxTemp(sensorid: Int): [SensorMaxTemp!]\n}\n\ntype SecReading {\n  sensorid: Int!\n  timeSec: String!\n  temperature: Float!\n}\n\ntype SensorMaxTemp {\n  sensorid: Int!\n  maxTemp: Float!\n}\n\ntype Mutation {\n  AddReading(metric: ReadingInput!): CreatedReading\n}\n\ninput ReadingInput {\n  sensorid: Int!\n  temperature: Float!\n}\n\ntype CreatedReading {\n  event_time: String!\n  sensorid: Int!\n}\n\ntype Subscription {\n  HighTempAlert(sensorid: Int): HighTempAlert\n}\n\ntype HighTempAlert {\n  sensorid: Int!\n  timeSec: String!\n  temperature: Float!\n}"
    }
  }
}
