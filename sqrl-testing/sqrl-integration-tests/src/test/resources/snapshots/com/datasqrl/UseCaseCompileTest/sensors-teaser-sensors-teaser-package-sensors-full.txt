>>>pipeline_explain.txt
=== SecReading
ID:     secreading_1
Type:   stream
Stage:  flink
Inputs: sensorreading_2
Primary Key: sensorid, timeSec
Timestamp  : timeSec
Schema:
 - sensorid: BIGINT NOT NULL
 - timeSec: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - temp: DOUBLE NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], temp=[AVG($2)]) hints[TumbleAggregationHint options:[1, FUNCTION, 4, 1000, 0]]
  LogicalProject(sensorid=[$0], timeSec=[endOfSecond($4)], temperature=[$2], time=[$1], timestamp=[$4])
    LogicalTableScan(table=[[sensorreading_2]])

=== SensorMaxTemp
ID:     sensormaxtemp_1
Type:   state
Stage:  flink
Inputs: secreading_1
Primary Key: sensorid
Timestamp  : _timeSec
Schema:
 - sensorid: BIGINT NOT NULL
 - maxTemp: DOUBLE NOT NULL
 - _timeSec: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Post Processors:
 - topN: partition=sensorid limit=1 sort=#2: _timeSec TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalProject(sensorid=[$0], maxTemp=[$2], _timeSec=[$1])
  LogicalAggregate(group=[{0, 1}], maxTemp=[MAX($2)]) hints[SlidingAggregationHint options:[1, 60000, 1200]]
    LogicalTableScan(table=[[secreading_1]])

=== SensorReading
ID:     sensorreading_2
Type:   stream
Stage:  flink
Primary Key: sensorid, time
Timestamp  : timestamp
Schema:
 - sensorid: BIGINT NOT NULL
 - time: BIGINT NOT NULL
 - temperature: DOUBLE NOT NULL
 - humidity: DOUBLE NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[sensorreading_1]])

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochmillitotimestamp` AS 'com.datasqrl.time.EpochMilliToTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofsecond` AS 'com.datasqrl.time.EndOfSecond' LANGUAGE JAVA;",
    "CREATE TEMPORARY TABLE `sensorreading_1` (\n  `sensorid` BIGINT NOT NULL,\n  `time` BIGINT NOT NULL,\n  `temperature` DOUBLE NOT NULL,\n  `humidity` DOUBLE NOT NULL,\n  `timestamp` AS EPOCHMILLITOTIMESTAMP(`time`),\n  PRIMARY KEY (`sensorid`, `time`) NOT ENFORCED,\n  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND\n) WITH (\n  'format' = 'flexible-csv',\n  'path' = '${DATA_PATH}/sensorreading.csv.gz',\n  'connector' = 'filesystem',\n  'flexible-csv.skip-header' = 'true'\n);",
    "CREATE TEMPORARY TABLE `secreading_1` (\n  `sensorid` BIGINT NOT NULL,\n  `timeSec` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `temp` DOUBLE NOT NULL,\n  PRIMARY KEY (`sensorid`, `timeSec`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'secreading_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `sensormaxtemp_1` (\n  `sensorid` BIGINT NOT NULL,\n  `maxTemp` DOUBLE NOT NULL,\n  `_timeSec` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`sensorid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'sensormaxtemp_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT `sensorid`, ENDOFSECOND(`timestamp`) AS `timeSec`, `temperature`, `time`, `timestamp`\nFROM `sensorreading_1`;",
    "CREATE VIEW `table$2`\nAS\nSELECT `sensorid`, `window_time` AS `timeSec`, AVG(`temperature`) AS `temp`\nFROM TABLE(TUMBLE(TABLE `table$1`, DESCRIPTOR(`timestamp`), INTERVAL '1' SECOND(4), INTERVAL '0' SECOND(1))) AS `t0`\nGROUP BY `sensorid`, `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$3`\nAS\nSELECT `sensorid`, ENDOFSECOND(`timestamp`) AS `timeSec`, `temperature`, `time`, `timestamp`\nFROM `sensorreading_1`;",
    "CREATE VIEW `table$4`\nAS\nSELECT `sensorid`, `window_time` AS `timeSec`, AVG(`temperature`) AS `temp`\nFROM TABLE(TUMBLE(TABLE `table$3`, DESCRIPTOR(`timestamp`), INTERVAL '1' SECOND(4), INTERVAL '0' SECOND(1))) AS `t0`\nGROUP BY `sensorid`, `window_start`, `window_end`, `window_time`;",
    "CREATE VIEW `table$5`\nAS\nSELECT `sensorid`, MAX(`temp`) AS `maxTemp`, `window_time` AS `_timeSec`\nFROM TABLE(HOP(TABLE `table$4`, DESCRIPTOR(`timeSec`), INTERVAL '1.2' SECOND(4), INTERVAL '60' SECOND(5))) AS `t3`\nGROUP BY `sensorid`, `window_start`, `window_end`, `window_time`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `secreading_1`\n(SELECT *\n FROM `table$2`)\n;\nINSERT INTO `sensormaxtemp_1`\n (SELECT *\n  FROM `table$5`)\n ;\n END;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "filesystem"
  ],
  "formats" : [
    "flexible-csv"
  ],
  "compliedPlan" : "{\n  \"flinkVersion\" : \"1.19\",\n  \"nodes\" : [ {\n    \"id\" : 1292,\n    \"type\" : \"stream-exec-table-source-scan_1\",\n    \"scanTableSource\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`sensorreading_1`\"\n      }\n    },\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `time` BIGINT NOT NULL, `temperature` DOUBLE NOT NULL, `humidity` DOUBLE NOT NULL, `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>\",\n    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, sensorreading_1]], fields=[sensorid, time, temperature, humidity, timestamp])\",\n    \"inputProperties\" : [ ]\n  }, {\n    \"id\" : 1293,\n    \"type\" : \"stream-exec-watermark-assigner_1\",\n    \"watermarkExpr\" : {\n      \"kind\" : \"CALL\",\n      \"syntax\" : \"BINARY\",\n      \"internalName\" : \"$-$1\",\n      \"operands\" : [ {\n        \"kind\" : \"INPUT_REF\",\n        \"inputIndex\" : 4,\n        \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n      }, {\n        \"kind\" : \"LITERAL\",\n        \"value\" : \"1\",\n        \"type\" : \"INTERVAL SECOND(6) NOT NULL\"\n      } ],\n      \"type\" : \"TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL\"\n    },\n    \"rowtimeFieldIndex\" : 4,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"time\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"humidity\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"WatermarkAssigner(rowtime=[timestamp], watermark=[(timestamp - 1:INTERVAL SECOND)])\"\n  }, {\n    \"id\" : 1294,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 2,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[sensorid, temperature, timestamp])\"\n  }, {\n    \"id\" : 1295,\n    \"type\" : \"stream-exec-local-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"temp\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DOUBLE NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"TimeAttribute\",\n      \"window\" : {\n        \"type\" : \"TumblingWindow\",\n        \"size\" : \"PT1S\",\n        \"offset\" : \"PT0S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"timeAttributeIndex\" : 2,\n      \"isRowtime\" : true\n    },\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `sum$0` DOUBLE, `count$1` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"LocalWindowAggregate(groupBy=[sensorid], window=[TUMBLE(time_col=[timestamp], size=[1 s], offset=[0 ms])], select=[sensorid, AVG(temperature) AS (sum$0, count$1), slice_end('w$) AS $slice_end])\"\n  }, {\n    \"id\" : 1296,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `sum$0` DOUBLE, `count$1` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"Exchange(distribution=[hash[sensorid]])\"\n  }, {\n    \"id\" : 1297,\n    \"type\" : \"stream-exec-global-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"temp\",\n      \"internalName\" : \"$AVG$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DOUBLE NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"SliceAttached\",\n      \"window\" : {\n        \"type\" : \"TumblingWindow\",\n        \"size\" : \"PT1S\",\n        \"offset\" : \"PT0S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"sliceEnd\" : 3,\n      \"isRowtime\" : true\n    },\n    \"namedWindowProperties\" : [ {\n      \"name\" : \"window_start\",\n      \"property\" : {\n        \"kind\" : \"WindowStart\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_end\",\n      \"property\" : {\n        \"kind\" : \"WindowEnd\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_time\",\n      \"property\" : {\n        \"kind\" : \"Rowtime\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    } ],\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"localAggInputRowType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temperature\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"timestamp\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"window_start\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_end\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"GlobalWindowAggregate(groupBy=[sensorid], window=[TUMBLE(slice_end=[$slice_end], size=[1 s], offset=[0 ms])], select=[sensorid, AVG((sum$0, count$1)) AS temp, start('w$) AS window_start, end('w$) AS window_end, rowtime('w$) AS window_time])\"\n  }, {\n    \"id\" : 1298,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DOUBLE NOT NULL\"\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Calc(select=[sensorid, window_time AS timeSec, temp])\"\n  }, {\n    \"id\" : 1299,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`secreading_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.secreading_1], fields=[sensorid, timeSec, temp])\"\n  }, {\n    \"id\" : 1300,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[sensorid, temp, window_time AS timeSec])\"\n  }, {\n    \"id\" : 1301,\n    \"type\" : \"stream-exec-local-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"maxTemp\",\n      \"internalName\" : \"$MAX$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DOUBLE NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"TimeAttribute\",\n      \"window\" : {\n        \"type\" : \"HoppingWindow\",\n        \"size\" : \"PT1M\",\n        \"slide\" : \"PT1.2S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"timeAttributeIndex\" : 2,\n      \"isRowtime\" : true\n    },\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `max$0` DOUBLE, `count1$1` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"LocalWindowAggregate(groupBy=[sensorid], window=[HOP(time_col=[timeSec], size=[1 min], slide=[1200 ms])], select=[sensorid, MAX(temp) AS max$0, COUNT(*) AS count1$1, slice_end('w$) AS $slice_end])\"\n  }, {\n    \"id\" : 1302,\n    \"type\" : \"stream-exec-exchange_1\",\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"HASH\",\n        \"keys\" : [ 0 ]\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : \"ROW<`sensorid` BIGINT NOT NULL, `max$0` DOUBLE, `count1$1` BIGINT, `$slice_end` BIGINT>\",\n    \"description\" : \"Exchange(distribution=[hash[sensorid]])\"\n  }, {\n    \"id\" : 1303,\n    \"type\" : \"stream-exec-global-window-aggregate_1\",\n    \"configuration\" : {\n      \"table.local-time-zone\" : \"default\"\n    },\n    \"grouping\" : [ 0 ],\n    \"aggCalls\" : [ {\n      \"name\" : \"maxTemp\",\n      \"internalName\" : \"$MAX$1\",\n      \"argList\" : [ 1 ],\n      \"filterArg\" : -1,\n      \"distinct\" : false,\n      \"approximate\" : false,\n      \"ignoreNulls\" : false,\n      \"type\" : \"DOUBLE NOT NULL\"\n    } ],\n    \"windowing\" : {\n      \"strategy\" : \"SliceAttached\",\n      \"window\" : {\n        \"type\" : \"HoppingWindow\",\n        \"size\" : \"PT1M\",\n        \"slide\" : \"PT1.2S\"\n      },\n      \"timeAttributeType\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      },\n      \"sliceEnd\" : 3,\n      \"isRowtime\" : true\n    },\n    \"namedWindowProperties\" : [ {\n      \"name\" : \"window_start\",\n      \"property\" : {\n        \"kind\" : \"WindowStart\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_end\",\n      \"property\" : {\n        \"kind\" : \"WindowEnd\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    }, {\n      \"name\" : \"window_time\",\n      \"property\" : {\n        \"kind\" : \"Rowtime\",\n        \"reference\" : {\n          \"name\" : \"w$\",\n          \"type\" : {\n            \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n            \"nullable\" : false,\n            \"precision\" : 3,\n            \"kind\" : \"ROWTIME\"\n          }\n        }\n      }\n    } ],\n    \"needRetraction\" : false,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"localAggInputRowType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"temp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"window_start\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_end\",\n        \"fieldType\" : \"TIMESTAMP(3) NOT NULL\"\n      }, {\n        \"name\" : \"window_time\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"GlobalWindowAggregate(groupBy=[sensorid], window=[HOP(slice_end=[$slice_end], size=[1 min], slide=[1200 ms])], select=[sensorid, MAX(max$0) AS maxTemp, COUNT(count1$1) AS window_start, start('w$) AS window_end, end('w$) AS window_time])\"\n  }, {\n    \"id\" : 1304,\n    \"type\" : \"stream-exec-calc_1\",\n    \"projection\" : [ {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 0,\n      \"type\" : \"BIGINT NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 1,\n      \"type\" : \"DOUBLE NOT NULL\"\n    }, {\n      \"kind\" : \"INPUT_REF\",\n      \"inputIndex\" : 4,\n      \"type\" : {\n        \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n        \"nullable\" : false,\n        \"precision\" : 3,\n        \"kind\" : \"ROWTIME\"\n      }\n    } ],\n    \"condition\" : null,\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"_timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Calc(select=[sensorid, maxTemp, window_time AS _timeSec])\"\n  }, {\n    \"id\" : 1305,\n    \"type\" : \"stream-exec-sink_1\",\n    \"configuration\" : {\n      \"table.exec.sink.keyed-shuffle\" : \"AUTO\",\n      \"table.exec.sink.not-null-enforcer\" : \"ERROR\",\n      \"table.exec.sink.rowtime-inserter\" : \"ENABLED\",\n      \"table.exec.sink.type-length-enforcer\" : \"IGNORE\",\n      \"table.exec.sink.upsert-materialize\" : \"AUTO\"\n    },\n    \"dynamicTableSink\" : {\n      \"table\" : {\n        \"identifier\" : \"`default_catalog`.`default_database`.`sensormaxtemp_1`\"\n      }\n    },\n    \"inputChangelogMode\" : [ \"INSERT\" ],\n    \"inputProperties\" : [ {\n      \"requiredDistribution\" : {\n        \"type\" : \"UNKNOWN\"\n      },\n      \"damBehavior\" : \"PIPELINED\",\n      \"priority\" : 0\n    } ],\n    \"outputType\" : {\n      \"type\" : \"ROW\",\n      \"fields\" : [ {\n        \"name\" : \"sensorid\",\n        \"fieldType\" : \"BIGINT NOT NULL\"\n      }, {\n        \"name\" : \"maxTemp\",\n        \"fieldType\" : \"DOUBLE NOT NULL\"\n      }, {\n        \"name\" : \"_timeSec\",\n        \"fieldType\" : {\n          \"type\" : \"TIMESTAMP_WITH_LOCAL_TIME_ZONE\",\n          \"nullable\" : false,\n          \"precision\" : 3,\n          \"kind\" : \"ROWTIME\"\n        }\n      } ]\n    },\n    \"description\" : \"Sink(table=[default_catalog.default_database.sensormaxtemp_1], fields=[sensorid, maxTemp, _timeSec])\"\n  } ],\n  \"edges\" : [ {\n    \"source\" : 1292,\n    \"target\" : 1293,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1293,\n    \"target\" : 1294,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1294,\n    \"target\" : 1295,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1295,\n    \"target\" : 1296,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1296,\n    \"target\" : 1297,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1297,\n    \"target\" : 1298,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1298,\n    \"target\" : 1299,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1297,\n    \"target\" : 1300,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1300,\n    \"target\" : 1301,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1301,\n    \"target\" : 1302,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1302,\n    \"target\" : 1303,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1303,\n    \"target\" : 1304,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  }, {\n    \"source\" : 1304,\n    \"target\" : 1305,\n    \"shuffle\" : {\n      \"type\" : \"FORWARD\"\n    },\n    \"shuffleMode\" : \"PIPELINED\"\n  } ]\n}"
}
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "secreading_1",
      "columns" : [
        "\"sensorid\" BIGINT NOT NULL",
        "\"timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"temp\" DOUBLE PRECISION NOT NULL"
      ],
      "primaryKeys" : [
        "\"sensorid\"",
        "\"timeSec\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS secreading_1 (\"sensorid\" BIGINT NOT NULL,\"timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL,\"temp\" DOUBLE PRECISION NOT NULL , PRIMARY KEY (\"sensorid\",\"timeSec\"));"
    },
    {
      "name" : "sensormaxtemp_1",
      "columns" : [
        "\"sensorid\" BIGINT NOT NULL",
        "\"maxTemp\" DOUBLE PRECISION NOT NULL",
        "\"_timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"sensorid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS sensormaxtemp_1 (\"sensorid\" BIGINT NOT NULL,\"maxTemp\" DOUBLE PRECISION NOT NULL,\"_timeSec\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"sensorid\"));"
    }
  ],
  "views" : [
    {
      "name" : "SensorMaxTemp",
      "sql" : "CREATE OR REPLACE VIEW \"SensorMaxTemp\"(\"sensorid\", \"maxTemp\", \"_timeSec\") AS SELECT *\nFROM \"sensormaxtemp_1\"\nORDER BY \"sensorid\";"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SecReading",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "sensorid"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"secreading_1\"\nWHERE \"sensorid\" = $1\nORDER BY \"timeSec\" DESC NULLS LAST",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "sensorid"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "SensorMaxTemp",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"sensormaxtemp_1\"\nORDER BY \"sensorid\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "sensorid"
              }
            ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT *\nFROM \"sensormaxtemp_1\"\nWHERE \"sensorid\" = $1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "sensorid"
                }
              ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "type Query {\n  SecReading(sensorid: Int!): [SecReading!]\n  SensorMaxTemp(sensorid: Int): [SensorMaxTemp!]\n}\n\ntype SecReading {\n  sensorid: Int!\n  timeSec: String!\n  temp: Float!\n}\n\ntype SensorMaxTemp {\n  sensorid: Int!\n  maxTemp: Float!\n}"
    }
  }
}
