>>>pipeline_explain.txt
=== Customer
ID:     customer$2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalTableScan(table=[[customer$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

=== Customer
ID:     customer$3
Type:   state
Stage:  streams
Inputs: customer$2
Primary Key: customerid
Timestamp  : _ingest_time
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Post Processors:
 - topN: partition=customerid limit=1 sort=#4: _ingest_time TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalTableScan(table=[[customer$2]])

=== OrderCustomer
ID:     ordercustomer$1
Type:   state
Stage:  streams
Inputs: customer$3, orders$3
Primary Key: id
Timestamp  : __timestamp
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(_uuid=[$5], id=[$0], name=[$9], customerid=[$1], __timestamp=[CASE(<($4, $11), $11, $4)])
  LogicalJoin(condition=[=($1, $7)], joinType=[inner]) hints[JoinCostHint options:[VERSIONED_STATE, VERSIONED_STATE, 1, RIGHT]]
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], _ingest_time=[$4], _uuid=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
        LogicalTableScan(table=[[orders$3]])
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], _ingest_time=[$4], _uuid=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
        LogicalTableScan(table=[[customer$3]])

=== OrderCustomerConstant
ID:     ordercustomerconstant$1
Type:   state
Stage:  streams
Inputs: customer$3, orders$3
Primary Key: id
Timestamp  : __timestamp
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(_uuid=[$5], id=[$0], name=[$9], customerid=[$1], __timestamp=[CASE(<($4, $11), $11, $4)])
  LogicalJoin(condition=[AND(=($1, $7), =($9, 'Robert'), >($0, 5))], joinType=[inner]) hints[JoinCostHint options:[VERSIONED_STATE, VERSIONED_STATE, 2, RIGHT]]
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], _ingest_time=[$4], _uuid=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
        LogicalTableScan(table=[[orders$3]])
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], _ingest_time=[$4], _uuid=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
        LogicalTableScan(table=[[customer$3]])

=== OrderCustomerLeft
ID:     ordercustomerleft$1
Type:   state
Stage:  streams
Inputs: customer$3, orders$3
Primary Key: id
Timestamp  : __timestamp
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE"
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - customerid: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)
Plan:
LogicalProject(_uuid=[$12], id=[$0], name=[$9], customerid=[$1], __timestamp=[CASE(<($4, $11), $11, $4)])
  LogicalJoin(condition=[=($1, $7)], joinType=[left]) hints[JoinCostHint options:[VERSIONED_STATE, VERSIONED_STATE, 1, RIGHT]]
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], _ingest_time=[$4], _uuid=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
        LogicalTableScan(table=[[orders$3]])
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], _ingest_time=[$4], _uuid=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
        LogicalTableScan(table=[[customer$3]])

=== OrderCustomerLeftExcluded
ID:     ordercustomerleftexcluded$1
Type:   state
Stage:  streams
Inputs: customer$3, orders$3
Primary Key: id
Timestamp  : __timestamp
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)
Plan:
LogicalProject(_uuid=[$5], id=[$0], customerid=[$1], __timestamp=[CASE(<($4, $11), $11, $4)])
  LogicalFilter(condition=[IS NULL($12)])
    LogicalJoin(condition=[=($1, $7)], joinType=[left]) hints[JoinCostHint options:[VERSIONED_STATE, VERSIONED_STATE, 1, RIGHT]]
      LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
        LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], _ingest_time=[$4], _uuid=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
          LogicalTableScan(table=[[orders$3]])
      LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
        LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], _ingest_time=[$4], _uuid=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
          LogicalTableScan(table=[[customer$3]])

=== OrderCustomerRight
ID:     ordercustomerright$1
Type:   state
Stage:  streams
Inputs: customer$3, orders$3
Primary Key: _customerid0, ouuid
Timestamp  : __timestamp
Schema:
 - ouuid: BIGINT NOT NULL
 - id: BIGINT
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT
 - _customerid0: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)
Plan:
LogicalProject(ouuid=[COALESCE($7, 0:BIGINT)], id=[$7], name=[$2], customerid=[$8], _customerid0=[$0], __timestamp=[CASE(<($4, $11), $11, $4)])
  LogicalJoin(condition=[=($8, $0)], joinType=[left]) hints[JoinCostHint options:[VERSIONED_STATE, VERSIONED_STATE, 1, LEFT]]
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], _ingest_time=[$4], _uuid=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
        LogicalTableScan(table=[[customer$3]])
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], _ingest_time=[$4], _uuid=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
        LogicalTableScan(table=[[orders$3]])

=== OrderCustomerRightExcluded
ID:     ordercustomerrightexcluded$1
Type:   state
Stage:  streams
Inputs: customer$3, orders$3
Primary Key: customerid
Timestamp  : __timestamp
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)
Plan:
LogicalProject(_uuid=[$5], customerid=[$0], name=[$2], __timestamp=[CASE(<($4, $11), $11, $4)])
  LogicalFilter(condition=[IS NULL($7)])
    LogicalJoin(condition=[=($8, $0)], joinType=[left]) hints[JoinCostHint options:[VERSIONED_STATE, VERSIONED_STATE, 1, LEFT]]
      LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
        LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], _ingest_time=[$4], _uuid=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
          LogicalTableScan(table=[[customer$3]])
      LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
        LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], _ingest_time=[$4], _uuid=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
          LogicalTableScan(table=[[orders$3]])

=== Orders
ID:     orders$2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType(INTEGER NOT NULL _idx, BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

=== Orders
ID:     orders$3
Type:   state
Stage:  streams
Inputs: orders$2
Primary Key: id
Timestamp  : _ingest_time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType(INTEGER NOT NULL _idx, BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Post Processors:
 - topN: partition=id limit=1 sort=#4: _ingest_time TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalTableScan(table=[[orders$2]])

=== Product
ID:     product$2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - productid: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - description: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - category: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalTableScan(table=[[product$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>database-schema.sql
CREATE TABLE IF NOT EXISTS customer$3 ("customerid" BIGINT NOT NULL,"email" TEXT NOT NULL,"name" TEXT NOT NULL,"lastUpdated" BIGINT NOT NULL,"_ingest_time" TIMESTAMP WITH TIME ZONE NOT NULL,"_uuid" TEXT NOT NULL , PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS ordercustomer$1 ("_uuid" TEXT NOT NULL,"id" BIGINT NOT NULL,"name" TEXT NOT NULL,"customerid" BIGINT NOT NULL,"__timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id"));
CREATE TABLE IF NOT EXISTS ordercustomerconstant$1 ("_uuid" TEXT NOT NULL,"id" BIGINT NOT NULL,"name" TEXT NOT NULL,"customerid" BIGINT NOT NULL,"__timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("id"));
CREATE TABLE IF NOT EXISTS ordercustomerleft$1 ("_uuid" TEXT ,"id" BIGINT NOT NULL,"name" TEXT ,"customerid" BIGINT NOT NULL,"__timestamp" TIMESTAMP WITH TIME ZONE  , PRIMARY KEY ("id"));
CREATE TABLE IF NOT EXISTS ordercustomerleftexcluded$1 ("_uuid" TEXT NOT NULL,"id" BIGINT NOT NULL,"customerid" BIGINT NOT NULL,"__timestamp" TIMESTAMP WITH TIME ZONE  , PRIMARY KEY ("id"));
CREATE TABLE IF NOT EXISTS ordercustomerright$1 ("ouuid" BIGINT NOT NULL,"id" BIGINT ,"name" TEXT NOT NULL,"customerid" BIGINT ,"_customerid0" BIGINT NOT NULL,"__timestamp" TIMESTAMP WITH TIME ZONE  , PRIMARY KEY ("_customerid0","ouuid"));
CREATE TABLE IF NOT EXISTS ordercustomerrightexcluded$1 ("_uuid" TEXT NOT NULL,"customerid" BIGINT NOT NULL,"name" TEXT NOT NULL,"__timestamp" TIMESTAMP WITH TIME ZONE  , PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS orders$3 ("id" BIGINT NOT NULL,"customerid" BIGINT NOT NULL,"time" TIMESTAMP WITH TIME ZONE NOT NULL,"entries" JSONB NOT NULL,"_ingest_time" TIMESTAMP WITH TIME ZONE NOT NULL,"_uuid" TEXT NOT NULL , PRIMARY KEY ("id"));
CREATE TABLE IF NOT EXISTS product$2 ("productid" BIGINT NOT NULL,"name" TEXT NOT NULL,"description" TEXT NOT NULL,"category" TEXT NOT NULL,"_ingest_time" TIMESTAMP WITH TIME ZONE NOT NULL,"_uuid" TEXT NOT NULL , PRIMARY KEY ("_uuid"));
>>>flink-plan.sql
CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptostring` AS 'com.datasqrl.time.TimestampToString' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofmonth` AS 'com.datasqrl.time.EndOfMonth' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofweek` AS 'com.datasqrl.time.EndOfWeek' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `parsetimestamp` AS 'com.datasqrl.time.ParseTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `uuid` AS 'com.datasqrl.secure.Uuid' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochmillitotimestamp` AS 'com.datasqrl.time.EpochMilliToTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofminute` AS 'com.datasqrl.time.EndOfMinute' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptoepoch` AS 'com.datasqrl.time.TimestampToEpoch' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofsecond` AS 'com.datasqrl.time.EndOfSecond' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochtotimestamp` AS 'com.datasqrl.time.EpochToTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofday` AS 'com.datasqrl.time.EndOfDay' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `atzone` AS 'com.datasqrl.time.AtZone' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofhour` AS 'com.datasqrl.time.EndOfHour' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofyear` AS 'com.datasqrl.time.EndOfYear' LANGUAGE JAVA;

CREATE TEMPORARY TABLE `orders$1` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`_idx` INTEGER NOT NULL, `productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,
  `_ingest_time` AS PROCTIME(),
  `_uuid` AS UUID(),
  PRIMARY KEY (`_uuid`) NOT ENFORCED
) WITH (
  'format' = 'json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10000',
  'connector' = 'filesystem',
  'source.path.regex-pattern' = ''
);

CREATE TEMPORARY TABLE `product$1` (
  `productid` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `_ingest_time` AS PROCTIME(),
  `_uuid` AS UUID(),
  PRIMARY KEY (`_uuid`) NOT ENFORCED
) WITH (
  'format' = 'json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10000',
  'connector' = 'filesystem',
  'source.path.regex-pattern' = ''
);

CREATE TEMPORARY TABLE `customer$1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `_ingest_time` AS PROCTIME(),
  `_uuid` AS UUID(),
  PRIMARY KEY (`_uuid`) NOT ENFORCED
) WITH (
  'format' = 'json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10000',
  'connector' = 'filesystem',
  'source.path.regex-pattern' = ''
);

CREATE TEMPORARY TABLE `customer$3` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'customer$3',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `ordercustomer$1` (
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `customerid` BIGINT NOT NULL,
  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'ordercustomer$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `ordercustomerconstant$1` (
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `customerid` BIGINT NOT NULL,
  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'ordercustomerconstant$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `ordercustomerleft$1` (
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE`,
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `customerid` BIGINT NOT NULL,
  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'ordercustomerleft$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `ordercustomerleftexcluded$1` (
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'ordercustomerleftexcluded$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `ordercustomerright$1` (
  `ouuid` BIGINT NOT NULL,
  `id` BIGINT,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `customerid` BIGINT,
  `_customerid0` BIGINT NOT NULL,
  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'ordercustomerright$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `ordercustomerrightexcluded$1` (
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,
  `customerid` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'ordercustomerrightexcluded$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `orders$3` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`_idx` INTEGER NOT NULL, `productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'orders$3',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `product$2` (
  `productid` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'product$2',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

EXECUTE STATEMENT SET BEGIN
INSERT INTO `customer$3`
(SELECT *
FROM `customer$1`)
;
INSERT INTO `ordercustomer$1`
(SELECT `t0`.`_uuid`, `t0`.`id`, `t2`.`name`, `t0`.`customerid`, (CASE WHEN (`t0`.`_ingest_time` < `t2`.`_ingest_time`) THEN `t2`.`_ingest_time` ELSE `t0`.`_ingest_time` END) AS `__timestamp`
FROM (SELECT *
FROM (SELECT `id`, `customerid`, `time`, `entries`, `_ingest_time`, `_uuid`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `_ingest_time` DESC NULLS LAST)) AS `_rownum`
FROM `orders$1`) AS `t`
WHERE (`_rownum` = 1)) AS `t0`
INNER JOIN (SELECT *
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `_ingest_time`, `_uuid`, (ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `_ingest_time` DESC NULLS LAST)) AS `_rownum`
FROM `customer$1`) AS `t1`
WHERE (`_rownum` = 1)) AS `t2` ON (`t0`.`customerid` = `t2`.`customerid`))
;
INSERT INTO `ordercustomerconstant$1`
(SELECT `t0`.`_uuid`, `t0`.`id`, `t2`.`name`, `t0`.`customerid`, (CASE WHEN (`t0`.`_ingest_time` < `t2`.`_ingest_time`) THEN `t2`.`_ingest_time` ELSE `t0`.`_ingest_time` END) AS `__timestamp`
FROM (SELECT *
FROM (SELECT `id`, `customerid`, `time`, `entries`, `_ingest_time`, `_uuid`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `_ingest_time` DESC NULLS LAST)) AS `_rownum`
FROM `orders$1`) AS `t`
WHERE (`_rownum` = 1)) AS `t0`
INNER JOIN (SELECT *
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `_ingest_time`, `_uuid`, (ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `_ingest_time` DESC NULLS LAST)) AS `_rownum`
FROM `customer$1`) AS `t1`
WHERE (`_rownum` = 1)) AS `t2` ON (((`t0`.`customerid` = `t2`.`customerid`) AND (`t2`.`name` = 'Robert')) AND (`t0`.`id` > 5)))
;
INSERT INTO `ordercustomerleft$1`
(SELECT `t2`.`_uuid`, `t0`.`id`, `t2`.`name`, `t0`.`customerid`, (CASE WHEN (`t0`.`_ingest_time` < `t2`.`_ingest_time`) THEN `t2`.`_ingest_time` ELSE `t0`.`_ingest_time` END) AS `__timestamp`
FROM (SELECT *
FROM (SELECT `id`, `customerid`, `time`, `entries`, `_ingest_time`, `_uuid`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `_ingest_time` DESC NULLS LAST)) AS `_rownum`
FROM `orders$1`) AS `t`
WHERE (`_rownum` = 1)) AS `t0`
LEFT JOIN (SELECT *
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `_ingest_time`, `_uuid`, (ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `_ingest_time` DESC NULLS LAST)) AS `_rownum`
FROM `customer$1`) AS `t1`
WHERE (`_rownum` = 1)) AS `t2` ON (`t0`.`customerid` = `t2`.`customerid`))
;
INSERT INTO `ordercustomerleftexcluded$1`
(SELECT `t0`.`_uuid`, `t0`.`id`, `t0`.`customerid`, (CASE WHEN (`t0`.`_ingest_time` < `t2`.`_ingest_time`) THEN `t2`.`_ingest_time` ELSE `t0`.`_ingest_time` END) AS `__timestamp`
FROM (SELECT *
FROM (SELECT `id`, `customerid`, `time`, `entries`, `_ingest_time`, `_uuid`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `_ingest_time` DESC NULLS LAST)) AS `_rownum`
FROM `orders$1`) AS `t`
WHERE (`_rownum` = 1)) AS `t0`
LEFT JOIN (SELECT *
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `_ingest_time`, `_uuid`, (ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `_ingest_time` DESC NULLS LAST)) AS `_rownum`
FROM `customer$1`) AS `t1`
WHERE (`_rownum` = 1)) AS `t2` ON (`t0`.`customerid` = `t2`.`customerid`)
WHERE (`t2`.`_uuid` IS NULL))
;
INSERT INTO `ordercustomerright$1`
(SELECT COALESCE(`t2`.`id`, 0) AS `ouuid`, `t2`.`id`, `t0`.`name`, `t2`.`customerid`, `t0`.`customerid` AS `_customerid0`, (CASE WHEN (`t0`.`_ingest_time` < `t2`.`_ingest_time`) THEN `t2`.`_ingest_time` ELSE `t0`.`_ingest_time` END) AS `__timestamp`
FROM (SELECT *
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `_ingest_time`, `_uuid`, (ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `_ingest_time` DESC NULLS LAST)) AS `_rownum`
FROM `customer$1`) AS `t`
WHERE (`_rownum` = 1)) AS `t0`
LEFT JOIN (SELECT *
FROM (SELECT `id`, `customerid`, `time`, `entries`, `_ingest_time`, `_uuid`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `_ingest_time` DESC NULLS LAST)) AS `_rownum`
FROM `orders$1`) AS `t1`
WHERE (`_rownum` = 1)) AS `t2` ON (`t0`.`customerid` = `t2`.`customerid`))
;
INSERT INTO `ordercustomerrightexcluded$1`
(SELECT `t0`.`_uuid`, `t0`.`customerid`, `t0`.`name`, (CASE WHEN (`t0`.`_ingest_time` < `t2`.`_ingest_time`) THEN `t2`.`_ingest_time` ELSE `t0`.`_ingest_time` END) AS `__timestamp`
FROM (SELECT *
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `_ingest_time`, `_uuid`, (ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `_ingest_time` DESC NULLS LAST)) AS `_rownum`
FROM `customer$1`) AS `t`
WHERE (`_rownum` = 1)) AS `t0`
LEFT JOIN (SELECT *
FROM (SELECT `id`, `customerid`, `time`, `entries`, `_ingest_time`, `_uuid`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `_ingest_time` DESC NULLS LAST)) AS `_rownum`
FROM `orders$1`) AS `t1`
WHERE (`_rownum` = 1)) AS `t2` ON (`t0`.`customerid` = `t2`.`customerid`)
WHERE (`t2`.`id` IS NULL))
;
INSERT INTO `orders$3`
(SELECT *
FROM `orders$1`)
;
INSERT INTO `product$2`
(SELECT *
FROM `product$1`)
;
END;
