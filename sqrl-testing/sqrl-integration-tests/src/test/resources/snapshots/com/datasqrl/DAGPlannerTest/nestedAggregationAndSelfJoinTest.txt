>>>pipeline_explain.txt
=== Customer
ID:     customer_2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalTableScan(table=[[customer_1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

=== Customer
ID:     customer_3
Type:   state
Stage:  streams
Inputs: customer_2
Primary Key: customerid
Timestamp  : _ingest_time
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Post Processors:
 - topN: partition=customerid limit=1 sort=#4: _ingest_time TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalTableScan(table=[[customer_2]])

=== EntryCount
ID:     entrycount_1
Type:   stream
Stage:  streams
Inputs: orders_2
Primary Key: _uuid, _productid
Timestamp  : _ingest_time
Schema:
 - price: DOUBLE
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _productid: BIGINT NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(price=[-(*($7, $8), $9)], _uuid=[$5], _productid=[$6], _ingest_time=[$4])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{3}])
    LogicalTableScan(table=[[orders_2]])
    LogicalTableFunctionScan(invocation=[Orders.entries($cor0.entries)], rowType=[RecordType(BIGINT productid, BIGINT quantity, DOUBLE unit_price, DOUBLE discount)], elementType=[class [Ljava.lang.Object;])

=== Orders2
ID:     orders2_1
Type:   stream
Stage:  streams
Inputs: orders_2
Primary Key: uuid
Timestamp  : _ingest_time
Schema:
 - uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(uuid=[$5], _ingest_time=[$4])
  LogicalJoin(condition=[AND(=($11, $5), =($10, $4))], joinType=[inner]) hints[IntervalJoin]
    LogicalTableScan(table=[[orders_2]])
    LogicalTableScan(table=[[orders_2]])

=== Orders
ID:     orders_2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalTableScan(table=[[orders_1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

=== orders_by_day
ID:     orders_by_day_1
Type:   state
Stage:  streams
Inputs: customer_3, ordersinline_1
Primary Key: __pk1_customerid, day
Timestamp  : __timestamp
Schema:
 - __pk1_customerid: BIGINT NOT NULL
 - day: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - total_price: DOUBLE
 - total_num: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(__pk1_customerid=[$0], day=[$1], total_price=[$2], total_num=[$3], __timestamp=[$4])
  LogicalAggregate(group=[{0, 1}], total_price=[SUM($2)], total_num=[SUM($3)], __timestamp=[MAX($5)])
    LogicalProject(__pk2_customerid=[$7], day=[endOfDay($2)], price=[$3], num=[$4], _uuid=[$5], _ingest_time=[$6])
      LogicalJoin(condition=[=($1, $7)], joinType=[inner]) hints[TemporalJoinHint options:[6]]
        LogicalTableScan(table=[[ordersinline_1]])
        LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
          LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], _ingest_time=[$4], _uuid=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
            LogicalTableScan(table=[[customer_3]])

=== OrdersInline
ID:     ordersinline_1
Type:   stream
Stage:  streams
Inputs: orders_2, total_1
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - price: DOUBLE
 - num: BIGINT NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], price=[$7], num=[$8], _uuid=[$5], _ingest_time=[$4])
  LogicalJoin(condition=[AND(=($5, $6), =($10, $4))], joinType=[inner]) hints[IntervalJoin]
    LogicalTableScan(table=[[orders_2]])
    LogicalTableScan(table=[[total_1]])

=== total
ID:     total_1
Type:   stream
Stage:  streams
Inputs: orders_2
Primary Key: __pk6__uuid
Timestamp  : _ingest_time
Schema:
 - __pk6__uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - price: DOUBLE
 - num: BIGINT NOT NULL
 - discount: DOUBLE
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(__pk6__uuid=[$0], price=[$2], num=[$3], discount=[$4], _ingest_time=[$1])
  LogicalAggregate(group=[{0, 4}], price=[SUM($1)], num=[COUNT()], discount=[SUM($2)]) hints[TumbleAggregationHint options:[4, INSTANT, 4, 1, 0]]
    LogicalProject(__pk1__uuid=[$5], $f1=[-(*($7, $8), $9)], discount=[$9], productid=[$6], _ingest_time=[$4])
      LogicalCorrelate(correlation=[$cor1], joinType=[inner], requiredColumns=[{3}])
        LogicalTableScan(table=[[orders_2]])
        LogicalTableFunctionScan(invocation=[Orders.entries($cor1.entries)], rowType=[RecordType(BIGINT productid, BIGINT quantity, DOUBLE unit_price, DOUBLE discount)], elementType=[class [Ljava.lang.Object;])

>>>flink.json
{
  "flinkSql" : [
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptostring` AS 'com.datasqrl.time.TimestampToString' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofmonth` AS 'com.datasqrl.time.EndOfMonth' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `tojson` AS 'com.datasqrl.json.ToJson' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptoepochmilli` AS 'com.datasqrl.time.TimestampToEpochMilli' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofweek` AS 'com.datasqrl.time.EndOfWeek' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `parsetimestamp` AS 'com.datasqrl.time.ParseTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `uuid` AS 'com.datasqrl.secure.Uuid' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochmillitotimestamp` AS 'com.datasqrl.time.EpochMilliToTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofminute` AS 'com.datasqrl.time.EndOfMinute' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptoepoch` AS 'com.datasqrl.time.TimestampToEpoch' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofsecond` AS 'com.datasqrl.time.EndOfSecond' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochtotimestamp` AS 'com.datasqrl.time.EpochToTimestamp' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofday` AS 'com.datasqrl.time.EndOfDay' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `atzone` AS 'com.datasqrl.time.AtZone' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofhour` AS 'com.datasqrl.time.EndOfHour' LANGUAGE JAVA;",
    "CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofyear` AS 'com.datasqrl.time.EndOfYear' LANGUAGE JAVA;",
    "CREATE TEMPORARY TABLE `customer_1` (\n  `customerid` BIGINT NOT NULL,\n  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `lastUpdated` BIGINT NOT NULL,\n  `_ingest_time` AS PROCTIME(),\n  `_uuid` AS UUID(),\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'format' = 'json',\n  'path' = 'file:/mock',\n  'source.monitor-interval' = '10000',\n  'connector' = 'filesystem',\n  'source.path.regex-pattern' = ''\n);",
    "CREATE TEMPORARY TABLE `orders_1` (\n  `id` BIGINT NOT NULL,\n  `customerid` BIGINT NOT NULL,\n  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `entries` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,\n  `_ingest_time` AS PROCTIME(),\n  `_uuid` AS UUID(),\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'format' = 'json',\n  'path' = 'file:/mock',\n  'source.monitor-interval' = '10000',\n  'connector' = 'filesystem',\n  'source.path.regex-pattern' = ''\n);",
    "CREATE TEMPORARY TABLE `customer_3` (\n  `customerid` BIGINT NOT NULL,\n  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,\n  `lastUpdated` BIGINT NOT NULL,\n  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,\n  PRIMARY KEY (`customerid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'customer_3',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `entrycount_1` (\n  `price` DOUBLE,\n  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,\n  `_productid` BIGINT NOT NULL,\n  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`_uuid`, `_productid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'entrycount_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `orders2_1` (\n  `uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,\n  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`uuid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'orders2_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `orders_2` (\n  `id` BIGINT NOT NULL,\n  `customerid` BIGINT NOT NULL,\n  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `entries` RAW('com.datasqrl.json.FlinkJsonType', 'ADFjb20uZGF0YXNxcmwuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAQApY29tLmRhdGFzcXJsLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXI='),\n  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'orders_2',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `orders_by_day_1` (\n  `__pk1_customerid` BIGINT NOT NULL,\n  `day` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `total_price` DOUBLE,\n  `total_num` BIGINT NOT NULL,\n  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`__pk1_customerid`, `day`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'orders_by_day_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `ordersinline_1` (\n  `id` BIGINT NOT NULL,\n  `customerid` BIGINT NOT NULL,\n  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  `price` DOUBLE,\n  `num` BIGINT NOT NULL,\n  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,\n  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`_uuid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'ordersinline_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE TEMPORARY TABLE `total_1` (\n  `__pk6__uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,\n  `price` DOUBLE,\n  `num` BIGINT NOT NULL,\n  `discount` DOUBLE,\n  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,\n  PRIMARY KEY (`__pk6__uuid`) NOT ENFORCED\n) WITH (\n  'password' = '${JDBC_PASSWORD}',\n  'connector' = 'jdbc-sqrl',\n  'driver' = 'org.postgresql.Driver',\n  'table-name' = 'total_1',\n  'url' = '${JDBC_URL}',\n  'username' = '${JDBC_USERNAME}'\n);",
    "CREATE VIEW `table$1`\nAS\nSELECT *\nFROM `customer_1`;",
    "CREATE VIEW `table$2`\nAS\nSELECT ((`t00`.`quantity` * `t00`.`unit_price`) - `t00`.`discount`) AS `price`, `$cor0`.`_uuid`, `t00`.`productid` AS `_productid`, `$cor0`.`_ingest_time`\nFROM `orders_1` AS `$cor0`,\nUNNEST(`$cor0`.`entries`) AS `t00` (`productid`, `quantity`, `unit_price`, `discount`);",
    "CREATE VIEW `table$3`\nAS\nSELECT `orders_1`.`_uuid` AS `uuid`, `orders_1`.`_ingest_time`\nFROM `orders_1`\nINNER JOIN `orders_1` AS `orders_10` ON ((`orders_1`.`_uuid` = `orders_10`.`_uuid`) AND (`orders_1`.`_ingest_time` = `orders_10`.`_ingest_time`));",
    "CREATE VIEW `table$4`\nAS\nSELECT `id`, `customerid`, `time`, TOJSON(`entries`) AS `entries`, `_ingest_time`, `_uuid`\nFROM `orders_1`;",
    "CREATE VIEW `table$5`\nAS\nSELECT *\nFROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `_ingest_time`, `_uuid`, (ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `_ingest_time` DESC NULLS LAST)) AS `_rownum`\nFROM `customer_1`) AS `t`\nWHERE (`_rownum` = 1);",
    "CREATE VIEW `table$6`\nAS\nSELECT `$cor1`.`_uuid` AS `__pk1__uuid`, ((`t20`.`quantity` * `t20`.`unit_price`) - `t20`.`discount`) AS `$f1`, `t20`.`discount`, `t20`.`productid`, `$cor1`.`_ingest_time`\nFROM `orders_1` AS `$cor1`,\nUNNEST(`$cor1`.`entries`) AS `t20` (`productid`, `quantity`, `unit_price`, `discount`);",
    "CREATE VIEW `table$7`\nAS\nSELECT `t0`.`customerid` AS `__pk1_customerid`, ENDOFDAY(`$cor3`.`time`) AS `day`, SUM(`$cor3`.`price`) AS `total_price`, SUM(`$cor3`.`num`) AS `total_num`, MAX(`$cor3`.`_ingest_time`) AS `__timestamp`\nFROM (SELECT `orders_1`.`id`, `orders_1`.`customerid`, `orders_1`.`time`, `t7`.`price`, `t7`.`num`, `orders_1`.`_uuid`, `orders_1`.`_ingest_time`\nFROM `orders_1`\nINNER JOIN (SELECT `__pk1__uuid` AS `__pk6__uuid`, SUM(`$f1`) AS `price`, COUNT(*) AS `num`, SUM(`discount`) AS `discount`, `window_time` AS `_ingest_time`\nFROM TABLE(TUMBLE((TABLE `table$6`), (DESCRIPTOR(`_ingest_time`)), INTERVAL '0.001' SECOND(1))) AS `t4`\nGROUP BY `__pk1__uuid`, `window_start`, `window_end`, `window_time`) AS `t7` ON ((`orders_1`.`_uuid` = `t7`.`__pk6__uuid`) AND (`orders_1`.`_ingest_time` = `t7`.`_ingest_time`))) AS `$cor3`\nINNER JOIN `table$5` FOR SYSTEM_TIME AS OF `$cor3`.`_ingest_time` AS `t0` ON (`$cor3`.`customerid` = `t0`.`customerid`)\nGROUP BY `t0`.`customerid`, ENDOFDAY(`$cor3`.`time`);",
    "CREATE VIEW `table$8`\nAS\nSELECT `$cor1`.`_uuid` AS `__pk1__uuid`, ((`t00`.`quantity` * `t00`.`unit_price`) - `t00`.`discount`) AS `$f1`, `t00`.`discount`, `t00`.`productid`, `$cor1`.`_ingest_time`\nFROM `orders_1` AS `$cor1`,\nUNNEST(`$cor1`.`entries`) AS `t00` (`productid`, `quantity`, `unit_price`, `discount`);",
    "CREATE VIEW `table$9`\nAS\nSELECT `orders_1`.`id`, `orders_1`.`customerid`, `orders_1`.`time`, `t5`.`price`, `t5`.`num`, `orders_1`.`_uuid`, `orders_1`.`_ingest_time`\nFROM `orders_1`\nINNER JOIN (SELECT `__pk1__uuid` AS `__pk6__uuid`, SUM(`$f1`) AS `price`, COUNT(*) AS `num`, SUM(`discount`) AS `discount`, `window_time` AS `_ingest_time`\nFROM TABLE(TUMBLE((TABLE `table$8`), (DESCRIPTOR(`_ingest_time`)), INTERVAL '0.001' SECOND(1))) AS `t2`\nGROUP BY `__pk1__uuid`, `window_start`, `window_end`, `window_time`) AS `t5` ON ((`orders_1`.`_uuid` = `t5`.`__pk6__uuid`) AND (`orders_1`.`_ingest_time` = `t5`.`_ingest_time`));",
    "CREATE VIEW `table$10`\nAS\nSELECT `$cor1`.`_uuid` AS `__pk1__uuid`, ((`t00`.`quantity` * `t00`.`unit_price`) - `t00`.`discount`) AS `$f1`, `t00`.`discount`, `t00`.`productid`, `$cor1`.`_ingest_time`\nFROM `orders_1` AS `$cor1`,\nUNNEST(`$cor1`.`entries`) AS `t00` (`productid`, `quantity`, `unit_price`, `discount`);",
    "CREATE VIEW `table$11`\nAS\nSELECT `__pk1__uuid` AS `__pk6__uuid`, SUM(`$f1`) AS `price`, COUNT(*) AS `num`, SUM(`discount`) AS `discount`, `window_time` AS `_ingest_time`\nFROM TABLE(TUMBLE((TABLE `table$10`), (DESCRIPTOR(`_ingest_time`)), INTERVAL '0.001' SECOND(1))) AS `t2`\nGROUP BY `__pk1__uuid`, `window_start`, `window_end`, `window_time`;",
    "EXECUTE STATEMENT SET BEGIN\nINSERT INTO `customer_3`\n(SELECT *\nFROM `table$1`)\n;\nINSERT INTO `entrycount_1`\n(SELECT *\nFROM `table$2`)\n;\nINSERT INTO `orders2_1`\n(SELECT *\nFROM `table$3`)\n;\nINSERT INTO `orders_2`\n(SELECT *\nFROM `table$4`)\n;\nINSERT INTO `orders_by_day_1`\n(SELECT *\nFROM `table$7`)\n;\nINSERT INTO `ordersinline_1`\n(SELECT *\nFROM `table$9`)\n;\nINSERT INTO `total_1`\n(SELECT *\nFROM `table$11`)\n;\nEND;"
  ],
  "connectors" : [
    "jdbc-sqrl",
    "filesystem"
  ],
  "formats" : [
    "json"
  ]
}
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "ddl" : [
    {
      "name" : "customer_3",
      "columns" : [
        "\"customerid\" BIGINT NOT NULL",
        "\"email\" TEXT NOT NULL",
        "\"name\" TEXT NOT NULL",
        "\"lastUpdated\" BIGINT NOT NULL",
        "\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"_uuid\" TEXT NOT NULL"
      ],
      "primaryKeys" : [
        "\"customerid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS customer_3 (\"customerid\" BIGINT NOT NULL,\"email\" TEXT NOT NULL,\"name\" TEXT NOT NULL,\"lastUpdated\" BIGINT NOT NULL,\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL,\"_uuid\" TEXT NOT NULL , PRIMARY KEY (\"customerid\"));"
    },
    {
      "name" : "entrycount_1",
      "columns" : [
        "\"price\" DOUBLE PRECISION ",
        "\"_uuid\" TEXT NOT NULL",
        "\"_productid\" BIGINT NOT NULL",
        "\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"_uuid\"",
        "\"_productid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS entrycount_1 (\"price\" DOUBLE PRECISION ,\"_uuid\" TEXT NOT NULL,\"_productid\" BIGINT NOT NULL,\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"_uuid\",\"_productid\"));"
    },
    {
      "name" : "orders2_1",
      "columns" : [
        "\"uuid\" TEXT NOT NULL",
        "\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"uuid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS orders2_1 (\"uuid\" TEXT NOT NULL,\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"uuid\"));"
    },
    {
      "name" : "orders_2",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"customerid\" BIGINT NOT NULL",
        "\"time\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"entries\" JSONB NOT NULL",
        "\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"_uuid\" TEXT NOT NULL"
      ],
      "primaryKeys" : [
        "\"_uuid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS orders_2 (\"id\" BIGINT NOT NULL,\"customerid\" BIGINT NOT NULL,\"time\" TIMESTAMP WITH TIME ZONE NOT NULL,\"entries\" JSONB NOT NULL,\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL,\"_uuid\" TEXT NOT NULL , PRIMARY KEY (\"_uuid\"));"
    },
    {
      "name" : "orders_by_day_1",
      "columns" : [
        "\"__pk1_customerid\" BIGINT NOT NULL",
        "\"day\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"total_price\" DOUBLE PRECISION ",
        "\"total_num\" BIGINT NOT NULL",
        "\"__timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"__pk1_customerid\"",
        "\"day\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS orders_by_day_1 (\"__pk1_customerid\" BIGINT NOT NULL,\"day\" TIMESTAMP WITH TIME ZONE NOT NULL,\"total_price\" DOUBLE PRECISION ,\"total_num\" BIGINT NOT NULL,\"__timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"__pk1_customerid\",\"day\"));"
    },
    {
      "name" : "ordersinline_1",
      "columns" : [
        "\"id\" BIGINT NOT NULL",
        "\"customerid\" BIGINT NOT NULL",
        "\"time\" TIMESTAMP WITH TIME ZONE NOT NULL",
        "\"price\" DOUBLE PRECISION ",
        "\"num\" BIGINT NOT NULL",
        "\"_uuid\" TEXT NOT NULL",
        "\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"_uuid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS ordersinline_1 (\"id\" BIGINT NOT NULL,\"customerid\" BIGINT NOT NULL,\"time\" TIMESTAMP WITH TIME ZONE NOT NULL,\"price\" DOUBLE PRECISION ,\"num\" BIGINT NOT NULL,\"_uuid\" TEXT NOT NULL,\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"_uuid\"));"
    },
    {
      "name" : "total_1",
      "columns" : [
        "\"__pk6__uuid\" TEXT NOT NULL",
        "\"price\" DOUBLE PRECISION ",
        "\"num\" BIGINT NOT NULL",
        "\"discount\" DOUBLE PRECISION ",
        "\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL"
      ],
      "primaryKeys" : [
        "\"__pk6__uuid\""
      ],
      "sql" : "CREATE TABLE IF NOT EXISTS total_1 (\"__pk6__uuid\" TEXT NOT NULL,\"price\" DOUBLE PRECISION ,\"num\" BIGINT NOT NULL,\"discount\" DOUBLE PRECISION ,\"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"__pk6__uuid\"));"
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Customer",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"customer_3\"\nORDER BY \"customerid\"",
              "parameters" : [ ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "customerid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"customerid\", \"email\", \"name\", \"lastUpdated\", \"_ingest_time\", \"_uuid\", 1 AS \"__pk\"\nFROM \"customer_3\"\nWHERE \"customerid\" = $1\nORDER BY 1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "customerid"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Customer",
        "fieldName" : "orders_by_day",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"orders_by_day_1\"\nWHERE \"__pk1_customerid\" = $1\nORDER BY \"day\"",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "customerid"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "day"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"__pk1_customerid\", \"day\", \"total_price\", \"total_num\", \"__timestamp\", 1 AS \"__pk\"\nFROM (SELECT *\n  FROM \"orders_by_day_1\"\n  WHERE \"__pk1_customerid\" = $1) AS \"t\"\nWHERE \"day\" = $2\nORDER BY 1",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "customerid"
                },
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "day"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "orders_by_day",
        "fieldName" : "parent",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT \"customerid\", \"email\", \"name\", \"lastUpdated\", \"_ingest_time\", \"_uuid\", 1 AS \"__pk\"\nFROM \"customer_3\"\nWHERE \"customerid\" = $1\nORDER BY 1",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "__pk1_customerid"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "EntryCount",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"entrycount_1\"\nORDER BY \"_ingest_time\" DESC NULLS LAST, \"_uuid\", \"_productid\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Orders",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"orders_2\"\nORDER BY \"_ingest_time\" DESC NULLS LAST, \"_uuid\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Orders",
        "fieldName" : "total",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT \"__pk6__uuid\", \"price\", \"num\", \"discount\", \"_ingest_time\", 1 AS \"__pk\"\nFROM \"total_1\"\nWHERE \"__pk6__uuid\" = $1\nORDER BY \"_ingest_time\" DESC NULLS LAST, 1",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "_uuid"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "total",
        "fieldName" : "parent",
        "matchs" : [
          {
            "arguments" : [ ],
            "query" : {
              "type" : "JdbcQuery",
              "type" : "JdbcQuery",
              "sql" : "SELECT \"id\", \"customerid\", \"time\", \"entries\", \"_ingest_time\", \"_uuid\", 1 AS \"__pk\"\nFROM \"orders_2\"\nWHERE \"_uuid\" = $1\nORDER BY \"_ingest_time\" DESC NULLS LAST, 1",
              "parameters" : [
                {
                  "type" : "source",
                  "type" : "source",
                  "key" : "__pk6__uuid"
                }
              ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Orders2",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "uuid"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT \"uuid\", \"_ingest_time\", 1 AS \"__pk\"\nFROM \"orders2_1\"\nWHERE \"uuid\" = $1\nORDER BY \"_ingest_time\" DESC NULLS LAST, 1",
              "parameters" : [
                {
                  "type" : "arg",
                  "type" : "arg",
                  "path" : "uuid"
                }
              ]
            }
          },
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"orders2_1\"\nORDER BY \"_ingest_time\" DESC NULLS LAST, \"uuid\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrdersInline",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"ordersinline_1\"\nORDER BY \"_ingest_time\" DESC NULLS LAST, \"_uuid\"",
              "parameters" : [ ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "type Customer {\n  customerid: Float!\n  email: String!\n  name: String!\n  lastUpdated: Float!\n  orders_by_day(day: DateTime, limit: Int = 10, offset: Int = 0): [orders_by_day!]\n}\n\n\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\ntype EntryCount {\n  price: Float\n}\n\ntype Orders {\n  id: Float!\n  customerid: Float!\n  time: DateTime!\n  entries(limit: Int = 10, offset: Int = 0): [entries!]\n  total: total\n}\n\ntype Orders2 {\n  uuid: String!\n}\n\ntype OrdersInline {\n  id: Float!\n  customerid: Float!\n  time: DateTime!\n  price: Float\n  num: Float!\n}\n\ntype Query {\n  Customer(customerid: Float, limit: Int = 10, offset: Int = 0): [Customer!]\n  EntryCount(limit: Int = 10, offset: Int = 0): [EntryCount!]\n  Orders(limit: Int = 10, offset: Int = 0): [Orders!]\n  Orders2(uuid: String, limit: Int = 10, offset: Int = 0): [Orders2!]\n  OrdersInline(limit: Int = 10, offset: Int = 0): [OrdersInline!]\n}\n\ntype entries {\n  productid: Float!\n  quantity: Float!\n  unit_price: Float!\n  discount: Float\n}\n\ntype orders_by_day {\n  day: DateTime!\n  total_price: Float\n  total_num: Float!\n  parent: Customer!\n}\n\ntype total {\n  price: Float\n  num: Float!\n  discount: Float\n  parent: Orders!\n}\n"
    }
  }
}
