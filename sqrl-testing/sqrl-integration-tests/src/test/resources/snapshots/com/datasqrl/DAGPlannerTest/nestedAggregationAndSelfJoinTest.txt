>>>pipeline_explain.txt
=== Customer
ID:     customer$2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalTableScan(table=[[customer$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

=== Customer
ID:     customer$3
Type:   state
Stage:  streams
Inputs: customer$2
Primary Key: customerid
Timestamp  : _ingest_time
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Post Processors:
 - topN: partition=customerid limit=1 sort=#4: _ingest_time TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalTableScan(table=[[customer$2]])

=== EntryCount
ID:     entrycount$1
Type:   stream
Stage:  streams
Inputs: orders$2
Primary Key: _uuid, _idx
Timestamp  : _ingest_time
Schema:
 - price: DOUBLE
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _idx: INTEGER NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(price=[-(*($8, $9), $10)], _uuid=[$5], _idx=[$6], _ingest_time=[$4])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{3}])
    LogicalTableScan(table=[[orders$2]])
    LogicalTableFunctionScan(invocation=[Orders.entries($cor0.entries)], rowType=[RecordType(INTEGER _idx, BIGINT productid, BIGINT quantity, DOUBLE unit_price, DOUBLE discount)], elementType=[class [Ljava.lang.Object;])

=== Orders
ID:     orders$2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType(INTEGER NOT NULL _idx, BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

=== Orders2
ID:     orders2$1
Type:   stream
Stage:  streams
Inputs: orders$2
Primary Key: uuid
Timestamp  : _ingest_time
Schema:
 - uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(uuid=[$5], _ingest_time=[$4])
  LogicalJoin(condition=[AND(=($11, $5), =($10, $4))], joinType=[inner]) hints[IntervalJoin]
    LogicalTableScan(table=[[orders$2]])
    LogicalTableScan(table=[[orders$2]])

=== orders_by_day
ID:     orders_by_day$1
Type:   state
Stage:  streams
Inputs: customer$3, ordersinline$1
Primary Key: __pk1$customerid, day
Timestamp  : __timestamp
Schema:
 - __pk1$customerid: BIGINT NOT NULL
 - day: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - total_price: DOUBLE
 - total_num: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(__pk1$customerid=[$0], day=[$1], total_price=[$2], total_num=[$3], __timestamp=[$4])
  LogicalAggregate(group=[{0, 1}], total_price=[SUM($2)], total_num=[SUM($3)], __timestamp=[MAX($5)])
    LogicalProject(__pk2$customerid=[$7], day=[endOfDay($2)], price=[$3], num=[$4], _uuid=[$5], _ingest_time=[$6])
      LogicalJoin(condition=[=($1, $7)], joinType=[inner]) hints[TemporalJoinHint options:[6]]
        LogicalTableScan(table=[[ordersinline$1]])
        LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
          LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], _ingest_time=[$4], _uuid=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
            LogicalTableScan(table=[[customer$3]])

=== OrdersInline
ID:     ordersinline$1
Type:   stream
Stage:  streams
Inputs: orders$2, total$1
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - price: DOUBLE
 - num: BIGINT NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], price=[$7], num=[$8], _uuid=[$5], _ingest_time=[$4])
  LogicalJoin(condition=[AND(=($5, $6), =($10, $4))], joinType=[inner]) hints[IntervalJoin]
    LogicalTableScan(table=[[orders$2]])
    LogicalTableScan(table=[[total$1]])

=== total
ID:     total$1
Type:   stream
Stage:  streams
Inputs: orders$2
Primary Key: __pk6$_uuid
Timestamp  : _ingest_time
Schema:
 - __pk6$_uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - price: DOUBLE
 - num: BIGINT NOT NULL
 - discount: DOUBLE
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(__pk6$_uuid=[$0], price=[$2], num=[$3], discount=[$4], _ingest_time=[$1])
  LogicalAggregate(group=[{0, 4}], price=[SUM($1)], num=[COUNT()], discount=[SUM($2)]) hints[TumbleAggregationHint options:[4, INSTANT, 4, 1, 0]]
    LogicalProject(__pk1$_uuid=[$5], $f1=[-(*($8, $9), $10)], discount=[$10], _idx=[$6], _ingest_time=[$4])
      LogicalCorrelate(correlation=[$cor1], joinType=[inner], requiredColumns=[{3}])
        LogicalTableScan(table=[[orders$2]])
        LogicalTableFunctionScan(invocation=[Orders.entries($cor1.entries)], rowType=[RecordType(INTEGER _idx, BIGINT productid, BIGINT quantity, DOUBLE unit_price, DOUBLE discount)], elementType=[class [Ljava.lang.Object;])

>>>database-schema.sql
CREATE TABLE IF NOT EXISTS customer$3 ("customerid" BIGINT NOT NULL,"email" TEXT NOT NULL,"name" TEXT NOT NULL,"lastUpdated" BIGINT NOT NULL,"_ingest_time" TIMESTAMP WITH TIME ZONE NOT NULL,"_uuid" TEXT NOT NULL , PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS entrycount$1 ("price" DOUBLE PRECISION ,"_uuid" TEXT NOT NULL,"_idx" INTEGER NOT NULL,"_ingest_time" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("_uuid","_idx"));
CREATE TABLE IF NOT EXISTS orders$2 ("id" BIGINT NOT NULL,"customerid" BIGINT NOT NULL,"time" TIMESTAMP WITH TIME ZONE NOT NULL,"entries" JSONB NOT NULL,"_ingest_time" TIMESTAMP WITH TIME ZONE NOT NULL,"_uuid" TEXT NOT NULL , PRIMARY KEY ("_uuid"));
CREATE TABLE IF NOT EXISTS orders2$1 ("uuid" TEXT NOT NULL,"_ingest_time" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("uuid"));
CREATE TABLE IF NOT EXISTS orders_by_day$1 ("__pk1$customerid" BIGINT NOT NULL,"day" TIMESTAMP WITH TIME ZONE NOT NULL,"total_price" DOUBLE PRECISION ,"total_num" BIGINT NOT NULL,"__timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("__pk1$customerid","day"));
CREATE TABLE IF NOT EXISTS ordersinline$1 ("id" BIGINT NOT NULL,"customerid" BIGINT NOT NULL,"time" TIMESTAMP WITH TIME ZONE NOT NULL,"price" DOUBLE PRECISION ,"num" BIGINT NOT NULL,"_uuid" TEXT NOT NULL,"_ingest_time" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("_uuid"));
CREATE TABLE IF NOT EXISTS total$1 ("__pk6$_uuid" TEXT NOT NULL,"price" DOUBLE PRECISION ,"num" BIGINT NOT NULL,"discount" DOUBLE PRECISION ,"_ingest_time" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("__pk6$_uuid"));

>>>flink-plan.sql
CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptostring` AS 'com.datasqrl.time.TimestampToString' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofmonth` AS 'com.datasqrl.time.EndOfMonth' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofweek` AS 'com.datasqrl.time.EndOfWeek' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `parsetimestamp` AS 'com.datasqrl.time.ParseTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `uuid` AS 'com.datasqrl.secure.Uuid' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochmillitotimestamp` AS 'com.datasqrl.time.EpochMilliToTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofminute` AS 'com.datasqrl.time.EndOfMinute' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptoepoch` AS 'com.datasqrl.time.TimestampToEpoch' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofsecond` AS 'com.datasqrl.time.EndOfSecond' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochtotimestamp` AS 'com.datasqrl.time.EpochToTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofday` AS 'com.datasqrl.time.EndOfDay' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `atzone` AS 'com.datasqrl.time.AtZone' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofhour` AS 'com.datasqrl.time.EndOfHour' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofyear` AS 'com.datasqrl.time.EndOfYear' LANGUAGE JAVA;

CREATE TEMPORARY TABLE `orders$1` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`_idx` INTEGER NOT NULL, `productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,
  `_ingest_time` AS PROCTIME(),
  `_uuid` AS UUID(),
  PRIMARY KEY (`_uuid`) NOT ENFORCED
) WITH (
  'format' = 'json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10000',
  'connector' = 'filesystem',
  'source.path.regex-pattern' = ''
);

CREATE TEMPORARY TABLE `customer$1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `_ingest_time` AS PROCTIME(),
  `_uuid` AS UUID(),
  PRIMARY KEY (`_uuid`) NOT ENFORCED
) WITH (
  'format' = 'json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10000',
  'connector' = 'filesystem',
  'source.path.regex-pattern' = ''
);

CREATE TEMPORARY TABLE `customer$3` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'customer$3',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `entrycount$1` (
  `price` DOUBLE,
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,
  `_idx` INTEGER NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`_uuid`, `_idx`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'entrycount$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `orders$2` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`_idx` INTEGER NOT NULL, `productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,
  PRIMARY KEY (`_uuid`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'orders$2',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `orders2$1` (
  `uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`uuid`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'orders2$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `orders_by_day$1` (
  `__pk1$customerid` BIGINT NOT NULL,
  `day` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `total_price` DOUBLE,
  `total_num` BIGINT NOT NULL,
  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`__pk1$customerid`, `day`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'orders_by_day$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `ordersinline$1` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `price` DOUBLE,
  `num` BIGINT NOT NULL,
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`_uuid`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'ordersinline$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `total$1` (
  `__pk6$_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,
  `price` DOUBLE,
  `num` BIGINT NOT NULL,
  `discount` DOUBLE,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`__pk6$_uuid`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'total$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE VIEW `table$1`
AS
SELECT *
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `_ingest_time`, `_uuid`, (ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `_ingest_time` DESC NULLS LAST)) AS `_rownum`
FROM `customer$1`) AS `t`
WHERE (`_rownum` = 1);

CREATE VIEW `table$2`
AS
SELECT `$cor1`.`_uuid` AS `__pk1$_uuid`, ((`t20`.`quantity` * `t20`.`unit_price`) - `t20`.`discount`) AS `$f1`, `t20`.`discount`, `t20`.`_idx`, `$cor1`.`_ingest_time`
FROM `orders$1` AS `$cor1`,
UNNEST(`$cor1`.`entries`) AS `t20`;

CREATE VIEW `table$3`
AS
SELECT `$cor1`.`_uuid` AS `__pk1$_uuid`, ((`t00`.`quantity` * `t00`.`unit_price`) - `t00`.`discount`) AS `$f1`, `t00`.`discount`, `t00`.`_idx`, `$cor1`.`_ingest_time`
FROM `orders$1` AS `$cor1`,
UNNEST(`$cor1`.`entries`) AS `t00`;

CREATE VIEW `table$4`
AS
SELECT `$cor1`.`_uuid` AS `__pk1$_uuid`, ((`t00`.`quantity` * `t00`.`unit_price`) - `t00`.`discount`) AS `$f1`, `t00`.`discount`, `t00`.`_idx`, `$cor1`.`_ingest_time`
FROM `orders$1` AS `$cor1`,
UNNEST(`$cor1`.`entries`) AS `t00`;

EXECUTE STATEMENT SET BEGIN
INSERT INTO `customer$3`
(SELECT *
FROM `customer$1`)
;
INSERT INTO `entrycount$1`
(SELECT ((`t00`.`quantity` * `t00`.`unit_price`) - `t00`.`discount`) AS `price`, `$cor0`.`_uuid`, `t00`.`_idx`, `$cor0`.`_ingest_time`
FROM `orders$1` AS `$cor0`,
UNNEST(`$cor0`.`entries`) AS `t00`)
;
INSERT INTO `orders$2`
(SELECT *
FROM `orders$1`)
;
INSERT INTO `orders2$1`
(SELECT `orders$1`.`_uuid` AS `uuid`, `orders$1`.`_ingest_time`
FROM `orders$1`
INNER JOIN `orders$1` AS `orders$10` ON ((`orders$1`.`_uuid` = `orders$10`.`_uuid`) AND (`orders$1`.`_ingest_time` = `orders$10`.`_ingest_time`)))
;
INSERT INTO `orders_by_day$1`
(SELECT `t0`.`customerid` AS `__pk1$customerid`, ENDOFDAY(`$cor3`.`time`) AS `day`, SUM(`$cor3`.`price`) AS `total_price`, SUM(`$cor3`.`num`) AS `total_num`, MAX(`$cor3`.`_ingest_time`) AS `__timestamp`
FROM (SELECT `orders$1`.`id`, `orders$1`.`customerid`, `orders$1`.`time`, `t7`.`price`, `t7`.`num`, `orders$1`.`_uuid`, `orders$1`.`_ingest_time`
FROM `orders$1`
INNER JOIN (SELECT `__pk1$_uuid` AS `__pk6$_uuid`, SUM(`$f1`) AS `price`, COUNT(*) AS `num`, SUM(`discount`) AS `discount`, `window_time` AS `_ingest_time`
FROM TABLE(TUMBLE((TABLE `table$2`), (DESCRIPTOR(`_ingest_time`)), INTERVAL '0.001' SECOND(1))) AS `t4`
GROUP BY `__pk1$_uuid`, `window_start`, `window_end`, `window_time`) AS `t7` ON ((`orders$1`.`_uuid` = `t7`.`__pk6$_uuid`) AND (`orders$1`.`_ingest_time` = `t7`.`_ingest_time`))) AS `$cor3`
INNER JOIN `table$1` FOR SYSTEM_TIME AS OF `$cor3`.`_ingest_time` AS `t0` ON (`$cor3`.`customerid` = `t0`.`customerid`)
GROUP BY `t0`.`customerid`, ENDOFDAY(`$cor3`.`time`))
;
INSERT INTO `ordersinline$1`
(SELECT `orders$1`.`id`, `orders$1`.`customerid`, `orders$1`.`time`, `t5`.`price`, `t5`.`num`, `orders$1`.`_uuid`, `orders$1`.`_ingest_time`
FROM `orders$1`
INNER JOIN (SELECT `__pk1$_uuid` AS `__pk6$_uuid`, SUM(`$f1`) AS `price`, COUNT(*) AS `num`, SUM(`discount`) AS `discount`, `window_time` AS `_ingest_time`
FROM TABLE(TUMBLE((TABLE `table$3`), (DESCRIPTOR(`_ingest_time`)), INTERVAL '0.001' SECOND(1))) AS `t2`
GROUP BY `__pk1$_uuid`, `window_start`, `window_end`, `window_time`) AS `t5` ON ((`orders$1`.`_uuid` = `t5`.`__pk6$_uuid`) AND (`orders$1`.`_ingest_time` = `t5`.`_ingest_time`)))
;
INSERT INTO `total$1`
(SELECT `__pk1$_uuid` AS `__pk6$_uuid`, SUM(`$f1`) AS `price`, COUNT(*) AS `num`, SUM(`discount`) AS `discount`, `window_time` AS `_ingest_time`
FROM TABLE(TUMBLE((TABLE `table$4`), (DESCRIPTOR(`_ingest_time`)), INTERVAL '0.001' SECOND(1))) AS `t2`
GROUP BY `__pk1$_uuid`, `window_start`, `window_end`, `window_time`)
;
END;


