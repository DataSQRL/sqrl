>>>pipeline_explain.txt
=== OrderAgg1
ID:     orderagg1$1
Type:   state
Stage:  streams
Inputs: orders$2
Primary Key: customerid
Timestamp  : __timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - count: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalAggregate(group=[{1}], count=[COUNT()], __timestamp=[MAX($2)])
  LogicalTableScan(table=[[orders$2]])

=== OrderAgg2
ID:     orderagg2$1
Type:   state
Stage:  streams
Inputs: orders$2
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - count: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{1}], timestamp=[MAX($2)], count=[COUNT()])
  LogicalTableScan(table=[[orders$2]])

=== OrderAgg3
ID:     orderagg3$1
Type:   state
Stage:  streams
Inputs: ordersstate$1
Primary Key: customerid
Timestamp  : __timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - count: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalAggregate(group=[{1}], count=[COUNT()], __timestamp=[MAX($2)])
  LogicalFilter(condition=[=($4, 1)]) hints[DedupHint]
    LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
      LogicalTableScan(table=[[ordersstate$1]])

=== OrderAgg4
ID:     orderagg4$1
Type:   state
Stage:  streams
Inputs: ordersstate$1
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - count: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{1}], timestamp=[MAX($2)], count=[COUNT()])
  LogicalFilter(condition=[=($4, 1)]) hints[DedupHint]
    LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
      LogicalTableScan(table=[[ordersstate$1]])

=== Orders
ID:     orders$2
Type:   stream
Stage:  streams
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType(INTEGER NOT NULL _idx, BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[2]]]]) hints[WatermarkHint options:[2]]

=== OrdersState
ID:     ordersstate$1
Type:   state
Stage:  streams
Inputs: orders$2
Primary Key: id
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType(INTEGER NOT NULL _idx, BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Post Processors:
 - topN: partition=id limit=1 sort=#2: time TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalTableScan(table=[[orders$2]])

>>>database-schema.sql
CREATE TABLE IF NOT EXISTS orderagg1$1 ("customerid" BIGINT NOT NULL,"count" BIGINT NOT NULL,"__timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS orderagg2$1 ("customerid" BIGINT NOT NULL,"timestamp" TIMESTAMP WITH TIME ZONE NOT NULL,"count" BIGINT NOT NULL , PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS orderagg3$1 ("customerid" BIGINT NOT NULL,"count" BIGINT NOT NULL,"__timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS orderagg4$1 ("customerid" BIGINT NOT NULL,"timestamp" TIMESTAMP WITH TIME ZONE NOT NULL,"count" BIGINT NOT NULL , PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS orders$2 ("id" BIGINT NOT NULL,"customerid" BIGINT NOT NULL,"time" TIMESTAMP WITH TIME ZONE NOT NULL,"entries" JSONB NOT NULL , PRIMARY KEY ("id","time"));
CREATE TABLE IF NOT EXISTS ordersstate$1 ("id" BIGINT NOT NULL,"customerid" BIGINT NOT NULL,"time" TIMESTAMP WITH TIME ZONE NOT NULL,"entries" JSONB NOT NULL , PRIMARY KEY ("id"));
>>>flink-plan.sql
CREATE TEMPORARY TABLE `orders$1` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`_idx` INTEGER NOT NULL, `productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,
  PRIMARY KEY (`id`, `time`) NOT ENFORCED,
  WATERMARK FOR `time` AS (`time` - INTERVAL '0.001' SECOND)
) WITH (
  'format' = 'json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10000',
  'connector' = 'filesystem',
  'source.path.regex-pattern' = ''
);

CREATE TEMPORARY TABLE `orderagg1$1` (
  `customerid` BIGINT NOT NULL,
  `count` BIGINT NOT NULL,
  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'orderagg1$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `orderagg2$1` (
  `customerid` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `count` BIGINT NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'orderagg2$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `orderagg3$1` (
  `customerid` BIGINT NOT NULL,
  `count` BIGINT NOT NULL,
  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'orderagg3$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `orderagg4$1` (
  `customerid` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `count` BIGINT NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'orderagg4$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `orders$2` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`_idx` INTEGER NOT NULL, `productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'orders$2',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

CREATE TEMPORARY TABLE `ordersstate$1` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`_idx` INTEGER NOT NULL, `productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'ordersstate$1',
  'user' = 'postgres',
  'url' = 'jdbc:postgresql://database:5432/datasqrl'
);

EXECUTE STATEMENT SET BEGIN
INSERT INTO `orderagg1$1`
(SELECT `customerid`, COUNT(*) AS `count`, MAX(`time`) AS `__timestamp`
FROM `orders$1`
GROUP BY `customerid`)
;
INSERT INTO `orderagg2$1`
(SELECT `customerid`, MAX(`time`) AS `timestamp`, COUNT(*) AS `count`
FROM `orders$1`
GROUP BY `customerid`)
;
INSERT INTO `orderagg3$1`
(SELECT `customerid`, COUNT(*) AS `count`, MAX(`time`) AS `__timestamp`
FROM (SELECT `id`, `customerid`, `time`, `entries`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `time` DESC NULLS LAST)) AS `_rownum`
FROM `orders$1`) AS `t`
WHERE (`_rownum` = 1)
GROUP BY `customerid`)
;
INSERT INTO `orderagg4$1`
(SELECT `customerid`, MAX(`time`) AS `timestamp`, COUNT(*) AS `count`
FROM (SELECT `id`, `customerid`, `time`, `entries`, (ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `time` DESC NULLS LAST)) AS `_rownum`
FROM `orders$1`) AS `t`
WHERE (`_rownum` = 1)
GROUP BY `customerid`)
;
INSERT INTO `orders$2`
(SELECT *
FROM `orders$1`)
;
INSERT INTO `ordersstate$1`
(SELECT *
FROM `orders$1`)
;
END;
