>>>pipeline_explain.txt
=== OrderAgg1
ID:     default_catalog.default_database.OrderAgg1
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Orders
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - cnt: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0}], cnt=[COUNT()])
  LogicalProject(customerid=[$1])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
SQL: CREATE VIEW OrderAgg1 AS  SELECT customerid, COUNT(1) as cnt FROM Orders GROUP BY customerid;

=== OrderAgg2
ID:     default_catalog.default_database.OrderAgg2
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Orders
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - cnt: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0}], timestamp=[MAX($1)], cnt=[COUNT()])
  LogicalProject(customerid=[$1], time=[$2])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
SQL: CREATE VIEW OrderAgg2 AS  SELECT customerid, MAX(`time`) as `timestamp`, COUNT(1) as cnt FROM Orders GROUP BY customerid;

=== OrderAgg3
ID:     default_catalog.default_database.OrderAgg3
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.OrdersState
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - cnt: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0}], cnt=[COUNT()])
  LogicalProject(customerid=[$1])
    LogicalTableScan(table=[[default_catalog, default_database, OrdersState]])
SQL: CREATE VIEW OrderAgg3 AS  SELECT customerid, COUNT(1) as cnt FROM OrdersState GROUP BY customerid;

=== OrderAgg4
ID:     default_catalog.default_database.OrderAgg4
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.OrdersState
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - cnt: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0}], timestamp=[MAX($1)], cnt=[COUNT()])
  LogicalProject(customerid=[$1], time=[$2])
    LogicalTableScan(table=[[default_catalog, default_database, OrdersState]])
SQL: CREATE VIEW OrderAgg4 AS  SELECT customerid, MAX(`time`) as `timestamp`, COUNT(1) as cnt FROM OrdersState GROUP BY customerid;

=== Orders
ID:     default_catalog.default_database.Orders
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Orders__def
Annotations:
 - features: DENORMALIZE (feature)
 - stream-root: Orders__def
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - entries: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3])
  LogicalWatermarkAssigner(rowtime=[time], watermark=[-($2, 1:INTERVAL SECOND)])
    LogicalTableScan(table=[[default_catalog, default_database, Orders__def]])
SQL: CREATE VIEW `Orders`
AS
SELECT *
FROM `default_catalog`.`default_database`.`Orders__def`
=== OrdersState
ID:     default_catalog.default_database.OrdersState
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Orders
Annotations:
 - mostRecentDistinct: true
 - stream-root: Orders__def
Primary Key: id
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - entries: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3])
  LogicalFilter(condition=[=($4, 1)])
    LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, Orders]])
SQL: CREATE VIEW `OrdersState`
AS
SELECT `id`, `customerid`, `time`, `entries`
FROM (SELECT `id`, `customerid`, `time`, `entries`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `time` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`Orders`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Orders__schema` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Orders__def` (
  PRIMARY KEY (`id`, `time`) NOT ENFORCED,
  WATERMARK FOR `time` AS `time` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Orders__schema`;
CREATE VIEW `Orders`
AS
SELECT *
FROM `default_catalog`.`default_database`.`Orders__def`;
CREATE VIEW `OrdersState`
AS
SELECT `id`, `customerid`, `time`, `entries`
FROM (SELECT `id`, `customerid`, `time`, `entries`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `time` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`Orders`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `OrderAgg1`
AS
SELECT `customerid`, COUNT(1) AS `cnt`
FROM `Orders`
GROUP BY `customerid`;
CREATE VIEW `OrderAgg2`
AS
SELECT `customerid`, MAX(`time`) AS `timestamp`, COUNT(1) AS `cnt`
FROM `Orders`
GROUP BY `customerid`;
CREATE VIEW `OrderAgg3`
AS
SELECT `customerid`, COUNT(1) AS `cnt`
FROM `OrdersState`
GROUP BY `customerid`;
CREATE VIEW `OrderAgg4`
AS
SELECT `customerid`, MAX(`time`) AS `timestamp`, COUNT(1) AS `cnt`
FROM `OrdersState`
GROUP BY `customerid`;
CREATE TABLE `OrderAgg1_1` (
  `customerid` BIGINT NOT NULL,
  `cnt` BIGINT NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'OrderAgg1_1'
);
CREATE TABLE `OrderAgg2_2` (
  `customerid` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `cnt` BIGINT NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'OrderAgg2_2'
);
CREATE TABLE `OrderAgg3_3` (
  `customerid` BIGINT NOT NULL,
  `cnt` BIGINT NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'OrderAgg3_3'
);
CREATE TABLE `OrderAgg4_4` (
  `customerid` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `cnt` BIGINT NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'OrderAgg4_4'
);
CREATE TABLE `Orders_5` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` RAW('com.datasqrl.flinkrunner.types.json.FlinkJsonType', 'AENjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIudHlwZXMuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAw=='),
  PRIMARY KEY (`id`, `time`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'Orders_5'
);
CREATE TABLE `OrdersState_6` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` RAW('com.datasqrl.flinkrunner.types.json.FlinkJsonType', 'AENjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIudHlwZXMuanNvbi5GbGlua0pzb25UeXBlU2VyaWFsaXplclNuYXBzaG90AAAAAw=='),
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'OrdersState_6'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`OrderAgg1_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`OrderAgg1`)
;
INSERT INTO `default_catalog`.`default_database`.`OrderAgg2_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`OrderAgg2`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`OrderAgg3_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`OrderAgg3`)
  ;
  INSERT INTO `default_catalog`.`default_database`.`OrderAgg4_4`
   (SELECT *
    FROM `default_catalog`.`default_database`.`OrderAgg4`)
   ;
   INSERT INTO `default_catalog`.`default_database`.`Orders_5`
    (SELECT `id`, `customerid`, `time`, TO_JSONB(`entries`) AS `entries`
     FROM `default_catalog`.`default_database`.`Orders`)
    ;
    INSERT INTO `default_catalog`.`default_database`.`OrdersState_6`
     (SELECT `id`, `customerid`, `time`, TO_JSONB(`entries`) AS `entries`
      FROM `default_catalog`.`default_database`.`Orders`)
     ;
     END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "OrderAgg1_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrderAgg1_1\" (\"customerid\" BIGINT NOT NULL, \"cnt\" BIGINT NOT NULL , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderAgg2_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrderAgg2_2\" (\"customerid\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL, \"cnt\" BIGINT NOT NULL , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderAgg3_3",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrderAgg3_3\" (\"customerid\" BIGINT NOT NULL, \"cnt\" BIGINT NOT NULL , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderAgg4_4",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrderAgg4_4\" (\"customerid\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL, \"cnt\" BIGINT NOT NULL , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Orders_5",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Orders_5\" (\"id\" BIGINT NOT NULL, \"customerid\" BIGINT NOT NULL, \"time\" TIMESTAMP WITH TIME ZONE NOT NULL, \"entries\" JSONB  , PRIMARY KEY (\"id\",\"time\"))",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "OrdersState_6",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrdersState_6\" (\"id\" BIGINT NOT NULL, \"customerid\" BIGINT NOT NULL, \"time\" TIMESTAMP WITH TIME ZONE NOT NULL, \"entries\" JSONB  , PRIMARY KEY (\"id\"))",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "OrderAgg1",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderAgg1\"(\"customerid\", \"cnt\") AS SELECT *\nFROM \"OrderAgg1_1\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderAgg2",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderAgg2\"(\"customerid\", \"timestamp\", \"cnt\") AS SELECT *\nFROM \"OrderAgg2_2\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderAgg3",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderAgg3\"(\"customerid\", \"cnt\") AS SELECT *\nFROM \"OrderAgg3_3\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderAgg4",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderAgg4\"(\"customerid\", \"timestamp\", \"cnt\") AS SELECT *\nFROM \"OrderAgg4_4\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Orders",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Orders\"(\"id\", \"customerid\", \"time\", \"entries\") AS SELECT *\nFROM \"Orders_5\"",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "OrdersState",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrdersState\"(\"id\", \"customerid\", \"time\", \"entries\") AS SELECT *\nFROM \"OrdersState_6\"",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderAgg1",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"OrderAgg1_1\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderAgg2",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"OrderAgg2_2\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderAgg3",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"OrderAgg3_3\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderAgg4",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"OrderAgg4_4\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Orders",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Orders_5\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrdersState",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"OrdersState_6\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "schema" : "\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype OrderAgg1 {\n  customerid: GraphQLBigInteger!\n  cnt: GraphQLBigInteger!\n}\n\ntype OrderAgg2 {\n  customerid: GraphQLBigInteger!\n  timestamp: DateTime!\n  cnt: GraphQLBigInteger!\n}\n\ntype OrderAgg3 {\n  customerid: GraphQLBigInteger!\n  cnt: GraphQLBigInteger!\n}\n\ntype OrderAgg4 {\n  customerid: GraphQLBigInteger!\n  timestamp: DateTime!\n  cnt: GraphQLBigInteger!\n}\n\ntype Orders {\n  id: GraphQLBigInteger!\n  customerid: GraphQLBigInteger!\n  time: DateTime!\n  entries: [Orders_entriesOutput]!\n}\n\ntype OrdersState {\n  id: GraphQLBigInteger!\n  customerid: GraphQLBigInteger!\n  time: DateTime!\n  entries: [OrdersState_entriesOutput]!\n}\n\ntype OrdersState_entriesOutput {\n  productid: GraphQLBigInteger!\n  quantity: GraphQLBigInteger!\n  unit_price: Float!\n  discount: Float\n}\n\ntype Orders_entriesOutput {\n  productid: GraphQLBigInteger!\n  quantity: GraphQLBigInteger!\n  unit_price: Float!\n  discount: Float\n}\n\ntype Query {\n  OrderAgg1(limit: Int = 10, offset: Int = 0): [OrderAgg1!]\n  OrderAgg2(limit: Int = 10, offset: Int = 0): [OrderAgg2!]\n  OrderAgg3(limit: Int = 10, offset: Int = 0): [OrderAgg3!]\n  OrderAgg4(limit: Int = 10, offset: Int = 0): [OrderAgg4!]\n  Orders(limit: Int = 10, offset: Int = 0): [Orders!]\n  OrdersState(limit: Int = 10, offset: Int = 0): [OrdersState!]\n}\n"
    }
  }
}
