>>>pipeline_explain.txt
=== OrderAgg1
ID:     default_catalog.default_database.OrderAgg1
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Orders
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - cnt: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0}], cnt=[COUNT()])
  LogicalProject(customerid=[$1])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
SQL: CREATE VIEW OrderAgg1 AS  SELECT customerid, COUNT(1) as cnt FROM Orders GROUP BY customerid;

=== OrderAgg2
ID:     default_catalog.default_database.OrderAgg2
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Orders
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - cnt: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0}], timestamp=[MAX($1)], cnt=[COUNT()])
  LogicalProject(customerid=[$1], time=[$2])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
SQL: CREATE VIEW OrderAgg2 AS  SELECT customerid, MAX(`time`) as `timestamp`, COUNT(1) as cnt FROM Orders GROUP BY customerid;

=== OrderAgg3
ID:     default_catalog.default_database.OrderAgg3
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.OrdersState
Primary Key: customerid
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - cnt: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0}], cnt=[COUNT()])
  LogicalProject(customerid=[$1])
    LogicalTableScan(table=[[default_catalog, default_database, OrdersState]])
SQL: CREATE VIEW OrderAgg3 AS  SELECT customerid, COUNT(1) as cnt FROM OrdersState GROUP BY customerid;

=== OrderAgg4
ID:     default_catalog.default_database.OrderAgg4
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.OrdersState
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - cnt: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0}], timestamp=[MAX($1)], cnt=[COUNT()])
  LogicalProject(customerid=[$1], time=[$2])
    LogicalTableScan(table=[[default_catalog, default_database, OrdersState]])
SQL: CREATE VIEW OrderAgg4 AS  SELECT customerid, MAX(`time`) as `timestamp`, COUNT(1) as cnt FROM OrdersState GROUP BY customerid;

=== Orders
ID:     default_catalog.default_database.Orders
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Orders__base
Annotations:
 - features: DENORMALIZE (feature)
 - stream-root: Orders
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - entries: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[time], watermark=[-($2, 1:INTERVAL SECOND)])
  LogicalTableScan(table=[[default_catalog, default_database, Orders]])
SQL: CREATE VIEW `Orders__view`
AS
SELECT `Orders`.`id`, `Orders`.`customerid`, `Orders`.`time`, `Orders`.`entries`
FROM `default_catalog`.`default_database`.`Orders` AS `Orders`
=== OrdersState
ID:     default_catalog.default_database.OrdersState
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Orders
Annotations:
 - mostRecentDistinct: true
 - stream-root: Orders
Primary Key: id
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - entries: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3])
  LogicalFilter(condition=[=($4, 1)])
    LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, Orders]])
SQL: CREATE VIEW `OrdersState`
AS
SELECT `id`, `customerid`, `time`, `entries`
FROM (SELECT `id`, `customerid`, `time`, `entries`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `time` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`Orders`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Orders__schema` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Orders` (
  PRIMARY KEY (`id`, `time`) NOT ENFORCED,
  WATERMARK FOR `time` AS `time` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Orders__schema`;
CREATE VIEW `OrdersState`
AS
SELECT `id`, `customerid`, `time`, `entries`
FROM (SELECT `id`, `customerid`, `time`, `entries`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `time` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`Orders`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `OrderAgg1`
AS
SELECT `customerid`, COUNT(1) AS `cnt`
FROM `Orders`
GROUP BY `customerid`;
CREATE VIEW `OrderAgg2`
AS
SELECT `customerid`, MAX(`time`) AS `timestamp`, COUNT(1) AS `cnt`
FROM `Orders`
GROUP BY `customerid`;
CREATE VIEW `OrderAgg3`
AS
SELECT `customerid`, COUNT(1) AS `cnt`
FROM `OrdersState`
GROUP BY `customerid`;
CREATE VIEW `OrderAgg4`
AS
SELECT `customerid`, MAX(`time`) AS `timestamp`, COUNT(1) AS `cnt`
FROM `OrdersState`
GROUP BY `customerid`;
CREATE TABLE `OrderAgg1_1` (
  `customerid` BIGINT NOT NULL,
  `cnt` BIGINT NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'OrderAgg1_1',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `OrderAgg2_2` (
  `customerid` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `cnt` BIGINT NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'OrderAgg2_2',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `OrderAgg3_3` (
  `customerid` BIGINT NOT NULL,
  `cnt` BIGINT NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'OrderAgg3_3',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `OrderAgg4_4` (
  `customerid` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `cnt` BIGINT NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'OrderAgg4_4',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `Orders_5` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  PRIMARY KEY (`id`, `time`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'Orders_5',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `OrdersState_6` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'OrdersState_6',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`OrderAgg1_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`OrderAgg1`)
;
INSERT INTO `default_catalog`.`default_database`.`OrderAgg2_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`OrderAgg2`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`OrderAgg3_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`OrderAgg3`)
  ;
  INSERT INTO `default_catalog`.`default_database`.`OrderAgg4_4`
   (SELECT *
    FROM `default_catalog`.`default_database`.`OrderAgg4`)
   ;
   INSERT INTO `default_catalog`.`default_database`.`Orders_5`
    (SELECT `id`, `customerid`, `time`, `to_jsonb`(`entries`) AS `entries`
     FROM `default_catalog`.`default_database`.`Orders`)
    ;
    INSERT INTO `default_catalog`.`default_database`.`OrdersState_6`
     (SELECT `id`, `customerid`, `time`, `to_jsonb`(`entries`) AS `entries`
      FROM `default_catalog`.`default_database`.`Orders`)
     ;
     END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "OrderAgg1_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrderAgg1_1\" (\"customerid\" BIGINT NOT NULL, \"cnt\" BIGINT NOT NULL , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderAgg2_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrderAgg2_2\" (\"customerid\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL, \"cnt\" BIGINT NOT NULL , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderAgg3_3",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrderAgg3_3\" (\"customerid\" BIGINT NOT NULL, \"cnt\" BIGINT NOT NULL , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderAgg4_4",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrderAgg4_4\" (\"customerid\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL, \"cnt\" BIGINT NOT NULL , PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Orders_5",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Orders_5\" (\"id\" BIGINT NOT NULL, \"customerid\" BIGINT NOT NULL, \"time\" TIMESTAMP WITH TIME ZONE NOT NULL, \"entries\" JSONB  , PRIMARY KEY (\"id\",\"time\"))",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "OrdersState_6",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrdersState_6\" (\"id\" BIGINT NOT NULL, \"customerid\" BIGINT NOT NULL, \"time\" TIMESTAMP WITH TIME ZONE NOT NULL, \"entries\" JSONB  , PRIMARY KEY (\"id\"))",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "OrderAgg1",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderAgg1\"(\"customerid\", \"cnt\") AS SELECT *\nFROM \"OrderAgg1_1\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderAgg2",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderAgg2\"(\"customerid\", \"timestamp\", \"cnt\") AS SELECT *\nFROM \"OrderAgg2_2\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderAgg3",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderAgg3\"(\"customerid\", \"cnt\") AS SELECT *\nFROM \"OrderAgg3_3\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderAgg4",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderAgg4\"(\"customerid\", \"timestamp\", \"cnt\") AS SELECT *\nFROM \"OrderAgg4_4\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "cnt",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Orders",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Orders\"(\"id\", \"customerid\", \"time\", \"entries\") AS SELECT *\nFROM \"Orders_5\"",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "OrdersState",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrdersState\"(\"id\", \"customerid\", \"time\", \"entries\") AS SELECT *\nFROM \"OrdersState_6\"",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderAgg1",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"OrderAgg1_1\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderAgg2",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"OrderAgg2_2\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderAgg3",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"OrderAgg3_3\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderAgg4",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"OrderAgg4_4\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Orders",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Orders_5\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrdersState",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"OrdersState_6\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "operations" : [
      {
        "function" : {
          "name" : "GetOrderAgg1",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query OrderAgg1($limit: Int = 10, $offset: Int = 0) {\nOrderAgg1(limit: $limit, offset: $offset) {\ncustomerid\ncnt\n}\n\n}",
          "queryName" : "OrderAgg1",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/OrderAgg1{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrderAgg2",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query OrderAgg2($limit: Int = 10, $offset: Int = 0) {\nOrderAgg2(limit: $limit, offset: $offset) {\ncustomerid\ntimestamp\ncnt\n}\n\n}",
          "queryName" : "OrderAgg2",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/OrderAgg2{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrderAgg3",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query OrderAgg3($limit: Int = 10, $offset: Int = 0) {\nOrderAgg3(limit: $limit, offset: $offset) {\ncustomerid\ncnt\n}\n\n}",
          "queryName" : "OrderAgg3",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/OrderAgg3{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrderAgg4",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query OrderAgg4($limit: Int = 10, $offset: Int = 0) {\nOrderAgg4(limit: $limit, offset: $offset) {\ncustomerid\ntimestamp\ncnt\n}\n\n}",
          "queryName" : "OrderAgg4",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/OrderAgg4{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrders",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query Orders($limit: Int = 10, $offset: Int = 0) {\nOrders(limit: $limit, offset: $offset) {\nid\ncustomerid\ntime\nentries {\nproductid\nquantity\nunit_price\ndiscount\n}\n}\n\n}",
          "queryName" : "Orders",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/Orders{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrdersState",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query OrdersState($limit: Int = 10, $offset: Int = 0) {\nOrdersState(limit: $limit, offset: $offset) {\nid\ncustomerid\ntime\nentries {\nproductid\nquantity\nunit_price\ndiscount\n}\n}\n\n}",
          "queryName" : "OrdersState",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/OrdersState{?offset,limit}"
      }
    ],
    "schema" : {
      "type" : "string",
      "schema" : "\"An RFC-3339 compliant Full Date Scalar\"\nscalar Date\n\n\"A slightly refined version of RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"A JSON scalar\"\nscalar JSON\n\n\"24-hour clock time value string in the format `hh:mm:ss` or `hh:mm:ss.sss`.\"\nscalar LocalTime\n\n\"A 64-bit signed integer\"\nscalar Long\n\ntype OrderAgg1 {\n  customerid: Long!\n  cnt: Long!\n}\n\ntype OrderAgg2 {\n  customerid: Long!\n  timestamp: DateTime!\n  cnt: Long!\n}\n\ntype OrderAgg3 {\n  customerid: Long!\n  cnt: Long!\n}\n\ntype OrderAgg4 {\n  customerid: Long!\n  timestamp: DateTime!\n  cnt: Long!\n}\n\ntype Orders {\n  id: Long!\n  customerid: Long!\n  time: DateTime!\n  entries: [Orders_entriesOutput]!\n}\n\ntype OrdersState {\n  id: Long!\n  customerid: Long!\n  time: DateTime!\n  entries: [OrdersState_entriesOutput]!\n}\n\ntype OrdersState_entriesOutput {\n  productid: Long!\n  quantity: Long!\n  unit_price: Float!\n  discount: Float\n}\n\ntype Orders_entriesOutput {\n  productid: Long!\n  quantity: Long!\n  unit_price: Float!\n  discount: Float\n}\n\ntype Query {\n  OrderAgg1(limit: Int = 10, offset: Int = 0): [OrderAgg1!]\n  OrderAgg2(limit: Int = 10, offset: Int = 0): [OrderAgg2!]\n  OrderAgg3(limit: Int = 10, offset: Int = 0): [OrderAgg3!]\n  OrderAgg4(limit: Int = 10, offset: Int = 0): [OrderAgg4!]\n  Orders(limit: Int = 10, offset: Int = 0): [Orders!]\n  OrdersState(limit: Int = 10, offset: Int = 0): [OrdersState!]\n}\n\nenum _McpMethodType {\n  NONE\n  TOOL\n  RESOURCE\n}\n\nenum _RestMethodType {\n  NONE\n  GET\n  POST\n}\n\ndirective @api(mcp: _McpMethodType, rest: _RestMethodType, uri: String) on QUERY | MUTATION | FIELD_DEFINITION\n"
    }
  }
}
