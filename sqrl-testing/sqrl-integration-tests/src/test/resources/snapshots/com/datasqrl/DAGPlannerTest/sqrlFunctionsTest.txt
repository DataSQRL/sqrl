>>>pipeline_explain.txt
=== MyTable
ID:     default_catalog.default_database.MyTable
Type:   state
Stage:  flink
Primary Key: val
Timestamp  : -
Schema:
 - val: INTEGER NOT NULL
 - myTimestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(val=[$0], myTimestamp=[COALESCE(TO_TIMESTAMP_LTZ($0, 3), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
  LogicalValues(tuples=[[{ 1 }, { 2 }]])
SQL: CREATE VIEW MyTable AS  SELECT val, COALESCE(TO_TIMESTAMP_LTZ(val, 3), TIMESTAMP '1970-01-01 00:00:00.000') AS myTimestamp
           FROM (VALUES ((1)), ((2))) AS t(val);

=== MyTable2
ID:     default_catalog.default_database.MyTable2
Type:   state
Stage:  flink
Primary Key: val
Timestamp  : -
Schema:
 - val: INTEGER NOT NULL
 - myTimestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(val=[$0], myTimestamp=[COALESCE(TO_TIMESTAMP_LTZ($0, 3), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
  LogicalValues(tuples=[[{ 3 }, { 4 }]])
SQL: CREATE VIEW MyTable2 AS  SELECT val, COALESCE(TO_TIMESTAMP_LTZ(val, 3), TIMESTAMP '1970-01-01 00:00:00.000') AS myTimestamp
           FROM (VALUES ((3)), ((4))) AS t(val);

>>>flink-sql-no-functions.sql
CREATE VIEW `MyTable`
AS
SELECT `val`, COALESCE(`TO_TIMESTAMP_LTZ`(`val`, 3), TIMESTAMP '1970-01-01 00:00:00.000') AS `myTimestamp`
FROM (VALUES ROW(1),
   ROW(2)) AS `t` (`val`);
CREATE VIEW `MyTable2`
AS
SELECT `val`, COALESCE(`TO_TIMESTAMP_LTZ`(`val`, 3), TIMESTAMP '1970-01-01 00:00:00.000') AS `myTimestamp`
FROM (VALUES ROW(3),
   ROW(4)) AS `t` (`val`);
CREATE TABLE `MyTable_1` (
  `val` INTEGER NOT NULL,
  `myTimestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`val`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'MyTable_1',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `MyTable2_2` (
  `val` INTEGER NOT NULL,
  `myTimestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`val`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'MyTable2_2',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`MyTable_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`MyTable`)
;
INSERT INTO `default_catalog`.`default_database`.`MyTable2_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`MyTable2`)
 ;
 END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "MyTable_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"MyTable_1\" (\"val\" INTEGER NOT NULL, \"myTimestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"val\"))",
      "fields" : [
        {
          "name" : "val",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "myTimestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "MyTable2_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"MyTable2_2\" (\"val\" INTEGER NOT NULL, \"myTimestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"val\"))",
      "fields" : [
        {
          "name" : "val",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "myTimestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "MyTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"MyTable\"(\"val\", \"myTimestamp\") AS SELECT *\nFROM \"MyTable_1\"",
      "fields" : [
        {
          "name" : "val",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "myTimestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "MyTable2",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"MyTable2\"(\"val\", \"myTimestamp\") AS SELECT *\nFROM \"MyTable2_2\"",
      "fields" : [
        {
          "name" : "val",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "myTimestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "MyTable",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"MyTable_1\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "MyTable2",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"MyTable2_2\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "operations" : [
      {
        "function" : {
          "name" : "GetMyTable",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query MyTable($limit: Int = 10, $offset: Int = 0) {\nMyTable(limit: $limit, offset: $offset) {\nval\nmyTimestamp\n}\n\n}",
          "queryName" : "MyTable",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/MyTable{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetMyTable2",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query MyTable2($limit: Int = 10, $offset: Int = 0) {\nMyTable2(limit: $limit, offset: $offset) {\nval\nmyTimestamp\n}\n\n}",
          "queryName" : "MyTable2",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/MyTable2{?offset,limit}"
      }
    ],
    "schema" : {
      "type" : "string",
      "schema" : "\"A slightly refined version of RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype MyTable {\n  val: Int!\n  myTimestamp: DateTime!\n}\n\ntype MyTable2 {\n  val: Int!\n  myTimestamp: DateTime!\n}\n\ntype Query {\n  MyTable(limit: Int = 10, offset: Int = 0): [MyTable!]\n  MyTable2(limit: Int = 10, offset: Int = 0): [MyTable2!]\n}\n\nenum _McpMethodType {\n  NONE\n  TOOL\n  RESOURCE\n}\n\nenum _RestMethodType {\n  NONE\n  GET\n  POST\n}\n\ndirective @api(mcp: _McpMethodType, rest: _RestMethodType, uri: String) on QUERY | MUTATION | FIELD_DEFINITION\n"
    }
  }
}
