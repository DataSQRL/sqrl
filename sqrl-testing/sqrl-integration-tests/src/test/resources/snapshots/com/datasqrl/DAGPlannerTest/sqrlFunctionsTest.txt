>>>pipeline_explain.txt
=== MyTable
ID:     default_catalog.default_database.MyTable
Type:   state
Stage:  flink
Primary Key: val
Timestamp  : -
Schema:
 - val: INTEGER NOT NULL
 - myTimestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)
Plan:
LogicalProject(val=[$0], myTimestamp=[EpochToTimestamp(CAST($0):BIGINT)])
  LogicalValues(tuples=[[{ 1 }, { 2 }]])
SQL: CREATE VIEW MyTable AS  SELECT val, EpochToTimestamp(val) AS myTimestamp
           FROM (VALUES ((1)), ((2))) AS t(val);

=== MyTable2
ID:     default_catalog.default_database.MyTable2
Type:   state
Stage:  flink
Primary Key: val
Timestamp  : -
Schema:
 - val: INTEGER NOT NULL
 - myTimestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)
Plan:
LogicalProject(val=[$0], myTimestamp=[EPOCHTOTIMESTAMP(CAST($0):BIGINT)])
  LogicalValues(tuples=[[{ 3 }, { 4 }]])
SQL: CREATE VIEW MyTable2 AS  SELECT val, EPOCHTOTIMESTAMP(val) AS myTimestamp
           FROM (VALUES ((3)), ((4))) AS t(val);

>>>flink-sql-no-functions.sql
CREATE VIEW `MyTable`
AS
SELECT `val`, EPOCHTOTIMESTAMP(`val`) AS `myTimestamp`
FROM (VALUES ROW(1),
   ROW(2)) AS `t` (`val`);
CREATE VIEW `MyTable2`
AS
SELECT `val`, EPOCHTOTIMESTAMP(`val`) AS `myTimestamp`
FROM (VALUES ROW(3),
   ROW(4)) AS `t` (`val`);
CREATE TABLE `MyTable_1` (
  `val` INTEGER NOT NULL,
  `myTimestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE,
  PRIMARY KEY (`val`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'MyTable_1'
);
CREATE TABLE `MyTable2_2` (
  `val` INTEGER NOT NULL,
  `myTimestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE,
  PRIMARY KEY (`val`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'password' = '${JDBC_PASSWORD}',
  'driver' = 'org.postgresql.Driver',
  'username' = '${JDBC_USERNAME}',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'table-name' = 'MyTable2_2'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`MyTable_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`MyTable`)
;
INSERT INTO `default_catalog`.`default_database`.`MyTable2_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`MyTable2`)
 ;
 END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "MyTable_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"MyTable_1\" (\"val\" INTEGER NOT NULL, \"myTimestamp\" TIMESTAMP WITH TIME ZONE  , PRIMARY KEY (\"val\"))",
      "fields" : [
        {
          "name" : "val",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "myTimestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "MyTable2_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"MyTable2_2\" (\"val\" INTEGER NOT NULL, \"myTimestamp\" TIMESTAMP WITH TIME ZONE  , PRIMARY KEY (\"val\"))",
      "fields" : [
        {
          "name" : "val",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "myTimestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "MyTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"MyTable\"(\"val\", \"myTimestamp\") AS SELECT *\nFROM \"MyTable_1\"",
      "fields" : [
        {
          "name" : "val",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "myTimestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "MyTable2",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"MyTable2\"(\"val\", \"myTimestamp\") AS SELECT *\nFROM \"MyTable2_2\"",
      "fields" : [
        {
          "name" : "val",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "myTimestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : true
        }
      ]
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "coords" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "MyTable",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"MyTable_1\"",
              "parameters" : [ ]
            }
          }
        ]
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "MyTable2",
        "matchs" : [
          {
            "arguments" : [
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "PagedJdbcQuery",
              "type" : "PagedJdbcQuery",
              "sql" : "SELECT *\nFROM \"MyTable2_2\"",
              "parameters" : [ ]
            }
          }
        ]
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "type" : "string",
      "schema" : "\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\ntype MyTable {\n  val: Int!\n  myTimestamp: DateTime\n}\n\ntype MyTable2 {\n  val: Int!\n  myTimestamp: DateTime\n}\n\ntype Query {\n  MyTable(limit: Int = 10, offset: Int = 0): [MyTable!]\n  MyTable2(limit: Int = 10, offset: Int = 0): [MyTable2!]\n}\n"
    }
  }
}
