>>>pipeline_explain.txt
=== MyTable
ID:     default_catalog.default_database.MyTable
Type:   state
Stage:  flink
Primary Key: val
Timestamp  : -
Schema:
 - val: INTEGER NOT NULL
 - myTimestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(val=[$0], myTimestamp=[COALESCE(TO_TIMESTAMP_LTZ($0, 3), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
  LogicalValues(tuples=[[{ 1 }, { 2 }]])
SQL: CREATE VIEW MyTable AS  SELECT val, COALESCE(TO_TIMESTAMP_LTZ(val, 3), TIMESTAMP '1970-01-01 00:00:00.000') AS myTimestamp
           FROM (VALUES ((1)), ((2))) AS t(val);

=== MyTable2
ID:     default_catalog.default_database.MyTable2
Type:   state
Stage:  flink
Primary Key: val
Timestamp  : -
Schema:
 - val: INTEGER NOT NULL
 - myTimestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(val=[$0], myTimestamp=[COALESCE(TO_TIMESTAMP_LTZ($0, 3), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
  LogicalValues(tuples=[[{ 3 }, { 4 }]])
SQL: CREATE VIEW MyTable2 AS  SELECT val, COALESCE(TO_TIMESTAMP_LTZ(val, 3), TIMESTAMP '1970-01-01 00:00:00.000') AS myTimestamp
           FROM (VALUES ((3)), ((4))) AS t(val);

>>>flink-sql-no-functions.sql
CREATE VIEW `MyTable`
AS
SELECT `val`, COALESCE(`TO_TIMESTAMP_LTZ`(`val`, 3), TIMESTAMP '1970-01-01 00:00:00.000') AS `myTimestamp`
FROM (VALUES ROW(1),
   ROW(2)) AS `t` (`val`);
CREATE VIEW `MyTable2`
AS
SELECT `val`, COALESCE(`TO_TIMESTAMP_LTZ`(`val`, 3), TIMESTAMP '1970-01-01 00:00:00.000') AS `myTimestamp`
FROM (VALUES ROW(3),
   ROW(4)) AS `t` (`val`);
CREATE TABLE `MyTable_1` (
  `val` INTEGER NOT NULL,
  `myTimestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`val`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'MyTable_1',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `MyTable2_2` (
  `val` INTEGER NOT NULL,
  `myTimestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`val`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'MyTable2_2',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`MyTable_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`MyTable`)
;
INSERT INTO `default_catalog`.`default_database`.`MyTable2_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`MyTable2`)
 ;
 END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "MyTable_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"MyTable_1\" (\"val\" INTEGER NOT NULL, \"myTimestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"val\"))",
      "fields" : [
        {
          "name" : "val",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "myTimestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "MyTable2_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"MyTable2_2\" (\"val\" INTEGER NOT NULL, \"myTimestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"val\"))",
      "fields" : [
        {
          "name" : "val",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "myTimestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "MyTable",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"MyTable\"(\"val\", \"myTimestamp\") AS SELECT *\nFROM \"MyTable_1\"",
      "fields" : [
        {
          "name" : "val",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "myTimestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "MyTable2",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"MyTable2\"(\"val\", \"myTimestamp\") AS SELECT *\nFROM \"MyTable2_2\"",
      "fields" : [
        {
          "name" : "val",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "myTimestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    }
  ]
}
>>>vertx-config.json
{
  "servletConfig": {
    "graphiQLEndpoint": "/graphiql*",
    "graphQLEndpoint": "/graphql",
    "usePgPool": true
  },
  "graphQLHandlerOptions": {
    "requestBatchingEnabled": false,
    "requestMultipartEnabled": false
  },
  "graphiQLHandlerOptions": {
    "enabled": true,
    "httpEnabled": true,
    "graphQLUri": "/graphql",
    "graphQLWSEnabled": true,
    "graphQLWSUri": "/graphql",
    "headers": null,
    "wsConnectionParams": null,
    "query": null,
    "variables": null
  },
  "httpServerOptions": {
    "sendBufferSize": -1,
    "receiveBufferSize": -1,
    "trafficClass": -1,
    "reuseAddress": true,
    "logActivity": false,
    "activityLogDataFormat": "HEX_DUMP",
    "reusePort": false,
    "tcpNoDelay": true,
    "tcpKeepAlive": false,
    "soLinger": -1,
    "idleTimeout": 0,
    "readIdleTimeout": 0,
    "writeIdleTimeout": 0,
    "idleTimeoutUnit": "SECONDS",
    "ssl": false,
    "sslEngineOptions": null,
    "sslOptions": {
      "sslHandshakeTimeout": 10,
      "sslHandshakeTimeoutUnit": "SECONDS",
      "keyCertOptions": null,
      "trustOptions": null,
      "enabledCipherSuites": [],
      "crlPaths": [],
      "crlValues": [],
      "useAlpn": false,
      "enabledSecureTransportProtocols": [
        "TLSv1",
        "TLSv1.1",
        "TLSv1.2"
      ],
      "applicationLayerProtocols": null,
      "clientAuth": "NONE",
      "sni": false
    },
    "tcpFastOpen": false,
    "tcpCork": false,
    "tcpQuickAck": false,
    "tcpUserTimeout": 0,
    "enabledCipherSuites": [],
    "crlPaths": [],
    "crlValues": [],
    "port": 8888,
    "host": "0.0.0.0",
    "acceptBacklog": -1,
    "useProxyProtocol": false,
    "proxyProtocolTimeout": 10,
    "proxyProtocolTimeoutUnit": "SECONDS",
    "registerWriteHandler": false,
    "trafficShapingOptions": null,
    "compressionSupported": false,
    "compressionLevel": 6,
    "compressionContentSizeThreshold": 0,
    "compressors": null,
    "maxWebSocketFrameSize": 65536,
    "maxWebSocketMessageSize": 262144,
    "webSocketSubProtocols": [
      "graphql-transport-ws",
      "graphql-ws"
    ],
    "handle100ContinueAutomatically": false,
    "maxChunkSize": 8192,
    "maxInitialLineLength": 4096,
    "maxHeaderSize": 8192,
    "maxFormAttributeSize": 8192,
    "maxFormFields": 256,
    "maxFormBufferedBytes": 1024,
    "initialSettings": {
      "headerTableSize": 4096,
      "pushEnabled": true,
      "maxConcurrentStreams": 100,
      "initialWindowSize": 65535,
      "maxFrameSize": 16384,
      "maxHeaderListSize": 8192,
      "extraSettings": null
    },
    "alpnVersions": [
      "HTTP_2",
      "HTTP_1_1"
    ],
    "http2ClearTextEnabled": true,
    "http2ConnectionWindowSize": -1,
    "decompressionSupported": false,
    "acceptUnmaskedFrames": false,
    "decoderInitialBufferSize": 128,
    "perFrameWebSocketCompressionSupported": true,
    "perMessageWebSocketCompressionSupported": true,
    "webSocketCompressionLevel": 6,
    "webSocketAllowServerNoContext": false,
    "webSocketPreferredClientNoContext": false,
    "webSocketClosingTimeout": 10,
    "tracingPolicy": "ALWAYS",
    "registerWebSocketWriteHandlers": false,
    "http2RstFloodMaxRstFramePerWindow": 200,
    "http2RstFloodWindowDuration": 30,
    "http2RstFloodWindowDurationTimeUnit": "SECONDS",
    "strictThreadMode": false,
    "useAlpn": false,
    "keyCertOptions": null,
    "trustOptions": null,
    "clientAuth": "NONE",
    "enabledSecureTransportProtocols": [
      "TLSv1",
      "TLSv1.1",
      "TLSv1.2"
    ],
    "sslHandshakeTimeout": 10,
    "sslHandshakeTimeoutUnit": "SECONDS",
    "sni": false,
    "fileRegionEnabled": true
  },
  "pgConnectOptions": {
    "host": "${PGHOST}",
    "port": 5432,
    "user": "${PGUSER}",
    "password": "${PGPASSWORD}",
    "database": "${PGDATABASE}",
    "cachePreparedStatements": false,
    "preparedStatementCacheMaxSize": 256,
    "preparedStatementCacheSqlFilter": { },
    "properties": {
      "DateStyle": "ISO",
      "client_encoding": "utf8",
      "application_name": "vertx-pg-client",
      "extra_float_digits": "2"
    },
    "tracingPolicy": null,
    "reconnectAttempts": 0,
    "reconnectInterval": 1000,
    "metricsName": "",
    "sslOptions": null,
    "pipeliningLimit": 256,
    "sslMode": "DISABLE",
    "useLayer7Proxy": false,
    "socketAddress": {
      "inetSocket": true,
      "domainSocket": false
    },
    "usingDomainSocket": false
  },
  "poolOptions": {
    "maxSize": 4,
    "maxWaitQueueSize": -1,
    "idleTimeout": 0,
    "idleTimeoutUnit": "SECONDS",
    "maxLifetime": 0,
    "maxLifetimeUnit": "SECONDS",
    "poolCleanerPeriod": 1000,
    "connectionTimeout": 30,
    "connectionTimeoutUnit": "SECONDS",
    "shared": false,
    "name": "__vertx.DEFAULT",
    "eventLoopSize": 0
  },
  "corsHandlerOptions": {
    "allowedOrigin": "*",
    "allowedOrigins": null,
    "allowCredentials": false,
    "maxAgeSeconds": -1,
    "allowPrivateNetwork": false,
    "allowedMethods": [
      "POST",
      "GET"
    ],
    "allowedHeaders": [],
    "exposedHeaders": []
  },
  "jwtAuth": null
}
>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "MyTable",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"MyTable_1\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "MyTable2",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"MyTable2_2\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "schema" : "\"A slightly refined version of RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype MyTable {\n  val: Int!\n  myTimestamp: DateTime!\n}\n\ntype MyTable2 {\n  val: Int!\n  myTimestamp: DateTime!\n}\n\ntype Query {\n  MyTable(limit: Int = 10, offset: Int = 0): [MyTable!]\n  MyTable2(limit: Int = 10, offset: Int = 0): [MyTable2!]\n}\n"
    }
  }
}
