>>>pipeline_explain.txt
=== Click
ID:     default_catalog.default_database.Click
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Click__base
Annotations:
 - stream-root: Click
Primary Key: url, userid, timestamp
Timestamp  : timestamp
Schema:
 - url: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - userid: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($1, 1000:INTERVAL SECOND)])
  LogicalTableScan(table=[[default_catalog, default_database, Click]])
SQL: CREATE VIEW `Click__view`
AS
SELECT `Click`.`url`, `Click`.`timestamp`, `Click`.`userid`
FROM `default_catalog`.`default_database`.`Click` AS `Click`
=== Recommendation
ID:     default_catalog.default_database.Recommendation
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.VisitAfter
Annotations:
 - sort: [0 ASC-nulls-first, 2 DESC-nulls-last]
Primary Key: url, rec
Timestamp  : -
Schema:
 - url: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - rec: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - frequency: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], frequency=[COUNT()])
  LogicalProject(url=[$0], rec=[$1])
    LogicalTableScan(table=[[default_catalog, default_database, VisitAfter]])
SQL: CREATE VIEW Recommendation AS  SELECT beforeURL AS url, afterURL AS rec,
    count(1) AS frequency FROM VisitAfter
    GROUP BY beforeURL, afterURL ORDER BY url ASC, frequency DESC;

=== Trending
ID:     default_catalog.default_database.Trending
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Click
Annotations:
 - sort: [1 DESC-nulls-last, 0 ASC-nulls-first]
Primary Key: url
Timestamp  : -
Schema:
 - url: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - total: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0}], total=[COUNT()])
  LogicalProject(url=[$0])
    LogicalTableScan(table=[[default_catalog, default_database, Click]])
SQL: CREATE VIEW Trending AS  SELECT url, count(1) AS total
    FROM Click
    GROUP BY url ORDER BY total DESC, url ASC;

=== VisitAfter
ID:     default_catalog.default_database.VisitAfter
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Click
Primary Key: -
Timestamp  : timestamp
Schema:
 - beforeURL: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - afterURL: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(beforeURL=[$0], afterURL=[$3], timestamp=[$4])
  LogicalJoin(condition=[AND(=($2, $5), <($1, $4), >=($1, -($4, *(10, 60000:INTERVAL MINUTE))))], joinType=[inner])
    LogicalTableScan(table=[[default_catalog, default_database, Click]])
    LogicalTableScan(table=[[default_catalog, default_database, Click]])
SQL: CREATE VIEW VisitAfter AS  SELECT b.url AS beforeURL, a.url AS afterURL,
    a.`timestamp` AS `timestamp`
    FROM Click b JOIN Click a ON b.userid=a.userid AND
        b.`timestamp` < a.`timestamp` AND
        b.`timestamp` >= a.`timestamp` - INTERVAL 10 MINUTE;

>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Click__schema` (
  `url` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `userid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Click` (
  PRIMARY KEY (`url`, `userid`, `timestamp`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '1' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = '${DATA_PATH}/click.jsonl',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Click__schema`;
CREATE VIEW `Trending`
AS
SELECT `url`, COUNT(1) AS `total`
FROM `Click`
GROUP BY `url`;
CREATE VIEW `VisitAfter`
AS
SELECT `b`.`url` AS `beforeURL`, `a`.`url` AS `afterURL`, `a`.`timestamp` AS `timestamp`
FROM `Click` AS `b`
 INNER JOIN `Click` AS `a` ON `b`.`userid` = `a`.`userid` AND `b`.`timestamp` < `a`.`timestamp` AND `b`.`timestamp` >= `a`.`timestamp` - (INTERVAL 10 MINUTE);
CREATE VIEW `Recommendation`
AS
SELECT `beforeURL` AS `url`, `afterURL` AS `rec`, COUNT(1) AS `frequency`
FROM `VisitAfter`
GROUP BY `beforeURL`, `afterURL`;
CREATE VIEW `RankTest`
AS
SELECT `url`, COUNT(1) AS `total`
FROM `Click`
GROUP BY `url`;
CREATE TABLE `Click_1` (
  `url` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `userid` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  PRIMARY KEY (`url`, `userid`, `timestamp`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'Click',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `Recommendation_2` (
  `url` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `rec` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `frequency` BIGINT NOT NULL,
  PRIMARY KEY (`url`, `rec`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'Recommendation',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `Trending_3` (
  `url` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `total` BIGINT NOT NULL,
  PRIMARY KEY (`url`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'Trending',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `VisitAfter_4` (
  `beforeURL` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `afterURL` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'VisitAfter',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`Click_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`Click`)
;
INSERT INTO `default_catalog`.`default_database`.`Recommendation_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`Recommendation`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`Trending_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`Trending`)
  ;
  INSERT INTO `default_catalog`.`default_database`.`VisitAfter_4`
   (SELECT `beforeURL`, `afterURL`, `timestamp`, `hash_columns`(`beforeURL`, `afterURL`, `timestamp`) AS `__pk_hash`
    FROM `default_catalog`.`default_database`.`VisitAfter`)
   ;
   END
>>>postgres-schema.sql
CREATE TABLE IF NOT EXISTS "Click" ("url" TEXT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL, "userid" TEXT NOT NULL , PRIMARY KEY ("url","userid","timestamp"));
CREATE TABLE IF NOT EXISTS "Recommendation" ("url" TEXT NOT NULL, "rec" TEXT NOT NULL, "frequency" BIGINT NOT NULL , PRIMARY KEY ("url","rec"));
CREATE TABLE IF NOT EXISTS "Trending" ("url" TEXT NOT NULL, "total" BIGINT NOT NULL , PRIMARY KEY ("url"));
CREATE TABLE IF NOT EXISTS "VisitAfter" ("beforeURL" TEXT NOT NULL, "afterURL" TEXT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL, "__pk_hash" TEXT  , PRIMARY KEY ("__pk_hash"))
>>>postgres-views.sql

>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Click",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Click\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Recommendation",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "url"
            },
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM (SELECT \"url\", \"rec\", \"frequency\"\n  FROM \"Recommendation\"\n  ORDER BY \"url\" NULLS FIRST, \"frequency\" DESC NULLS LAST) AS \"t\"\nWHERE \"url\" = $1",
            "parameters" : [
              {
                "type" : "arg",
                "path" : "url"
              }
            ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Trending",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM (SELECT \"url\", \"total\"\n  FROM \"Trending\"\n  ORDER BY \"total\" DESC NULLS LAST, \"url\" NULLS FIRST) AS \"t\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "VisitAfter",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT \"beforeURL\", \"afterURL\", \"timestamp\"\nFROM \"VisitAfter\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "operations" : [
      {
        "function" : {
          "name" : "GetClick",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query Click($limit: Int = 10, $offset: Int = 0) {\nClick(limit: $limit, offset: $offset) {\nurl\ntimestamp\nuserid\n}\n\n}",
          "queryName" : "Click",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/Click{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetRecommendation",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              },
              "url" : {
                "type" : "string"
              }
            },
            "required" : [
              "url"
            ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query Recommendation($url: String!, $limit: Int = 10, $offset: Int = 0) {\nRecommendation(url: $url, limit: $limit, offset: $offset) {\nurl\nrec\nfrequency\n}\n\n}",
          "queryName" : "Recommendation",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/Recommendation{?offset,limit,url}"
      },
      {
        "function" : {
          "name" : "GetTrending",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query Trending($limit: Int = 10, $offset: Int = 0) {\nTrending(limit: $limit, offset: $offset) {\nurl\ntotal\n}\n\n}",
          "queryName" : "Trending",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/Trending{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetVisitAfter",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query VisitAfter($limit: Int = 10, $offset: Int = 0) {\nVisitAfter(limit: $limit, offset: $offset) {\nbeforeURL\nafterURL\ntimestamp\n}\n\n}",
          "queryName" : "VisitAfter",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/VisitAfter{?offset,limit}"
      }
    ],
    "schema" : {
      "type" : "string",
      "schema" : "type Click {\n  url: String!\n  timestamp: DateTime!\n  userid: String!\n}\n\n\"A slightly refined version of RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype Query {\n  Click(limit: Int = 10, offset: Int = 0): [Click!]\n  Recommendation(url: String!, limit: Int = 10, offset: Int = 0): [Recommendation!]\n  Trending(limit: Int = 10, offset: Int = 0): [Trending!]\n  VisitAfter(limit: Int = 10, offset: Int = 0): [VisitAfter!]\n}\n\ntype Recommendation {\n  url: String!\n  rec: String!\n  frequency: GraphQLBigInteger!\n}\n\ntype Trending {\n  url: String!\n  total: GraphQLBigInteger!\n}\n\ntype VisitAfter {\n  beforeURL: String!\n  afterURL: String!\n  timestamp: DateTime!\n}\n\nenum _McpMethodType {\n  NONE\n  TOOL\n  RESOURCE\n}\n\nenum _RestMethodType {\n  NONE\n  GET\n  POST\n}\n\ndirective @api(mcp: _McpMethodType, rest: _RestMethodType, uri: String) on QUERY | MUTATION | FIELD_DEFINITION\n"
    }
  }
}
