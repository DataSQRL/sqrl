>>>pipeline_explain.txt
=== Customer
ID:     default_catalog.default_database.Customer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer__base
Annotations:
 - stream-root: Customer
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
  LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[COALESCE(TO_TIMESTAMP_LTZ($3, 0), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `Customer__view`
AS
SELECT `Customer`.`customerid`, `Customer`.`email`, `Customer`.`name`, `Customer`.`lastUpdated`, `Customer`.`timestamp`
FROM `default_catalog`.`default_database`.`Customer` AS `Customer`
=== CustomerCumulate
ID:     default_catalog.default_database.CustomerCumulate
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - features: STREAM_WINDOW_AGGREGATION (feature)
Primary Key: window_start, window_end
Timestamp  : -
Schema:
 - window_start: TIMESTAMP(3) NOT NULL
 - window_end: TIMESTAMP(3) NOT NULL
 - total: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], total=[COUNT()])
  LogicalProject(window_start=[$5], window_end=[$6])
    LogicalTableFunctionScan(invocation=[CUMULATE(DESCRIPTOR($4), 300000:INTERVAL MINUTE, 600000:INTERVAL MINUTE)], rowType=[RecordType(BIGINT customerid, VARCHAR(2147483647) email, VARCHAR(2147483647) name, BIGINT lastUpdated, TIMESTAMP_LTZ(3) *ROWTIME* timestamp, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP_LTZ(3) *ROWTIME* window_time)])
      LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
        LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW CustomerCumulate AS  SELECT window_start, window_end, COUNT(customerid) AS total
                  FROM TABLE(CUMULATE(TABLE Customer, DESCRIPTOR(`timestamp`), INTERVAL '5' MINUTES, INTERVAL '10' MINUTES))
                  GROUP BY window_start, window_end;

=== CustomerHop
ID:     default_catalog.default_database.CustomerHop
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - features: STREAM_WINDOW_AGGREGATION (feature)
Primary Key: window_start, window_end, window_time
Timestamp  : window_time
Schema:
 - window_start: TIMESTAMP(3) NOT NULL
 - window_end: TIMESTAMP(3) NOT NULL
 - window_time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - total: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0, 1, 2}], total=[COUNT()])
  LogicalProject(window_start=[$5], window_end=[$6], window_time=[$7])
    LogicalTableFunctionScan(invocation=[HOP(DESCRIPTOR($4), 300000:INTERVAL MINUTE, 600000:INTERVAL MINUTE)], rowType=[RecordType(BIGINT customerid, VARCHAR(2147483647) email, VARCHAR(2147483647) name, BIGINT lastUpdated, TIMESTAMP_LTZ(3) *ROWTIME* timestamp, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP_LTZ(3) *ROWTIME* window_time)])
      LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
        LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW CustomerHop AS  SELECT window_start, window_end, window_time, COUNT(customerid) AS total
                  FROM TABLE(HOP(TABLE Customer, DESCRIPTOR(`timestamp`), INTERVAL '5' MINUTES, INTERVAL '10' MINUTES))
                  GROUP BY window_start, window_end, window_time;

=== CustomerSession
ID:     default_catalog.default_database.CustomerSession
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - features: STREAM_WINDOW_AGGREGATION (feature)
 - stream-root: Customer
Primary Key: window_start, window_end, window_time, customerid
Timestamp  : window_time
Schema:
 - customerid: BIGINT NOT NULL
 - window_start: TIMESTAMP(3) NOT NULL
 - window_end: TIMESTAMP(3) NOT NULL
 - window_time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - total: BIGINT NOT NULL
Plan:
LogicalProject(customerid=[$3], window_start=[$0], window_end=[$1], window_time=[$2], total=[$4])
  LogicalAggregate(group=[{0, 1, 2, 3}], total=[COUNT()])
    LogicalProject(window_start=[$5], window_end=[$6], window_time=[$7], customerid=[$0])
      LogicalTableFunctionScan(invocation=[SESSION(PARTITION BY($0), DESCRIPTOR($4), 600000:INTERVAL MINUTE)], rowType=[RecordType(BIGINT customerid, VARCHAR(2147483647) email, VARCHAR(2147483647) name, BIGINT lastUpdated, TIMESTAMP_LTZ(3) *ROWTIME* timestamp, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP_LTZ(3) *ROWTIME* window_time)])
        LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
          LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW CustomerSession AS  SELECT customerid, window_start, window_end, window_time, COUNT(customerid) AS total
                  FROM TABLE(SESSION(TABLE Customer PARTITION BY customerid, DESCRIPTOR(`timestamp`), INTERVAL '10' MINUTES))
                  GROUP BY window_start, window_end, window_time, customerid;

=== CustomerTumble
ID:     default_catalog.default_database.CustomerTumble
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - features: STREAM_WINDOW_AGGREGATION (feature)
Primary Key: window_start, window_end
Timestamp  : -
Schema:
 - window_start: TIMESTAMP(3) NOT NULL
 - window_end: TIMESTAMP(3) NOT NULL
 - total: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], total=[COUNT()])
  LogicalProject(window_start=[$5], window_end=[$6])
    LogicalTableFunctionScan(invocation=[TUMBLE(DESCRIPTOR($4), 600000:INTERVAL MINUTE)], rowType=[RecordType(BIGINT customerid, VARCHAR(2147483647) email, VARCHAR(2147483647) name, BIGINT lastUpdated, TIMESTAMP_LTZ(3) *ROWTIME* timestamp, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP_LTZ(3) *ROWTIME* window_time)])
      LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
        LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW CustomerTumble AS  SELECT window_start, window_end, COUNT(customerid) AS total
                FROM TABLE(TUMBLE(TABLE Customer, DESCRIPTOR(`timestamp`), INTERVAL '10' MINUTES))
                GROUP BY window_start, window_end;

=== StreamJoin
ID:     default_catalog.default_database.StreamJoin
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.CustomerHop, default_catalog.default_database.CustomerSession
Primary Key: window_start, window_end, window_time, window_start0, window_end0, customerid
Timestamp  : window_time
Schema:
 - window_start: TIMESTAMP(3) NOT NULL
 - window_end: TIMESTAMP(3) NOT NULL
 - window_time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - total: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - window_start0: TIMESTAMP(3) NOT NULL
 - window_end0: TIMESTAMP(3) NOT NULL
 - window_time0: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - total0: BIGINT NOT NULL
Plan:
LogicalProject(window_start=[$0], window_end=[$1], window_time=[$2], total=[$3], customerid=[$4], window_start0=[$5], window_end0=[$6], window_time0=[$7], total0=[$8])
  LogicalJoin(condition=[=($7, $2)], joinType=[inner])
    LogicalTableScan(table=[[default_catalog, default_database, CustomerHop]])
    LogicalTableScan(table=[[default_catalog, default_database, CustomerSession]])
SQL: CREATE VIEW StreamJoin AS  SELECT * FROM CustomerHop h INNER JOIN CustomerSession s ON s.window_time = h.window_time;

>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Customer__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Customer` (
  `timestamp` AS COALESCE(`TO_TIMESTAMP_LTZ`(`lastUpdated`, 0), TIMESTAMP '1970-01-01 00:00:00.000'),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Customer__schema`;
CREATE VIEW `CustomerTumble`
AS
SELECT `window_start`, `window_end`, COUNT(`customerid`) AS `total`
FROM TABLE(TUMBLE(TABLE `Customer`, DESCRIPTOR(`timestamp`), INTERVAL '10' MINUTE))
GROUP BY `window_start`, `window_end`;
CREATE VIEW `CustomerHop`
AS
SELECT `window_start`, `window_end`, `window_time`, COUNT(`customerid`) AS `total`
FROM TABLE(HOP(TABLE `Customer`, DESCRIPTOR(`timestamp`), INTERVAL '5' MINUTE, INTERVAL '10' MINUTE))
GROUP BY `window_start`, `window_end`, `window_time`;
CREATE VIEW `CustomerCumulate`
AS
SELECT `window_start`, `window_end`, COUNT(`customerid`) AS `total`
FROM TABLE(`CUMULATE`(TABLE `Customer`, DESCRIPTOR(`timestamp`), INTERVAL '5' MINUTE, INTERVAL '10' MINUTE))
GROUP BY `window_start`, `window_end`;
CREATE VIEW `CustomerSession`
AS
SELECT `customerid`, `window_start`, `window_end`, `window_time`, COUNT(`customerid`) AS `total`
FROM TABLE(SESSION(TABLE `Customer` PARTITION BY `customerid`, DESCRIPTOR(`timestamp`), INTERVAL '10' MINUTE))
GROUP BY `window_start`, `window_end`, `window_time`, `customerid`;
CREATE VIEW `StreamJoin`
AS
SELECT *
FROM `CustomerHop` AS `h`
 INNER JOIN `CustomerSession` AS `s` ON `s`.`window_time` = `h`.`window_time`;
CREATE TABLE `Customer_1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'Customer_1',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `CustomerCumulate_2` (
  `window_start` TIMESTAMP(3) NOT NULL,
  `window_end` TIMESTAMP(3) NOT NULL,
  `total` BIGINT NOT NULL,
  PRIMARY KEY (`window_start`, `window_end`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'CustomerCumulate_2',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `CustomerHop_3` (
  `window_start` TIMESTAMP(3) NOT NULL,
  `window_end` TIMESTAMP(3) NOT NULL,
  `window_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `total` BIGINT NOT NULL,
  PRIMARY KEY (`window_start`, `window_end`, `window_time`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'CustomerHop_3',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `CustomerSession_4` (
  `customerid` BIGINT NOT NULL,
  `window_start` TIMESTAMP(3) NOT NULL,
  `window_end` TIMESTAMP(3) NOT NULL,
  `window_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `total` BIGINT NOT NULL,
  PRIMARY KEY (`window_start`, `window_end`, `window_time`, `customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'CustomerSession_4',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `CustomerTumble_5` (
  `window_start` TIMESTAMP(3) NOT NULL,
  `window_end` TIMESTAMP(3) NOT NULL,
  `total` BIGINT NOT NULL,
  PRIMARY KEY (`window_start`, `window_end`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'CustomerTumble_5',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
CREATE TABLE `StreamJoin_6` (
  `window_start` TIMESTAMP(3) NOT NULL,
  `window_end` TIMESTAMP(3) NOT NULL,
  `window_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `total` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `window_start0` TIMESTAMP(3) NOT NULL,
  `window_end0` TIMESTAMP(3) NOT NULL,
  `window_time0` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `total0` BIGINT NOT NULL,
  PRIMARY KEY (`window_start`, `window_end`, `window_time`, `window_start0`, `window_end0`, `customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${JDBC_PASSWORD}',
  'table-name' = 'StreamJoin_6',
  'url' = 'jdbc:postgresql://${JDBC_AUTHORITY}',
  'username' = '${JDBC_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`Customer_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`Customer`)
;
INSERT INTO `default_catalog`.`default_database`.`CustomerCumulate_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`CustomerCumulate`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`CustomerHop_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`CustomerHop`)
  ;
  INSERT INTO `default_catalog`.`default_database`.`CustomerSession_4`
   (SELECT *
    FROM `default_catalog`.`default_database`.`CustomerSession`)
   ;
   INSERT INTO `default_catalog`.`default_database`.`CustomerTumble_5`
    (SELECT *
     FROM `default_catalog`.`default_database`.`CustomerTumble`)
    ;
    INSERT INTO `default_catalog`.`default_database`.`StreamJoin_6`
     (SELECT `window_start`, `window_end`, `window_time`, `total`, `customerid`, `window_start0`, `window_end0`, CAST(`window_time0` AS TIMESTAMP(3) WITH LOCAL TIME ZONE) AS `window_time0`, `total0`
      FROM `default_catalog`.`default_database`.`StreamJoin`)
     ;
     END
>>>kafka.json
{
  "topics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "Customer_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Customer_1\" (\"customerid\" BIGINT NOT NULL, \"email\" TEXT NOT NULL, \"name\" TEXT NOT NULL, \"lastUpdated\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY (\"customerid\",\"lastUpdated\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CustomerCumulate_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"CustomerCumulate_2\" (\"window_start\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"window_end\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"total\" BIGINT NOT NULL , PRIMARY KEY (\"window_start\",\"window_end\"))",
      "fields" : [
        {
          "name" : "window_start",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CustomerHop_3",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"CustomerHop_3\" (\"window_start\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"window_end\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"window_time\" TIMESTAMP WITH TIME ZONE NOT NULL, \"total\" BIGINT NOT NULL , PRIMARY KEY (\"window_start\",\"window_end\",\"window_time\"))",
      "fields" : [
        {
          "name" : "window_start",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CustomerSession_4",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"CustomerSession_4\" (\"customerid\" BIGINT NOT NULL, \"window_start\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"window_end\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"window_time\" TIMESTAMP WITH TIME ZONE NOT NULL, \"total\" BIGINT NOT NULL , PRIMARY KEY (\"window_start\",\"window_end\",\"window_time\",\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "window_start",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CustomerTumble_5",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"CustomerTumble_5\" (\"window_start\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"window_end\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"total\" BIGINT NOT NULL , PRIMARY KEY (\"window_start\",\"window_end\"))",
      "fields" : [
        {
          "name" : "window_start",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "StreamJoin_6",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"StreamJoin_6\" (\"window_start\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"window_end\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"window_time\" TIMESTAMP WITH TIME ZONE NOT NULL, \"total\" BIGINT NOT NULL, \"customerid\" BIGINT NOT NULL, \"window_start0\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"window_end0\" TIMESTAMP WITHOUT TIME ZONE NOT NULL, \"window_time0\" TIMESTAMP WITH TIME ZONE NOT NULL, \"total0\" BIGINT NOT NULL , PRIMARY KEY (\"window_start\",\"window_end\",\"window_time\",\"window_start0\",\"window_end0\",\"customerid\"))",
      "fields" : [
        {
          "name" : "window_start",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "window_start0",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end0",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_time0",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total0",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Customer",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Customer\"(\"customerid\", \"email\", \"name\", \"lastUpdated\", \"timestamp\") AS SELECT *\nFROM \"Customer_1\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CustomerCumulate",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"CustomerCumulate\"(\"window_start\", \"window_end\", \"total\") AS SELECT *\nFROM \"CustomerCumulate_2\"",
      "fields" : [
        {
          "name" : "window_start",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CustomerHop",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"CustomerHop\"(\"window_start\", \"window_end\", \"window_time\", \"total\") AS SELECT *\nFROM \"CustomerHop_3\"",
      "fields" : [
        {
          "name" : "window_start",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CustomerSession",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"CustomerSession\"(\"customerid\", \"window_start\", \"window_end\", \"window_time\", \"total\") AS SELECT *\nFROM \"CustomerSession_4\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "window_start",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "CustomerTumble",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"CustomerTumble\"(\"window_start\", \"window_end\", \"total\") AS SELECT *\nFROM \"CustomerTumble_5\"",
      "fields" : [
        {
          "name" : "window_start",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "StreamJoin",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"StreamJoin\"(\"window_start\", \"window_end\", \"window_time\", \"total\", \"customerid\", \"window_start0\", \"window_end0\", \"window_time0\", \"total0\") AS SELECT *\nFROM \"StreamJoin_6\"",
      "fields" : [
        {
          "name" : "window_start",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "window_start0",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_end0",
          "type" : "TIMESTAMP WITHOUT TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "window_time0",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "total0",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Customer",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Customer_1\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CustomerCumulate",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"CustomerCumulate_2\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CustomerHop",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"CustomerHop_3\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CustomerSession",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"CustomerSession_4\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "CustomerTumble",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"CustomerTumble_5\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "StreamJoin",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"StreamJoin_6\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "schema" : {
      "type" : "string",
      "schema" : "type Customer {\n  customerid: GraphQLBigInteger!\n  email: String!\n  name: String!\n  lastUpdated: GraphQLBigInteger!\n  timestamp: DateTime!\n}\n\ntype CustomerCumulate {\n  window_start: DateTime!\n  window_end: DateTime!\n  total: GraphQLBigInteger!\n}\n\ntype CustomerHop {\n  window_start: DateTime!\n  window_end: DateTime!\n  window_time: DateTime!\n  total: GraphQLBigInteger!\n}\n\ntype CustomerSession {\n  customerid: GraphQLBigInteger!\n  window_start: DateTime!\n  window_end: DateTime!\n  window_time: DateTime!\n  total: GraphQLBigInteger!\n}\n\ntype CustomerTumble {\n  window_start: DateTime!\n  window_end: DateTime!\n  total: GraphQLBigInteger!\n}\n\n\"A slightly refined version of RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\n\"An arbitrary precision signed integer\"\nscalar GraphQLBigInteger\n\ntype Query {\n  Customer(limit: Int = 10, offset: Int = 0): [Customer!]\n  CustomerCumulate(limit: Int = 10, offset: Int = 0): [CustomerCumulate!]\n  CustomerHop(limit: Int = 10, offset: Int = 0): [CustomerHop!]\n  CustomerSession(limit: Int = 10, offset: Int = 0): [CustomerSession!]\n  CustomerTumble(limit: Int = 10, offset: Int = 0): [CustomerTumble!]\n  StreamJoin(limit: Int = 10, offset: Int = 0): [StreamJoin!]\n}\n\ntype StreamJoin {\n  window_start: DateTime!\n  window_end: DateTime!\n  window_time: DateTime!\n  total: GraphQLBigInteger!\n  customerid: GraphQLBigInteger!\n  window_start0: DateTime!\n  window_end0: DateTime!\n  window_time0: DateTime!\n  total0: GraphQLBigInteger!\n}\n"
    }
  }
}
