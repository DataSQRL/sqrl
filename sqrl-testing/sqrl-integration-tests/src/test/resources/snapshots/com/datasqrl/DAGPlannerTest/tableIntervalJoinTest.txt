>>>pipeline_explain.txt
=== Customer
ID:     customer$2
Type:   stream
Stage:  streams
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalTableScan(table=[[customer$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

=== OrderCustomer
ID:     ordercustomer$1
Type:   stream
Stage:  streams
Inputs: customer$2, orders$2
Primary Key: id, _time, _lastUpdated
Timestamp  : _time
Schema:
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT NOT NULL
 - _time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _lastUpdated: BIGINT NOT NULL
Plan:
LogicalProject(id=[$0], name=[$6], customerid=[$1], _time=[$2], _lastUpdated=[$7])
  LogicalJoin(condition=[AND(=($1, $4), >($2, $8), <=($2, +($8, *(86400000:INTERVAL DAY, 31))))], joinType=[inner]) hints[IntervalJoin]
    LogicalTableScan(table=[[orders$2]])
    LogicalTableScan(table=[[customer$2]])

=== OrderCustomer2
ID:     ordercustomer2$1
Type:   stream
Stage:  streams
Inputs: customer$2, orders$2
Primary Key: id, _time, _lastUpdated
Timestamp  : _time
Schema:
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT NOT NULL
 - _time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _lastUpdated: BIGINT NOT NULL
Plan:
LogicalProject(id=[$0], name=[$6], customerid=[$1], _time=[$2], _lastUpdated=[$7])
  LogicalJoin(condition=[AND(=($1, $4), >($2, $8), <=($2, +($8, *(86400000:INTERVAL DAY, 31))))], joinType=[inner]) hints[IntervalJoin]
    LogicalTableScan(table=[[orders$2]])
    LogicalTableScan(table=[[customer$2]])

=== OrderCustomer3
ID:     ordercustomer3$1
Type:   stream
Stage:  streams
Inputs: customer$2, orders$2
Primary Key: id, _time, _lastUpdated
Timestamp  : _time
Schema:
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT NOT NULL
 - _time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _lastUpdated: BIGINT NOT NULL
Plan:
LogicalProject(id=[$0], name=[$6], customerid=[$1], _time=[$2], _lastUpdated=[$7])
  LogicalJoin(condition=[AND(=($1, $4), >=($2, +($8, *(86400000:INTERVAL DAY, 2))), <=($2, +($8, *(86400000:INTERVAL DAY, 31))))], joinType=[inner]) hints[IntervalJoin]
    LogicalTableScan(table=[[orders$2]])
    LogicalTableScan(table=[[customer$2]])

=== Orders
ID:     orders$2
Type:   stream
Stage:  streams
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType(INTEGER NOT NULL _idx, BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[2]]]]) hints[WatermarkHint options:[2]]

=== Product
ID:     product$2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - productid: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - description: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - category: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalTableScan(table=[[product$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>database-schema.sql
CREATE TABLE IF NOT EXISTS customer$2 ("customerid" BIGINT NOT NULL,"email" TEXT NOT NULL,"name" TEXT NOT NULL,"lastUpdated" BIGINT NOT NULL,"timestamp" TIMESTAMP WITH TIME ZONE NOT NULL , PRIMARY KEY ("customerid","lastUpdated"));
CREATE TABLE IF NOT EXISTS ordercustomer$1 ("id" BIGINT NOT NULL,"name" TEXT NOT NULL,"customerid" BIGINT NOT NULL,"_time" TIMESTAMP WITH TIME ZONE NOT NULL,"_lastUpdated" BIGINT NOT NULL , PRIMARY KEY ("id","_time","_lastUpdated"));
CREATE TABLE IF NOT EXISTS ordercustomer2$1 ("id" BIGINT NOT NULL,"name" TEXT NOT NULL,"customerid" BIGINT NOT NULL,"_time" TIMESTAMP WITH TIME ZONE NOT NULL,"_lastUpdated" BIGINT NOT NULL , PRIMARY KEY ("id","_time","_lastUpdated"));
CREATE TABLE IF NOT EXISTS ordercustomer3$1 ("id" BIGINT NOT NULL,"name" TEXT NOT NULL,"customerid" BIGINT NOT NULL,"_time" TIMESTAMP WITH TIME ZONE NOT NULL,"_lastUpdated" BIGINT NOT NULL , PRIMARY KEY ("id","_time","_lastUpdated"));
CREATE TABLE IF NOT EXISTS orders$2 ("id" BIGINT NOT NULL,"customerid" BIGINT NOT NULL,"time" TIMESTAMP WITH TIME ZONE NOT NULL,"entries" JSONB NOT NULL , PRIMARY KEY ("id","time"));
CREATE TABLE IF NOT EXISTS product$2 ("productid" BIGINT NOT NULL,"name" TEXT NOT NULL,"description" TEXT NOT NULL,"category" TEXT NOT NULL,"_ingest_time" TIMESTAMP WITH TIME ZONE NOT NULL,"_uuid" TEXT NOT NULL , PRIMARY KEY ("_uuid"));
CREATE INDEX IF NOT EXISTS customer$2_hash_c3 ON customer$2 USING hash ("lastUpdated");
CREATE INDEX IF NOT EXISTS orders$2_hash_c2 ON orders$2 USING hash ("time");

>>>flink-plan.sql
CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptostring` AS 'com.datasqrl.time.TimestampToString' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofmonth` AS 'com.datasqrl.time.EndOfMonth' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofweek` AS 'com.datasqrl.time.EndOfWeek' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `parsetimestamp` AS 'com.datasqrl.time.ParseTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `uuid` AS 'com.datasqrl.secure.Uuid' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochmillitotimestamp` AS 'com.datasqrl.time.EpochMilliToTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofminute` AS 'com.datasqrl.time.EndOfMinute' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptoepoch` AS 'com.datasqrl.time.TimestampToEpoch' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofsecond` AS 'com.datasqrl.time.EndOfSecond' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochtotimestamp` AS 'com.datasqrl.time.EpochToTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofday` AS 'com.datasqrl.time.EndOfDay' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `atzone` AS 'com.datasqrl.time.AtZone' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofhour` AS 'com.datasqrl.time.EndOfHour' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofyear` AS 'com.datasqrl.time.EndOfYear' LANGUAGE JAVA;

CREATE TEMPORARY TABLE `orders$1` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`_idx` INTEGER NOT NULL, `productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,
  PRIMARY KEY (`id`, `time`) NOT ENFORCED,
  WATERMARK FOR `time` AS (`time` - INTERVAL '0.001' SECOND)
) WITH (
  'format' = 'json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10000',
  'connector' = 'filesystem',
  'source.path.regex-pattern' = ''
);

CREATE TEMPORARY TABLE `product$1` (
  `productid` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `_uuid` AS UUID(),
  PRIMARY KEY (`_uuid`) NOT ENFORCED,
  WATERMARK FOR `_ingest_time` AS (`_ingest_time` - INTERVAL '0.001' SECOND)
) WITH (
  'format' = 'json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10000',
  'connector' = 'filesystem',
  'source.path.regex-pattern' = ''
);

CREATE TEMPORARY TABLE `customer$1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` AS EPOCHTOTIMESTAMP(`lastUpdated`),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS (`timestamp` - INTERVAL '0.001' SECOND)
) WITH (
  'format' = 'json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10000',
  'connector' = 'filesystem',
  'source.path.regex-pattern' = ''
);

CREATE TEMPORARY TABLE `customer$2` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'customer$2',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `ordercustomer$1` (
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `customerid` BIGINT NOT NULL,
  `_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `_lastUpdated` BIGINT NOT NULL,
  PRIMARY KEY (`id`, `_time`, `_lastUpdated`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'ordercustomer$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `ordercustomer2$1` (
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `customerid` BIGINT NOT NULL,
  `_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `_lastUpdated` BIGINT NOT NULL,
  PRIMARY KEY (`id`, `_time`, `_lastUpdated`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'ordercustomer2$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `ordercustomer3$1` (
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `customerid` BIGINT NOT NULL,
  `_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `_lastUpdated` BIGINT NOT NULL,
  PRIMARY KEY (`id`, `_time`, `_lastUpdated`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'ordercustomer3$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `orders$2` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`_idx` INTEGER NOT NULL, `productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,
  PRIMARY KEY (`id`, `time`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'orders$2',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `product$2` (
  `productid` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,
  PRIMARY KEY (`_uuid`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'product$2',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

EXECUTE STATEMENT SET BEGIN
INSERT INTO `customer$2`
(SELECT *
FROM `customer$1`)
;
INSERT INTO `ordercustomer$1`
(SELECT `orders$1`.`id`, `customer$1`.`name`, `orders$1`.`customerid`, `orders$1`.`time` AS `_time`, `customer$1`.`lastUpdated` AS `_lastUpdated`
FROM `orders$1`
INNER JOIN `customer$1` ON (((`orders$1`.`customerid` = `customer$1`.`customerid`) AND (`orders$1`.`time` > `customer$1`.`timestamp`)) AND (`orders$1`.`time` <= (`customer$1`.`timestamp` + (INTERVAL '1' DAY * 31)))))
;
INSERT INTO `ordercustomer2$1`
(SELECT `orders$1`.`id`, `customer$1`.`name`, `orders$1`.`customerid`, `orders$1`.`time` AS `_time`, `customer$1`.`lastUpdated` AS `_lastUpdated`
FROM `orders$1`
INNER JOIN `customer$1` ON (((`orders$1`.`customerid` = `customer$1`.`customerid`) AND (`orders$1`.`time` > `customer$1`.`timestamp`)) AND (`orders$1`.`time` <= (`customer$1`.`timestamp` + (INTERVAL '1' DAY * 31)))))
;
INSERT INTO `ordercustomer3$1`
(SELECT `orders$1`.`id`, `customer$1`.`name`, `orders$1`.`customerid`, `orders$1`.`time` AS `_time`, `customer$1`.`lastUpdated` AS `_lastUpdated`
FROM `orders$1`
INNER JOIN `customer$1` ON (((`orders$1`.`customerid` = `customer$1`.`customerid`) AND (`orders$1`.`time` >= (`customer$1`.`timestamp` + (INTERVAL '1' DAY * 2)))) AND (`orders$1`.`time` <= (`customer$1`.`timestamp` + (INTERVAL '1' DAY * 31)))))
;
INSERT INTO `orders$2`
(SELECT *
FROM `orders$1`)
;
INSERT INTO `product$2`
(SELECT *
FROM `product$1`)
;
END;


