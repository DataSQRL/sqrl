>>>customer$q$2-lp-stream
LogicalTableScan(table=[[customer$i$1]], hints=[[[WatermarkHint inheritPath:[] options:[1]], [TimestampHint inheritPath:[] options:[1]]]]) hints[WatermarkHint options:[1], TimestampHint options:[1]]

>>>orderagg1$q$15-lp-stream
LogicalProject(customer=[$0], bucket=[$1], order_count=[$2]) hints[TimestampHint options:[1]]
  LogicalAggregate(group=[{0, 1}], order_count=[COUNT()]) hints[TumbleAggregationHint options:[1, FUNCTION, 4, 3600000, 900000]]
    LogicalProject(customer=[$3], bucket=[endOfHour($4, 1:BIGINT, 15:BIGINT)], _uuid=[$0])
      LogicalTableScan(table=[[orders$i$4]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>orderagg2$q$17-lp-stream
LogicalProject(_pk=[1], order_count=[COUNT() IGNORE NULLS OVER (ORDER BY $4 ROWS UNBOUNDED PRECEDING)], time=[$4]) hints[TimestampHint options:[2]]
  LogicalTableScan(table=[[orders$i$4]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>orderaugment$q$27-lp-stream
LogicalProject(_uuid=[$0], id=[$2], time=[$4], order_count=[$7]) hints[TimestampHint options:[2]]
  LogicalJoin(condition=[=($3, $6)], joinType=[inner]) hints[TemporalJoinHint options:[4, 2, 0]]
    LogicalTableScan(table=[[orders$i$4]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
    LogicalFilter(condition=[=($3, 1)]) hints[DedupHint]
      LogicalProject(customer=[$0], order_count=[$1], time=[$2], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
        LogicalProject(customer=[$0], order_count=[$2], time=[$1])
          LogicalAggregate(group=[{3, 4}], order_count=[COUNT()]) hints[SlidingAggregationHint options:[4, 86313600000, 1726272000]]
            LogicalTableScan(table=[[orders$i$4]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>ordernow1$q$21-lp-stream
LogicalProject(customer=[$0], bucket=[$1], order_count=[$2]) hints[TimestampHint options:[1]]
  LogicalAggregate(group=[{0, 1}], order_count=[COUNT()]) hints[TumbleAggregationHint options:[1, FUNCTION, 4, 3600000, 0]]
    LogicalProject(customer=[$3], bucket=[endOfHour($4)], _uuid=[$0])
      LogicalTableScan(table=[[orders$i$4]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>ordernow2$q$23-lp-stream
LogicalProject(bucket=[$0], order_count=[$1]) hints[TimestampHint options:[0]]
  LogicalAggregate(group=[{0}], order_count=[COUNT()]) hints[TumbleAggregationHint options:[0, FUNCTION, 4, 3600000, 0]]
    LogicalProject(bucket=[endOfHour($4)], _uuid=[$0])
      LogicalTableScan(table=[[orders$i$4]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>ordernow3$q$25-lp-stream
LogicalProject(customer=[$0], order_count=[$2], time=[$1]) hints[TimestampHint options:[2]]
  LogicalAggregate(group=[{3, 4}], order_count=[COUNT()]) hints[SlidingAggregationHint options:[4, 86313600000, 1726272000]]
    LogicalTableScan(table=[[orders$i$4]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>orders$q$5-lp-stream
LogicalTableScan(table=[[orders$i$4]], hints=[[[WatermarkHint inheritPath:[] options:[4]], [TimestampHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4], TimestampHint options:[4]]

>>>ordertime1$q$19-lp-stream
LogicalProject(customer=[$0], bucket=[$1], order_count=[$2]) hints[TimestampHint options:[1]]
  LogicalAggregate(group=[{0, 1}], order_count=[COUNT()]) hints[TumbleAggregationHint options:[1, FUNCTION, 4, 1000, 0]]
    LogicalProject(customer=[$3], bucket=[endOfSecond($4)], _uuid=[$0])
      LogicalTableScan(table=[[orders$i$4]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>agg1-lp-database
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(customer=[$0], order_count=[$1], __timestamp=[$2])
    LogicalProject(customer=[$0], order_count=[$1], __timestamp=[$2])
      LogicalAggregate(group=[{4}], order_count=[COUNT()], __timestamp=[MAX($5)])
        LogicalProject(_uuid=[$0], _uuid0=[$6], id=[$2], name=[$10], customerid=[$3], __timestamp=[CASE(<($4, $7), $7, $4)])
          LogicalJoin(condition=[=($3, $8)], joinType=[inner]) hints[JoinCostHint options:[STREAM, STREAM, 1, NONE]]
            LogicalTableScan(table=[[orders$q$5]])
            LogicalTableScan(table=[[customer$q$2]])

>>>orderagg1-lp-database
LogicalSort(sort0=[$1], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC])
  LogicalProject(customer=[$0], bucket=[$1], order_count=[$2])
    LogicalTableScan(table=[[orderagg1$q$15]])

>>>orderagg2-lp-database
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(_pk=[$0], order_count=[$1], time=[$2])
    LogicalTableScan(table=[[orderagg2$q$17]])

>>>orderaugment-lp-database
LogicalSort(sort0=[$2], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC])
  LogicalProject(_uuid=[$0], id=[$1], time=[$2], order_count=[$3])
    LogicalTableScan(table=[[orderaugment$q$27]])

>>>ordercustomer-lp-database
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC])
  LogicalProject(_uuid=[$0], _uuid0=[$1], id=[$2], name=[$3], customerid=[$4], __timestamp=[$5])
    LogicalProject(_uuid=[$0], _uuid0=[$6], id=[$2], name=[$10], customerid=[$3], __timestamp=[CASE(<($4, $7), $7, $4)])
      LogicalJoin(condition=[=($3, $8)], joinType=[inner]) hints[JoinCostHint options:[STREAM, STREAM, 1, NONE]]
        LogicalTableScan(table=[[orders$q$5]])
        LogicalTableScan(table=[[customer$q$2]])

>>>ordernow1-lp-database
LogicalSort(sort0=[$1], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC])
  LogicalProject(customer=[$0], bucket=[$1], order_count=[$2])
    LogicalFilter(condition=[<(NOW(), +($1, 86313600000:INTERVAL SECOND(11)))])
      LogicalTableScan(table=[[ordernow1$q$21]])

>>>ordernow2-lp-database
LogicalSort(sort0=[$0], dir0=[DESC-nulls-last])
  LogicalProject(bucket=[$0], order_count=[$1])
    LogicalFilter(condition=[<(NOW(), +($0, 86313600000:INTERVAL SECOND(11)))])
      LogicalTableScan(table=[[ordernow2$q$23]])

>>>ordernow3-lp-database
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(customer=[$0], order_count=[$1], time=[$2])
    LogicalTableScan(table=[[ordernow3$q$25]])

>>>ordertime1-lp-database
LogicalSort(sort0=[$1], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC])
  LogicalProject(customer=[$0], bucket=[$1], order_count=[$2])
    LogicalTableScan(table=[[ordertime1$q$19]])

>>>orderagg1-data
1000101, 2023-05-19 02:14:59.999, 1
1000107, 2023-05-19 02:14:59.999, 1
1000107, 2023-05-19 03:14:59.999, 1
1000121, 2023-05-19 03:14:59.999, 1
>>>orderagg2-data
1, 4, 2023-05-19 02:28:39.553
>>>ordertime1-data
1000101, 2023-05-19 01:29:39.999, 1
1000107, 2023-05-19 01:45:39.999, 1
1000107, 2023-05-19 02:28:39.999, 1
1000121, 2023-05-19 02:16:39.999, 1
>>>ordernow1-data
1000101, 2023-05-19 01:59:59.999, 1
1000107, 2023-05-19 01:59:59.999, 1
1000107, 2023-05-19 02:59:59.999, 1
1000121, 2023-05-19 02:59:59.999, 1
>>>ordernow2-data
2023-05-19 01:59:59.999, 2
2023-05-19 02:59:59.999, 2
>>>ordernow3-data
1000101, 1
1000107, 2
1000121, 1
>>>orderaugment-data

>>>ordercustomer-data
10007140, Emily F. Ludies, 1000107
10007543, John Mekker, 1000101
10008231, Michelle Dagnes, 1000121
10008434, Emily F. Ludies, 1000107
>>>agg1-data
1000101, 1
1000107, 2
1000121, 1
