IMPORT loan-local.Customers AS CustomersStream;
IMPORT loan-local.Applications AS ApplicationsStream;
IMPORT loan-local.LoanTypes AS LoanTypesStream;

/*+insert(transaction) */
CREATE TABLE ApplicationUpdates (
  _uuid STRING NOT NULL METADATA FROM 'uuid',
  loan_application_id BIGINT NOT NULL,
  status STRING NOT NULL,
  message STRING,
  event_time TIMESTAMP_LTZ(3) METADATA FROM 'timestamp'
);

Customers := DISTINCT CustomersStream ON id ORDER BY updated_at DESC;
Applications := DISTINCT ApplicationsStream ON id ORDER BY updated_at DESC;
LoanTypes := DISTINCT LoanTypesStream ON id ORDER BY updated_at DESC;

Customers.applications := SELECT * FROM Applications a WHERE this.id = a.customer_id ORDER BY a.application_date;

ApplicationUpdates.application := SELECT * FROM Applications a WHERE this.loan_application_id = a.id;
Applications.updates := SELECT * FROM ApplicationUpdates u WHERE this.id = u.loan_application_id ORDER BY u.event_time;

Applications.loanType := SELECT * FROM LoanTypes t WHERE this.loan_type_id = t.id;

Customers.overview := SELECT a.loan_type_id, SUM(a.amount) as total_amount, COUNT(1) as total_loans
                      FROM Applications a WHERE this.id = a.customer_id
                      GROUP BY a.loan_type_id;

ApplicationStatus := SELECT u._uuid, u.status, u.message, u.event_time, a.id, a.customer_id, a.loan_type_id,
                            a.amount, a.duration, t.max_amount, t.min_amount
                     FROM ApplicationUpdates u JOIN Applications FOR SYSTEM_TIME AS OF u.`event_time` a ON a.id = u.loan_application_id
                            JOIN LoanTypes FOR SYSTEM_TIME AS OF u.`event_time` t ON t.id = a.loan_type_id;

--EXPORT ApplicationStatus TO print.status;

-- TODO make it a subscription
ApplicationAlert := SELECT _uuid, id, customer_id, loan_type_id, max_amount, min_amount, amount
                    FROM ApplicationStatus a
                    WHERE status = 'underwriting' AND (amount > max_amount OR amount < min_amount);

CREATE TABLE AddChatMessage (
    _uuid STRING NOT NULL METADATA FROM 'uuid',
    role STRING NOT NULL,
    content STRING NOT NULL,
    name STRING,
    context ROW(`customerid` INT) NOT NULL,
    event_time TIMESTAMP_LTZ(3) METADATA FROM 'timestamp'
);

CustomerChatMessage := SELECT role, content, name, c.context.customerid, event_time AS `timestamp`,
                        _uuid AS uuid
                       FROM AddChatMessage c ORDER BY `timestamp` DESC;

/*+test */
LoanTypesTest := SELECT COUNT(*) as num_loan_types FROM LoanTypes;

/*+test */
CustomerApplicationTest := SELECT c.id, c.email, COUNT(*) as num_applications, SUM(a.amount) as total
                           FROM Customers c JOIN Applications a ON c.id = a.customer_id
                           GROUP BY c.id, c.email ORDER BY c.email;
