>>>pipeline_explain.txt
=== Customer
ID:     default_catalog.default_database.Customer
Type:   state
Stage:  flink
Inputs: default_catalog.default_database._Customer
Annotations:
 - mostRecentDistinct: true
 - stream-root: _Customer
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[=($5, 1)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, _Customer]])
SQL: CREATE VIEW `Customer`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `timestamp` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`_Customer`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== OrderCustomer
ID:     default_catalog.default_database.OrderCustomer
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: id
Timestamp  : time
Schema:
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT NOT NULL
Plan:
LogicalProject(time=[$2], id=[$0], name=[$6], customerid=[$1])
  LogicalJoin(condition=[=($1, $4)], joinType=[inner])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `OrderCustomer` AS  SELECT o.`time`, o.id, c.name, o.customerid FROM Orders o INNER JOIN Customer c on o.customerid = c.customerid;

=== OrderCustomerConstant
ID:     default_catalog.default_database.OrderCustomerConstant
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: id
Timestamp  : time
Schema:
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT NOT NULL
Plan:
LogicalProject(time=[$2], id=[$0], name=[$6], customerid=[$1])
  LogicalJoin(condition=[AND(=($1, $4), =($6, 'Robert'), >($0, 5))], joinType=[inner])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `OrderCustomerConstant` AS  SELECT o.`time`, o.id, c.name, o.customerid FROM Orders o INNER JOIN Customer c ON o.customerid = c.customerid AND c.name = 'Robert' AND o.id > 5;

=== OrderCustomerLeft
ID:     default_catalog.default_database.OrderCustomerLeft
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: id
Timestamp  : -
Schema:
 - lastUpdated: BIGINT
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - customerid: BIGINT NOT NULL
Plan:
LogicalProject(lastUpdated=[$7], id=[$0], name=[$6], customerid=[$1])
  LogicalJoin(condition=[=($1, $4)], joinType=[left])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `OrderCustomerLeft` AS  SELECT c.lastUpdated, o.id, c.name, o.customerid  FROM Orders o LEFT JOIN Customer c on o.customerid = c.customerid;

=== OrderCustomerLeftExcluded
ID:     default_catalog.default_database.OrderCustomerLeftExcluded
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: id
Timestamp  : time
Schema:
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
Plan:
LogicalProject(time=[$2], id=[$0], customerid=[$1])
  LogicalFilter(condition=[IS NULL($4)])
    LogicalJoin(condition=[=($1, $4)], joinType=[left])
      LogicalTableScan(table=[[default_catalog, default_database, Orders]])
      LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `OrderCustomerLeftExcluded` AS  SELECT o.`time`, o.id, o.customerid  FROM Orders o LEFT JOIN Customer c on o.customerid = c.customerid WHERE c.customerid IS NULL;

=== OrderCustomerRight
ID:     default_catalog.default_database.OrderCustomerRight
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: ouuid, id
Timestamp  : -
Schema:
 - ouuid: BIGINT NOT NULL
 - id: BIGINT
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT
Plan:
LogicalProject(ouuid=[coalesce($0, 0:BIGINT)], id=[$0], name=[$6], customerid=[$1])
  LogicalJoin(condition=[=($1, $4)], joinType=[right])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `OrderCustomerRight` AS  SELECT coalesce(o.id, 0) as ouuid, o.id, c.name, o.customerid  FROM Orders o RIGHT JOIN Customer c on o.customerid = c.customerid;

=== OrderCustomerRightExcluded
ID:     default_catalog.default_database.OrderCustomerRightExcluded
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: 
Timestamp  : -
Schema:
 - lastUpdated: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalProject(lastUpdated=[$7], customerid=[$4], name=[$6])
  LogicalFilter(condition=[IS NULL($0)])
    LogicalJoin(condition=[=($1, $4)], joinType=[right])
      LogicalTableScan(table=[[default_catalog, default_database, Orders]])
      LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `OrderCustomerRightExcluded` AS  SELECT c.lastUpdated, c.customerid, c.name  FROM Orders o RIGHT JOIN Customer c on o.customerid = c.customerid WHERE o.id IS NULL;

=== Orders
ID:     default_catalog.default_database.Orders
Type:   state
Stage:  flink
Inputs: default_catalog.default_database._Orders
Annotations:
 - mostRecentDistinct: true
 - stream-root: _Orders
Primary Key: id
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - entries: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3])
  LogicalFilter(condition=[=($4, 1)])
    LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, _Orders]])
SQL: CREATE VIEW `Orders`
AS
SELECT `id`, `customerid`, `time`, `entries`
FROM (SELECT `id`, `customerid`, `time`, `entries`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `time` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`_Orders`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== _Customer
ID:     default_catalog.default_database._Customer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database._Customer__base
Annotations:
 - stream-root: _Customer
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
  LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[COALESCE(TO_TIMESTAMP_LTZ($3, 0), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
    LogicalTableScan(table=[[default_catalog, default_database, _Customer]])
SQL: CREATE VIEW `_Customer__view`
AS
SELECT `_Customer`.`customerid`, `_Customer`.`email`, `_Customer`.`name`, `_Customer`.`lastUpdated`, `_Customer`.`timestamp`
FROM `default_catalog`.`default_database`.`_Customer` AS `_Customer`
=== _Orders
ID:     default_catalog.default_database._Orders
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database._Orders__base
Annotations:
 - features: DENORMALIZE (feature)
 - stream-root: _Orders
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - entries: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[time], watermark=[-($2, 1:INTERVAL SECOND)])
  LogicalTableScan(table=[[default_catalog, default_database, _Orders]])
SQL: CREATE VIEW `_Orders__view`
AS
SELECT `_Orders`.`id`, `_Orders`.`customerid`, `_Orders`.`time`, `_Orders`.`entries`
FROM `default_catalog`.`default_database`.`_Orders` AS `_Orders`
>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `_Customer__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `_Customer` (
  `timestamp` AS COALESCE(`TO_TIMESTAMP_LTZ`(`lastUpdated`, 0), TIMESTAMP '1970-01-01 00:00:00.000'),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `_Customer__schema`;
CREATE TEMPORARY TABLE `_Orders__schema` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `_Orders` (
  PRIMARY KEY (`id`, `time`) NOT ENFORCED,
  WATERMARK FOR `time` AS `time` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `_Orders__schema`;
CREATE TEMPORARY TABLE `_Product__schema` (
  `productid` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `_Product` (
  PRIMARY KEY (`productid`, `name`, `description`, `category`) NOT ENFORCED,
  WATERMARK FOR `_ingest_time` AS `_ingest_time` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `_Product__schema`;
CREATE VIEW `Customer`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `timestamp` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`_Customer`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `Orders`
AS
SELECT `id`, `customerid`, `time`, `entries`
FROM (SELECT `id`, `customerid`, `time`, `entries`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `time` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`_Orders`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `OrderCustomerLeft`
AS
SELECT `c`.`lastUpdated`, `o`.`id`, `c`.`name`, `o`.`customerid`
FROM `Orders` AS `o`
 LEFT JOIN `Customer` AS `c` ON `o`.`customerid` = `c`.`customerid`;
CREATE VIEW `OrderCustomer`
AS
SELECT `o`.`time`, `o`.`id`, `c`.`name`, `o`.`customerid`
FROM `Orders` AS `o`
 INNER JOIN `Customer` AS `c` ON `o`.`customerid` = `c`.`customerid`;
CREATE VIEW `OrderCustomerLeftExcluded`
AS
SELECT `o`.`time`, `o`.`id`, `o`.`customerid`
FROM `Orders` AS `o`
 LEFT JOIN `Customer` AS `c` ON `o`.`customerid` = `c`.`customerid`
WHERE `c`.`customerid` IS NULL;
CREATE VIEW `OrderCustomerRight`
AS
SELECT COALESCE(`o`.`id`, 0) AS `ouuid`, `o`.`id`, `c`.`name`, `o`.`customerid`
FROM `Orders` AS `o`
 RIGHT JOIN `Customer` AS `c` ON `o`.`customerid` = `c`.`customerid`;
CREATE VIEW `OrderCustomerRightExcluded`
AS
SELECT `c`.`lastUpdated`, `c`.`customerid`, `c`.`name`
FROM `Orders` AS `o`
 RIGHT JOIN `Customer` AS `c` ON `o`.`customerid` = `c`.`customerid`
WHERE `o`.`id` IS NULL;
CREATE VIEW `OrderCustomerConstant`
AS
SELECT `o`.`time`, `o`.`id`, `c`.`name`, `o`.`customerid`
FROM `Orders` AS `o`
 INNER JOIN `Customer` AS `c` ON `o`.`customerid` = `c`.`customerid` AND `c`.`name` = 'Robert' AND `o`.`id` > 5;
CREATE TABLE `Customer_1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'Customer_1',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `OrderCustomer_2` (
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `customerid` BIGINT NOT NULL,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'OrderCustomer_2',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `OrderCustomerConstant_3` (
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `customerid` BIGINT NOT NULL,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'OrderCustomerConstant_3',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `OrderCustomerLeft_4` (
  `lastUpdated` BIGINT,
  `id` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `customerid` BIGINT NOT NULL,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'OrderCustomerLeft_4',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `OrderCustomerLeftExcluded_5` (
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'OrderCustomerLeftExcluded_5',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `OrderCustomerRight_6` (
  `ouuid` BIGINT NOT NULL,
  `id` BIGINT,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `customerid` BIGINT,
  PRIMARY KEY (`ouuid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'OrderCustomerRight_6',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `OrderCustomerRightExcluded_7` (
  `lastUpdated` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `__pk_hash` INTEGER NOT NULL,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'OrderCustomerRightExcluded_7',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `Orders_8` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'Orders_8',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`Customer_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`_Customer`)
;
INSERT INTO `default_catalog`.`default_database`.`OrderCustomer_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`OrderCustomer`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`OrderCustomerConstant_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`OrderCustomerConstant`)
  ;
  INSERT INTO `default_catalog`.`default_database`.`OrderCustomerLeft_4`
   (SELECT *
    FROM `default_catalog`.`default_database`.`OrderCustomerLeft`)
   ;
   INSERT INTO `default_catalog`.`default_database`.`OrderCustomerLeftExcluded_5`
    (SELECT *
     FROM `default_catalog`.`default_database`.`OrderCustomerLeftExcluded`)
    ;
    INSERT INTO `default_catalog`.`default_database`.`OrderCustomerRight_6`
     (SELECT *
      FROM `default_catalog`.`default_database`.`OrderCustomerRight`)
     ;
     INSERT INTO `default_catalog`.`default_database`.`OrderCustomerRightExcluded_7`
      (SELECT `lastUpdated`, `customerid`, `name`, 1 AS `__pk_hash`
       FROM `default_catalog`.`default_database`.`OrderCustomerRightExcluded`)
      ;
      INSERT INTO `default_catalog`.`default_database`.`Orders_8`
       (SELECT `id`, `customerid`, `time`, `to_jsonb`(`entries`) AS `entries`
        FROM `default_catalog`.`default_database`.`_Orders`)
       ;
       END
>>>kafka.json
{
  "topics" : [ ],
  "testRunnerTopics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "Customer_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Customer_1\" (\"customerid\" BIGINT NOT NULL, \"email\" TEXT NOT NULL, \"name\" TEXT NOT NULL, \"lastUpdated\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"customerid\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ],
      "primaryKey" : [
        "customerid"
      ],
      "partitionKey" : [ ],
      "partitionType" : "NONE",
      "numPartitions" : 0,
      "ttl" : 0.0
    },
    {
      "name" : "OrderCustomer_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrderCustomer_2\" (\"time\" TIMESTAMP WITH TIME ZONE NOT NULL, \"id\" BIGINT NOT NULL, \"name\" TEXT NOT NULL, \"customerid\" BIGINT NOT NULL, PRIMARY KEY (\"id\"))",
      "fields" : [
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        }
      ],
      "primaryKey" : [
        "id"
      ],
      "partitionKey" : [ ],
      "partitionType" : "NONE",
      "numPartitions" : 0,
      "ttl" : 0.0
    },
    {
      "name" : "OrderCustomerConstant_3",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrderCustomerConstant_3\" (\"time\" TIMESTAMP WITH TIME ZONE NOT NULL, \"id\" BIGINT NOT NULL, \"name\" TEXT NOT NULL, \"customerid\" BIGINT NOT NULL, PRIMARY KEY (\"id\"))",
      "fields" : [
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        }
      ],
      "primaryKey" : [
        "id"
      ],
      "partitionKey" : [ ],
      "partitionType" : "NONE",
      "numPartitions" : 0,
      "ttl" : 0.0
    },
    {
      "name" : "OrderCustomerLeft_4",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrderCustomerLeft_4\" (\"lastUpdated\" BIGINT, \"id\" BIGINT NOT NULL, \"name\" TEXT, \"customerid\" BIGINT NOT NULL, PRIMARY KEY (\"id\"))",
      "fields" : [
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : true
        },
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : true
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        }
      ],
      "primaryKey" : [
        "id"
      ],
      "partitionKey" : [ ],
      "partitionType" : "NONE",
      "numPartitions" : 0,
      "ttl" : 0.0
    },
    {
      "name" : "OrderCustomerLeftExcluded_5",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrderCustomerLeftExcluded_5\" (\"time\" TIMESTAMP WITH TIME ZONE NOT NULL, \"id\" BIGINT NOT NULL, \"customerid\" BIGINT NOT NULL, PRIMARY KEY (\"id\"))",
      "fields" : [
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        }
      ],
      "primaryKey" : [
        "id"
      ],
      "partitionKey" : [ ],
      "partitionType" : "NONE",
      "numPartitions" : 0,
      "ttl" : 0.0
    },
    {
      "name" : "OrderCustomerRight_6",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrderCustomerRight_6\" (\"ouuid\" BIGINT NOT NULL, \"id\" BIGINT, \"name\" TEXT NOT NULL, \"customerid\" BIGINT, PRIMARY KEY (\"ouuid\"))",
      "fields" : [
        {
          "name" : "ouuid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : true
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : true
        }
      ],
      "primaryKey" : [
        "ouuid"
      ],
      "partitionKey" : [ ],
      "partitionType" : "NONE",
      "numPartitions" : 0,
      "ttl" : 0.0
    },
    {
      "name" : "OrderCustomerRightExcluded_7",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"OrderCustomerRightExcluded_7\" (\"lastUpdated\" BIGINT NOT NULL, \"customerid\" BIGINT NOT NULL, \"name\" TEXT NOT NULL, \"__pk_hash\" INTEGER NOT NULL, PRIMARY KEY (\"__pk_hash\"))",
      "fields" : [
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "__pk_hash",
          "type" : "INTEGER",
          "nullable" : false
        }
      ],
      "primaryKey" : [
        "__pk_hash"
      ],
      "partitionKey" : [ ],
      "partitionType" : "NONE",
      "numPartitions" : 0,
      "ttl" : 0.0
    },
    {
      "name" : "Orders_8",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Orders_8\" (\"id\" BIGINT NOT NULL, \"customerid\" BIGINT NOT NULL, \"time\" TIMESTAMP WITH TIME ZONE NOT NULL, \"entries\" JSONB, PRIMARY KEY (\"id\"))",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        }
      ],
      "primaryKey" : [
        "id"
      ],
      "partitionKey" : [ ],
      "partitionType" : "NONE",
      "numPartitions" : 0,
      "ttl" : 0.0
    },
    {
      "name" : "Customer",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Customer\"(\"customerid\", \"email\", \"name\", \"lastUpdated\", \"timestamp\") AS SELECT *\nFROM \"Customer_1\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderCustomer",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderCustomer\"(\"time\", \"id\", \"name\", \"customerid\") AS SELECT *\nFROM \"OrderCustomer_2\"",
      "fields" : [
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderCustomerConstant",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderCustomerConstant\"(\"time\", \"id\", \"name\", \"customerid\") AS SELECT *\nFROM \"OrderCustomerConstant_3\"",
      "fields" : [
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderCustomerLeft",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderCustomerLeft\"(\"lastUpdated\", \"id\", \"name\", \"customerid\") AS SELECT *\nFROM \"OrderCustomerLeft_4\"",
      "fields" : [
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : true
        },
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : true
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderCustomerLeftExcluded",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderCustomerLeftExcluded\"(\"time\", \"id\", \"customerid\") AS SELECT *\nFROM \"OrderCustomerLeftExcluded_5\"",
      "fields" : [
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderCustomerRight",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderCustomerRight\"(\"ouuid\", \"id\", \"name\", \"customerid\") AS SELECT *\nFROM \"OrderCustomerRight_6\"",
      "fields" : [
        {
          "name" : "ouuid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : true
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "OrderCustomerRightExcluded",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderCustomerRightExcluded\"(\"lastUpdated\", \"customerid\", \"name\") AS SELECT \"lastUpdated\", \"customerid\", \"name\"\nFROM \"OrderCustomerRightExcluded_7\"",
      "fields" : [
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Orders",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Orders\"(\"id\", \"customerid\", \"time\", \"entries\") AS SELECT *\nFROM \"Orders_8\"",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        }
      ]
    }
  ]
}
>>>vertx.json
{
  "models" : {
    "v1" : {
      "queries" : [
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "Customer",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT *\nFROM \"Customer_1\"",
              "parameters" : [ ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        },
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "OrderCustomer",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT *\nFROM \"OrderCustomer_2\"",
              "parameters" : [ ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        },
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "OrderCustomerConstant",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT *\nFROM \"OrderCustomerConstant_3\"",
              "parameters" : [ ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        },
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "OrderCustomerLeft",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT *\nFROM \"OrderCustomerLeft_4\"",
              "parameters" : [ ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        },
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "OrderCustomerLeftExcluded",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT *\nFROM \"OrderCustomerLeftExcluded_5\"",
              "parameters" : [ ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        },
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "OrderCustomerRight",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT *\nFROM \"OrderCustomerRight_6\"",
              "parameters" : [ ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        },
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "OrderCustomerRightExcluded",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT \"lastUpdated\", \"customerid\", \"name\"\nFROM \"OrderCustomerRightExcluded_7\"",
              "parameters" : [ ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        },
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "Orders",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT *\nFROM \"Orders_8\"",
              "parameters" : [ ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        }
      ],
      "mutations" : [ ],
      "subscriptions" : [ ],
      "operations" : [
        {
          "function" : {
            "name" : "GetCustomer",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [ ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query Customer($limit: Int = 10, $offset: Int = 0) {\nCustomer(limit: $limit, offset: $offset) {\ncustomerid\nemail\nname\nlastUpdated\ntimestamp\n}\n\n}",
            "queryName" : "Customer",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/Customer{?offset,limit}"
        },
        {
          "function" : {
            "name" : "GetOrderCustomer",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [ ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query OrderCustomer($limit: Int = 10, $offset: Int = 0) {\nOrderCustomer(limit: $limit, offset: $offset) {\ntime\nid\nname\ncustomerid\n}\n\n}",
            "queryName" : "OrderCustomer",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/OrderCustomer{?offset,limit}"
        },
        {
          "function" : {
            "name" : "GetOrderCustomerConstant",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [ ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query OrderCustomerConstant($limit: Int = 10, $offset: Int = 0) {\nOrderCustomerConstant(limit: $limit, offset: $offset) {\ntime\nid\nname\ncustomerid\n}\n\n}",
            "queryName" : "OrderCustomerConstant",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/OrderCustomerConstant{?offset,limit}"
        },
        {
          "function" : {
            "name" : "GetOrderCustomerLeft",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [ ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query OrderCustomerLeft($limit: Int = 10, $offset: Int = 0) {\nOrderCustomerLeft(limit: $limit, offset: $offset) {\nlastUpdated\nid\nname\ncustomerid\n}\n\n}",
            "queryName" : "OrderCustomerLeft",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/OrderCustomerLeft{?offset,limit}"
        },
        {
          "function" : {
            "name" : "GetOrderCustomerLeftExcluded",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [ ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query OrderCustomerLeftExcluded($limit: Int = 10, $offset: Int = 0) {\nOrderCustomerLeftExcluded(limit: $limit, offset: $offset) {\ntime\nid\ncustomerid\n}\n\n}",
            "queryName" : "OrderCustomerLeftExcluded",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/OrderCustomerLeftExcluded{?offset,limit}"
        },
        {
          "function" : {
            "name" : "GetOrderCustomerRight",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [ ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query OrderCustomerRight($limit: Int = 10, $offset: Int = 0) {\nOrderCustomerRight(limit: $limit, offset: $offset) {\nouuid\nid\nname\ncustomerid\n}\n\n}",
            "queryName" : "OrderCustomerRight",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/OrderCustomerRight{?offset,limit}"
        },
        {
          "function" : {
            "name" : "GetOrderCustomerRightExcluded",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [ ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query OrderCustomerRightExcluded($limit: Int = 10, $offset: Int = 0) {\nOrderCustomerRightExcluded(limit: $limit, offset: $offset) {\nlastUpdated\ncustomerid\nname\n}\n\n}",
            "queryName" : "OrderCustomerRightExcluded",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/OrderCustomerRightExcluded{?offset,limit}"
        },
        {
          "function" : {
            "name" : "GetOrders",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [ ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query Orders($limit: Int = 10, $offset: Int = 0) {\nOrders(limit: $limit, offset: $offset) {\nid\ncustomerid\ntime\nentries {\nproductid\nquantity\nunit_price\ndiscount\n}\n}\n\n}",
            "queryName" : "Orders",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/Orders{?offset,limit}"
        }
      ],
      "schema" : {
        "type" : "string",
        "schema" : "type Customer {\n  customerid: Long!\n  email: String!\n  name: String!\n  lastUpdated: Long!\n  timestamp: DateTime!\n}\n\n\"An RFC-3339 compliant Full Date Scalar\"\nscalar Date\n\n\"A DateTime scalar that handles both full RFC3339 and shorter timestamp formats\"\nscalar DateTime\n\n\"A JSON scalar\"\nscalar JSON\n\n\"24-hour clock time value string in the format `hh:mm:ss` or `hh:mm:ss.sss`.\"\nscalar LocalTime\n\n\"A 64-bit signed integer\"\nscalar Long\n\ntype OrderCustomer {\n  time: DateTime!\n  id: Long!\n  name: String!\n  customerid: Long!\n}\n\ntype OrderCustomerConstant {\n  time: DateTime!\n  id: Long!\n  name: String!\n  customerid: Long!\n}\n\ntype OrderCustomerLeft {\n  lastUpdated: Long\n  id: Long!\n  name: String\n  customerid: Long!\n}\n\ntype OrderCustomerLeftExcluded {\n  time: DateTime!\n  id: Long!\n  customerid: Long!\n}\n\ntype OrderCustomerRight {\n  ouuid: Long!\n  id: Long\n  name: String!\n  customerid: Long\n}\n\ntype OrderCustomerRightExcluded {\n  lastUpdated: Long!\n  customerid: Long!\n  name: String!\n}\n\ntype Orders {\n  id: Long!\n  customerid: Long!\n  time: DateTime!\n  entries: [Orders_entriesOutput]!\n}\n\ntype Orders_entriesOutput {\n  productid: Long!\n  quantity: Long!\n  unit_price: Float!\n  discount: Float\n}\n\ntype Query {\n  Customer(limit: Int = 10, offset: Int = 0): [Customer!]\n  OrderCustomer(limit: Int = 10, offset: Int = 0): [OrderCustomer!]\n  OrderCustomerConstant(limit: Int = 10, offset: Int = 0): [OrderCustomerConstant!]\n  OrderCustomerLeft(limit: Int = 10, offset: Int = 0): [OrderCustomerLeft!]\n  OrderCustomerLeftExcluded(limit: Int = 10, offset: Int = 0): [OrderCustomerLeftExcluded!]\n  OrderCustomerRight(limit: Int = 10, offset: Int = 0): [OrderCustomerRight!]\n  OrderCustomerRightExcluded(limit: Int = 10, offset: Int = 0): [OrderCustomerRightExcluded!]\n  Orders(limit: Int = 10, offset: Int = 0): [Orders!]\n}\n\nenum _McpMethodType {\n  NONE\n  TOOL\n  RESOURCE\n}\n\nenum _RestMethodType {\n  NONE\n  GET\n  POST\n}\n\ndirective @api(mcp: _McpMethodType, rest: _RestMethodType, uri: String) on QUERY | MUTATION | FIELD_DEFINITION\n"
      }
    }
  }
}
