>>>pipeline_explain.txt
=== Customer
ID:     default_catalog.default_database.Customer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer__base
Annotations:
 - stream-root: Customer
Primary Key: customerid, lastUpdated
Timestamp  : _ingest_time
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - _ingest_time: TIMESTAMP_LTZ(3) *PROCTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], _ingest_time=[PROCTIME()])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `Customer__view`
AS
SELECT `Customer`.`customerid`, `Customer`.`email`, `Customer`.`name`, `Customer`.`lastUpdated`, `Customer`.`_ingest_time`
FROM `default_catalog`.`default_database`.`Customer` AS `Customer`
=== OrderCustomer1
ID:     default_catalog.default_database.OrderCustomer1
Type:   stream
Stage:  postgres
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: -
Timestamp  : -
Schema:
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalProject(id=[$0], name=[$7])
  LogicalJoin(condition=[=($1, $5)], joinType=[inner])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW OrderCustomer1 AS  SELECT o.id, c.name FROM Orders o JOIN Customer c on o.customerid = c.customerid;

=== OrderCustomer2
ID:     default_catalog.default_database.OrderCustomer2
Type:   stream
Stage:  postgres
Inputs: default_catalog.default_database.Customer, default_catalog.default_database.Orders
Primary Key: -
Timestamp  : timestamp
Schema:
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *PROCTIME* NOT NULL
Plan:
LogicalProject(id=[$0], name=[$7], timestamp=[GREATEST($4, $9)])
  LogicalJoin(condition=[=($1, $5)], joinType=[inner])
    LogicalTableScan(table=[[default_catalog, default_database, Orders]])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW OrderCustomer2 AS  SELECT o.id, c.name, GREATEST(o._ingest_time, c._ingest_time) AS `timestamp` FROM Orders o JOIN Customer c on o.customerid = c.customerid;

=== Orders
ID:     default_catalog.default_database.Orders
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Orders__base
Annotations:
 - features: DENORMALIZE (feature)
 - stream-root: Orders
Primary Key: id, time
Timestamp  : _ingest_time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
 - _ingest_time: TIMESTAMP_LTZ(3) *PROCTIME* NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], _ingest_time=[PROCTIME()])
  LogicalTableScan(table=[[default_catalog, default_database, Orders]])
SQL: CREATE VIEW `Orders__view`
AS
SELECT `Orders`.`id`, `Orders`.`customerid`, `Orders`.`time`, `Orders`.`entries`, `Orders`.`_ingest_time`
FROM `default_catalog`.`default_database`.`Orders` AS `Orders`
>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Customer__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Customer` (
  `_ingest_time` AS `PROCTIME`(),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'format' = 'json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Customer__schema`;
CREATE TEMPORARY TABLE `Orders__schema` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Orders` (
  `_ingest_time` AS `PROCTIME`(),
  PRIMARY KEY (`id`, `time`) NOT ENFORCED
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Orders__schema`;
CREATE VIEW `OrderCustomer1`
AS
SELECT `o`.`id`, `c`.`name`
FROM `Orders` AS `o`
 INNER JOIN `Customer` AS `c` ON `o`.`customerid` = `c`.`customerid`;
CREATE VIEW `OrderCustomer2`
AS
SELECT `o`.`id`, `c`.`name`, `GREATEST`(`o`.`_ingest_time`, `c`.`_ingest_time`) AS `timestamp`
FROM `Orders` AS `o`
 INNER JOIN `Customer` AS `c` ON `o`.`customerid` = `c`.`customerid`;
CREATE TABLE `Customer_1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'Customer_1',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `Orders_2` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`id`, `time`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'Orders_2',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`Customer_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`Customer`)
;
INSERT INTO `default_catalog`.`default_database`.`Orders_2`
 (SELECT `id`, `customerid`, `time`, `to_jsonb`(`entries`) AS `entries`, `_ingest_time`
  FROM `default_catalog`.`default_database`.`Orders`)
 ;
 END
>>>kafka.json
{
  "topics" : [ ],
  "testRunnerTopics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "Customer_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Customer_1\" (\"customerid\" BIGINT NOT NULL, \"email\" TEXT, \"name\" TEXT NOT NULL, \"lastUpdated\" BIGINT NOT NULL, \"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"customerid\",\"lastUpdated\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : true
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "_ingest_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ],
      "primaryKey" : [
        "customerid",
        "lastUpdated"
      ],
      "partitionKey" : [ ],
      "partitionType" : "NONE",
      "numPartitions" : 0,
      "ttl" : 0.0
    },
    {
      "name" : "Orders_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Orders_2\" (\"id\" BIGINT NOT NULL, \"customerid\" BIGINT NOT NULL, \"time\" TIMESTAMP WITH TIME ZONE NOT NULL, \"entries\" JSONB, \"_ingest_time\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\",\"time\"))",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        },
        {
          "name" : "_ingest_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ],
      "primaryKey" : [
        "id",
        "time"
      ],
      "partitionKey" : [ ],
      "partitionType" : "NONE",
      "numPartitions" : 0,
      "ttl" : 0.0
    },
    {
      "name" : "Customer",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Customer\"(\"customerid\", \"email\", \"name\", \"lastUpdated\", \"_ingest_time\") AS SELECT *\nFROM \"Customer_1\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : true
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "_ingest_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderCustomer1",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderCustomer1\"(\"id\", \"name\") AS SELECT \"Orders_22\".\"id\", \"Customer_12\".\"name\"\nFROM \"Orders_2\" AS \"Orders_22\"\n INNER JOIN \"Customer_1\" AS \"Customer_12\" ON \"Orders_22\".\"customerid\" = \"Customer_12\".\"customerid\"",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "OrderCustomer2",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"OrderCustomer2\"(\"id\", \"name\", \"timestamp\") AS SELECT \"Orders_22\".\"id\", \"Customer_12\".\"name\", \"GREATEST\"(\"Orders_22\".\"_ingest_time\", \"Customer_12\".\"_ingest_time\") AS \"timestamp\"\nFROM \"Orders_2\" AS \"Orders_22\"\n INNER JOIN \"Customer_1\" AS \"Customer_12\" ON \"Orders_22\".\"customerid\" = \"Customer_12\".\"customerid\"",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Orders",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Orders\"(\"id\", \"customerid\", \"time\", \"entries\", \"_ingest_time\") AS SELECT *\nFROM \"Orders_2\"",
      "fields" : [
        {
          "name" : "id",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "entries",
          "type" : "JSONB",
          "nullable" : true
        },
        {
          "name" : "_ingest_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    }
  ]
}
>>>vertx.json
{
  "model" : {
    "queries" : [
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Customer",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Customer_1\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "cacheDurationMs" : 0,
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderCustomer1",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT \"Orders_20\".\"id\", \"Customer_10\".\"name\"\nFROM \"Orders_2\" AS \"Orders_20\"\n INNER JOIN \"Customer_1\" AS \"Customer_10\" ON \"Orders_20\".\"customerid\" = \"Customer_10\".\"customerid\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "cacheDurationMs" : 0,
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "OrderCustomer2",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT \"Orders_20\".\"id\", \"Customer_10\".\"name\", \"GREATEST\"(\"Orders_20\".\"_ingest_time\", \"Customer_10\".\"_ingest_time\") AS \"timestamp\"\nFROM \"Orders_2\" AS \"Orders_20\"\n INNER JOIN \"Customer_1\" AS \"Customer_10\" ON \"Orders_20\".\"customerid\" = \"Customer_10\".\"customerid\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "cacheDurationMs" : 0,
            "database" : "POSTGRES"
          }
        }
      },
      {
        "type" : "args",
        "parentType" : "Query",
        "fieldName" : "Orders",
        "exec" : {
          "arguments" : [
            {
              "type" : "variable",
              "path" : "offset"
            },
            {
              "type" : "variable",
              "path" : "limit"
            }
          ],
          "query" : {
            "type" : "SqlQuery",
            "sql" : "SELECT *\nFROM \"Orders_2\"",
            "parameters" : [ ],
            "pagination" : "LIMIT_AND_OFFSET",
            "cacheDurationMs" : 0,
            "database" : "POSTGRES"
          }
        }
      }
    ],
    "mutations" : [ ],
    "subscriptions" : [ ],
    "operations" : [
      {
        "function" : {
          "name" : "GetCustomer",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query Customer($limit: Int = 10, $offset: Int = 0) {\nCustomer(limit: $limit, offset: $offset) {\ncustomerid\nemail\nname\nlastUpdated\n}\n\n}",
          "queryName" : "Customer",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/Customer{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrderCustomer1",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query OrderCustomer1($limit: Int = 10, $offset: Int = 0) {\nOrderCustomer1(limit: $limit, offset: $offset) {\nid\nname\n}\n\n}",
          "queryName" : "OrderCustomer1",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/OrderCustomer1{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrderCustomer2",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query OrderCustomer2($limit: Int = 10, $offset: Int = 0) {\nOrderCustomer2(limit: $limit, offset: $offset) {\nid\nname\ntimestamp\n}\n\n}",
          "queryName" : "OrderCustomer2",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/OrderCustomer2{?offset,limit}"
      },
      {
        "function" : {
          "name" : "GetOrders",
          "parameters" : {
            "type" : "object",
            "properties" : {
              "offset" : {
                "type" : "integer"
              },
              "limit" : {
                "type" : "integer"
              }
            },
            "required" : [ ]
          }
        },
        "format" : "JSON",
        "apiQuery" : {
          "query" : "query Orders($limit: Int = 10, $offset: Int = 0) {\nOrders(limit: $limit, offset: $offset) {\nid\ncustomerid\ntime\nentries {\nproductid\nquantity\nunit_price\ndiscount\n}\n}\n\n}",
          "queryName" : "Orders",
          "operationType" : "QUERY"
        },
        "mcpMethod" : "TOOL",
        "restMethod" : "GET",
        "uriTemplate" : "queries/Orders{?offset,limit}"
      }
    ],
    "schema" : {
      "type" : "string",
      "schema" : "type Customer {\n  customerid: Long!\n  email: String\n  name: String!\n  lastUpdated: Long!\n}\n\n\"An RFC-3339 compliant Full Date Scalar\"\nscalar Date\n\n\"A DateTime scalar that handles both full RFC3339 and shorter timestamp formats\"\nscalar DateTime\n\n\"A JSON scalar\"\nscalar JSON\n\n\"24-hour clock time value string in the format `hh:mm:ss` or `hh:mm:ss.sss`.\"\nscalar LocalTime\n\n\"A 64-bit signed integer\"\nscalar Long\n\ntype OrderCustomer1 {\n  id: Long!\n  name: String!\n}\n\ntype OrderCustomer2 {\n  id: Long!\n  name: String!\n  timestamp: DateTime!\n}\n\ntype Orders {\n  id: Long!\n  customerid: Long!\n  time: DateTime!\n  entries: [Orders_entriesOutput]!\n}\n\ntype Orders_entriesOutput {\n  productid: Long!\n  quantity: Long!\n  unit_price: Float!\n  discount: Float\n}\n\ntype Query {\n  Customer(limit: Int = 10, offset: Int = 0): [Customer!]\n  OrderCustomer1(limit: Int = 10, offset: Int = 0): [OrderCustomer1!]\n  OrderCustomer2(limit: Int = 10, offset: Int = 0): [OrderCustomer2!]\n  Orders(limit: Int = 10, offset: Int = 0): [Orders!]\n}\n\nenum _McpMethodType {\n  NONE\n  TOOL\n  RESOURCE\n}\n\nenum _RestMethodType {\n  NONE\n  GET\n  POST\n}\n\ndirective @api(mcp: _McpMethodType, rest: _RestMethodType, uri: String) on QUERY | MUTATION | FIELD_DEFINITION\n"
    }
  }
}
