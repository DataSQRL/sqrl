>>>pipeline_explain.txt
=== FunctionApplied
ID:     default_catalog.default_database.FunctionApplied
Type:   state
Stage:  flink
Primary Key: id
Timestamp  : -
Schema:
 - id: INTEGER NOT NULL
 - fct_result: BOOLEAN
Plan:
LogicalProject(id=[$0], fct_result=[TestFunction($0)])
  LogicalValues(tuples=[[{ 1 }, { 2 }]])
SQL: CREATE VIEW `FunctionApplied` AS  SELECT id, TestFunction(id) AS fct_result FROM (VALUES
    (1),
    (2)
) AS data_table(id);

>>>flink-sql-no-functions.sql
CREATE VIEW `FunctionApplied`
AS
SELECT `id`, `TestFunction`(`id`) AS `fct_result`
FROM (VALUES ROW(1),
   ROW(2)) AS `data_table` (`id`);
CREATE VIEW `FunctionTest`
AS
SELECT *
FROM `FunctionApplied`;
CREATE TABLE `FunctionApplied_1` (
  `id` INTEGER NOT NULL,
  `fct_result` BOOLEAN,
  PRIMARY KEY (`id`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'FunctionApplied',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`FunctionApplied_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`FunctionApplied`)
;
END
>>>kafka.json
{
  "topics" : [ ],
  "testRunnerTopics" : [ ]
}
>>>postgres-schema.sql
CREATE TABLE IF NOT EXISTS "FunctionApplied" ("id" INTEGER NOT NULL, "fct_result" BOOLEAN, PRIMARY KEY ("id"))
>>>postgres-views.sql

>>>vertx.json
{
  "models" : {
    "v1" : {
      "queries" : [
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "FunctionApplied",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT *\nFROM \"FunctionApplied\"",
              "parameters" : [ ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        }
      ],
      "mutations" : [ ],
      "subscriptions" : [ ],
      "operations" : [
        {
          "function" : {
            "name" : "GetFunctionApplied",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [ ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query FunctionApplied($limit: Int = 10, $offset: Int = 0) {\nFunctionApplied(limit: $limit, offset: $offset) {\nid\nfct_result\n}\n\n}",
            "queryName" : "FunctionApplied",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/FunctionApplied{?offset,limit}"
        }
      ],
      "schema" : {
        "type" : "string",
        "schema" : "\"An RFC-3339 compliant Full Date Scalar\"\nscalar Date\n\n\"A DateTime scalar that handles both full RFC3339 and shorter timestamp formats\"\nscalar DateTime\n\ntype FunctionApplied {\n  id: Int!\n  fct_result: Boolean\n}\n\n\"A JSON scalar\"\nscalar JSON\n\n\"24-hour clock time value string in the format `hh:mm:ss` or `hh:mm:ss.sss`.\"\nscalar LocalTime\n\n\"A 64-bit signed integer\"\nscalar Long\n\ntype Query {\n  FunctionApplied(limit: Int = 10, offset: Int = 0): [FunctionApplied!]\n}\n\nenum _McpMethodType {\n  NONE\n  TOOL\n  RESOURCE\n}\n\nenum _RestMethodType {\n  NONE\n  GET\n  POST\n}\n\ndirective @api(mcp: _McpMethodType, rest: _RestMethodType, uri: String) on QUERY | MUTATION | FIELD_DEFINITION\n"
      }
    }
  }
}
