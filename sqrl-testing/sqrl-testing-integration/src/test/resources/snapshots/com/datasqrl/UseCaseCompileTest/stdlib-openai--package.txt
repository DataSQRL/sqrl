>>>pipeline_explain.txt
=== data
ID:     default_catalog.default_database.data
Type:   state
Stage:  flink
Primary Key: 
Timestamp  : -
Schema:
 - val: INTEGER NOT NULL
Plan:
LogicalProject(val=[$0])
  LogicalValues(tuples=[[{ 1 }]])
SQL: CREATE VIEW `data` AS  SELECT * FROM (VALUES(1)) AS t(val);

=== results
ID:     default_catalog.default_database.results
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.data
Primary Key: 
Timestamp  : -
Schema:
 - completions_result: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - extract_json_result_response: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - extract_json_result_with_schema_response: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
Plan:
LogicalProject(completions_result=[completions('Reply this exactly: \"Crunching data like a squirrel.\"', 'gpt-4o', 50, 0.1:DOUBLE)], extract_json_result_response=[extract_json('Reply this exactly: \"Crunching data like a squirrel.\" in the \"response\" property.', 'gpt-4o', 0.1:DOUBLE)], extract_json_result_with_schema_response=[extract_json('myField should be equal to \"Hello squirrels!\" ', 'gpt-4o', 0.1:DOUBLE, 1.0:DOUBLE, '{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"response":{"type":"object","properties":{"myField":{"type":"string"}},"required":["myField"],"additionalProperties":false}},"required":["response"],"additionalProperties":false}')])
  LogicalTableScan(table=[[default_catalog, default_database, data]])
SQL: CREATE VIEW `results` AS  SELECT
            completions('Reply this exactly: \"Crunching data like a squirrel.\"', 'gpt-4o', 50, 0.1) AS completions_result,
            extract_json('Reply this exactly: \"Crunching data like a squirrel.\" in the \"response\" property.', 'gpt-4o', 0.1) AS extract_json_result_response,
            extract_json('myField should be equal to \"Hello squirrels!\" ', 'gpt-4o', 0.1, 1.0, '{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"response":{"type":"object","properties":{"myField":{"type":"string"}},"required":["myField"],"additionalProperties":false}},"required":["response"],"additionalProperties":false}') as extract_json_result_with_schema_response
           FROM data;

>>>flink-sql-no-functions.sql
CREATE VIEW `data`
AS
SELECT *
FROM (VALUES ROW(1)) AS `t` (`val`);
CREATE VIEW `results`
AS
SELECT `completions`('Reply this exactly: \"Crunching data like a squirrel.\"', 'gpt-4o', 50, 0.1) AS `completions_result`, `extract_json`('Reply this exactly: \"Crunching data like a squirrel.\" in the \"response\" property.', 'gpt-4o', 0.1) AS `extract_json_result_response`, `extract_json`('myField should be equal to \"Hello squirrels!\" ', 'gpt-4o', 0.1, 1.0, '{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"response":{"type":"object","properties":{"myField":{"type":"string"}},"required":["myField"],"additionalProperties":false}},"required":["response"],"additionalProperties":false}') AS `extract_json_result_with_schema_response`
FROM `data`;
CREATE VIEW `resultsTest`
AS
SELECT *
FROM `results`;
CREATE TABLE `data_1` (
  `val` INTEGER NOT NULL,
  `__pk_hash` INTEGER NOT NULL,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'data',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `results_2` (
  `completions_result` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `extract_json_result_response` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `extract_json_result_with_schema_response` VARCHAR(2147483647) CHARACTER SET `UTF-16LE`,
  `__pk_hash` INTEGER NOT NULL,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'results',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`data_1`
SELECT `val`, 1 AS `__pk_hash`
 FROM `default_catalog`.`default_database`.`data`
;
INSERT INTO `default_catalog`.`default_database`.`results_2`
 SELECT `completions_result`, `extract_json_result_response`, `extract_json_result_with_schema_response`, 1 AS `__pk_hash`
  FROM `default_catalog`.`default_database`.`results`
 ;
 END
>>>kafka.json
{
  "topics" : [ ],
  "testRunnerTopics" : [ ]
}
>>>postgres-schema.sql
CREATE TABLE IF NOT EXISTS "data" ("val" INTEGER NOT NULL, "__pk_hash" INTEGER NOT NULL, PRIMARY KEY ("__pk_hash"));
CREATE TABLE IF NOT EXISTS "results" ("completions_result" TEXT, "extract_json_result_response" TEXT, "extract_json_result_with_schema_response" TEXT, "__pk_hash" INTEGER NOT NULL, PRIMARY KEY ("__pk_hash"))
>>>postgres-views.sql

>>>vertx.json
{
  "models" : {
    "v1" : {
      "queries" : [
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "data",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT \"val\"\nFROM \"data\"",
              "parameters" : [ ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        },
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "results",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT \"completions_result\", \"extract_json_result_response\", \"extract_json_result_with_schema_response\"\nFROM \"results\"",
              "parameters" : [ ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        }
      ],
      "mutations" : [ ],
      "subscriptions" : [ ],
      "operations" : [
        {
          "function" : {
            "name" : "Getdata",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [ ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query data($limit: Int = 10, $offset: Int = 0) {\ndata(limit: $limit, offset: $offset) {\nval\n}\n\n}",
            "queryName" : "data",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/data{?offset,limit}"
        },
        {
          "function" : {
            "name" : "Getresults",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [ ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query results($limit: Int = 10, $offset: Int = 0) {\nresults(limit: $limit, offset: $offset) {\ncompletions_result\nextract_json_result_response\nextract_json_result_with_schema_response\n}\n\n}",
            "queryName" : "results",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/results{?offset,limit}"
        }
      ],
      "schema" : {
        "type" : "string",
        "schema" : "\"An RFC-3339 compliant Full Date Scalar\"\nscalar Date\n\n\"A DateTime scalar that handles both full RFC3339 and shorter timestamp formats\"\nscalar DateTime\n\n\"A JSON scalar\"\nscalar JSON\n\n\"24-hour clock time value string in the format `hh:mm:ss` or `hh:mm:ss.sss`.\"\nscalar LocalTime\n\n\"A 64-bit signed integer\"\nscalar Long\n\ntype Query {\n  data(limit: Int = 10, offset: Int = 0): [data!]\n  results(limit: Int = 10, offset: Int = 0): [results!]\n}\n\nenum _McpMethodType {\n  NONE\n  TOOL\n  RESOURCE\n}\n\nenum _RestMethodType {\n  NONE\n  GET\n  POST\n}\n\ntype data {\n  val: Int!\n}\n\ntype results {\n  completions_result: String\n  extract_json_result_response: String\n  extract_json_result_with_schema_response: String\n}\n\ndirective @api(mcp: _McpMethodType, rest: _RestMethodType, uri: String) on QUERY | MUTATION | FIELD_DEFINITION\n"
      }
    }
  }
}
