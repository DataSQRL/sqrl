>>>pipeline_explain.txt
=== Customer
ID:     default_catalog.default_database.Customer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer__base
Annotations:
 - stream-root: Customer
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
  LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[COALESCE(TO_TIMESTAMP_LTZ($3, 0), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `Customer__view`
AS
SELECT `Customer`.`customerid`, `Customer`.`email`, `Customer`.`name`, `Customer`.`lastUpdated`, `Customer`.`timestamp`
FROM `default_catalog`.`default_database`.`Customer` AS `Customer`
=== CustomerMessage
ID:     default_catalog.default_database.CustomerMessage
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database._InputData
Annotations:
 - stream-root: _InputData
Primary Key: event_id
Timestamp  : event_time
Schema:
 - event_id: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT NOT NULL
 - message: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(event_id=[$0], customerid=[$1], message=[$2], event_time=[$3])
  LogicalFilter(condition=[<>($2, '')])
    LogicalTableScan(table=[[default_catalog, default_database, _InputData]])
SQL: CREATE VIEW `CustomerMessage` AS  SELECT * FROM _InputData WHERE message <> '';

=== CustomerMessageStream
ID:     default_catalog.default_database.CustomerMessageStream
Type:   query
Stage:  kafka
Inputs: default_catalog.default_database.CustomerMessage
Annotations:
 - stream-root: _InputData
 - parameters: customerid
 - base-table: CustomerMessage
Plan:
LogicalProject(event_id=[$0], customerid=[$1], message=[$2], event_time=[$3])
  LogicalFilter(condition=[=($1, ?0)])
    LogicalTableScan(table=[[default_catalog, default_database, CustomerMessage]])
SQL: CREATE VIEW `CustomerMessageStream` AS  SELECT * FROM CustomerMessage WHERE customerid = ?          ;

=== CustomersByTime
ID:     default_catalog.default_database.CustomersByTime
Type:   query
Stage:  postgres
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer
 - parameters: customerid, fromTime
 - base-table: Customer
Plan:
LogicalSort(sort0=[$4], dir0=[ASC-nulls-first])
  LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
    LogicalFilter(condition=[AND(=($0, ?0), >=(+($4, 14400000:INTERVAL HOUR), ?1))])
      LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `CustomersByTime` AS 
    SELECT * FROM Customer WHERE customerid = ?           AND `timestamp` + INTERVAL '4' HOUR >= ?        
    ORDER BY `timestamp` ASC;

=== _InputData
ID:     default_catalog.default_database._InputData
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database._InputData__base
Annotations:
 - stream-root: _InputData
Primary Key: event_id
Timestamp  : event_time
Schema:
 - event_id: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT NOT NULL
 - message: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - event_time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[event_time], watermark=[-($3, 0:INTERVAL SECOND)])
  LogicalProject(event_id=[$0], customerid=[$1], message=[$2], event_time=[CAST($3):TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL])
    LogicalTableScan(table=[[default_catalog, default_database, _InputData, metadata=[timestamp]]])
SQL: CREATE VIEW `_InputData__view`
AS
SELECT `_InputData`.`event_id`, `_InputData`.`customerid`, `_InputData`.`message`, `_InputData`.`event_time`
FROM `default_catalog`.`default_database`.`_InputData` AS `_InputData`
>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Customer__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Customer` (
  `timestamp` AS COALESCE(`TO_TIMESTAMP_LTZ`(`lastUpdated`, 0), TIMESTAMP '1970-01-01 00:00:00.000'),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Customer__schema`;
CREATE TABLE `_InputData` (
  `event_id` STRING NOT NULL,
  `customerid` BIGINT NOT NULL,
  `message` STRING NOT NULL,
  `event_time` TIMESTAMP_LTZ(3) NOT NULL METADATA FROM 'timestamp',
  WATERMARK FOR `event_time` AS `event_time` - INTERVAL '0.0' SECOND
) WITH (
  'connector' = 'kafka',
  'flexible-json.timestamp-format.standard' = 'ISO-8601',
  'format' = 'flexible-json',
  'properties.auto.offset.reset' = 'earliest',
  'properties.bootstrap.servers' = '${KAFKA_BOOTSTRAP_SERVERS}',
  'properties.group.id' = '${KAFKA_GROUP_ID}',
  'topic' = 'kafka-mutation-_InputData'
);
CREATE VIEW `CustomerMessage`
AS
SELECT *
FROM `_InputData`
WHERE `message` <> '';
CREATE TABLE `Customer_1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'Customer_1',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `CustomerMessage_2` (
  `event_id` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `customerid` BIGINT NOT NULL,
  `message` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'kafka',
  'flexible-json.timestamp-format.standard' = 'ISO-8601',
  'format' = 'flexible-json',
  'properties.bootstrap.servers' = '${KAFKA_BOOTSTRAP_SERVERS}',
  'properties.group.id' = '${KAFKA_GROUP_ID}',
  'topic' = 'kafka-CustomerMessage'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`Customer_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`Customer`)
;
INSERT INTO `default_catalog`.`default_database`.`CustomerMessage_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`CustomerMessage`)
 ;
 END
>>>kafka.json
{
  "topics" : [
    {
      "topicName" : "kafka-CustomerMessage",
      "tableName" : "CustomerMessage_2",
      "format" : "flexible-json",
      "numPartitions" : 1,
      "replicationFactor" : 3,
      "config" : { }
    },
    {
      "topicName" : "kafka-mutation-_InputData",
      "tableName" : "_InputData",
      "format" : "flexible-json",
      "numPartitions" : 1,
      "replicationFactor" : 3,
      "config" : { }
    }
  ],
  "testRunnerTopics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "Customer_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Customer_1\" (\"customerid\" BIGINT NOT NULL, \"email\" TEXT NOT NULL, \"name\" TEXT NOT NULL, \"lastUpdated\" BIGINT NOT NULL, \"timestamp\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"customerid\",\"lastUpdated\"))",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ],
      "primaryKey" : [
        "customerid",
        "lastUpdated"
      ],
      "partitionKey" : [ ],
      "partitionType" : "NONE",
      "numPartitions" : 0,
      "ttl" : 0.0
    },
    {
      "name" : "Customer",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Customer\"(\"customerid\", \"email\", \"name\", \"lastUpdated\", \"timestamp\") AS SELECT *\nFROM \"Customer_1\"",
      "fields" : [
        {
          "name" : "customerid",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "email",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "name",
          "type" : "TEXT",
          "nullable" : false
        },
        {
          "name" : "lastUpdated",
          "type" : "BIGINT",
          "nullable" : false
        },
        {
          "name" : "timestamp",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        }
      ]
    },
    {
      "name" : "Customer_1_btree_c0c4",
      "type" : "INDEX",
      "sql" : "CREATE INDEX IF NOT EXISTS \"Customer_1_btree_c0c4\" ON \"Customer_1\" USING btree (\"customerid\",\"timestamp\")"
    }
  ]
}
>>>vertx.json
{
  "models" : {
    "v1" : {
      "queries" : [
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "Customer",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT *\nFROM \"Customer_1\"",
              "parameters" : [ ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        },
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "CustomersByTime",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              },
              {
                "type" : "variable",
                "path" : "fromTime"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT *\nFROM \"Customer_1\"\nWHERE \"customerid\" = $1 AND \"timestamp\" + INTERVAL '4' HOUR >= $2\nORDER BY \"timestamp\" NULLS FIRST",
              "parameters" : [
                {
                  "type" : "metadata",
                  "metadata" : {
                    "metadataType" : "AUTH",
                    "name" : "userid",
                    "isRequired" : true
                  }
                },
                {
                  "type" : "arg",
                  "path" : "fromTime"
                }
              ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        }
      ],
      "mutations" : [
        {
          "type" : "kafka",
          "fieldName" : "_InputData",
          "returnList" : false,
          "topic" : "kafka-mutation-_InputData",
          "computedColumns" : {
            "event_id" : {
              "metadataType" : "UUID",
              "name" : "",
              "isRequired" : true
            },
            "customerid" : {
              "metadataType" : "AUTH",
              "name" : "userid",
              "isRequired" : true
            },
            "event_time" : {
              "metadataType" : "TIMESTAMP",
              "name" : "",
              "isRequired" : true
            }
          },
          "transactional" : false,
          "sinkConfig" : { }
        }
      ],
      "subscriptions" : [
        {
          "type" : "kafka",
          "fieldName" : "CustomerMessageStream",
          "topic" : "kafka-CustomerMessage",
          "sinkConfig" : { },
          "equalityConditions" : {
            "customerid" : {
              "type" : "metadata",
              "metadata" : {
                "metadataType" : "AUTH",
                "name" : "userid",
                "isRequired" : true
              }
            }
          }
        }
      ],
      "operations" : [
        {
          "function" : {
            "name" : "GetCustomer",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [ ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query Customer($limit: Int = 10, $offset: Int = 0) {\nCustomer(limit: $limit, offset: $offset) {\ncustomerid\nemail\nname\nlastUpdated\ntimestamp\n}\n\n}",
            "queryName" : "Customer",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/Customer{?offset,limit}"
        },
        {
          "function" : {
            "name" : "GetCustomersByTime",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "fromTime" : {
                  "type" : "string"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [
                "fromTime"
              ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query CustomersByTime($fromTime: DateTime!, $limit: Int = 10, $offset: Int = 0) {\nCustomersByTime(fromTime: $fromTime, limit: $limit, offset: $offset) {\ncustomerid\nemail\nname\nlastUpdated\ntimestamp\n}\n\n}",
            "queryName" : "CustomersByTime",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/CustomersByTime{?offset,fromTime,limit}"
        }
      ],
      "schema" : {
        "type" : "string",
        "schema" : "type Customer {\n  customerid: Long!\n  email: String!\n  name: String!\n  lastUpdated: Long!\n  timestamp: DateTime!\n}\n\ntype CustomerMessage {\n  event_id: String!\n  customerid: Long!\n  message: String!\n  event_time: DateTime!\n}\n\n\"An RFC-3339 compliant Full Date Scalar\"\nscalar Date\n\n\"A DateTime scalar that handles both full RFC3339 and shorter timestamp formats\"\nscalar DateTime\n\n\"A JSON scalar\"\nscalar JSON\n\n\"24-hour clock time value string in the format `hh:mm:ss` or `hh:mm:ss.sss`.\"\nscalar LocalTime\n\n\"A 64-bit signed integer\"\nscalar Long\n\ntype Mutation {\n  _InputData(event: _InputDataInput!): _InputDataResultOutput!\n}\n\ntype Query {\n  Customer(limit: Int = 10, offset: Int = 0): [Customer!]\n  CustomersByTime(fromTime: DateTime!, limit: Int = 10, offset: Int = 0): [Customer!]\n}\n\ntype Subscription {\n  CustomerMessageStream: CustomerMessage\n}\n\ninput _InputDataInput {\n  message: String!\n}\n\ntype _InputDataResultOutput {\n  event_id: String!\n  customerid: Long!\n  message: String!\n  event_time: DateTime!\n}\n\nenum _McpMethodType {\n  NONE\n  TOOL\n  RESOURCE\n}\n\nenum _RestMethodType {\n  NONE\n  GET\n  POST\n}\n\ndirective @api(mcp: _McpMethodType, rest: _RestMethodType, uri: String) on QUERY | MUTATION | FIELD_DEFINITION\n"
      }
    }
  }
}
