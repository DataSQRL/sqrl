>>>pipeline_explain.txt
=== AnotherCustomer
ID:     default_catalog.default_database.AnotherCustomer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database._customer
Annotations:
 - stream-root: _customer
Primary Key: customerid, lastUpdated
Timestamp  : -
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], lastUpdated=[$3])
  LogicalFilter(condition=[>($0, 100)])
    LogicalTableScan(table=[[default_catalog, default_database, _customer]])
SQL: CREATE VIEW AnotherCustomer AS  SELECT customerid, email, lastUpdated FROM _customer WHERE customerid > 100;

=== Customer
ID:     default_catalog.default_database.Customer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer__base
Annotations:
 - stream-root: Customer
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
  LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[COALESCE(TO_TIMESTAMP_LTZ($3, 0), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `Customer__view`
AS
SELECT `Customer`.`customerid`, `Customer`.`email`, `Customer`.`name`, `Customer`.`lastUpdated`, `Customer`.`timestamp`
FROM `default_catalog`.`default_database`.`Customer` AS `Customer`
=== CustomerById
ID:     default_catalog.default_database.CustomerById
Type:   query
Stage:  postgres
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer
 - parameters: minId
 - base-table: Customer
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[>($0, ?0)])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW CustomerById AS  SELECT * FROM Customer WHERE customerid > ?     ;

=== CustomerByMultipleTime
ID:     default_catalog.default_database.CustomerByMultipleTime
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - mostRecentDistinct: true
 - stream-root: Customer
Primary Key: customerid, email
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[=($5, 1)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0, $1 ORDER BY $4 DESC NULLS LAST, $3 NULLS FIRST)])
      LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `CustomerByMultipleTime`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid`, `email` ORDER BY `timestamp` DESC NULLS LAST, `lastUpdated` NULLS FIRST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`Customer`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== CustomerByTime2
ID:     default_catalog.default_database.CustomerByTime2
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - mostRecentDistinct: true
 - stream-root: Customer
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[=($5, 1)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], __sqrlinternal_rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `CustomerByTime2`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `timestamp` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`Customer`) AS `t`
WHERE `__sqrlinternal_rownum` = 1
=== CustomerFilteredDistinct
ID:     default_catalog.default_database.CustomerFilteredDistinct
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[=($5, 1)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], $f5=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST)])
      LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
        LogicalFilter(condition=[OR(AND(IS NULL($5), IS NULL($6)), <>($1, $5), <>($2, $6))])
          LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], $f5=[LAG($1, 1) OVER (PARTITION BY $0 ORDER BY $4 NULLS FIRST)], $f6=[LAG($2, 1) OVER (PARTITION BY $0 ORDER BY $4 NULLS FIRST)])
            LogicalFilter(condition=[>=($3, $5)])
              LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], $f5=[MAX($3) OVER (PARTITION BY $0 ORDER BY $4 NULLS FIRST)])
                LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW `CustomerFilteredDistinct`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `lastUpdated` DESC NULLS LAST) AS `$f5`
  FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
    FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, LAG(`email`, 1) OVER (PARTITION BY `customerid` ORDER BY `timestamp`) AS `$f5`, LAG(`name`, 1) OVER (PARTITION BY `customerid` ORDER BY `timestamp`) AS `$f6`
      FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, MAX(`lastUpdated`) OVER (PARTITION BY `customerid` ORDER BY `timestamp` RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS `$f5`
        FROM `default_catalog`.`default_database`.`Customer`) AS `t`
      WHERE `lastUpdated` >= `$f5`) AS `t1`
    WHERE `$f5` IS NULL AND `$f6` IS NULL OR `email` <> `$f5` OR `name` <> `$f6`) AS `t3`) AS `t4`
WHERE `$f5` = 1
=== CustomerQuery
ID:     default_catalog.default_database.CustomerQuery
Type:   query
Stage:  postgres
Inputs: default_catalog.default_database.AnotherCustomer
Annotations:
 - stream-root: _customer
 - parameters: id
 - base-table: AnotherCustomer
Plan:
LogicalProject(customerid=[$0], email=[$1], lastUpdated=[$2])
  LogicalFilter(condition=[=($0, ?0)])
    LogicalTableScan(table=[[default_catalog, default_database, AnotherCustomer]])
SQL: CREATE VIEW CustomerQuery AS  SELECT * FROM AnotherCustomer WHERE customerid = ?  ;

=== CustomerSubscription
ID:     default_catalog.default_database.CustomerSubscription
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW CustomerSubscription AS  SELECT * FROM Customer;

=== CustomerSubscriptionById
ID:     default_catalog.default_database.CustomerSubscriptionById
Type:   query
Stage:  kafka
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer
 - parameters: minId
 - base-table: Customer
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[=($0, ?0)])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW CustomerSubscriptionById AS  SELECT * FROM Customer WHERE customerid = ?     ;

=== CustomerTimeWindow
ID:     default_catalog.default_database.CustomerTimeWindow
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.SelectCustomers
Annotations:
 - features: STREAM_WINDOW_AGGREGATION (feature)
Primary Key: window_start, window_end
Timestamp  : -
Schema:
 - window_start: TIMESTAMP(3) NOT NULL
 - window_end: TIMESTAMP(3) NOT NULL
 - unique_email_count: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], unique_email_count=[COUNT(DISTINCT $2)])
  LogicalProject(window_start=[$5], window_end=[$6], email=[$1])
    LogicalTableFunctionScan(invocation=[TUMBLE(DESCRIPTOR($4), 60000:INTERVAL MINUTE)], rowType=[RecordType(BIGINT customerid, VARCHAR(2147483647) email, VARCHAR(2147483647) name, BIGINT lastUpdated, TIMESTAMP_LTZ(3) *ROWTIME* timestamp, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP_LTZ(3) *ROWTIME* window_time)])
      LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
        LogicalTableScan(table=[[default_catalog, default_database, SelectCustomers]])
SQL: CREATE VIEW CustomerTimeWindow AS  SELECT
                          window_start, window_end,
                          COUNT(DISTINCT email) AS unique_email_count
                      FROM TABLE(
                              TUMBLE(TABLE SelectCustomers, DESCRIPTOR(`timestamp`), INTERVAL '1' MINUTE)
                           )
                      GROUP BY
                          window_start, window_end;

=== CustomerTimeWindowTest
ID:     default_catalog.default_database.CustomerTimeWindowTest
Type:   stream
Stage:  postgres
Inputs: default_catalog.default_database.CustomerTimeWindow
Annotations:
 - sort: [1 DESC-nulls-last]
Primary Key: window_start, window_end
Timestamp  : -
Schema:
 - window_start: TIMESTAMP(3) NOT NULL
 - window_end: TIMESTAMP(3) NOT NULL
 - unique_email_count: BIGINT NOT NULL
Plan:
LogicalProject(window_start=[$0], window_end=[$1], unique_email_count=[$2])
  LogicalTableScan(table=[[default_catalog, default_database, CustomerTimeWindow]])
SQL: CREATE VIEW CustomerTimeWindowTest AS  SELECT * FROM CustomerTimeWindow ORDER BY window_end DESC;

=== ExplicitDistinct
ID:     default_catalog.default_database.ExplicitDistinct
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalProject(customerid=[$0], timestamp=[$4], name=[$2])
  LogicalFilter(condition=[=($5, 1)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW ExplicitDistinct AS  SELECT customerid, `timestamp`, name FROM (SELECT *, (ROW_NUMBER() OVER (PARTITION BY customerid ORDER BY `timestamp` DESC)) AS _rownum FROM Customer) WHERE (_rownum = 1);

=== ExternalOrders
ID:     default_catalog.default_database.ExternalOrders
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.ExternalOrders__base
Annotations:
 - features: DENORMALIZE (feature)
 - stream-root: ExternalOrders
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - entries: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[time], watermark=[-($2, 1:INTERVAL SECOND)])
  LogicalTableScan(table=[[default_catalog, default_database, ExternalOrders]])
SQL: CREATE VIEW `ExternalOrders__view`
AS
SELECT `ExternalOrders`.`id`, `ExternalOrders`.`customerid`, `ExternalOrders`.`time`, `ExternalOrders`.`entries`
FROM `default_catalog`.`default_database`.`ExternalOrders` AS `ExternalOrders`
=== InvalidDistinct
ID:     default_catalog.default_database.InvalidDistinct
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - namee: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalProject(customerid=[$0], timestamp=[$4], namee=[$2])
  LogicalFilter(condition=[=($5, 1)])
    LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
      LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW InvalidDistinct AS  SELECT customerid, `timestamp`, name AS namee FROM (SELECT *, (ROW_NUMBER() OVER (PARTITION BY customerid ORDER BY `timestamp` DESC)) AS _rownum FROM Customer) WHERE (_rownum = 1);

=== MissedTemporalJoin
ID:     default_catalog.default_database.MissedTemporalJoin
Type:   state
Stage:  postgres
Inputs: default_catalog.default_database.ExplicitDistinct, default_catalog.default_database.ExternalOrders
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - entries: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
 - customerid0: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], customerid0=[$4], timestamp=[$5], name=[$6])
  LogicalJoin(condition=[=($1, $4)], joinType=[inner])
    LogicalTableScan(table=[[default_catalog, default_database, ExternalOrders]])
    LogicalTableScan(table=[[default_catalog, default_database, ExplicitDistinct]])
SQL: CREATE VIEW MissedTemporalJoin AS  SELECT * FROM ExternalOrders o JOIN ExplicitDistinct c ON o.customerid = c.customerid;

=== Orders
ID:     default_catalog.default_database.Orders
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Orders__base
Primary Key: orderid
Timestamp  : -
Schema:
 - orderid: INTEGER NOT NULL
 - amount: FLOAT
Plan:
LogicalTableScan(table=[[default_catalog, default_database, Orders]])
SQL: CREATE VIEW `Orders__view`
AS
SELECT `Orders`.`orderid`, `Orders`.`amount`
FROM `default_catalog`.`default_database`.`Orders` AS `Orders`
=== SelectCustomers
ID:     default_catalog.default_database.SelectCustomers
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Customer
Annotations:
 - stream-root: Customer
 - sort: [4 DESC-nulls-last]
Primary Key: customerid, name
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[>($0, 0)])
    LogicalTableScan(table=[[default_catalog, default_database, Customer]])
SQL: CREATE VIEW SelectCustomers AS  SELECT * From Customer WHERE customerid > 0 ORDER BY `timestamp` DESC LIMIT 10;

=== TableFunctionCallsTblFct
ID:     default_catalog.default_database.TableFunctionCallsTblFct
Type:   query
Stage:  postgres
Inputs: default_catalog.default_database.CustomerById
Annotations:
 - features: TABLE_FUNCTION_SCAN (feature)
 - stream-root: Customer
 - parameters: arg1, arg2
 - base-table: Customer
Plan:
LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[$4])
  LogicalFilter(condition=[>($0, ?0)])
    LogicalTableFunctionScan(invocation=[CustomerById(?1)], rowType=[RecordType(BIGINT customerid, VARCHAR(2147483647) email, VARCHAR(2147483647) name, BIGINT lastUpdated, TIMESTAMP_LTZ(3) *ROWTIME* timestamp)], elementType=[class [Ljava.lang.Object;])
SQL: CREATE VIEW TableFunctionCallsTblFct AS  SELECT * FROM Table(CustomerById(?    )) WHERE customerid > ?    ;

=== TemporalJoin
ID:     default_catalog.default_database.TemporalJoin
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.ExplicitDistinct, default_catalog.default_database.ExternalOrders
Annotations:
 - stream-root: ExternalOrders
Primary Key: id, time
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - entries: RecordType:peek_no_expand(BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
 - customerid0: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], entries=[$3], customerid0=[$4], timestamp=[$5], name=[$6])
  LogicalCorrelate(correlation=[$cor1], joinType=[inner], requiredColumns=[{1, 2}])
    LogicalTableScan(table=[[default_catalog, default_database, ExternalOrders]])
    LogicalFilter(condition=[=($cor1.customerid, $0)])
      LogicalSnapshot(period=[$cor1.time])
        LogicalTableScan(table=[[default_catalog, default_database, ExplicitDistinct]])
SQL: CREATE VIEW TemporalJoin AS  SELECT * FROM ExternalOrders o JOIN ExplicitDistinct FOR SYSTEM_TIME AS OF `time` c ON o.customerid = c.customerid;

=== UnnestOrders
ID:     default_catalog.default_database.UnnestOrders
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.ExternalOrders
Annotations:
 - stream-root: ExternalOrders
Primary Key: -
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - productid: BIGINT NOT NULL
 - quantity: BIGINT NOT NULL
 - discount: DOUBLE
 - newId: BIGINT NOT NULL
Plan:
LogicalProject(id=[$0], customerid=[$1], time=[$2], productid=[$3], quantity=[$4], discount=[$5], newId=[+($0, $3)])
  LogicalProject(id=[$0], customerid=[$1], time=[$2], productid=[$4], quantity=[$5], discount=[$7])
    LogicalCorrelate(correlation=[$cor5], joinType=[inner], requiredColumns=[{3}])
      LogicalTableScan(table=[[default_catalog, default_database, ExternalOrders]])
      Uncollect
        LogicalProject(entries=[$cor5.entries])
          LogicalValues(tuples=[[{ 0 }]])
SQL: ALTER VIEW UnnestOrders AS SELECT *,  id + productid AS newId FROM 
(  SELECT o.id, o.customerid, o.`time`, e.productid, e.quantity, e.discount FROM ExternalOrders o CROSS JOIN UNNEST(entries) e );
=== _customer
ID:     default_catalog.default_database._customer
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database._customer__base
Annotations:
 - stream-root: _customer
Primary Key: customerid, lastUpdated
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
 - timestamp: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
Plan:
LogicalWatermarkAssigner(rowtime=[timestamp], watermark=[-($4, 1:INTERVAL SECOND)])
  LogicalProject(customerid=[$0], email=[$1], name=[$2], lastUpdated=[$3], timestamp=[COALESCE(TO_TIMESTAMP_LTZ($3, 0), 1970-01-01 08:00:00:TIMESTAMP_WITH_LOCAL_TIME_ZONE(3))])
    LogicalTableScan(table=[[default_catalog, default_database, _customer]])
SQL: CREATE VIEW `_customer__view`
AS
SELECT `_customer`.`customerid`, `_customer`.`email`, `_customer`.`name`, `_customer`.`lastUpdated`, `_customer`.`timestamp`
FROM `default_catalog`.`default_database`.`_customer` AS `_customer`
=== customersink
ID:     mysink.customersink
Type:   export
Stage:  flink
Inputs: default_catalog.default_database.TemporalJoin

=== TimeWindow
ID:     print.TimeWindow
Type:   export
Stage:  flink
Inputs: default_catalog.default_database.CustomerTimeWindow

>>>flink-sql-no-functions.sql
CREATE TEMPORARY TABLE `Customer__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `Customer` (
  `timestamp` AS COALESCE(`TO_TIMESTAMP_LTZ`(`lastUpdated`, 0), TIMESTAMP '1970-01-01 00:00:00.000'),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `Customer__schema`;
CREATE TEMPORARY TABLE `ExternalOrders__schema` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `ExternalOrders` (
  PRIMARY KEY (`id`, `time`) NOT ENFORCED,
  WATERMARK FOR `time` AS `time` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `ExternalOrders__schema`;
CREATE TEMPORARY TABLE `_customer__schema` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `_customer` (
  `timestamp` AS COALESCE(`TO_TIMESTAMP_LTZ`(`lastUpdated`, 0), TIMESTAMP '1970-01-01 00:00:00.000'),
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED,
  WATERMARK FOR `timestamp` AS `timestamp` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `_customer__schema`;
CREATE TEMPORARY TABLE `_orders__schema` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `_orders` (
  PRIMARY KEY (`id`, `time`) NOT ENFORCED,
  WATERMARK FOR `time` AS `time` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `_orders__schema`;
CREATE TEMPORARY TABLE `_product__schema` (
  `productid` BIGINT NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `description` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `category` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `_product` (
  PRIMARY KEY (`productid`, `name`, `description`, `category`) NOT ENFORCED,
  WATERMARK FOR `_ingest_time` AS `_ingest_time` - INTERVAL '0.001' SECOND
) WITH (
  'format' = 'flexible-json',
  'path' = 'file:/mock',
  'source.monitor-interval' = '10 sec',
  'connector' = 'filesystem'
)
LIKE `_product__schema`;
CREATE VIEW `CustomerByTime2`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `timestamp` DESC NULLS LAST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`Customer`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `CustomerFilteredDistinct`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `lastUpdated` DESC NULLS LAST) AS `$f5`
  FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
    FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, LAG(`email`, 1) OVER (PARTITION BY `customerid` ORDER BY `timestamp`) AS `$f5`, LAG(`name`, 1) OVER (PARTITION BY `customerid` ORDER BY `timestamp`) AS `$f6`
      FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, MAX(`lastUpdated`) OVER (PARTITION BY `customerid` ORDER BY `timestamp` RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS `$f5`
        FROM `default_catalog`.`default_database`.`Customer`) AS `t`
      WHERE `lastUpdated` >= `$f5`) AS `t1`
    WHERE `$f5` IS NULL AND `$f6` IS NULL OR `email` <> `$f5` OR `name` <> `$f6`) AS `t3`) AS `t4`
WHERE `$f5` = 1;
CREATE VIEW `AnotherCustomer`
AS
SELECT `customerid`, `email`, `lastUpdated`
FROM `_customer`
WHERE `customerid` > 100;
CREATE VIEW `CustomerByMultipleTime`
AS
SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`
FROM (SELECT `customerid`, `email`, `name`, `lastUpdated`, `timestamp`, ROW_NUMBER() OVER (PARTITION BY `customerid`, `email` ORDER BY `timestamp` DESC NULLS LAST, `lastUpdated` NULLS FIRST) AS `__sqrlinternal_rownum`
  FROM `default_catalog`.`default_database`.`Customer`) AS `t`
WHERE `__sqrlinternal_rownum` = 1;
CREATE VIEW `ExplicitDistinct`
AS
SELECT `customerid`, `timestamp`, `name`
FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `timestamp` DESC) AS `_rownum`
  FROM `Customer`)
WHERE `_rownum` = 1;
CREATE VIEW `InvalidDistinct`
AS
SELECT `customerid`, `timestamp`, `name` AS `namee`
FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY `customerid` ORDER BY `timestamp` DESC) AS `_rownum`
  FROM `Customer`)
WHERE `_rownum` = 1;
CREATE VIEW `MissedTemporalJoin`
AS
SELECT *
FROM `ExternalOrders` AS `o`
 INNER JOIN `ExplicitDistinct` AS `c` ON `o`.`customerid` = `c`.`customerid`;
CREATE VIEW `TemporalJoin`
AS
SELECT *
FROM `ExternalOrders` AS `o`
 INNER JOIN `ExplicitDistinct` FOR SYSTEM_TIME AS OF `time` AS `c` ON `o`.`customerid` = `c`.`customerid`;
CREATE VIEW `SelectCustomers`
AS
SELECT *
FROM `Customer`
WHERE `customerid` > 0;
CREATE VIEW `CustomerSubscription`
AS
SELECT *
FROM `Customer`;
CREATE VIEW `UnnestOrders`
AS
SELECT `o`.`id`, `o`.`customerid`, `o`.`time`, `e`.`productid`, `e`.`quantity`, `e`.`discount`
FROM `ExternalOrders` AS `o`
 CROSS JOIN UNNEST(`entries`) AS `e`;
ALTER VIEW `UnnestOrders`
AS
SELECT *, `id` + `productid` AS `newId`
FROM (SELECT `o`.`id`, `o`.`customerid`, `o`.`time`, `e`.`productid`, `e`.`quantity`, `e`.`discount`
  FROM `ExternalOrders` AS `o`
   CROSS JOIN UNNEST(`entries`) AS `e`);
CREATE TABLE `Orders` (
  `orderid` INTEGER,
  `amount` FLOAT,
  PRIMARY KEY (`orderid`) NOT ENFORCED
) WITH (
  'connector' = 'upsert-kafka',
  'key.flexible-json.timestamp-format.standard' = 'ISO-8601',
  'key.format' = 'flexible-json',
  'properties.auto.offset.reset' = 'earliest',
  'properties.bootstrap.servers' = '${KAFKA_BOOTSTRAP_SERVERS}',
  'properties.group.id' = '${KAFKA_GROUP_ID}',
  'topic' = 'Orders',
  'value.flexible-json.timestamp-format.standard' = 'ISO-8601',
  'value.format' = 'flexible-json'
);
CREATE VIEW `CustomerTimeWindow`
AS
SELECT `window_start`, `window_end`, COUNT(DISTINCT `email`) AS `unique_email_count`
FROM TABLE(TUMBLE(TABLE `SelectCustomers`, DESCRIPTOR(`timestamp`), INTERVAL '1' MINUTE))
GROUP BY `window_start`, `window_end`;
CREATE VIEW `CustomerTimeWindowTest`
AS
SELECT *
FROM `CustomerTimeWindow`;
CREATE TEMPORARY TABLE `customersink_ex2__schema` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` ROW(`productid` BIGINT NOT NULL, `quantity` BIGINT NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,
  `customerid0` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL
) WITH (
  'connector' = 'datagen'
);
CREATE TABLE `customersink_ex2` (
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'print'
)
LIKE `customersink_ex2__schema`;
CREATE TABLE `AnotherCustomer_1` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'AnotherCustomer',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `Customer_2` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `lastUpdated`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'Customer',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `Customer_3` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'kafka',
  'flexible-json.timestamp-format.standard' = 'ISO-8601',
  'format' = 'flexible-json',
  'properties.bootstrap.servers' = '${KAFKA_BOOTSTRAP_SERVERS}',
  'properties.group.id' = '${KAFKA_GROUP_ID}',
  'topic' = 'Customer'
);
CREATE TABLE `CustomerByMultipleTime_4` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `email`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'CustomerByMultipleTime',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `CustomerByTime2_5` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'CustomerByTime2',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `CustomerFilteredDistinct_6` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'CustomerFilteredDistinct',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `CustomerSubscription_7` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL
) WITH (
  'connector' = 'kafka',
  'flexible-json.timestamp-format.standard' = 'ISO-8601',
  'format' = 'flexible-json',
  'properties.bootstrap.servers' = '${KAFKA_BOOTSTRAP_SERVERS}',
  'properties.group.id' = '${KAFKA_GROUP_ID}',
  'topic' = 'CustomerSubscription'
);
CREATE TABLE `TimeWindow_8` (
  `window_start` TIMESTAMP(3) NOT NULL,
  `window_end` TIMESTAMP(3) NOT NULL,
  `unique_email_count` BIGINT NOT NULL,
  PRIMARY KEY (`window_start`, `window_end`) NOT ENFORCED
) WITH (
  'connector' = 'print',
  'print-identifier' = 'TimeWindow'
);
CREATE TABLE `CustomerTimeWindow_9` (
  `window_start` TIMESTAMP(3) NOT NULL,
  `window_end` TIMESTAMP(3) NOT NULL,
  `unique_email_count` BIGINT NOT NULL,
  PRIMARY KEY (`window_start`, `window_end`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'CustomerTimeWindow',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `ExplicitDistinct_10` (
  `customerid` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'ExplicitDistinct',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `ExternalOrders_11` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  PRIMARY KEY (`id`, `time`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'ExternalOrders',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `InvalidDistinct_12` (
  `customerid` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `namee` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  PRIMARY KEY (`customerid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'InvalidDistinct',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `Orders_13` (
  `orderid` INTEGER NOT NULL,
  `amount` FLOAT,
  PRIMARY KEY (`orderid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'Orders',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `SelectCustomers_14` (
  `customerid` BIGINT NOT NULL,
  `email` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `lastUpdated` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`customerid`, `name`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'SelectCustomers',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `TemporalJoin_15` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `entries` RAW('com.datasqrl.flinkrunner.stdlib.json.FlinkJsonType', 'AERjb20uZGF0YXNxcmwuZmxpbmtydW5uZXIuc3RkbGliLmpzb24uRmxpbmtKc29uVHlwZVNlcmlhbGl6ZXJTbmFwc2hvdAAAAAM='),
  `customerid0` BIGINT NOT NULL,
  `timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `name` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  PRIMARY KEY (`id`, `time`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'TemporalJoin',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `UnnestOrders_16` (
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `productid` BIGINT NOT NULL,
  `quantity` BIGINT NOT NULL,
  `discount` DOUBLE,
  `newId` BIGINT NOT NULL,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'UnnestOrders',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`AnotherCustomer_1`
(SELECT *
 FROM `default_catalog`.`default_database`.`AnotherCustomer`)
;
INSERT INTO `default_catalog`.`default_database`.`Customer_2`
 (SELECT *
  FROM `default_catalog`.`default_database`.`Customer`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`Customer_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`Customer`)
  ;
  INSERT INTO `default_catalog`.`default_database`.`CustomerByMultipleTime_4`
   (SELECT *
    FROM `default_catalog`.`default_database`.`Customer`)
   ;
   INSERT INTO `default_catalog`.`default_database`.`CustomerByTime2_5`
    (SELECT *
     FROM `default_catalog`.`default_database`.`Customer`)
    ;
    INSERT INTO `default_catalog`.`default_database`.`CustomerFilteredDistinct_6`
     (SELECT *
      FROM `default_catalog`.`default_database`.`CustomerFilteredDistinct`)
     ;
     INSERT INTO `default_catalog`.`default_database`.`CustomerSubscription_7`
      (SELECT *
       FROM `default_catalog`.`default_database`.`CustomerSubscription`)
      ;
      INSERT INTO `default_catalog`.`default_database`.`TimeWindow_8`
       (SELECT *
        FROM `default_catalog`.`default_database`.`CustomerTimeWindow`)
       ;
       INSERT INTO `default_catalog`.`default_database`.`CustomerTimeWindow_9`
        (SELECT *
         FROM `default_catalog`.`default_database`.`CustomerTimeWindow`)
        ;
        INSERT INTO `default_catalog`.`default_database`.`ExplicitDistinct_10`
         (SELECT *
          FROM `default_catalog`.`default_database`.`ExplicitDistinct`)
         ;
         INSERT INTO `default_catalog`.`default_database`.`ExternalOrders_11`
          (SELECT `id`, `customerid`, `time`, `to_jsonb`(`entries`) AS `entries`
           FROM `default_catalog`.`default_database`.`ExternalOrders`)
          ;
          INSERT INTO `default_catalog`.`default_database`.`InvalidDistinct_12`
           (SELECT *
            FROM `default_catalog`.`default_database`.`InvalidDistinct`)
           ;
           INSERT INTO `default_catalog`.`default_database`.`Orders_13`
            (SELECT *
             FROM `default_catalog`.`default_database`.`Orders`)
            ;
            INSERT INTO `default_catalog`.`default_database`.`SelectCustomers_14`
             (SELECT *
              FROM `default_catalog`.`default_database`.`SelectCustomers`)
             ;
             INSERT INTO `default_catalog`.`default_database`.`customersink_ex2`
              (SELECT *
               FROM `default_catalog`.`default_database`.`TemporalJoin`)
              ;
              INSERT INTO `default_catalog`.`default_database`.`TemporalJoin_15`
               (SELECT `id`, `customerid`, `time`, `to_jsonb`(`entries`) AS `entries`, `customerid0`, CAST(`timestamp` AS TIMESTAMP(3) WITH LOCAL TIME ZONE) AS `timestamp`, `name`
                FROM `default_catalog`.`default_database`.`TemporalJoin`)
               ;
               INSERT INTO `default_catalog`.`default_database`.`UnnestOrders_16`
                (SELECT `id`, `customerid`, `time`, `productid`, `quantity`, `discount`, `newId`, `hash_columns`(`id`, `customerid`, `time`, `productid`, `quantity`, `discount`, `newId`) AS `__pk_hash`
                 FROM `default_catalog`.`default_database`.`UnnestOrders`)
                ;
                END
>>>kafka.json
{
  "topics" : [
    {
      "topicName" : "Customer",
      "tableName" : "Customer_3",
      "format" : "flexible-json",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "config" : { }
    },
    {
      "topicName" : "CustomerSubscription",
      "tableName" : "CustomerSubscription_7",
      "format" : "flexible-json",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "config" : { }
    },
    {
      "topicName" : "Orders",
      "tableName" : "Orders",
      "format" : "flexible-json",
      "numPartitions" : 1,
      "replicationFactor" : 1,
      "config" : { }
    }
  ],
  "testRunnerTopics" : [ ]
}
>>>postgres-schema.sql
CREATE TABLE IF NOT EXISTS "AnotherCustomer" ("customerid" BIGINT NOT NULL, "email" TEXT NOT NULL, "lastUpdated" BIGINT NOT NULL, PRIMARY KEY ("customerid","lastUpdated"));
CREATE TABLE IF NOT EXISTS "Customer" ("customerid" BIGINT NOT NULL, "email" TEXT NOT NULL, "name" TEXT NOT NULL, "lastUpdated" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("customerid","lastUpdated"));
CREATE TABLE IF NOT EXISTS "CustomerByMultipleTime" ("customerid" BIGINT NOT NULL, "email" TEXT NOT NULL, "name" TEXT NOT NULL, "lastUpdated" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("customerid","email"));
CREATE TABLE IF NOT EXISTS "CustomerByTime2" ("customerid" BIGINT NOT NULL, "email" TEXT NOT NULL, "name" TEXT NOT NULL, "lastUpdated" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS "CustomerFilteredDistinct" ("customerid" BIGINT NOT NULL, "email" TEXT NOT NULL, "name" TEXT NOT NULL, "lastUpdated" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS "CustomerTimeWindow" ("window_start" TIMESTAMP WITHOUT TIME ZONE NOT NULL, "window_end" TIMESTAMP WITHOUT TIME ZONE NOT NULL, "unique_email_count" BIGINT NOT NULL, PRIMARY KEY ("window_start","window_end"));
CREATE TABLE IF NOT EXISTS "ExplicitDistinct" ("customerid" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL, "name" TEXT NOT NULL, PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS "ExternalOrders" ("id" BIGINT NOT NULL, "customerid" BIGINT NOT NULL, "time" TIMESTAMP WITH TIME ZONE NOT NULL, "entries" JSONB, PRIMARY KEY ("id","time"));
CREATE TABLE IF NOT EXISTS "InvalidDistinct" ("customerid" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL, "namee" TEXT NOT NULL, PRIMARY KEY ("customerid"));
CREATE TABLE IF NOT EXISTS "Orders" ("orderid" INTEGER NOT NULL, "amount" FLOAT, PRIMARY KEY ("orderid"));
CREATE TABLE IF NOT EXISTS "SelectCustomers" ("customerid" BIGINT NOT NULL, "email" TEXT NOT NULL, "name" TEXT NOT NULL, "lastUpdated" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("customerid","name"));
CREATE TABLE IF NOT EXISTS "TemporalJoin" ("id" BIGINT NOT NULL, "customerid" BIGINT NOT NULL, "time" TIMESTAMP WITH TIME ZONE NOT NULL, "entries" JSONB, "customerid0" BIGINT NOT NULL, "timestamp" TIMESTAMP WITH TIME ZONE NOT NULL, "name" TEXT NOT NULL, PRIMARY KEY ("id","time"));
CREATE TABLE IF NOT EXISTS "UnnestOrders" ("id" BIGINT NOT NULL, "customerid" BIGINT NOT NULL, "time" TIMESTAMP WITH TIME ZONE NOT NULL, "productid" BIGINT NOT NULL, "quantity" BIGINT NOT NULL, "discount" DOUBLE PRECISION, "newId" BIGINT NOT NULL, "__pk_hash" TEXT, PRIMARY KEY ("__pk_hash"));

CREATE INDEX IF NOT EXISTS "SelectCustomers_hash_c2" ON "SelectCustomers" USING hash ("name")
>>>postgres-views.sql
CREATE OR REPLACE VIEW "CustomerTimeWindowTest"("window_start", "window_end", "unique_email_count") AS SELECT *
FROM (SELECT "window_start", "window_end", "unique_email_count"
  FROM "CustomerTimeWindow"
  ORDER BY "window_end" DESC NULLS LAST) AS "t3";
CREATE OR REPLACE VIEW "MissedTemporalJoin"("id", "customerid", "time", "entries", "customerid0", "timestamp", "name") AS SELECT *
FROM "ExternalOrders" AS "ExternalOrders0"
 INNER JOIN "ExplicitDistinct" AS "ExplicitDistinct0" ON "ExternalOrders0"."customerid" = "ExplicitDistinct0"."customerid"
>>>vertx.json
{
  "models" : {
    "v1" : {
      "queries" : [
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "TableFunctionCallsTblFct",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "arg2"
              },
              {
                "type" : "variable",
                "path" : "arg1"
              },
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT *\nFROM (SELECT *\n  FROM \"Customer\"\n  WHERE \"customerid\" > $2) AS \"t0\"\nWHERE \"customerid\" > $1",
              "parameters" : [
                {
                  "type" : "arg",
                  "path" : "arg1"
                },
                {
                  "type" : "arg",
                  "path" : "arg2"
                }
              ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        },
        {
          "type" : "args",
          "parentType" : "Customer",
          "fieldName" : "related",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT *\nFROM \"Customer\"\nWHERE $1 = \"customerid\"\nORDER BY \"timestamp\" NULLS FIRST",
              "parameters" : [
                {
                  "type" : "source",
                  "key" : "customerid"
                }
              ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        },
        {
          "type" : "args",
          "parentType" : "Customer",
          "fieldName" : "relatedByLength",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "length"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT *\nFROM \"Customer\"\nWHERE $2 = \"customerid\" AND CHAR_LENGTH(\"email\") >= $1\nORDER BY \"timestamp\" NULLS FIRST",
              "parameters" : [
                {
                  "type" : "arg",
                  "path" : "length"
                },
                {
                  "type" : "source",
                  "key" : "customerid"
                }
              ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        }
      ],
      "mutations" : [ ],
      "subscriptions" : [ ],
      "operations" : [
        {
          "function" : {
            "name" : "GetTableFunctionCallsTblFct",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "arg2" : {
                  "type" : "integer"
                },
                "offset" : {
                  "type" : "integer"
                },
                "arg1" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [
                "arg2",
                "arg1"
              ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query TableFunctionCallsTblFct($arg2: Int!, $arg1: Int!, $limit: Int = 10, $offset: Int = 0) {\nTableFunctionCallsTblFct(arg2: $arg2, arg1: $arg1, limit: $limit, offset: $offset) {\ncustomerid\nemail\nname\nlastUpdated\ntimestamp\n}\n\n}",
            "queryName" : "TableFunctionCallsTblFct",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/TableFunctionCallsTblFct{?arg2,offset,arg1,limit}"
        }
      ],
      "schema" : {
        "type" : "string",
        "schema" : "\"An RFC-3339 compliant DateTime Scalar\"\nscalar DateTime\n\"A 64-bit signed integer\"\nscalar Long\n\ntype Customer {\n    customerid: Long!\n    email: String!\n    name: String!\n    lastUpdated: Long!\n    timestamp: DateTime!\n    related(limit: Int = 10, offset: Int = 0): [Customer!]\n    relatedByLength(length: Int!, limit: Int = 10, offset: Int = 0): [Customer!]\n}\n\ntype Query {\n    TableFunctionCallsTblFct(arg2: Int!, arg1: Int!, limit: Int = 10, offset: Int = 0): [Customer!]\n}\n"
      }
    }
  }
}
