>>>pipeline_explain.txt
=== MachineReading
ID:     default_catalog.default_database.MachineReading
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.Sensors, default_catalog.default_database._SensorReading
Annotations:
 - stream-root: _SensorReading
Primary Key: -
Timestamp  : event_time
Schema:
 - sensorid: INTEGER
 - temperature: FLOAT
 - event_time: TIMESTAMP_LTZ(3) *ROWTIME*
 - machineid: INTEGER
Plan:
LogicalProject(sensorid=[$1], temperature=[$2], event_time=[$3], machineid=[$5])
  LogicalCorrelate(correlation=[$cor1], joinType=[inner], requiredColumns=[{1, 3}])
    LogicalTableScan(table=[[default_catalog, default_database, _SensorReading]])
    LogicalFilter(condition=[=($cor1.sensorid, $0)])
      LogicalSnapshot(period=[$cor1.event_time])
        LogicalTableScan(table=[[default_catalog, default_database, Sensors]])
SQL: CREATE VIEW `MachineReading` AS  SELECT r.sensorid, r.temperature, r.event_time, s.machineid
                  FROM _SensorReading r JOIN Sensors FOR SYSTEM_TIME AS OF r.event_time s ON r.sensorid = s.sensorid;

=== MachineTempByHour
ID:     default_catalog.default_database.MachineTempByHour
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database.MachineReading
Annotations:
 - features: STREAM_WINDOW_AGGREGATION (feature)
 - stream-root: _SensorReading
Primary Key: -
Timestamp  : time_hour
Schema:
 - machineid: INTEGER
 - time_hour: TIMESTAMP_LTZ(3) *ROWTIME* NOT NULL
 - avg_temperature: FLOAT
Plan:
LogicalProject(machineid=[$0], time_hour=[$3], avg_temperature=[$4])
  LogicalAggregate(group=[{0, 1, 2, 3}], avg_temperature=[AVG($4)])
    LogicalProject(machineid=[$3], window_start=[$4], window_end=[$5], time_hour=[$6], temperature=[$1])
      LogicalTableFunctionScan(invocation=[TUMBLE(DESCRIPTOR($2), 3600000:INTERVAL MINUTE)], rowType=[RecordType(INTEGER sensorid, FLOAT temperature, TIMESTAMP_LTZ(3) *ROWTIME* event_time, INTEGER machineid, TIMESTAMP(3) window_start, TIMESTAMP(3) window_end, TIMESTAMP_LTZ(3) *ROWTIME* window_time)])
        LogicalProject(sensorid=[$0], temperature=[$1], event_time=[$2], machineid=[$3])
          LogicalTableScan(table=[[default_catalog, default_database, MachineReading]])
SQL: CREATE VIEW `MachineTempByHour` AS  SELECT machineid, window_time as time_hour, AVG(temperature) AS avg_temperature
                     FROM TABLE(TUMBLE(TABLE MachineReading, DESCRIPTOR(event_time), INTERVAL '60' MINUTES))
                     GROUP BY machineid, window_start, window_end, window_time;

=== Sensors
ID:     default_catalog.default_database.Sensors
Type:   state
Stage:  flink
Inputs: default_catalog.default_database.Sensors__base
Primary Key: sensorid
Timestamp  : updatedTime
Schema:
 - sensorid: INTEGER NOT NULL
 - machineid: INTEGER
 - updatedTime: TIMESTAMP_LTZ(3) *ROWTIME*
Plan:
LogicalWatermarkAssigner(rowtime=[updatedTime], watermark=[-($2, 0:INTERVAL SECOND)])
  LogicalProject(sensorid=[$0], machineid=[$1], updatedTime=[CAST($2):TIMESTAMP_LTZ(3) *ROWTIME*])
    LogicalTableScan(table=[[default_catalog, default_database, Sensors, metadata=[timestamp]]])
SQL: CREATE VIEW `Sensors__view`
AS
SELECT `Sensors`.`sensorid`, `Sensors`.`machineid`, `Sensors`.`updatedTime`
FROM `default_catalog`.`default_database`.`Sensors` AS `Sensors`
=== _SensorReading
ID:     default_catalog.default_database._SensorReading
Type:   stream
Stage:  flink
Inputs: default_catalog.default_database._SensorReading__base
Annotations:
 - stream-root: _SensorReading
Primary Key: event_id
Timestamp  : event_time
Schema:
 - event_id: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - sensorid: INTEGER
 - temperature: FLOAT
 - event_time: TIMESTAMP_LTZ(3) *ROWTIME*
Plan:
LogicalWatermarkAssigner(rowtime=[event_time], watermark=[-($3, 0:INTERVAL SECOND)])
  LogicalProject(event_id=[$0], sensorid=[$1], temperature=[$2], event_time=[CAST($3):TIMESTAMP_LTZ(3) *ROWTIME*])
    LogicalTableScan(table=[[default_catalog, default_database, _SensorReading, metadata=[timestamp]]])
SQL: CREATE VIEW `_SensorReading__view`
AS
SELECT `_SensorReading`.`event_id`, `_SensorReading`.`sensorid`, `_SensorReading`.`temperature`, `_SensorReading`.`event_time`
FROM `default_catalog`.`default_database`.`_SensorReading` AS `_SensorReading`
>>>flink-sql-no-functions.sql
CREATE TABLE `Sensors` (
  `sensorid` INTEGER,
  `machineid` INTEGER,
  `updatedTime` TIMESTAMP_LTZ(3) METADATA FROM 'timestamp',
  PRIMARY KEY (`sensorid`) NOT ENFORCED,
  WATERMARK FOR `updatedTime` AS `updatedTime` - INTERVAL '0.0' SECOND
) WITH (
  'connector' = 'upsert-kafka',
  'key.flexible-json.timestamp-format.standard' = 'ISO-8601',
  'key.format' = 'flexible-json',
  'properties.auto.offset.reset' = 'earliest',
  'properties.bootstrap.servers' = '${KAFKA_BOOTSTRAP_SERVERS}',
  'properties.group.id' = '${KAFKA_GROUP_ID}',
  'properties.isolation.level' = 'read_committed',
  'topic' = 'kafka-mutation-Sensors',
  'value.flexible-json.timestamp-format.standard' = 'ISO-8601',
  'value.format' = 'flexible-json'
);
CREATE TABLE `_SensorReading` (
  `event_id` STRING NOT NULL,
  `sensorid` INTEGER,
  `temperature` FLOAT,
  `event_time` TIMESTAMP_LTZ(3) METADATA FROM 'timestamp',
  WATERMARK FOR `event_time` AS `event_time` - INTERVAL '0.0' SECOND
) WITH (
  'connector' = 'kafka',
  'flexible-json.timestamp-format.standard' = 'ISO-8601',
  'format' = 'flexible-json',
  'properties.auto.offset.reset' = 'earliest',
  'properties.bootstrap.servers' = '${KAFKA_BOOTSTRAP_SERVERS}',
  'properties.group.id' = '${KAFKA_GROUP_ID}',
  'topic' = 'kafka-mutation-_SensorReading'
);
CREATE VIEW `MachineReading`
AS
SELECT `r`.`sensorid`, `r`.`temperature`, `r`.`event_time`, `s`.`machineid`
FROM `_SensorReading` AS `r`
 INNER JOIN `Sensors` FOR SYSTEM_TIME AS OF `r`.`event_time` AS `s` ON `r`.`sensorid` = `s`.`sensorid`;
CREATE VIEW `MachineTempByHour`
AS
SELECT `machineid`, `window_time` AS `time_hour`, AVG(`temperature`) AS `avg_temperature`
FROM TABLE(TUMBLE(TABLE `MachineReading`, DESCRIPTOR(`event_time`), INTERVAL '60' MINUTE))
GROUP BY `machineid`, `window_start`, `window_end`, `window_time`;
CREATE TABLE `MachineReading_1` (
  `sensorid` INTEGER,
  `temperature` FLOAT,
  `event_time` TIMESTAMP(3) WITH LOCAL TIME ZONE,
  `machineid` INTEGER,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'MachineReading_1',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `MachineTempByHour_2` (
  `machineid` INTEGER,
  `time_hour` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `avg_temperature` FLOAT,
  `__pk_hash` CHAR(32) CHARACTER SET `UTF-16LE`,
  PRIMARY KEY (`__pk_hash`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'MachineTempByHour_2',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
CREATE TABLE `Sensors_3` (
  `sensorid` INTEGER NOT NULL,
  `machineid` INTEGER,
  `updatedTime` TIMESTAMP(3) WITH LOCAL TIME ZONE,
  PRIMARY KEY (`sensorid`) NOT ENFORCED
) WITH (
  'connector' = 'jdbc-sqrl',
  'driver' = 'org.postgresql.Driver',
  'password' = '${POSTGRES_PASSWORD}',
  'table-name' = 'Sensors_3',
  'url' = 'jdbc:postgresql://${POSTGRES_AUTHORITY}',
  'username' = '${POSTGRES_USERNAME}'
);
EXECUTE STATEMENT SET BEGIN
INSERT INTO `default_catalog`.`default_database`.`MachineReading_1`
(SELECT `sensorid`, `temperature`, `event_time`, `machineid`, `hash_columns`(`sensorid`, `temperature`, `event_time`, `machineid`) AS `__pk_hash`
 FROM `default_catalog`.`default_database`.`MachineReading`)
;
INSERT INTO `default_catalog`.`default_database`.`MachineTempByHour_2`
 (SELECT `machineid`, `time_hour`, `avg_temperature`, `hash_columns`(`machineid`, `time_hour`, `avg_temperature`) AS `__pk_hash`
  FROM `default_catalog`.`default_database`.`MachineTempByHour`)
 ;
 INSERT INTO `default_catalog`.`default_database`.`Sensors_3`
  (SELECT *
   FROM `default_catalog`.`default_database`.`Sensors`)
  ;
  END
>>>kafka.json
{
  "topics" : [
    {
      "topicName" : "kafka-mutation-Sensors",
      "tableName" : "Sensors",
      "format" : "flexible-json",
      "numPartitions" : 1,
      "replicationFactor" : 3,
      "config" : { }
    },
    {
      "topicName" : "kafka-mutation-_SensorReading",
      "tableName" : "_SensorReading",
      "format" : "flexible-json",
      "numPartitions" : 1,
      "replicationFactor" : 3,
      "config" : { }
    }
  ],
  "testRunnerTopics" : [ ]
}
>>>postgres.json
{
  "statements" : [
    {
      "name" : "MachineReading_1",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"MachineReading_1\" (\"sensorid\" INTEGER, \"temperature\" FLOAT, \"event_time\" TIMESTAMP WITH TIME ZONE, \"machineid\" INTEGER, \"__pk_hash\" TEXT, PRIMARY KEY (\"__pk_hash\"))",
      "fields" : [
        {
          "name" : "sensorid",
          "type" : "INTEGER",
          "nullable" : true
        },
        {
          "name" : "temperature",
          "type" : "FLOAT",
          "nullable" : true
        },
        {
          "name" : "event_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : true
        },
        {
          "name" : "machineid",
          "type" : "INTEGER",
          "nullable" : true
        },
        {
          "name" : "__pk_hash",
          "type" : "TEXT",
          "nullable" : true
        }
      ],
      "primaryKey" : [
        "__pk_hash"
      ],
      "partitionKey" : [ ],
      "partitionType" : "NONE",
      "numPartitions" : 0,
      "ttl" : 0.0
    },
    {
      "name" : "MachineTempByHour_2",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"MachineTempByHour_2\" (\"machineid\" INTEGER, \"time_hour\" TIMESTAMP WITH TIME ZONE NOT NULL, \"avg_temperature\" FLOAT, \"__pk_hash\" TEXT, PRIMARY KEY (\"__pk_hash\"))",
      "fields" : [
        {
          "name" : "machineid",
          "type" : "INTEGER",
          "nullable" : true
        },
        {
          "name" : "time_hour",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "avg_temperature",
          "type" : "FLOAT",
          "nullable" : true
        },
        {
          "name" : "__pk_hash",
          "type" : "TEXT",
          "nullable" : true
        }
      ],
      "primaryKey" : [
        "__pk_hash"
      ],
      "partitionKey" : [ ],
      "partitionType" : "NONE",
      "numPartitions" : 0,
      "ttl" : 0.0
    },
    {
      "name" : "Sensors_3",
      "type" : "TABLE",
      "sql" : "CREATE TABLE IF NOT EXISTS \"Sensors_3\" (\"sensorid\" INTEGER NOT NULL, \"machineid\" INTEGER, \"updatedTime\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"sensorid\"))",
      "fields" : [
        {
          "name" : "sensorid",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "machineid",
          "type" : "INTEGER",
          "nullable" : true
        },
        {
          "name" : "updatedTime",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : true
        }
      ],
      "primaryKey" : [
        "sensorid"
      ],
      "partitionKey" : [ ],
      "partitionType" : "NONE",
      "numPartitions" : 0,
      "ttl" : 0.0
    },
    {
      "name" : "MachineReading",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"MachineReading\"(\"sensorid\", \"temperature\", \"event_time\", \"machineid\") AS SELECT \"sensorid\", \"temperature\", \"event_time\", \"machineid\"\nFROM \"MachineReading_1\"",
      "fields" : [
        {
          "name" : "sensorid",
          "type" : "INTEGER",
          "nullable" : true
        },
        {
          "name" : "temperature",
          "type" : "FLOAT",
          "nullable" : true
        },
        {
          "name" : "event_time",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : true
        },
        {
          "name" : "machineid",
          "type" : "INTEGER",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "MachineTempByHour",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"MachineTempByHour\"(\"machineid\", \"time_hour\", \"avg_temperature\") AS SELECT \"machineid\", \"time_hour\", \"avg_temperature\"\nFROM \"MachineTempByHour_2\"",
      "fields" : [
        {
          "name" : "machineid",
          "type" : "INTEGER",
          "nullable" : true
        },
        {
          "name" : "time_hour",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : false
        },
        {
          "name" : "avg_temperature",
          "type" : "FLOAT",
          "nullable" : true
        }
      ]
    },
    {
      "name" : "Sensors",
      "type" : "VIEW",
      "sql" : "CREATE OR REPLACE VIEW \"Sensors\"(\"sensorid\", \"machineid\", \"updatedTime\") AS SELECT *\nFROM \"Sensors_3\"",
      "fields" : [
        {
          "name" : "sensorid",
          "type" : "INTEGER",
          "nullable" : false
        },
        {
          "name" : "machineid",
          "type" : "INTEGER",
          "nullable" : true
        },
        {
          "name" : "updatedTime",
          "type" : "TIMESTAMP WITH TIME ZONE",
          "nullable" : true
        }
      ]
    }
  ]
}
>>>vertx.json
{
  "models" : {
    "v1" : {
      "queries" : [
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "MachineReading",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT \"sensorid\", \"temperature\", \"event_time\", \"machineid\"\nFROM \"MachineReading_1\"",
              "parameters" : [ ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        },
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "MachineTempByHour",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT \"machineid\", \"time_hour\", \"avg_temperature\"\nFROM \"MachineTempByHour_2\"",
              "parameters" : [ ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        },
        {
          "type" : "args",
          "parentType" : "Query",
          "fieldName" : "Sensors",
          "exec" : {
            "arguments" : [
              {
                "type" : "variable",
                "path" : "offset"
              },
              {
                "type" : "variable",
                "path" : "limit"
              }
            ],
            "query" : {
              "type" : "SqlQuery",
              "sql" : "SELECT *\nFROM \"Sensors_3\"",
              "parameters" : [ ],
              "pagination" : "LIMIT_AND_OFFSET",
              "cacheDurationMs" : 0,
              "database" : "POSTGRES"
            }
          }
        }
      ],
      "mutations" : [
        {
          "type" : "kafka",
          "fieldName" : "Sensors",
          "returnList" : true,
          "topic" : "kafka-mutation-Sensors",
          "computedColumns" : {
            "updatedTime" : "TIMESTAMP"
          },
          "transactional" : true,
          "sinkConfig" : { }
        },
        {
          "type" : "kafka",
          "fieldName" : "_SensorReading",
          "returnList" : true,
          "topic" : "kafka-mutation-_SensorReading",
          "computedColumns" : {
            "event_id" : "UUID",
            "event_time" : "TIMESTAMP"
          },
          "transactional" : false,
          "sinkConfig" : { }
        }
      ],
      "subscriptions" : [ ],
      "operations" : [
        {
          "function" : {
            "name" : "GetMachineReading",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [ ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query MachineReading($limit: Int = 10, $offset: Int = 0) {\nMachineReading(limit: $limit, offset: $offset) {\nsensorid\ntemperature\nevent_time\nmachineid\n}\n\n}",
            "queryName" : "MachineReading",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/MachineReading{?offset,limit}"
        },
        {
          "function" : {
            "name" : "GetMachineTempByHour",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [ ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query MachineTempByHour($limit: Int = 10, $offset: Int = 0) {\nMachineTempByHour(limit: $limit, offset: $offset) {\nmachineid\ntime_hour\navg_temperature\n}\n\n}",
            "queryName" : "MachineTempByHour",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/MachineTempByHour{?offset,limit}"
        },
        {
          "function" : {
            "name" : "GetSensors",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "offset" : {
                  "type" : "integer"
                },
                "limit" : {
                  "type" : "integer"
                }
              },
              "required" : [ ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "query Sensors($limit: Int = 10, $offset: Int = 0) {\nSensors(limit: $limit, offset: $offset) {\nsensorid\nmachineid\nupdatedTime\n}\n\n}",
            "queryName" : "Sensors",
            "operationType" : "QUERY"
          },
          "mcpMethod" : "TOOL",
          "restMethod" : "GET",
          "uriTemplate" : "queries/Sensors{?offset,limit}"
        },
        {
          "function" : {
            "name" : "AddSensors",
            "parameters" : {
              "type" : "object",
              "properties" : {
                "event" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "machineid" : {
                        "type" : "integer"
                      },
                      "sensorid" : {
                        "type" : "integer"
                      }
                    },
                    "required" : [
                      "sensorid"
                    ]
                  }
                }
              },
              "required" : [
                "event"
              ]
            }
          },
          "format" : "JSON",
          "apiQuery" : {
            "query" : "mutation Sensors($event: [SensorsInput!]!) {\nSensors(event: $event) {\nsensorid\nmachineid\nupdatedTime\n}\n\n}",
            "queryName" : "Sensors",
            "operationType" : "MUTATION"
          },
          "mcpMethod" : "NONE",
          "restMethod" : "POST",
          "uriTemplate" : "mutations/Sensors"
        }
      ],
      "schema" : {
        "type" : "string",
        "schema" : "\"An RFC-3339 compliant Full Date Scalar\"\nscalar Date\n\n\"A DateTime scalar that handles both full RFC3339 and shorter timestamp formats\"\nscalar DateTime\n\n\"A JSON scalar\"\nscalar JSON\n\n\"24-hour clock time value string in the format `hh:mm:ss` or `hh:mm:ss.sss`.\"\nscalar LocalTime\n\n\"A 64-bit signed integer\"\nscalar Long\n\ntype MachineReading {\n  sensorid: Int\n  temperature: Float\n  event_time: DateTime\n  machineid: Int\n}\n\ntype MachineTempByHour {\n  machineid: Int\n  time_hour: DateTime!\n  avg_temperature: Float\n}\n\ntype Mutation {\n  Sensors(event: [SensorsInput!]!): [SensorsResultOutput!]!\n  _SensorReading(event: [_SensorReadingInput!]!): [_SensorReadingResultOutput!]!\n}\n\ntype Query {\n  MachineReading(limit: Int = 10, offset: Int = 0): [MachineReading!]\n  MachineTempByHour(limit: Int = 10, offset: Int = 0): [MachineTempByHour!]\n  Sensors(limit: Int = 10, offset: Int = 0): [Sensors!]\n}\n\ntype Sensors {\n  sensorid: Int!\n  machineid: Int\n  updatedTime: DateTime\n}\n\ninput SensorsInput {\n  sensorid: Int!\n  machineid: Int\n}\n\ntype SensorsResultOutput {\n  sensorid: Int!\n  machineid: Int\n  updatedTime: DateTime\n}\n\nenum _McpMethodType {\n  NONE\n  TOOL\n  RESOURCE\n}\n\nenum _RestMethodType {\n  NONE\n  GET\n  POST\n}\n\ninput _SensorReadingInput {\n  sensorid: Int\n  temperature: Float\n}\n\ntype _SensorReadingResultOutput {\n  event_id: String!\n  sensorid: Int\n  temperature: Float\n  event_time: DateTime\n}\n\ndirective @api(mcp: _McpMethodType, rest: _RestMethodType, uri: String) on QUERY | MUTATION | FIELD_DEFINITION\n"
      }
    }
  }
}
