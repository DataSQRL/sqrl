type Query {
  ObservationGroup(groupId: Int): [ObservationGroup!]
  PatientHourly(patientid: Int!, limit: Int = 20, offset: Int = 0): [PatientHourly!]
  PatientLastHour(patientid: Int!): PatientLastHour!
}

type ObservationGroup {
  groupId: Int!
  groupName: String!
  created: String!
  patients: [patients!]
  lastHour: lastHour!
}

type patients {
  patientId: Int!
  hourly(limit: Int = 20, offset: Int = 0): [PatientHourly!]
  lastHour: PatientLastHour!
}

type lastHour {
  maxTemp: Float!
  minTemp: Float!
}

type PatientHourly {
  patientid: Int!
  timeHour: String!
  avgTemp: Float!
  maxTemp: Float!
  minTemp: Float!
}

type PatientLastHour {
  patientid: Int!
  avgTemp: Float!
  maxTemp: Float!
  minTemp: Float!
}

# ---

type Subscription {
  TempAlert(patientId: Int): TempAlert
}

type TempAlert {
  sensorid: Int!
  timeMin: String!
  patientid: Int!
  smoothTemp: Float!
}

# ---

type Mutation {
  AddReading(tempReading: ReadingInput!): CreatedReading
}

input ReadingInput {
  sensorid: Int!
  temperature: Float!
}

type CreatedReading {
  _source_time: String!
  sensorid: Int!
}
