IMPORT mysourcepackage.Books;
IMPORT time.parseTimestamp;
IMPORT mysourcepackage.Reviews TIMESTAMP parseTimestamp(date_updated, 'EEE MMM dd HH:mm:ss ZZZZZ YYYY') AS timestamp;
IMPORT string.length;
IMPORT search.BookVisit;
IMPORT text.textSearch;

Books := DISTINCT Books ON book_id ORDER BY _ingest_time DESC;

PositiveReviews := SELECT * FROM Reviews WHERE rating >= 4 AND length(review_text)>=100;

-- this should be vector embedding
PositiveReviews.vector := length(review_text);

-- this should be vector embedding
Books.description_vector := length(description + title)
BookReviewSummary := SELECT r.book_id, AVG(r.vector) AS avg_vector, COUNT(*) AS num_reviews
                        FROM PositiveReviews r GROUP BY r.book_id;

UserPreference := SELECT v.user_id, avg(avg_vector) as preference_vector
                  FROM BookVisit v TEMPORAL JOIN BookReviewSummary b ON v.book_id = b.book_id
                  WHERE v._source_time >= now() - INTERVAL 1 HOUR
                  GROUP BY v.user_id;

BookSearch(query: String) := SELECT book_id, textsearch(:query, title, description) AS score
                             FROM Books WHERE textsearch(:query, title, description) > 0
                             ORDER BY score DESC;
--BookSearch.book := JOIN Books b ON @.book_id = b.book_id;

-- this should be cosine similarity
PersonalizedBookSearch(query: String, user_id: String) :=
    SELECT s.book_id, abs(u.preference_vector - r.avg_vector) as score
    FROM (SELECT book_id FROM Books WHERE textsearch(:query, title, description) > 0
                                    ORDER BY textsearch(:query, title, description) DESC LIMIT 100) AS s
    JOIN BookReviewSummary r ON r.book_id = s.book_id
    JOIN UserPreference u ON u.user_id = :user_id
    ORDER BY score DESC;
--PersonalizedBookSearch.book := JOIN Books b ON @.book_id = b.book_id;