IMPORT funtown-data.Location AS Locations;
IMPORT funtown-data.Tracking;
IMPORT math;

Location := DISTINCT Location ON id ORDER BY timestamp DESC;

Tracking.location := JOIN Location ON @.location IN Location.geo_boundary LIMIT 1;

Visitor := SELECT DISTINCT visitor_id FROM Tracking;
Visitor.track := JOIN Tracking ON Tracking.visitor_id = @.visitor_id
                      ORDER BY timestamp DESC INVERSE visitor;
Visitor.current := JOIN @.track ORDER BY timestamp DESC LIMIT 1;

/* Count how many visitors are at a given location. Ignore old geo trackings
   that haven't updated in an hour since that means the visitors phone has died
   or gone offline
*/
Location.occupancy := SELECT COUNT(*) FROM Visitor.current vc
                      WHERE vc.location = @ AND vc.timestamp > now() - INTERVAL 1 HOUR;
Location.occupancy_rate := occupancy/capacity;

-- Create an alert when an location greatly exceeds its optimal capacity
CapacityAlert := STREAM ON ADD AS
SELECT * FROM Location WHERE occupancy_rate > 2;

Tracking.previous := JOIN Tracking t ON @.visitor_id = t.visitor_id AND t.timestamp < @.timestamp
                        AND t.timestamp > @.timestamp - INTERVAL 1 HOUR
                        ORDER BY t.timestamp DESC LIMIT 1;
Tracking.duration := @.timestamp - @.previous.timestamp;

Visitor.favorite_locations := SELECT location, SUM(duration ? INTERVAL 300 SECOND) AS time_spent,
                                     math.pow(1/math.max(location.occupancy_rate, 1.0),2)
                                     *(1+math.max(math.log(durationToNumber(time_spent,MINUTE))/2,0))
                                        AS score
                              FROM @.track
                              WHERE location IS NOT NULL AND timestamp > now() - INTERVAL 1 YEAR
                              GROUP BY location;
