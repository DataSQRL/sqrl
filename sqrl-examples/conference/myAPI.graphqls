scalar DateTime

type Query {
    PersonalizedEvents( userid: String!, tolerance: Float!, afterTime: DateTime!): [PersonalizedEvents!]
    EventsAfterTime(afterTime: DateTime!): [Events!]!
    EventSearch( query: String!, afterTime: DateTime!): [Events!]!
}

interface AbstractEvents {
    id : Int!
    time : String!
    location: String!
    title : String!
    description : String!
    name : String!
}

type LikeCount {
    num : Int
}

type Events implements AbstractEvents{
    id : Int!
    time : String!
    location: String!
    title : String!
    description : String!
    name : String!
    likeCount : LikeCount
}

type PersonalizedEvents implements AbstractEvents{
    id : Int!
    time : String!
    location: String!
    title : String!
    description : String!
    name : String!
    liked: Int!
    score: Float!
    likeCount : LikeCount
}



type Mutation {
    EventUpdate(event: EventUpdate!): EventUpdated
    Likes(liked: LikedInput!): CreatedLiked
    ReportEvent(report: EventReport!): EventReported
    AddInterest(interest: AddInterest!): InterestAdded
    EventRemoval(removal: EventRemoval!): EventRemoved
}

input EventUpdate {
    userid: String!
    id: String!
    name: String!
    email: String!
    location: String!
    time: DateTime!
    title: String!
    description: String!
    secret: String!
}

type EventUpdated {
    _source_time: String!
    userid: String!
}

input EventRemoval {
    eventId: String!
    auth_token: String!
}

type EventRemoved {
    _source_time: String!
}

input AddInterest {
    text: String!
    userid: String!
}

type InterestAdded {
    _source_time: String!
    userid: String!
}

input EventReport {
    eventId: String!
    userid: String!
}

type EventReported {
    _source_time: String!
    userid: String!
}

input LikedInput {
    eventId: String!
    userid: String!
    liked: Int!
}

type CreatedLiked {
    _source_time: String!
    userid: String!
}