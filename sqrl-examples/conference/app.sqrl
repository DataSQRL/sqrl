IMPORT mysourcepackage.Events AS ConferenceEvents TIMESTAMP last_updated AS timestamp;
IMPORT mysourcepackage.AuthTokens;
IMPORT mysourcepackage.EmailTemplates

IMPORT myAPI.Likes;
IMPORT myAPI.AddInterest;

IMPORT string.*;
IMPORT text.*;
IMPORT vector.*;
IMPORT secure.randomID;

/* requires string aggregated concatenation
ConferenceEvents.speakerSummary := SELECT concatAgg( s.name + '(' + s.title + ' at ' + s.company + ')', ', ') as name
                                 FROM @.speakers s;
 */
/* Replace with above */
ConferenceEvents.speakerSummary := SELECT CAST(sum(length(s.name) + length(s.title) + length(s.company)) AS String) as name
                                   FROM @.speakers s;

ConferenceEventsFlat := SELECT e._uuid, e.timestamp, e.id, e.time, e.title, e.description, e.location, s.name as name
                        FROM ConferenceEvents e JOIN e.speakerSummary s;

Events := SELECT * FROM ConferenceEventsFlat;

--Events.embedding := embed_text(title + description);
Events.embedding := length(description); -- replace by vector embedding

Events := DISTINCT Events ON id ORDER BY timestamp DESC;

--Interests.embedding := embed_text(text);
AddInterest.embedding := length(text); -- replace by vector embedding

UserInterests := SELECT userid, avg(embedding) as interestVector FROM AddInterest GROUP BY userid;

UserLikes := DISTINCT Likes ON userid, eventId ORDER BY _source_time DESC;


EventLikeCount := SELECT eventid, sum(liked) as num FROM UserLikes l GROUP BY eventid;
Events.likeCount := JOIN EventLikeCount l ON @.id = l.eventid;

EventsAfterTime(@afterTime: DateTime) := SELECT * FROM Events WHERE time > @afterTime
                                                             ORDER BY time ASC;

EventSearch(@query: String, @afterTime: DateTime) := SELECT * FROM Events WHERE
                        time >= @afterTime AND textsearch(@query, title, description) > 0
                        ORDER BY textsearch(@query, title, description) DESC;

-- Events that the user liked or that are similar to users interests (requires vector search)

PersonalizedEvents(@userid: String, @tolerance: Float, @afterTime: DateTime) :=
SELECT e.*, l.liked,
       coalesce(l.eventId, '') as shouldRemove1,
       i.interestVector / e.embedding as score
--       cosineSimilarity(i.interestVector, e.embedding) as score
FROM Events e
    LEFT JOIN UserLikes l ON e.id = l.eventId AND l.userid = @userid
    LEFT JOIN UserInterests i ON i.userid = @userid
    WHERE e.time > @afterTime
          AND (l.liked = 1 OR (i.interestVector IS NOT NULL AND
                               i.interestVector / CAST(e.embedding AS float) >= @tolerance))
--                               cosineSimilarity(i.interestVector, e.embedding) >= @tolerance))
    ORDER BY e.time ASC

--PersonalizedEvents.likeCount := JOIN EventLikeCount l ON @.id = l.eventid;