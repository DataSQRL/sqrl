IMPORT network-data.Traffic TIMESTAMP EPOCH_TO_TIMESTAMP(timestamp) AS ts;
IMPORT network-data.System-Membership AS SystemMembership;
IMPORT network-data.System;

-- Defining rollups that we will use for analysis

MinuteTraffic := SELECT endOfMINUTE(ts) AS time, srcIP, srcPort, destIP, destPort,
                        SUM(len) AS total_len, COUNT(*) AS num_packets
                 FROM Traffic
                 WHERE ts > now() - INTERVAL 14 DAY
                 GROUP BY endOfMINUTE(ts), srcIP, srcPort, destIP, destPort
                 ORDER BY endOfMINUTE(ts) DESC;

HourTraffic := SELECT endOfHOUR(ts) AS time, srcIP, srcPort, destIP, destPort,
                        SUM(len) AS total_len, COUNT(*) AS num_packets
                 FROM Traffic
                 WHERE ts > now() - INTERVAL 6 MONTH
                 GROUP BY endOfHOUR(ts), srcIP, srcPort, destIP, destPort
                 ORDER BY endOfHOUR(ts) DESC;

Instance :=  SELECT DISTINCT srcIP AS ip FROM Traffic
             UNION DISTINCT
             SELECT DISTINCT destIP AS ip FROM Traffic;

Instance.minuteTraffic := SELECT destIP AS otherIP, srcPort AS port, destPort AS otherPort,
                                time, total_len, num_packets, 'out' AS direction
                          FROM MinuteTraffic WHERE srcIP = @.ip
                          UNION ALL
                          SELECT srcIP AS otherIP, srcPort AS otherPort, destPort AS port,
                                time, total_len, num_packets, 'in' AS direction
                          FROM MinuteTraffic WHERE destIP = @.ip;
Instance.minuteTraffic.otherInstance := JOIN Instance ON Instance.ip = @.otherIP;


Instance.hourTraffic := SELECT destIP AS otherIP, srcPort AS port, destPort AS otherPort,
                              time, total_len, num_packets, 'out' AS direction
                          FROM HourTraffic WHERE srcIP = @.ip
                          UNION ALL
                          SELECT srcIP AS otherIP, srcPort AS otherPort, destPort AS port,
                                time, total_len, num_packets, 'in' AS direction
                          FROM HourTraffic WHERE destIP = @.ip;
Instance.hourTraffic.otherInstance := JOIN Instance ON Instance.ip = @.otherIP;

SystemMembership.valid_from := @._ingest_time;
SystemMembership.valid_to := SELECT m._ingest_time
                              FROM SystemMembership m
                              WHERE m._ingest_time > @._ingest_time
                              ORDER BY m._ingest_time ASC
                              LIMIT 1;
SystemMembership.valid_to := @.valid_to._ingest_time ? timefct.MAX_TIME();

System.membersOverTime := JOIN SystemMembership s ON s.systemid = @.systemid;
SystemMembership.instance := JOIN Instance ON Instance.ip = @.ip;

System.hourTraffic := SELECT t.time, t.direction, t.port, t.otherPort, t.otherInstance.system AS otherSystem,
                             SUM(t.total_len) AS total_len, SUM(t.num_packets) AS num_packets
                      FROM @.membersOverTime m JOIN m.instance.hourTraffic t ON t.time BETWEEN m.valid_from AND m.valid_to
                      GROUP BY time, direction, port, otherPort, otherSystem
                      ORDER BY time DESC;

System.avgTraffic := SELECT DAY_OF_WEEK(time) AS day, HOUR_OF_DAY(time) AS hour,
                            direction, port, otherPort, otherSystem,
                            AVG(remove_outlier(total_len, 0.01)) AS avg_len,
                            normal_variance(remove_outlier(total_len, 0.01)) AS variance_len,
                            AVG(remove_outlier(num_packets,0.02)) AS avg_packets
                     FROM @.hourTraffic
                     WHERE time < now() - INTERVAL 24 HOUR
                     GROUP BY day, hour, direction, port, otherPort, otherSystem
                     ORDER BY day ASC, hour ASC;

System.lastHourTraffic := SELECT DAY_OF_WEEK(t.time) AS day, HOUR_OF_DAY(t.time) AS hour,
                            t.direction, t.port, t.otherPort, t.otherInstance.system AS otherSystem,
                             SUM(t.total_len) AS total_len, SUM(t.num_packets) AS num_packets
                      FROM @.membersOverTime m JOIN m.instance.minuteTraffic t ON t.time BETWEEN m.valid_from AND m.valid_to
                      WHERE t.time > now() - INTERVAL 1 HOUR
                      GROUP BY t.time, t.direction, t.port, t.otherPort, t.otherSystem
                      ORDER BY t.time DESC;

System.lastHourTraffic.avg := JOIN @.parent.avgTraffic t ON t.day = @.day AND t.hour = @.hour;
System.hourTraffic.len_percentile :=
  normal_percentile(SELECT total_len AS value, avg.avg_len AS mean,
                                        avg.variance_len AS variance, 0 AS min FROM @);

System.lastHourTraffic.packet_percentile :=
  poisson_percentile(SELECT num_packets AS value, avg.avg_packets AS mean FROM @);

System.lastHourTraffic.outlier:=
  CASE
    WHEN len_percentile < 0.99 AND packet_percentile < 0.98 THEN 'green'
    WHEN len_percentile > 0.997 OR packet_percentile < 0.995 THEN 'red'
    ELSE 'orange'
  END;

OutlierAlert := STREAM ON ADD AS
  SELECT uuid() AS event_id, now() AS timestamp, parent AS system, othersystem,
         direction, port, otherPort, total_len, num_packets, outlier
  FROM System.lastHourTraffic
  WHERE outlier = 'red' OR outlier = 'orange';
