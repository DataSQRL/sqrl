/* Imports the Products and Orders table from the Nutshop data
   We set an explicit timestamp on the Orders stream table */
IMPORT nutshop-small.Products;
IMPORT nutshop-small.Orders TIMESTAMP epoch_to_timestamp(time/1000) AS timestamp;

/* Some order items are missing the discount field - let's clean that up */
Orders.items.discount := coalesce(discount, 0.0);

/* The Customers table are all the `customerid` that have placed an order */
Customers := SELECT DISTINCT customerid AS id FROM Orders;
/* All imported tables are streams - we convert that stream into a state table by
   picking the most recent version for each product by `id` */
Products := DISTINCT Products ON id ORDER BY updated DESC;

/* Defines a relationship `purchases` between Customers and Orders */
Customers.purchases := JOIN Orders ON Orders.customerid = @.id ORDER BY Orders.time DESC;
/* and a relationship from Orders to Products */
Orders.items.product := JOIN Products ON Products.id = @.productid;

/* Add a column to compute the total for each item in an order */
Orders.items.total := quantity * unit_price - discount;
/* Adds a nested table `totals` in Orders to compute the totals for each Order */
Orders.totals := SELECT sum(total) as price, sum(discount) as savings FROM @.items;

/* Aggregates the purchase history for each customer by month */
Customers.spending_by_month :=
         SELECT round_to_month(p.timestamp) AS month,
                sum(t.price) AS total_spend,
                sum(t.savings) AS total_savings
         FROM @.purchases p JOIN p.totals t
         GROUP BY month ORDER BY month DESC;
