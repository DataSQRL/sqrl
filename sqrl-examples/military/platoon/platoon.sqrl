IMPORT platform-data.*;

Platform.status := JOIN Platformstatus ps ON ps.prn = @.prn ORDER BY ps.timestamp DESC;
Platformstatus.platform := JOIN Platform ON @.prn = Platform.prn;

Platform.lastStatus := JOIN @.status s ORDER BY s.timestamp DESC LIMIT 1;
Platform.isReporting := @.lastStatus.timestamp > now() - INTERVAL 1 MINUTE;
Platform.isHealthy := CASE
                      WHEN @.type = 'marine' THEN EXISTS(SELECT * FROM @.lastStatus.measurements m WHERE m.type='heartrate' AND m.value > 40 AND m.value < 180)
                      WHEN @.type LIKE 'Abrams%' THEN EXISTS(SELECT * FROM @.lastStatus.measurements m WHERE m.type='online-systems' AND m.value > 85)
                      END;

Platform.tracking := JOIN PlatformTracking pt ON pt.prn = @.prn ORDER BY pt.timestamp DESC;
PlatformTracking.platform := JOIN Platform ON @.prn = Platform.prn;
Platform.lastTracking := JOIN @.tracking t ORDER BY t.timestamp DESC LIMIT 1;

Platoon := SELECT DISTINCT platoonId FROM Platform;
Platform.platoon := JOIN Platoon ON Platoon.platoonId = @.platoonId LIMIT 1;
Platoon.platforms := JOIN Platform ON @.platoonId = Platform.platoonId;

Platoon.overview := SELECT category, COUNT(*) AS number, SUM(iff(isReporting, 1, 0)) AS num_reporting, num_reporting/number AS percent_reporting,
                           SUM(iff(isHealthy, 1, 0)) AS num_healthy, num_healthy/number AS percent_healthy
                    FROM @.platforms
                    GROUP BY category;

Platoon.measurementsSummary :=
                  SELECT p.category AS category, m.type AS type, AVG(m.value) as average, MIN(m.value) as minimum,
                         MAX(m.value) as maximum
                  FROM @.platforms p JOIN p.lastStatus.measurements m
                  WHERE p.isReporting = TRUE
                  GROUP BY category, type ORDER BY category ASC, type ASC;

Platoon.location := SELECT geo.center(s.location) AS center, MAX(geo.distance(s.location, center)) AS spread FROM @.platforms p JOIN p.lastStatus s WHERE p.isReporting;

HealthAlert := STREAM ON ADD AS
SELECT prn, platoonId, isReporting, isHealthy, lastStatus FROM Platform WHERE isReporting = FALSE OR isHealthy = FALSE;

-- Entity resolution of tracked foreign platforms by clustering on location and time
-- NEED BETTER WAY TO DO THIS
PlatformTracking.tracking.uid := uid();
Platform.lastTracking.tracking.clusterid :=
  SELECT MIN(uid) FROM Platform.lastTracking.tracking t
  WHERE geo.distance(t.location, @.location) < 20 AND time.duration(t.parent.timestamp, @.parent.timestamp) < INTERVAL 20 SECOND
   AND NOT EXISTS(SELECT * FROM Platform.lastTracking.tracking t2 WHERE t2.parent = t.parent AND t2.uid != t.uid
          AND geo.distance(t2.location, @.location) < geo.distance(t.location, @.location));

TrackedForeignPlatform := SELECT clusterid, geo.center(location) as location, AVG(speed) as speed, MAX(parent.timestamp) as most_recent,
                                 COUNT(*) AS num_tracking
                           FROM Platform.lastTracking.tracking
                           GROUP BY clusterid;

TrackedForeignPlatform.closeToFriendly := JOIN Platform p ON geo.distance(p.lastStatus.location,@.location) < 50 AND p.isReporting;

Platform.lastTracking.tracking.foreign := JOIN TrackedForeignPlatform tfp ON tfp.clusterid = @.clusterid;
Platoon.trackedForeigners := JOIN @.platforms.lastTracking.tracking.foreign f ORDER BY f.clusterid ASC;
