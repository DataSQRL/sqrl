IMPORT bitcoin-data.Transactions TIMESTAMP STRING_TO_TIMESTAMP(timestamp, 'MM/dd/yyyy HH:mm:ss') AS ts;

Address := SELECT DISTINCT address FROM Transactions.outputs;

Transactions.outputs.to := JOIN Address a ON @.address = a.address ORDER BY @.parent.timestamp;
Address.received := JOIN Transactions.outputs t ON t.address = @.address;

Transactions.inputs.spent_output := JOIN Transactions t ON t.tx_hash = @.spent_tx
                                    JOIN t.outputs o ON o.index = @.out_index
                                    LIMIT 1;
Transactions.inputs.`from` := JOIN @.spent_output o
                              JOIN Address a ON a.address = o.address
                              ORDER BY @.parent.timestamp LIMIT 1;
Address.sent := JOIN Transactions.inputs.spent_output o ON @.address = o.address;

Transactions.inputs.value := @.spent_output.value;


Transactions.total_output := SUM(outputs.value);
Transactions.total_value := total_output + fee;

/* A transaction where an output address is identical to a sent address is a self-pay
   that is commonly used to split a transaction. We want to ignore those for tracing.
*/
Transactions.outputs.self_pay := EXISTS(SELECT f.address FROM @ JOIN @.parent.inputs.`from` f WHERE f.address = @.address);

Transactions.follow-transactions := JOIN @.outputs o ON (o.self_pay = FALSE)
                                    JOIN o.to.sent.parent tx ON (tx.ts > @.ts)
                                                    AND (tx.ts < @.ts + INTERVAL 14 DAY);
                                    --ORDER BY tx.total_output;

Address._flow := SELECT parent.timestamp as timestamp, value as received FROM @.received
                 UNION ALL
                 SELECT parent.timestamp as timestamp, value as sent FROM @.sent;

Address.balance := SELECT SUM(f.received)-SUM(f.sent) FROM @._flow f;

Address.flow_history := SELECT endOfDAY(f.timestamp) as day, SUM(f.received) as received_total,
                               SUM(f.sent) as sent_total, COUNT(*) as num_tx
                        FROM @._flow f
                        GROUP BY day ORDER BY day DESC;

Address.activityLevel := SELECT SUM(num_tx) FROM @.flow_history WHERE day >= now() - INTERVAL 14 DAYS;

_TxBreakdown := SELECT o.to.address AS receiverAddr, i.`from`.address AS senderAddr, endOfMONTH(tx.timestamp) AS month,
                        SUM(o.value*i.value/tx.total_value) as total_value
                FROM Transactions.outputs o JOIN o.parent tx JOIN tx.inputs i
                GROUP BY receiverAddr, senderAddr, month;

Address.receivedFrom := JOIN _TxBreakdown ON _TxBreakdown.receiverAddr = @.address
                        ORDER BY month DESC, total_value DESC;
_TxBreakdown.receiver := JOIN Address ON @.receiverAddr = Address.address;
Address.sentTo := JOIN _TxBreakdown ON _TxBreakdown.senderAddr = @.address
                  ORDER BY month DESC, total_value DESC;
_TxBreakdown.sender := JOIN Address ON @.senderAddr = Address.address;
