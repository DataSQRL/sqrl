IMPORT schema.Orders;  -- replace w/ repository
IMPORT schema.Products;
IMPORT time.*;

Orders.items.discount := discount?0.0; -- Data cleaning
Orders.items.total := quantity * unit_price - discount;
Orders.totals := SELECT sum(total) as price,
                  sum(discount) as saving FROM @.items;

Users := SELECT DISTINCT customerid AS id FROM Orders;
Users.purchases := JOIN Orders ON Orders.customerid = @.id;

Users.spending := SELECT endOfWeek(p.time) AS week,
         sum(t.price) AS spend, sum(t.saving) AS saved
      FROM @.purchases p JOIN p.totals t
      GROUP BY week ORDER BY week DESC;

-- Adding products, purchase history, and volume aggregation
Products := DISTINCT Products ON id ORDER BY updated DESC;
Orders.items.product := JOIN Products ON Products.id = @.productid;

Users.past_purchases := SELECT i.productid, count(1) as num_orders,
         sum(i.quantity) as total_quantity
      FROM @.purchases.items i
      GROUP BY i.productid
      ORDER BY num_orders DESC, total_quantity DESC;

Products.volume_today := SELECT sum(i.quantity) as quantity,
         sum(i.total) as spend, sum(i.quantity * @.weight_in_gram) as weight
      FROM @ JOIN Orders.items i ON i.productid = @.id JOIN i.parent o
      WHERE o.time > now() - INTERVAL 1 DAY;