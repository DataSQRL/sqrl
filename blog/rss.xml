<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>DataSQRL Blog</title>
        <link>https://docs.datasqrl.com/blog</link>
        <description>DataSQRL Blog</description>
        <lastBuildDate>Fri, 09 May 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Defining Data Interfaces with FlinkSQL]]></title>
            <link>https://docs.datasqrl.com/blog/flinksql-extensions</link>
            <guid>https://docs.datasqrl.com/blog/flinksql-extensions</guid>
            <pubDate>Fri, 09 May 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[FlinkSQL is an amazing innovation in data processing: it packages the power of realtime stream processing within the simplicity of SQL.]]></description>
            <content:encoded><![CDATA[
<p><a href="https://nightlies.apache.org/flink/flink-docs-release-1.19/docs/dev/table/sql/overview/" target="_blank" rel="noopener noreferrer">FlinkSQL</a> is an amazing innovation in data processing: it packages the power of realtime stream processing within the simplicity of SQL.
That means you can start with the SQL you know and introduce stream processing constructs as you need them.</p>
<img src="https://docs.datasqrl.com/img/blog/flinksql_extension_api.png" alt="FlinkSQL API Extension >" width="40%">
<p>FlinkSQL adds the ability to process data incrementally to the classic set-based semantics of SQL. In addition, FlinkSQL supports source and sink connectors making it easy to ingest data from and move data to other systems. That's a powerful combination which covers a lot of data processing use cases.</p>
<p>In fact, it only takes a few extensions to FlinkSQL to build entire data applications. Let's see how that works.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="building-data-apis-with-flinksql">Building Data APIs with FlinkSQL<a href="https://docs.datasqrl.com/blog/flinksql-extensions#building-data-apis-with-flinksql" class="hash-link" aria-label="Direct link to Building Data APIs with FlinkSQL" title="Direct link to Building Data APIs with FlinkSQL">​</a></h2>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">TABLE</span><span class="token plain"> UserTokens </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">userid </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">BIGINT</span><span class="token plain"> </span><span class="token operator">NOT</span><span class="token plain"> </span><span class="token boolean">NULL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">tokens </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">BIGINT</span><span class="token plain"> </span><span class="token operator">NOT</span><span class="token plain"> </span><span class="token boolean">NULL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">request_time TIMESTAMP_LTZ</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">NOT</span><span class="token plain"> </span><span class="token boolean">NULL</span><span class="token plain"> METADATA </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'timestamp'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/*+query_by_all(userid) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">TotalUserTokens :</span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> userid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">sum</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> total_tokens</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> total_requests</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> UserTokens </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">BY</span><span class="token plain"> userid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">UserTokensByTime</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">userid </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">BIGINT</span><span class="token plain"> </span><span class="token operator">NOT</span><span class="token plain"> </span><span class="token boolean">NULL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> fromTime </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">TIMESTAMP</span><span class="token plain"> </span><span class="token operator">NOT</span><span class="token plain"> </span><span class="token boolean">NULL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> toTime </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">TIMESTAMP</span><span class="token plain"> </span><span class="token operator">NOT</span><span class="token plain"> </span><span class="token boolean">NULL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">:</span><span class="token operator">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> UserTokens </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">WHERE</span><span class="token plain"> userid </span><span class="token operator">=</span><span class="token plain"> :userid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                request_time </span><span class="token operator">&gt;=</span><span class="token plain"> :fromTime </span><span class="token operator">AND</span><span class="token plain"> request_time </span><span class="token operator">&lt;</span><span class="token plain"> :toTime </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">BY</span><span class="token plain"> request_time </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">DESC</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">UsageAlert :</span><span class="token operator">=</span><span class="token plain"> SUBSCRIBE </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> UserTokens </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">WHERE</span><span class="token plain"> tokens </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">100000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This script defines a sequence of tables. We introduce <code>:=</code> as syntactic sugar for the verbose <code>CREATE TEMPORARY VIEW</code> syntax.</p>
<p>The <code>UserTokens</code> table does not have a configured connector, which mean we treat it as an API mutation endpoint connected to Flink via a Kafka topic that captures the events. This makes it easy to build APIs that capture user activity, transactions, or other types of events.</p>
<p>Next, we sum up the data collected through the API for each user. This is a standard FlinkSQL aggregation query and we expose the result in our API through the <code>query_by_all</code> hint which defines the arguments for the query endpoint of that table.</p>
<p>We can also explicitly define query endpoints with arguments through SQL table functions. FlinkSQL supports table functions natively. All we had to do is provide the syntax for defining the function signature.</p>
<p>And last, the <code>SUBSCRIBE</code> keyword in front of the query defines a subscription endpoint for requests exceeding a certain token count which get pushed to clients in real-time.</p>
<p>Voila, we just build ourselves a complete GraphQL API with mutation, query, and subscription endpoints.
Run the above script with DataSQRL to see the result:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">docker run -it --rm -p 8888:8888 -v $PWD:/build datasqrl/cmd run usertokens.sqrl</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="relationships-for-complex-data-structures">Relationships for Complex Data Structures<a href="https://docs.datasqrl.com/blog/flinksql-extensions#relationships-for-complex-data-structures" class="hash-link" aria-label="Direct link to Relationships for Complex Data Structures" title="Direct link to Relationships for Complex Data Structures">​</a></h2>
<p>And for extra credit, we can define relationships in FlinkSQL to represent the structure of our data explicitly and expose it in the API:</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">User</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">totalTokens :</span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> TotalUserTokens t </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">WHERE</span><span class="token plain"> this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">userid </span><span class="token operator">=</span><span class="token plain"> t</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">userid </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">LIMIT</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>User</code> table in this example is read from an upsert Kafka topic using a standard FlinkSQL <code>CREATE TABLE</code> statement.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="code-modularity-and-connector-management">Code Modularity and Connector Management<a href="https://docs.datasqrl.com/blog/flinksql-extensions#code-modularity-and-connector-management" class="hash-link" aria-label="Direct link to Code Modularity and Connector Management" title="Direct link to Code Modularity and Connector Management">​</a></h2>
<p>Many FlinkSQL projects break the codebase into multiple files for better code readability, modularity, or to swap out sources and sinks. That requires extra infrastructure to manage FlinkSQL files and stitch them together.</p>
<p>How about we do that directly in FlinkSQL?</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">IMPORT</span><span class="token plain"> source</span><span class="token operator">-</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">User</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here, we import the <code>User</code> table from a separate file within the <code>source-data</code> directory, allowing us to separate the data processing logic from the source configurations. It also enables us to use dependency management to swap out sources for local testing vs production.</p>
<p>And we can do the same for sinks:</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">EXPORT UsageAlert </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">TO</span><span class="token plain"> mysinks</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">UsageAlert</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In addition to breaking out the sink configuration from the main script, the <code>EXPORT</code> statement functions as an <code>INSERT INTO</code> statement and creates a <code>STATEMENT SET</code> implicitly. That makes the code easier to read.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="learn-more">Learn More<a href="https://docs.datasqrl.com/blog/flinksql-extensions#learn-more" class="hash-link" aria-label="Direct link to Learn More" title="Direct link to Learn More">​</a></h2>
<p><a href="https://nightlies.apache.org/flink/flink-docs-release-1.19/docs/dev/table/sql/overview/" target="_blank" rel="noopener noreferrer">FlinkSQL</a> is phenomenal extension of the SQL ecosystem to stream processing. With DataSQRL, we are trying to make it easier to build end-to-end data pipelines and complete data applications with FlinkSQL.</p>
<p>Check out the <a href="https://docs.datasqrl.com/docs/getting-started">complete example</a> which also covers testing, customization, and deployment. Or read the <a href="https://docs.datasqrl.com/docs/sqrl-language">documentation</a> to learn more.</p>]]></content:encoded>
            <category>Join</category>
            <category>Flink</category>
            <category>DataSQRL</category>
        </item>
        <item>
            <title><![CDATA[DataSQRL 0.6 Release: The Streaming Data Framework]]></title>
            <link>https://docs.datasqrl.com/blog/datasqrl-0.6-release</link>
            <guid>https://docs.datasqrl.com/blog/datasqrl-0.6-release</guid>
            <pubDate>Wed, 07 May 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[The DataSQRL community is proud to announce the release of DataSQRL 0.6. This release marks a major milestone in the evolution of our open-source project, bringing enhanced alignment with Flink SQL and powerful new capabilities to the real-time serving layer.]]></description>
            <content:encoded><![CDATA[
<p>The DataSQRL community is proud to announce the release of DataSQRL 0.6. This release marks a major milestone in the evolution of our open-source project, bringing enhanced alignment with Flink SQL and powerful new capabilities to the real-time serving layer.</p>
<img src="https://docs.datasqrl.com/img/blog/release_0.6.0.png" alt="DataSQRL 0.6.0 Release >" width="40%">
<p>You can find the full release notes and source code on our <a href="https://github.com/DataSQRL/sqrl/releases/tag/0.6.0" target="_blank" rel="noopener noreferrer">GitHub release page</a>.
To get started with the latest compiler, simply pull the latest Docker image:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">docker pull datasqrl/cmd:0.6.0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-new-chapter-flink-sql-integration">A New Chapter: Flink SQL Integration<a href="https://docs.datasqrl.com/blog/datasqrl-0.6-release#a-new-chapter-flink-sql-integration" class="hash-link" aria-label="Direct link to A New Chapter: Flink SQL Integration" title="Direct link to A New Chapter: Flink SQL Integration">​</a></h2>
<p>With DataSQRL 0.6, we are embracing the Flink ecosystem more deeply than ever before. This release introduces a complete re-architecture of the DataSQRL compiler to build directly on top of Flink SQL's parser and planner. By aligning our internal model with Flink SQL semantics, we unlock a host of new capabilities and bring DataSQRL users closer to the vibrant Flink ecosystem.</p>
<p>This architectural shift allows DataSQRL to:</p>
<ul>
<li><strong>Use Flink SQL syntax as the foundation</strong>, enabling more intuitive query definitions and easier onboarding for users familiar with Flink.</li>
<li><strong>Extend Flink SQL with domain-specific features</strong>, such as declarative relationship definitions and functions to define the data interface.</li>
<li><strong>Transpile FlinkSQL to database dialects</strong> for query execution.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="serving-layer-power-functions--relationships">Serving-Layer Power: Functions &amp; Relationships<a href="https://docs.datasqrl.com/blog/datasqrl-0.6-release#serving-layer-power-functions--relationships" class="hash-link" aria-label="Direct link to Serving-Layer Power: Functions &amp; Relationships" title="Direct link to Serving-Layer Power: Functions &amp; Relationships">​</a></h2>
<p>DataSQRL 0.6 introduces first-class support for defining <strong>functions</strong> and <strong>relationships</strong> in your SQRL scripts. These constructs make it easier to model complex application logic in a modular, declarative fashion.</p>
<p>These features are purpose-built for powering LLM-ready APIs, event-driven architectures, and real-time user-facing applications.</p>
<p>Check out the <a href="https://docs.datasqrl.com/docs/sqrl-language">language documentation</a> for details.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="developer-tooling">Developer Tooling<a href="https://docs.datasqrl.com/blog/datasqrl-0.6-release#developer-tooling" class="hash-link" aria-label="Direct link to Developer Tooling" title="Direct link to Developer Tooling">​</a></h2>
<p>DataSQRL 0.6 provides a docker image for compiling, running, and testing SQRL projects. You can now quickly iterate and check the results. Or run automated tests in CI/CD.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="deployment-artifacts">Deployment Artifacts<a href="https://docs.datasqrl.com/blog/datasqrl-0.6-release#deployment-artifacts" class="hash-link" aria-label="Direct link to Deployment Artifacts" title="Direct link to Deployment Artifacts">​</a></h2>
<p>DataSQRL 0.6 removes deployment profiles and instead generates all deployment artifacts in the <code>build/deploy/plan</code> folder. This makes it easier to integrate with Kubernetes deployment processes (e.g. via Helm) or cloud managed service deployments (e.g. via Terraform).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="breaking-changes--migration-path">Breaking Changes &amp; Migration Path<a href="https://docs.datasqrl.com/blog/datasqrl-0.6-release#breaking-changes--migration-path" class="hash-link" aria-label="Direct link to Breaking Changes &amp; Migration Path" title="Direct link to Breaking Changes &amp; Migration Path">​</a></h2>
<p>As this is a major release, <strong>DataSQRL 0.6 is not backwards compatible</strong> with version 0.5. The syntax and internal representation have been updated to align with Flink SQL and to support the new compiler architecture.</p>
<p>To help you transition, we’ve provided updated examples and migration guidance in the <a href="https://github.com/DataSQRL/datasqrl-examples" target="_blank" rel="noopener noreferrer">DataSQRL examples repository</a>. We recommend starting with one of the updated use cases to get a feel for the new workflow.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="thanks-to-the-community">Thanks to the Community<a href="https://docs.datasqrl.com/blog/datasqrl-0.6-release#thanks-to-the-community" class="hash-link" aria-label="Direct link to Thanks to the Community" title="Direct link to Thanks to the Community">​</a></h2>
<p>This release wouldn’t have been possible without the contributions, bug reports, and thoughtful feedback from our growing community. Whether you opened a pull request, filed an issue, or joined a discussion, thank you. Your support drives this project forward.</p>
<p>We’re excited to see what you build with DataSQRL 0.6. If you haven’t joined the community yet, now’s a great time to get involved: star us on <a href="https://github.com/DataSQRL/sqrl" target="_blank" rel="noopener noreferrer">GitHub</a>, try out the latest release, and share your thoughts.</p>
<p>Stay tuned for more updates, and happy building.</p>]]></content:encoded>
            <category>Release</category>
        </item>
        <item>
            <title><![CDATA[Why Temporal Join is Stream Processing’s Superpower]]></title>
            <link>https://docs.datasqrl.com/blog/temporal-join</link>
            <guid>https://docs.datasqrl.com/blog/temporal-join</guid>
            <pubDate>Mon, 10 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Stream processing technologies like Apache Flink introduce a new type of data transformation that’s very powerful: the temporal join. Temporal joins add context to data streams while being efficient and fast to execute.]]></description>
            <content:encoded><![CDATA[
<p>Stream processing technologies like Apache Flink introduce a new type of data transformation that’s very powerful: the temporal join. Temporal joins add context to data streams while being efficient and fast to execute.</p>
<img src="https://docs.datasqrl.com/img/blog/temporal_join.svg" alt="Temporal Join >" width="30%">
<p>This article introduces the temporal join, compares it to the traditional inner join, explains when to use it, and why it is a secret superpower.</p>
<p>Table of Contents:</p>
<ul>
<li><a href="https://docs.datasqrl.com/blog/temporal-join#review">The Join: A Quick Review</a></li>
<li><a href="https://docs.datasqrl.com/blog/temporal-join#tempjoin">The Temporal Join: Linking Stream and State</a></li>
<li><a href="https://docs.datasqrl.com/blog/temporal-join#tempinner">Temporal Join vs Inner Join</a></li>
<li><a href="https://docs.datasqrl.com/blog/temporal-join#efficient">Why Temporal Joins are Fast and Efficient</a></li>
<li><a href="https://docs.datasqrl.com/blog/temporal-join#easy">Temporal Joins Made Easy to Use</a></li>
<li><a href="https://docs.datasqrl.com/blog/temporal-join#summary">Summary</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="review">The Join: A Quick Review<a href="https://docs.datasqrl.com/blog/temporal-join#review" class="hash-link" aria-label="Direct link to The Join: A Quick Review" title="Direct link to The Join: A Quick Review">​</a></h2>
<p>Let's take a quick detour down memory lane and revisit the good ol' join operation. That trusty sidekick in your SQL utility belt helps you link data from two or more tables based on a related column between them.</p>
<p>Suppose we are operating a factory with a number of machines that roast and package coffee. We place sensors on each machine to monitor the temperature and detect overheating.</p>
<p>We keep track of the sensors and machines in two database tables.</p>
<p>The <code>Sensor</code> table contains the serial number and machine id that the sensor is placed on.</p>
<table><thead><tr><th>id</th><th>serialNo</th><th>machineid</th></tr></thead><tbody><tr><td>1</td><td>X57-774</td><td>501</td></tr><tr><td>2</td><td>X33-453</td><td>203</td></tr><tr><td>3</td><td>X54-554</td><td>501</td></tr></tbody></table>
<p>The <code>Machine</code> table contains the name of each machine.</p>
<table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>203</td><td>Iron Roaster</td></tr><tr><td>501</td><td>Gritty Grinder</td></tr></tbody></table>
<p>To identify all the sensors on the machine “Iron Roaster” we use the following SQL query which joins the <code>Sensor</code> and <code>Machine</code> tables:</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">serialNo </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> Sensor s </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">JOIN</span><span class="token plain"> Machine m </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">ON</span><span class="token plain"> s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">machineid </span><span class="token operator">=</span><span class="token plain"> m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">id </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">WHERE</span><span class="token plain"> m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">name </span><span class="token operator">=</span><span class="token plain"> “Iron Roaster”</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Why are joins important? Without it, your data tables are like islands, isolated and lonely. Joins bring them together, creating meaningful relationships between data, and enriching data records with context to see the bigger picture.</p>
<p>By default, databases execute joins as <strong>inner</strong> joins which means only matching records are included in the join.</p>
<p>So, now that we've refreshed our memory about the classic join, let's dive into the exciting world of temporal joins in stream processing systems like Apache Flink.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tempjoin">The Temporal Join: Linking Stream and State<a href="https://docs.datasqrl.com/blog/temporal-join#tempjoin" class="hash-link" aria-label="Direct link to The Temporal Join: Linking Stream and State" title="Direct link to The Temporal Join: Linking Stream and State">​</a></h2>
<img src="https://docs.datasqrl.com/img/blog/delorean.jpeg" alt="Temporal Join DeLorean >" width="40%">
<p>Picture this: you're a time traveler. You have the power to access any point in time, past or future, at your will. Now, imagine that your data could do the same. Enter the Temporal Join, the DeLorean of data operations, capable of taking your data on a time-traveling adventure.</p>
<p>A Temporal Join is like a regular join but with a twist. It allows you to join a stream of data (the time traveler) with a versioned table (the timeline) based on the time attribute of the data stream. This means that for each record in the stream, the join will find the most recent record in the versioned table that is less than or equal to the stream record's time.</p>
<p>The versioned table is a normal state table where we keep track of data changes over time. That is, we keep older versions of each record around to allow the stream to match the correct version in time. Like time travel, temporal joins can make your head spin a bit. Let’s look at an example to break it down.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tempinner">Temporal Join vs Inner Join<a href="https://docs.datasqrl.com/blog/temporal-join#tempinner" class="hash-link" aria-label="Direct link to Temporal Join vs Inner Join" title="Direct link to Temporal Join vs Inner Join">​</a></h2>
<p>Back to our coffee roasting factory, we collect the temperature readings from each sensor in a data stream.</p>
<table><thead><tr><th>timestamp</th><th>sensorid</th><th>temperature</th></tr></thead><tbody><tr><td>2023-07-10T07:11:08</td><td>1</td><td>105.2</td></tr><tr><td>2023-07-10T07:11:08</td><td>2</td><td>83.1</td></tr><tr><td>...</td><td></td><td></td></tr><tr><td>2023-07-10T13:25:16</td><td>1</td><td>77.8</td></tr><tr><td>2023-07-10T13:25:16</td><td>2</td><td>83.5</td></tr></tbody></table>
<p>And we want to know the maximum temperature recorded for each machine.</p>
<p>Easy enough, let’s join the temperature data stream with the Sensors table and aggregate by machine id:</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">machineid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">MAX</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">temperature</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> maxTemp </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> SensorReading r </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">INNER</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">JOIN</span><span class="token plain"> Sensor s </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">ON</span><span class="token plain"> r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sensorid </span><span class="token operator">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">id </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">BY</span><span class="token plain"> s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">machineid</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>But here is a problem: What if we moved a sensor from one machine to another during the day? With an inner join, all of the sensor’s readings would be linked to the machine it was last placed on. So, if sensor 1 records a high temperature of 105 degrees in the morning and we move the sensor to the “Iron Roaster” machine in the afternoon, then we might see the 105 degrees falsely show up as the maximum temperature for the Iron Roaster. See how time played a trick on our join?</p>
<p>And this happens whenever we join a data stream with a state table that changes over time, like our sensors that get moved around the factory. What to do? Let’s call the temporal join to our rescue:</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">machineid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">MAX</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">temperature</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> maxTemp </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> SensorReading r </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">JOIN</span><span class="token plain"> Sensor </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FOR</span><span class="token plain"> SYSTEM_TIME </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">OF</span><span class="token plain"> r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">timestamp</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> s</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">ON</span><span class="token plain"> r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sensorid </span><span class="token operator">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">id </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">BY</span><span class="token plain"> s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">machineid</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Pretty much the same query, just a different join type. Just a heads-up: the syntax for temporal joins in Flink SQL is more complex - we'll get to that <a href="https://docs.datasqrl.com/blog/temporal-join#easy">later</a>.</p>
<p>As a temporal join, we are joining each sensor reading with the version of the sensor record at the time of the data stream. In other words, the join not only matches the sensor reading with the sensor record based on the id but also based on the timestamp of the reading to ensure it matches the right version of the sensor record. Pretty neat, right?</p>
<p>Whenever you join a data stream with a state that changes over time, you want to use the temporal join to make sure your data is lined up correctly in time. Temporal joins are a powerful feature of stream processing engines that would be difficult to implement in a database.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="efficient">Why Temporal Joins are Fast and Efficient<a href="https://docs.datasqrl.com/blog/temporal-join#efficient" class="hash-link" aria-label="Direct link to Why Temporal Joins are Fast and Efficient" title="Direct link to Why Temporal Joins are Fast and Efficient">​</a></h2>
<img src="https://docs.datasqrl.com/img/blog/flink_logo.svg" alt="Apache Flink >" width="30%">
<p>Not only do temporal joins solve the time-alignment problem when joining data streams with changing state, modern stream processors like Apache Flink are also incredibly efficient at executing temporal joins. A powerful feature with great performance? Sounds too good to be true. Let’s peek behind the stream processing curtain to find out why.</p>
<p>In stream processing, joins are maintained as the underlying data changes over time. That requires the stream engine to hold all the data it needs to update join records when either side of the join changes. This makes inner joins pretty expensive on data streams.</p>
<p>Consider our max-temperature query with the inner join: When we join a temperature reading with the corresponding sensor record, and that record changes, the engine has to update the result join record. To do so, it has to store all the sensor readings to determine which join results are affected by a change in a sensor record. This can lead to a lot of updates and hence a lot of downstream computation. It can also cause system failure when there are a lot of temperature readings in our data stream because the stream engine has to store all of them.</p>
<p>Temporal joins, on the other hand, can be executed much more efficiently. The stream engine only needs to store the versions of the sensor table that are within the time bounds of the sensor reading data stream. And it only has to briefly store (if at all) the sensor reading records to ensure they are joined with the most up-to-date sensor records. Moreover, temporal joins don’t require sending out a massive amount of updated join records when sensors change placement since the join is fixed in time.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Time to Wrap Up This Temporal Journey<a href="https://docs.datasqrl.com/blog/temporal-join#summary" class="hash-link" aria-label="Direct link to Time to Wrap Up This Temporal Journey" title="Direct link to Time to Wrap Up This Temporal Journey">​</a></h2>
<p>We've reached the end of our time-traveling adventure through the universe of temporal joins. We've seen how they're like the DeLorean of data operations, zipping us back and forth through time to make sure our data matches up just right. We've also compared them to the good ol' inner join.</p>
<p>Temporal joins help us avoid the pitfalls of time-alignment problems when joining data streams with changing state. They're also super efficient, making them a great choice for high-volume, real-time data processing.</p>
<p>And that’s why the temporal join is stream processing's secret superpower.</p>
<p>DataSQRL makes using temporal joins a breeze. With its simplified syntax and smart defaults, it's like having a personal tour guide leading you through the sometimes bewildering landscape of stream processing. Take a look at our <a href="https://docs.datasqrl.com/docs/getting-started">Getting Started</a> to see a complete example of temporal joins in action or take a look at our <a href="https://docs.datasqrl.com/docs/tutorials">other tutorials</a> for a step-by-step guide to stream processing including temporal joins.</p>
<p>Happy data time-traveling, folks!</p>]]></content:encoded>
            <category>Join</category>
            <category>Flink</category>
            <category>DataSQRL</category>
        </item>
        <item>
            <title><![CDATA[Let's Uplevel Our Database Game: Meet DataSQRL]]></title>
            <link>https://docs.datasqrl.com/blog/lets-uplevel-database-datasqrl</link>
            <guid>https://docs.datasqrl.com/blog/lets-uplevel-database-datasqrl</guid>
            <pubDate>Mon, 15 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We need to make it easier to build data-driven applications. Databases are great if all your application needs is storing and retrieving data. But if you want to build anything more interesting with data - like serving users recommendations based on the pages they are visiting, detecting fraudulent transactions on your site, or computing real-time features for your machine learning model - you end up building a ton of custom code and infrastructure around the database.]]></description>
            <content:encoded><![CDATA[<p><strong>We need to make it easier to build data-driven applications.</strong> Databases are great if all your application needs is storing and retrieving data. But if you want to build anything more interesting with data - like serving users recommendations based on the pages they are visiting, detecting fraudulent transactions on your site, or computing real-time features for your machine learning model - you end up building a ton of custom code and infrastructure around the database.</p>
<p>You need a queue like Kafka to hold your events, a stream processor like Flink to process data, a database like Postgres to store and query the result data, and an API layer to tie it all together.</p>
<img src="https://docs.datasqrl.com/img/reference/full_logo.svg" alt="DataSQRL Logo >" width="30%">
<p>And that’s just the price of admission. To get a functioning data layer, you need to make sure that all these components talk to each other and that data flows smoothly between them. Schema synchronization, data model tuning, index selection, query batching … all that fun stuff.</p>
<p>The point is, you need to do a ton of data plumbing if you want to build a data-driven application. All that data plumbing code is time-consuming to develop, hard to maintain, and expensive to operate.</p>
<p>We need to make building with data easier. That’s why we are sending out this call to action to uplevel our database game. <strong>Join us in figuring out how to simplify the data layer.</strong></p>
<p>We have an idea to get us started: Meet DataSQRL.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-datasqrl">Introducing DataSQRL<a href="https://docs.datasqrl.com/blog/lets-uplevel-database-datasqrl#introducing-datasqrl" class="hash-link" aria-label="Direct link to Introducing DataSQRL" title="Direct link to Introducing DataSQRL">​</a></h2>
<p>DataSQRL is a build tool that compiles your application’s data layer from a high-level data development language, dubbed SQRL.</p>
<p>Our goal is to create a new abstraction layer above the low-level languages often used in data layers, allowing a compiler to handle the tedious tasks of data plumbing, infrastructure assembly, and configuration management.</p>
<p>Much like how you use high-level languages such as Javascript, Python, or Java instead of Assembly for software development, we believe a similar approach should be used for data.</p>
<p>SQRL is designed to be a developer-friendly version of SQL, maintaining familiar syntax while adding features necessary for building data-driven applications, like support for nested data and data streams.</p>
<p>Check out this simple SQRL script to build a recommendation engine from clickstream data.</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">IMPORT</span><span class="token plain"> clickstream</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Clickstream</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">--Import clickstream data from Kafka</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">IMPORT</span><span class="token plain"> content</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Content</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">         </span><span class="token comment" style="color:rgb(98, 114, 164)">--Import content from CDC stream</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/* Find next page visits within 10 minutes */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">_CoVisits :</span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">url </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> beforeURL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">url </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> afterURL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">event_time </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">timestamp</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> Clickstream b </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">INNER</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">JOIN</span><span class="token plain"> Clickstream a </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">ON</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">userid</span><span class="token operator">=</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">userid</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 </span><span class="token operator">AND</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">event_time </span><span class="token operator">&lt;</span><span class="token plain"> a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">event_time </span><span class="token operator">AND</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                     b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">event_time </span><span class="token operator">&gt;=</span><span class="token plain"> a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">event_time </span><span class="token operator">-</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">INTERVAL</span><span class="token plain"> </span><span class="token number">10</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">MINUTE</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/* Recommend pages that are visited shortly after */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/*+query_by_all(url) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Recommendation :</span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> beforeURL </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> afterURL </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> recommendation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                         </span><span class="token function" style="color:rgb(80, 250, 123)">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> frequency </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> _CoVisits</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">BY</span><span class="token plain"> beforeURL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> afterURL</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">BY</span><span class="token plain"> url </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">ASC</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> frequency </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">DESC</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This little SQRL script imports clickstream data, identifies pairs of URLs visited within a 10-minute interval, and compiles these pairs into a set of recommendations, ordered by the frequency of co-visits.</p>
<img src="https://docs.datasqrl.com/img/diagrams/getting_started_diagram2.png" alt="Data pipeline >">
<p>DataSQRL then takes this script and compiles it into an integrated data pipeline, complete with all necessary data plumbing pre-installed. It configures access to the clickstream. It generates an executable for the stream processor that ingests, validates, joins, and aggregates the clickstream data. It creates the data model and writes the aggregated data to the database. It synchronizes timestamps and schemas between all the components. And it compiles a server executable that queries the database and exposes the computed recommendations through a GraphQL API.</p>
<p><strong>The bottom line: These 9 lines of SQRL code can replace hundreds of lines of complex data plumbing code and save hours of infrastructure setup.</strong></p>
<p>We believe that all this low-level data plumbing work should be done by a compiler since it is tedious, time-consuming, and error-prone. Let’s uplevel our data game, so we can focus on <strong>what</strong> we are trying to build with data and less on the <strong>how</strong>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="join-us-on-this-journey">Join Us on this Journey<a href="https://docs.datasqrl.com/blog/lets-uplevel-database-datasqrl#join-us-on-this-journey" class="hash-link" aria-label="Direct link to Join Us on this Journey" title="Direct link to Join Us on this Journey">​</a></h2>
<img src="https://docs.datasqrl.com/img/undraw/code.svg" alt="Join DataSQRL Community >" width="50%">
<p>We have the ambitious goal of designing a higher level of abstraction for data to enable millions of developers to build data-driven applications.</p>
<p>We <a href="https://github.com/DataSQRL/sqrl/releases/tag/v0.1.0" target="_blank" rel="noopener noreferrer">just released</a> the first version of DataSQRL, and we recognize that we are at the beginning of a long, long road. We need your help. If you are a data nerd, like building with data, or wish it was easier, please <a href="https://github.com/DataSQRL/sqrl" target="_blank" rel="noopener noreferrer">join us on this journey</a>. DataSQRL is an open-source project, and all development activity is transparent.</p>
<p>Here are some ideas for how you can contribute:</p>
<ul>
<li>Share your thoughts: Do you have ideas on how we can improve the SQRL language or the DataSQRL compiler? Jump into <a href="https://docs.datasqrl.com/community">our community</a> and let us know!</li>
<li>Test the waters: Do you like playing with new technologies? Try out <a href="https://docs.datasqrl.com/docs/getting-started">DataSQRL</a> and let us know if you find any bugs or missing features.</li>
<li>Spread the word: Think DataSQRL has potential? Share this blog post and <a href="https://github.com/DataSQRL/sqrl" target="_blank" rel="noopener noreferrer">star</a> DataSQRL on <a href="https://github.com/DataSQRL/sqrl" target="_blank" rel="noopener noreferrer">Github</a>. Your support can help us reach more like-minded individuals.</li>
<li>Code with us: Do you enjoy contributing to open-source projects? Dive into <a href="https://github.com/DataSQRL/sqrl" target="_blank" rel="noopener noreferrer">the code</a> with us and pick up a <a href="https://github.com/DataSQRL/sqrl/issues" target="_blank" rel="noopener noreferrer">ticket</a>.</li>
</ul>
<p>Let’s uplevel our database game. With your help, we can make building with data fun and productive.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="more-information">More Information<a href="https://docs.datasqrl.com/blog/lets-uplevel-database-datasqrl#more-information" class="hash-link" aria-label="Direct link to More Information" title="Direct link to More Information">​</a></h2>
<p>You probably have a ton of questions now. How do I import my own data? How do I customize the API? How do I deploy SQRL scripts to production? How do I import functions from my favorite programming language?</p>
<p>Those are all great questions. Check out <a href="https://docs.datasqrl.com/docs/intro">the documentation</a> for answers.</p>]]></content:encoded>
            <category>DataSQRL</category>
            <category>community</category>
        </item>
    </channel>
</rss>