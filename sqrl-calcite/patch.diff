42a43
> import org.apache.calcite.sql.JoinModifier;
1033,1044c1034,1046
<         stmt = SqlSetOption(Span.of(), null)
<     |
<         stmt = SqlAlter()
<     |
< <#if (parser.createStatementParserMethods!default.parser.createStatementParserMethods)?size != 0>
<         stmt = SqlCreate()
<     |
< </#if>
< <#if (parser.dropStatementParserMethods!default.parser.dropStatementParserMethods)?size != 0>
<         stmt = SqlDrop()
<     |
< </#if>
---
> //SQRL: These statement options are not used
> //        stmt = SqlSetOption(Span.of(), null)
> //    |
> //        stmt = SqlAlter()
> //    |
> //<#if (parser.createStatementParserMethods!default.parser.createStatementParserMethods)?size != 0>
> //        stmt = SqlCreate()
> //    |
> //</#if>
> //<#if (parser.dropStatementParserMethods!default.parser.dropStatementParserMethods)?size != 0>
> //        stmt = SqlDrop()
> //    |
> //</#if>
1046,1059c1048,1061
<     |
<         stmt = SqlExplain()
<     |
<         stmt = SqlDescribe()
<     |
<         stmt = SqlInsert()
<     |
<         stmt = SqlDelete()
<     |
<         stmt = SqlUpdate()
<     |
<         stmt = SqlMerge()
<     |
<         stmt = SqlProcedureCall()
---
> //    |
> //        stmt = SqlExplain()
> //    |
> //        stmt = SqlDescribe()
> //    |
> //        stmt = SqlInsert()
> //    |
> //        stmt = SqlDelete()
> //    |
> //        stmt = SqlUpdate()
> //    |
> //        stmt = SqlMerge()
> //    |
> //        stmt = SqlProcedureCall()
1875,1902d1876
< }
< 
< SqlLiteral JoinType() :
< {
<     JoinType joinType;
< }
< {
<     (
<     LOOKAHEAD(3) // required for "LEFT SEMI JOIN" in Babel
< <#list (parser.joinTypes!default.parser.joinTypes) as method>
<         joinType = ${method}()
<     |
< </#list>
<         <JOIN> { joinType = JoinType.INNER; }
<     |
<         <INNER> <JOIN> { joinType = JoinType.INNER; }
<     |
<         <LEFT> [ <OUTER> ] <JOIN> { joinType = JoinType.LEFT; }
<     |
<         <RIGHT> [ <OUTER> ] <JOIN> { joinType = JoinType.RIGHT; }
<     |
<         <FULL> [ <OUTER> ] <JOIN> { joinType = JoinType.FULL; }
<     |
<         <CROSS> <JOIN> { joinType = JoinType.CROSS; }
<     )
<     {
<         return joinType.symbol(getPos());
<     }
1909c1883
<     final SqlLiteral natural, joinType, on, using;
---
>     final SqlLiteral natural, joinType, on, using, modifier;
1914c1888,1931
<     joinType = JoinType()
---
>      (
>             LOOKAHEAD(3)
>             <LEFT> <TEMPORAL> <JOIN> { joinType = JoinType.LEFT.symbol(getPos()); modifier = JoinModifier.TEMPORAL.symbol(getPos()); }
>         |
>             LOOKAHEAD(3)
>             <LEFT> <INTERVAL> <JOIN> { joinType = JoinType.LEFT.symbol(getPos()); modifier = JoinModifier.INTERVAL.symbol(getPos());}
>         |
>             LOOKAHEAD(3)
>             <LEFT> <DEFAULT_> <JOIN> { joinType = JoinType.LEFT.symbol(getPos()); modifier = JoinModifier.DEFAULT.symbol(getPos());}
>         |
>             LOOKAHEAD(3)
>             <RIGHT> <TEMPORAL> <JOIN> { joinType = JoinType.RIGHT.symbol(getPos()); modifier = JoinModifier.TEMPORAL.symbol(getPos());}
>         |
>             LOOKAHEAD(3)
>             <RIGHT> <INTERVAL> <JOIN> { joinType = JoinType.RIGHT.symbol(getPos()); modifier = JoinModifier.INTERVAL.symbol(getPos());}
>         |
>             LOOKAHEAD(3)
>             <RIGHT> <DEFAULT_> <JOIN> { joinType = JoinType.RIGHT.symbol(getPos());modifier = JoinModifier.DEFAULT.symbol(getPos()); }
>         |
>             <TEMPORAL> <JOIN> { joinType = JoinType.INNER.symbol(getPos()); modifier = JoinModifier.TEMPORAL.symbol(getPos());}
>         |
>             <INTERVAL> <JOIN> { joinType = JoinType.INNER.symbol(getPos()); modifier = JoinModifier.INTERVAL.symbol(getPos());}
>         |
>             <DEFAULT_> <JOIN> { joinType = JoinType.INNER.symbol(getPos()); modifier = JoinModifier.DEFAULT.symbol(getPos());}
>         |
>             <JOIN> { joinType = JoinType.INNER.symbol(getPos()); modifier = JoinModifier.DEFAULT.symbol(getPos());}
>         |
>             <INNER> <JOIN> { joinType = JoinType.INNER.symbol(getPos()); modifier = JoinModifier.NONE.symbol(getPos());}
>         |
>             LOOKAHEAD(3)
>             <LEFT> <OUTER> <JOIN> { joinType = JoinType.LEFT.symbol(getPos()); modifier = JoinModifier.OUTER.symbol(getPos());}
>         |
>             <LEFT> <JOIN> { joinType = JoinType.LEFT.symbol(getPos()); modifier = JoinModifier.DEFAULT.symbol(getPos()); }
>         |
>             LOOKAHEAD(3)
>             <RIGHT> <OUTER> <JOIN> { joinType = JoinType.RIGHT.symbol(getPos()); modifier = JoinModifier.OUTER.symbol(getPos());}
>         |
>             <RIGHT> <JOIN> { joinType = JoinType.RIGHT.symbol(getPos()); modifier = JoinModifier.DEFAULT.symbol(getPos()); }
>         |
>             <FULL> [ <OUTER> ] <JOIN> { joinType = JoinType.FULL.symbol(getPos()); modifier = JoinModifier.NONE.symbol(getPos());}
>         |
>             <CROSS> <JOIN> { joinType = JoinType.CROSS.symbol(getPos()); modifier = JoinModifier.NONE.symbol(getPos());}
>         )
> 
1925c1942,1943
<                 condition);
---
>                 condition,
>                 modifier);
1936c1954,1955
<                 new SqlNodeList(list.getList(), Span.of(using).end(this)));
---
>                 new SqlNodeList(list.getList(), Span.of(using).end(this)),
>                 modifier);
1946c1965,1966
<                 null);
---
>                 null,
>                 modifier);
1969c1989
<     SqlLiteral natural, joinType, joinConditionType;
---
>     SqlLiteral natural, joinType, joinConditionType, modifier;
1991c2011,2053
<             joinType = JoinType()
---
>             (
>                 LOOKAHEAD(3)
>                 <LEFT> <TEMPORAL> <JOIN> { joinType = JoinType.LEFT.symbol(getPos()); modifier = JoinModifier.TEMPORAL.symbol(getPos()); }
>             |
>                 LOOKAHEAD(3)
>                 <LEFT> <INTERVAL> <JOIN> { joinType = JoinType.LEFT.symbol(getPos()); modifier = JoinModifier.INTERVAL.symbol(getPos());}
>             |
>                 LOOKAHEAD(3)
>                 <LEFT> <DEFAULT_> <JOIN> { joinType = JoinType.LEFT.symbol(getPos()); modifier = JoinModifier.DEFAULT.symbol(getPos());}
>             |
>                 LOOKAHEAD(3)
>                 <RIGHT> <TEMPORAL> <JOIN> { joinType = JoinType.RIGHT.symbol(getPos()); modifier = JoinModifier.TEMPORAL.symbol(getPos());}
>             |
>                 LOOKAHEAD(3)
>                 <RIGHT> <INTERVAL> <JOIN> { joinType = JoinType.RIGHT.symbol(getPos()); modifier = JoinModifier.INTERVAL.symbol(getPos());}
>             |
>                 LOOKAHEAD(3)
>                 <RIGHT> <DEFAULT_> <JOIN> { joinType = JoinType.RIGHT.symbol(getPos());modifier = JoinModifier.DEFAULT.symbol(getPos()); }
>             |
>                 <TEMPORAL> <JOIN> { joinType = JoinType.INNER.symbol(getPos()); modifier = JoinModifier.TEMPORAL.symbol(getPos());}
>             |
>                 <INTERVAL> <JOIN> { joinType = JoinType.INNER.symbol(getPos()); modifier = JoinModifier.INTERVAL.symbol(getPos());}
>             |
>                 <DEFAULT_> <JOIN> { joinType = JoinType.INNER.symbol(getPos()); modifier = JoinModifier.DEFAULT.symbol(getPos());}
>             |
>                 <JOIN> { joinType = JoinType.INNER.symbol(getPos()); modifier = JoinModifier.DEFAULT.symbol(getPos());}
>             |
>                 <INNER> <JOIN> { joinType = JoinType.INNER.symbol(getPos()); modifier = JoinModifier.NONE.symbol(getPos());}
>             |
>                 LOOKAHEAD(3)
>                 <LEFT> <OUTER> <JOIN> { joinType = JoinType.LEFT.symbol(getPos()); modifier = JoinModifier.OUTER.symbol(getPos());}
>             |
>                 <LEFT> <JOIN> { joinType = JoinType.LEFT.symbol(getPos()); modifier = JoinModifier.DEFAULT.symbol(getPos()); }
>             |
>                 LOOKAHEAD(3)
>                 <RIGHT> <OUTER> <JOIN> { joinType = JoinType.RIGHT.symbol(getPos()); modifier = JoinModifier.OUTER.symbol(getPos());}
>             |
>                 <RIGHT> <JOIN> { joinType = JoinType.RIGHT.symbol(getPos()); modifier = JoinModifier.DEFAULT.symbol(getPos()); }
>             |
>                 <FULL> [ <OUTER> ] <JOIN> { joinType = JoinType.FULL.symbol(getPos()); modifier = JoinModifier.NONE.symbol(getPos());}
>             |
>                 <CROSS> <JOIN> { joinType = JoinType.CROSS.symbol(getPos()); modifier = JoinModifier.NONE.symbol(getPos());}
>             )
2004c2066,2067
<                         condition);
---
>                         condition,
>                         modifier);
2017c2080,2081
<                         new SqlNodeList(list.getList(), Span.of(joinConditionType).end(this)));
---
>                         new SqlNodeList(list.getList(), Span.of(joinConditionType).end(this)),
>                         modifier);
2027c2091,2092
<                         null);
---
>                         null,
>                         modifier);
3845a3911,3912
>         //SQRL required for keyword 'date'
>         LOOKAHEAD(2)
3869a3937,3938
>     //SQRL Required to allow the keyword 'user'
>         LOOKAHEAD(2)
3940,3987c4009,4056
< 
< /**
<  * Parses "SET &lt;NAME&gt; = VALUE" or "RESET &lt;NAME&gt;", without a leading
<  * "ALTER &lt;SCOPE&gt;".
<  */
< SqlSetOption SqlSetOption(Span s, String scope) :
< {
<     SqlIdentifier name;
<     final SqlNode val;
< }
< {
<     (
<         <SET> {
<             s.add(this);
<         }
<         name = CompoundIdentifier()
<         <EQ>
<         (
<             val = Literal()
<         |
<             val = SimpleIdentifier()
<         |
<             <ON> {
<                 // OFF is handled by SimpleIdentifier, ON handled here.
<                 val = new SqlIdentifier(token.image.toUpperCase(Locale.ROOT),
<                     getPos());
<             }
<         )
<         {
<             return new SqlSetOption(s.end(val), scope, name, val);
<         }
<     |
<         <RESET> {
<             s.add(this);
<         }
<         (
<             name = CompoundIdentifier()
<         |
<             <ALL> {
<                 name = new SqlIdentifier(token.image.toUpperCase(Locale.ROOT),
<                     getPos());
<             }
<         )
<         {
<             return new SqlSetOption(s.end(name), scope, name, null);
<         }
<     )
< }
---
> //
> ///**
> // * Parses "SET &lt;NAME&gt; = VALUE" or "RESET &lt;NAME&gt;", without a leading
> // * "ALTER &lt;SCOPE&gt;".
> // */
> //SqlSetOption SqlSetOption(Span s, String scope) :
> //{
> //    SqlIdentifier name;
> //    final SqlNode val;
> //}
> //{
> //    (
> //        <SET> {
> //            s.add(this);
> //        }
> //        name = CompoundIdentifier()
> //        <EQ>
> //        (
> //            val = Literal()
> //        |
> //            val = SimpleIdentifier()
> //        |
> //            <ON> {
> //                // OFF is handled by SimpleIdentifier, ON handled here.
> //                val = new SqlIdentifier(token.image.toUpperCase(Locale.ROOT),
> //                    getPos());
> //            }
> //        )
> //        {
> //            return new SqlSetOption(s.end(val), scope, name, val);
> //        }
> //    |
> //        <RESET> {
> //            s.add(this);
> //        }
> //        (
> //            name = CompoundIdentifier()
> //        |
> //            <ALL> {
> //                name = new SqlIdentifier(token.image.toUpperCase(Locale.ROOT),
> //                    getPos());
> //            }
> //        )
> //        {
> //            return new SqlSetOption(s.end(name), scope, name, null);
> //        }
> //    )
> //}
3993,4014c4062,4083
< SqlAlter SqlAlter() :
< {
<     final Span s;
<     final String scope;
<     final SqlAlter alterNode;
< }
< {
<     <ALTER> { s = span(); }
<     scope = Scope()
<     (
< <#-- additional literal parser methods are included here -->
< <#list (parser.alterStatementParserMethods!default.parser.alterStatementParserMethods) as method>
<         alterNode = ${method}(s, scope)
<     |
< </#list>
< 
<         alterNode = SqlSetOption(s, scope)
<     )
<     {
<         return alterNode;
<     }
< }
---
> //SqlAlter SqlAlter() :
> //{
> //    final Span s;
> //    final String scope;
> //    final SqlAlter alterNode;
> //}
> //{
> //    <ALTER> { s = span(); }
> //    scope = Scope()
> //    (
> //<#-- additional literal parser methods are included here -->
> //<#list (parser.alterStatementParserMethods!default.parser.alterStatementParserMethods) as method>
> //        alterNode = ${method}(s, scope)
> //    |
> //</#list>
> //
> //        alterNode = SqlSetOption(s, scope)
> //    )
> //    {
> //        return alterNode;
> //    }
> //}
4391a4461,4462
>     //SQRL Add lookahead to resolve ambiguity of a time literal
>     LOOKAHEAD(2)
6721,6724c6792,6795
< 
< /**
<  * Parses a reserved word which is used as the name of a function.
<  */
---
> //
> ///**
> // * Parses a reserved word which is used as the name of a function.
> // */
6730,6741c6801,6812
<         <ABS>
<     |   <AVG>
<     |   <CARDINALITY>
<     |   <CEILING>
<     |   <CHAR_LENGTH>
<     |   <CHARACTER_LENGTH>
<     |   <COALESCE>
<     |   <COLLECT>
<     |   <COVAR_POP>
<     |   <COVAR_SAMP>
<     |   <CUME_DIST>
<     |   <COUNT>
---
> //        <ABS>
> //    |   <AVG>
> //    |   <CARDINALITY>
>       <CEILING>
> //    |   <CHAR_LENGTH>
> //    |   <CHARACTER_LENGTH>
> //    |   <COALESCE>
> //    |   <COLLECT>
> //    |   <COVAR_POP>
> //    |   <COVAR_SAMP>
> //    |   <CUME_DIST>
> //    |   <COUNT>
6745,6749c6816,6820
<     |   <DENSE_RANK>
<     |   <ELEMENT>
<     |   <EVERY>
<     |   <EXP>
<     |   <FIRST_VALUE>
---
> //    |   <DENSE_RANK>
> //    |   <ELEMENT>
> //    |   <EVERY>
> //    |   <EXP>
> //    |   <FIRST_VALUE>
6751,6756c6822,6826
<     |   <FUSION>
<     |   <INTERSECTION>
<     |   <GROUPING>
<     |   <HOUR>
<     |   <LAG>
<     |   <LEAD>
---
> //    |   <FUSION>
> //    |   <INTERSECTION>
> //    |   <GROUPING>
> //    |   <LAG>
> //    |   <LEAD>
6758,6764c6828,6834
<     |   <LAST_VALUE>
<     |   <LN>
<     |   <LOCALTIME>
<     |   <LOCALTIMESTAMP>
<     |   <LOWER>
<     |   <MAX>
<     |   <MIN>
---
> //    |   <LAST_VALUE>
> //    |   <LN>
> //    |   <LOCALTIME>
> //    |   <LOCALTIMESTAMP>
> //    |   <LOWER>
> //    |   <MAX>
> //    |   <MIN>
6766,6777c6836,6846
<     |   <MOD>
<     |   <MONTH>
<     |   <NTH_VALUE>
<     |   <NTILE>
<     |   <NULLIF>
<     |   <OCTET_LENGTH>
<     |   <PERCENT_RANK>
<     |   <POWER>
<     |   <RANK>
<     |   <REGR_COUNT>
<     |   <REGR_SXX>
<     |   <REGR_SYY>
---
> //    |   <MOD>
> //    |   <NTH_VALUE>
> //    |   <NTILE>
> //    |   <NULLIF>
> //    |   <OCTET_LENGTH>
> //    |   <PERCENT_RANK>
> //    |   <POWER>
> //    |   <RANK>
> //    |   <REGR_COUNT>
> //    |   <REGR_SXX>
> //    |   <REGR_SYY>
6779,6780c6848
<     |   <ROW_NUMBER>
<     |   <SECOND>
---
> //    |   <ROW_NUMBER>
6782,6786c6850,6854
<     |   <SQRT>
<     |   <STDDEV_POP>
<     |   <STDDEV_SAMP>
<     |   <SUM>
<     |   <UPPER>
---
> //    |   <SQRT>
> //    |   <STDDEV_POP>
> //    |   <STDDEV_SAMP>
> //    |   <SUM>
> //    |   <UPPER>
6788,6791c6856,6857
<     |   <USER>
<     |   <VAR_POP>
<     |   <VAR_SAMP>
<     |   <YEAR>
---
> //    |   <VAR_POP>
> //    |   <VAR_SAMP>
7083c7149
< |   < ABS: "ABS" >
---
> //|   < ABS: "ABS" >
7113c7179
< |   < AVG: "AVG" >
---
> //|   < AVG: "AVG" >
7131c7197
< |   < CARDINALITY: "CARDINALITY" >
---
> //|   < CARDINALITY: "CARDINALITY" >
7143c7209
< |   < CHAR_LENGTH: "CHAR_LENGTH" >
---
> //|   < CHAR_LENGTH: "CHAR_LENGTH" >
7145c7211
< |   < CHARACTER_LENGTH: "CHARACTER_LENGTH" >
---
> //|   < CHARACTER_LENGTH: "CHARACTER_LENGTH" >
7156c7222
< |   < COALESCE: "COALESCE" >
---
> //|   < COALESCE: "COALESCE" >
7163c7229
< |   < COLLECT: "COLLECT" >
---
> //|   < COLLECT: "COLLECT" >
7188,7189c7254,7255
< |   < COVAR_POP: "COVAR_POP" >
< |   < COVAR_SAMP: "COVAR_SAMP" >
---
> //|   < COVAR_POP: "COVAR_POP" >
> //|   < COVAR_SAMP: "COVAR_SAMP" >
7193c7259
< |   < CUME_DIST: "CUME_DIST" >
---
> //|   < CUME_DIST: "CUME_DIST" >
7230c7296
< |   < DENSE_RANK: "DENSE_RANK" >
---
> //|   < DENSE_RANK: "DENSE_RANK" >
7253c7319
< |   < ELEMENT: "ELEMENT" >
---
> //|   < ELEMENT: "ELEMENT" >
7273c7339
< |   < EXP: "EXP" >
---
> //|   < EXP: "EXP" >
7283c7349
< |   < FIRST_VALUE: "FIRST_VALUE">
---
> //|   < FIRST_VALUE: "FIRST_VALUE">
7298c7364
< |   < FUSION: "FUSION" >
---
> //|   < FUSION: "FUSION" >
7340c7406
< |   < INTERSECTION: "INTERSECTION" >
---
> //|   < INTERSECTION: "INTERSECTION" >
7363c7429
< |   < LAG: "LAG" >
---
> //|   < LAG: "LAG" >
7367c7433
< |   < LAST_VALUE: "LAST_VALUE" >
---
> //|   < LAST_VALUE: "LAST_VALUE" >
7369c7435
< |   < LEAD: "LEAD" >
---
> //|   < LEAD: "LEAD" >
7378c7444
< |   < LN: "LN" >
---
> //|   < LN: "LN" >
7391c7457
< |   < MAX: "MAX" >
---
> //|   < MAX: "MAX" >
7403c7469
< |   < MIN: "MIN" >
---
> //|   < MIN: "MIN" >
7407c7473
< |   < MOD: "MOD" >
---
> //|   < MOD: "MOD" >
7430c7496
< |   < NTH_VALUE: "NTH_VALUE" >
---
> //|   < NTH_VALUE: "NTH_VALUE" >
7434c7500
< |   < NULLIF: "NULLIF" >
---
> //|   < NULLIF: "NULLIF" >
7440c7506
< |   < OCTET_LENGTH: "OCTET_LENGTH" >
---
> //|   < OCTET_LENGTH: "OCTET_LENGTH" >
7484c7550
< |   < PERCENT_RANK: "PERCENT_RANK" >
---
> //|   < PERCENT_RANK: "PERCENT_RANK" >
7494c7560
< |   < POWER: "POWER" >
---
> //|   < POWER: "POWER" >
7508c7574
< |   < RANK: "RANK" >
---
> //|   < RANK: "RANK" >
7516,7518c7582,7584
< |   < REGR_AVGX: "REGR_AVGX" >
< |   < REGR_AVGY: "REGR_AVGY" >
< |   < REGR_COUNT: "REGR_COUNT" >
---
> //|   < REGR_AVGX: "REGR_AVGX" >
> //|   < REGR_AVGY: "REGR_AVGY" >
> //|   < REGR_COUNT: "REGR_COUNT" >
7552c7618
< |   < ROW_NUMBER: "ROW_NUMBER" >
---
> //|   < ROW_NUMBER: "ROW_NUMBER" >
7653,7654c7719,7720
< |   < STDDEV_POP: "STDDEV_POP" >
< |   < STDDEV_SAMP: "STDDEV_SAMP" >
---
> //|   < STDDEV_POP: "STDDEV_POP" >
> //|   < STDDEV_SAMP: "STDDEV_SAMP" >
7665c7731
< |   < SUM: "SUM" >
---
> //|   < SUM: "SUM" >
7717c7783
< |   < UPPER: "UPPER" >
---
> //|   < UPPER: "UPPER" >
7732,7733c7798,7799
< |   < VAR_POP: "VAR_POP" >
< |   < VAR_SAMP: "VAR_SAMP" >
---
> //|   < VAR_POP: "VAR_POP" >
> //|   < VAR_SAMP: "VAR_SAMP" >
7875c7941
<     < #CHARSETNAME: (["a"-"z","A"-"Z","0"-"9"])
---
>     < #CHARSETNAME: (["a"-"z","A"-"Z","0"-"9","@"])
8139a8206,8207
>         //sqrl u0040 is @
>         "\u0040",
