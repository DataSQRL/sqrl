"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2436],{4752:e=>{e.exports=JSON.parse('{"permalink":"/sqrl/blog/temporal-join","source":"@site/blog/2025-03-03-temporal-join/index.mdx","title":"Why Temporal Join is Stream Processing\u2019s Superpower","description":"Stream processing technologies like Apache Flink introduce a new type of data transformation that\u2019s very powerful: the temporal join. Temporal joins add context to data streams while being efficient and fast to execute.","date":"2025-03-03T00:00:00.000Z","tags":[{"inline":true,"label":"Join","permalink":"/sqrl/blog/tags/join"},{"inline":true,"label":"Flink","permalink":"/sqrl/blog/tags/flink"},{"inline":true,"label":"DataSQRL","permalink":"/sqrl/blog/tags/data-sqrl"}],"readingTime":7.42,"hasTruncateMarker":true,"authors":[{"name":"Matthias Broecheler","title":"CEO of DataSQRL","url":"https://github.com/mbroecheler","page":{"permalink":"/sqrl/blog/authors/matthias"},"socials":{"linkedin":"https://www.linkedin.com/in/matthiasbroecheler/","github":"https://github.com/mbroecheler","newsletter":"https://www.matthiasb.com"},"imageURL":"/sqrl/img/headshots/matthias1.png","key":"matthias"}],"frontMatter":{"slug":"temporal-join","title":"Why Temporal Join is Stream Processing\u2019s Superpower","authors":["matthias"],"tags":["Join","Flink","DataSQRL"]},"unlisted":false,"prevItem":{"title":"DataSQRL 0.6 Release: The Streaming Data Framework","permalink":"/sqrl/blog/datasqrl-0.6"}}')},5382:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>h,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var r=n(4752),i=n(4848),a=n(8453),s=n(9030);const o={slug:"temporal-join",title:"Why Temporal Join is Stream Processing\u2019s Superpower",authors:["matthias"],tags:["Join","Flink","DataSQRL"]},h=void 0,l={authorsImageUrls:[void 0]},d=[{value:"The Join: A Quick Review",id:"review",level:2},{value:"The Temporal Join: Linking Stream and State",id:"tempjoin",level:2},{value:"Temporal Join vs Inner Join",id:"tempinner",level:2},{value:"Why Temporal Joins are Fast and Efficient",id:"efficient",level:2},{value:"Time to Wrap Up This Temporal Journey",id:"summary",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components},{Head:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n,{children:[(0,i.jsx)("meta",{property:"og:image",content:(0,s.Ay)("img/blog/temporal_join.png")}),(0,i.jsx)("meta",{name:"twitter:image",content:(0,s.Ay)("img/blog/temporal_join.png")})]}),"\n",(0,i.jsx)(t.p,{children:"Stream processing technologies like Apache Flink introduce a new type of data transformation that\u2019s very powerful: the temporal join. Temporal joins add context to data streams while being efficient and fast to execute."}),"\n",(0,i.jsx)("img",{src:(0,s.Ay)("/img/blog/temporal_join.svg"),alt:"Temporal Join >",width:"30%"}),"\n",(0,i.jsx)(t.p,{children:"This article introduces the temporal join, compares it to the traditional inner join, explains when to use it, and why it is a secret superpower."}),"\n",(0,i.jsx)(t.p,{children:"Table of Contents:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#review",children:"The Join: A Quick Review"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#tempjoin",children:"The Temporal Join: Linking Stream and State"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#tempinner",children:"Temporal Join vs Inner Join"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#efficient",children:"Why Temporal Joins are Fast and Efficient"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#easy",children:"Temporal Joins Made Easy to Use"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#summary",children:"Summary"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"review",children:"The Join: A Quick Review"}),"\n",(0,i.jsx)(t.p,{children:"Let's take a quick detour down memory lane and revisit the good ol' join operation. That trusty sidekick in your SQL utility belt helps you link data from two or more tables based on a related column between them."}),"\n",(0,i.jsx)(t.p,{children:"Suppose we are operating a factory with a number of machines that roast and package coffee. We place sensors on each machine to monitor the temperature and detect overheating."}),"\n",(0,i.jsx)(t.p,{children:"We keep track of the sensors and machines in two database tables."}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"Sensor"})," table contains the serial number and machine id that the sensor is placed on."]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"id"}),(0,i.jsx)(t.th,{children:"serialNo"}),(0,i.jsx)(t.th,{children:"machineid"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"X57-774"}),(0,i.jsx)(t.td,{children:"501"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"2"}),(0,i.jsx)(t.td,{children:"X33-453"}),(0,i.jsx)(t.td,{children:"203"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"3"}),(0,i.jsx)(t.td,{children:"X54-554"}),(0,i.jsx)(t.td,{children:"501"})]})]})]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"Machine"})," table contains the name of each machine."]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"id"}),(0,i.jsx)(t.th,{children:"name"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"203"}),(0,i.jsx)(t.td,{children:"Iron Roaster"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"501"}),(0,i.jsx)(t.td,{children:"Gritty Grinder"})]})]})]}),"\n",(0,i.jsxs)(t.p,{children:["To identify all the sensors on the machine \u201cIron Roaster\u201d we use the following SQL query which joins the ",(0,i.jsx)(t.code,{children:"Sensor"})," and ",(0,i.jsx)(t.code,{children:"Machine"})," tables:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"SELECT s.id, s.serialNo FROM Sensor s \n    JOIN Machine m ON s.machineid = m.id \n    WHERE m.name = \u201cIron Roaster\u201d\n"})}),"\n",(0,i.jsx)(t.p,{children:"Why are joins important? Without it, your data tables are like islands, isolated and lonely. Joins bring them together, creating meaningful relationships between data, and enriching data records with context to see the bigger picture."}),"\n",(0,i.jsxs)(t.p,{children:["By default, databases execute joins as ",(0,i.jsx)(t.strong,{children:"inner"})," joins which means only matching records are included in the join."]}),"\n",(0,i.jsx)(t.p,{children:"So, now that we've refreshed our memory about the classic join, let's dive into the exciting world of temporal joins in stream processing systems like Apache Flink."}),"\n",(0,i.jsx)(t.h2,{id:"tempjoin",children:"The Temporal Join: Linking Stream and State"}),"\n",(0,i.jsx)("img",{src:(0,s.Ay)("/img/blog/delorean.jpeg"),alt:"Temporal Join DeLorean >",width:"40%"}),"\n",(0,i.jsx)(t.p,{children:"Picture this: you're a time traveler. You have the power to access any point in time, past or future, at your will. Now, imagine that your data could do the same. Enter the Temporal Join, the DeLorean of data operations, capable of taking your data on a time-traveling adventure."}),"\n",(0,i.jsx)(t.p,{children:"A Temporal Join is like a regular join but with a twist. It allows you to join a stream of data (the time traveler) with a versioned table (the timeline) based on the time attribute of the data stream. This means that for each record in the stream, the join will find the most recent record in the versioned table that is less than or equal to the stream record's time."}),"\n",(0,i.jsx)(t.p,{children:"The versioned table is a normal state table where we keep track of data changes over time. That is, we keep older versions of each record around to allow the stream to match the correct version in time. Like time travel, temporal joins can make your head spin a bit. Let\u2019s look at an example to break it down."}),"\n",(0,i.jsx)(t.h2,{id:"tempinner",children:"Temporal Join vs Inner Join"}),"\n",(0,i.jsx)(t.p,{children:"Back to our coffee roasting factory, we collect the temperature readings from each sensor in a data stream."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"timestamp"}),(0,i.jsx)(t.th,{children:"sensorid"}),(0,i.jsx)(t.th,{children:"temperature"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"2023-07-10T07:11:08"}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"105.2"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"2023-07-10T07:11:08"}),(0,i.jsx)(t.td,{children:"2"}),(0,i.jsx)(t.td,{children:"83.1"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"..."}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"2023-07-10T13:25:16"}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"77.8"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"2023-07-10T13:25:16"}),(0,i.jsx)(t.td,{children:"2"}),(0,i.jsx)(t.td,{children:"83.5"})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"And we want to know the maximum temperature recorded for each machine."}),"\n",(0,i.jsx)(t.p,{children:"Easy enough, let\u2019s join the temperature data stream with the Sensors table and aggregate by machine id:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"SELECT s.machineid, MAX(r.temperature) AS maxTemp \nFROM SensorReading r INNER JOIN Sensor s \n    ON r.sensorid = s.id GROUP BY s.machineid\n"})}),"\n",(0,i.jsx)(t.p,{children:"But here is a problem: What if we moved a sensor from one machine to another during the day? With an inner join, all of the sensor\u2019s readings would be linked to the machine it was last placed on. So, if sensor 1 records a high temperature of 105 degrees in the morning and we move the sensor to the \u201cIron Roaster\u201d machine in the afternoon, then we might see the 105 degrees falsely show up as the maximum temperature for the Iron Roaster. See how time played a trick on our join?"}),"\n",(0,i.jsx)(t.p,{children:"And this happens whenever we join a data stream with a state table that changes over time, like our sensors that get moved around the factory. What to do? Let\u2019s call the temporal join to our rescue:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"SELECT s.machineid, MAX(r.temperature) AS maxTemp \nFROM SensorReading r JOIN Sensor FOR SYSTEM_TIME AS OF r.`timestamp` s\n    ON r.sensorid = s.id GROUP BY s.machineid\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Pretty much the same query, just a different join type. Just a heads-up: the syntax for temporal joins in Flink SQL is more complex - we'll get to that ",(0,i.jsx)(t.a,{href:"#easy",children:"later"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"As a temporal join, we are joining each sensor reading with the version of the sensor record at the time of the data stream. In other words, the join not only matches the sensor reading with the sensor record based on the id but also based on the timestamp of the reading to ensure it matches the right version of the sensor record. Pretty neat, right?"}),"\n",(0,i.jsx)(t.p,{children:"Whenever you join a data stream with a state that changes over time, you want to use the temporal join to make sure your data is lined up correctly in time. Temporal joins are a powerful feature of stream processing engines that would be difficult to implement in a database."}),"\n",(0,i.jsx)(t.h2,{id:"efficient",children:"Why Temporal Joins are Fast and Efficient"}),"\n",(0,i.jsx)("img",{src:(0,s.Ay)("/img/blog/flink_logo.svg"),alt:"Apache Flink >",width:"30%"}),"\n",(0,i.jsx)(t.p,{children:"Not only do temporal joins solve the time-alignment problem when joining data streams with changing state, modern stream processors like Apache Flink are also incredibly efficient at executing temporal joins. A powerful feature with great performance? Sounds too good to be true. Let\u2019s peek behind the stream processing curtain to find out why."}),"\n",(0,i.jsx)(t.p,{children:"In stream processing, joins are maintained as the underlying data changes over time. That requires the stream engine to hold all the data it needs to update join records when either side of the join changes. This makes inner joins pretty expensive on data streams."}),"\n",(0,i.jsx)(t.p,{children:"Consider our max-temperature query with the inner join: When we join a temperature reading with the corresponding sensor record, and that record changes, the engine has to update the result join record. To do so, it has to store all the sensor readings to determine which join results are affected by a change in a sensor record. This can lead to a lot of updates and hence a lot of downstream computation. It can also cause system failure when there are a lot of temperature readings in our data stream because the stream engine has to store all of them."}),"\n",(0,i.jsx)(t.p,{children:"Temporal joins, on the other hand, can be executed much more efficiently. The stream engine only needs to store the versions of the sensor table that are within the time bounds of the sensor reading data stream. And it only has to briefly store (if at all) the sensor reading records to ensure they are joined with the most up-to-date sensor records. Moreover, temporal joins don\u2019t require sending out a massive amount of updated join records when sensors change placement since the join is fixed in time."}),"\n",(0,i.jsx)(t.h2,{id:"summary",children:"Time to Wrap Up This Temporal Journey"}),"\n",(0,i.jsx)(t.p,{children:"We've reached the end of our time-traveling adventure through the universe of temporal joins. We've seen how they're like the DeLorean of data operations, zipping us back and forth through time to make sure our data matches up just right. We've also compared them to the good ol' inner join."}),"\n",(0,i.jsx)(t.p,{children:"Temporal joins help us avoid the pitfalls of time-alignment problems when joining data streams with changing state. They're also super efficient, making them a great choice for high-volume, real-time data processing."}),"\n",(0,i.jsx)(t.p,{children:"And that\u2019s why the temporal join is stream processing's secret superpower."}),"\n",(0,i.jsxs)(t.p,{children:["DataSQRL makes using temporal joins a breeze. With its simplified syntax and smart defaults, it's like having a personal tour guide leading you through the sometimes bewildering landscape of stream processing. Take a look at our ",(0,i.jsx)(t.a,{href:"/docs/getting-started",children:"Getting Started"})," to see a complete example of temporal joins in action or take a look at our ",(0,i.jsx)(t.a,{href:"/docs/tutorials",children:"other tutorials"})," for a step-by-step guide to stream processing including temporal joins."]}),"\n",(0,i.jsx)(t.p,{children:"Happy data time-traveling, folks!"})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(6540);const i={},a=r.createContext(i);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);