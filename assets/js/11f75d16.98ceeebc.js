"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5618],{1720:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"sqrl-language","title":"SQRL Language Specification","description":"SQRL is an extension of ANSI SQL \u2014specifically FlinkSQL \u2014 that adds language features for reactive data processing and serving: table / function / relationship definitions, built-in source & sink management, and an opinionated DAG planner.","source":"@site/docs/sqrl-language.md","sourceDirName":".","slug":"/sqrl-language","permalink":"/docs/sqrl-language","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\ude80 Getting Started","permalink":"/docs/getting-started"},"next":{"title":"\ud83d\udee0\ufe0f Compiler","permalink":"/docs/compiler"}}');var t=i(4848),r=i(8453);const d={},l="SQRL Language Specification",c={},a=[{value:"Script Structure",id:"script-structure",level:2},{value:"FlinkSQL",id:"flinksql",level:2},{value:"Type System",id:"type-system",level:2},{value:"IMPORT Statement",id:"import-statement",level:2},{value:"CREATE TABLE (internal vs external)",id:"create-table-internal-vs-external",level:2},{value:"Definition statements",id:"definition-statements",level:2},{value:"Table definition",id:"table-definition",level:3},{value:"DISTINCT operator",id:"distinct-operator",level:3},{value:"Function definition",id:"function-definition",level:3},{value:"Accessing JWT payload",id:"accessing-jwt-payload",level:4},{value:"Relationship definition",id:"relationship-definition",level:3},{value:"Column-addition statement",id:"column-addition-statement",level:3},{value:"Interfaces",id:"interfaces",level:2},{value:"CREATE TABLE",id:"create-table",level:3},{value:"EXPORT statement",id:"export-statement",level:2},{value:"Hints",id:"hints",level:2},{value:"Comments &amp; Doc-strings",id:"comments--doc-strings",level:2},{value:"Validation rules",id:"validation-rules",level:2},{value:"Cheat Sheet",id:"cheat-sheet",level:2},{value:"API Mapping",id:"api-mapping",level:2},{value:"GraphQL",id:"graphql",level:3},{value:"Base Tables",id:"base-tables",level:3},{value:"More Information",id:"more-information",level:2}];function o(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"sqrl-language-specification",children:"SQRL Language Specification"})}),"\n",(0,t.jsxs)(n.p,{children:["SQRL is an extension of ANSI SQL \u2014specifically FlinkSQL \u2014 that adds language features for ",(0,t.jsx)(n.strong,{children:"reactive data processing and serving"}),": table / function / relationship definitions, built-in source & sink management, and an opinionated DAG planner.",(0,t.jsx)(n.br,{}),"\n","The \u201cR\u201d in ",(0,t.jsx)(n.strong,{children:"SQRL"})," stands for ",(0,t.jsx)(n.em,{children:"Reactive"})," and ",(0,t.jsx)(n.em,{children:"Relationships"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Readers are expected to know basic SQL and the ",(0,t.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-docs-release-1.19/docs/dev/table/sql/overview/",children:"FlinkSQL syntax"}),".",(0,t.jsx)(n.br,{}),"\n","This document focuses only on features ",(0,t.jsx)(n.strong,{children:"unique to SQRL"}),"; when SQRL accepts FlinkSQL verbatim we simply refer to the upstream spec."]}),"\n",(0,t.jsx)(n.h2,{id:"script-structure",children:"Script Structure"}),"\n",(0,t.jsxs)(n.p,{children:["A SQRL script is an ",(0,t.jsx)(n.strong,{children:"ordered list"})," of statements separated by semicolons (",(0,t.jsx)(n.code,{children:";"}),").",(0,t.jsx)(n.br,{}),"\n","Only one statement is allowed per line, but a statement may span multiple lines."]}),"\n",(0,t.jsx)(n.p,{children:"Typical order of statements:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"IMPORT ...        -- import sources from external definitions\nCREATE TABLE ...  -- define internal & external sources\nother statements (definitions, hints, inserts, exports...)\nEXPORT ...        -- explicit sinks\n"})}),"\n",(0,t.jsxs)(n.p,{children:["At compile time the statements form a ",(0,t.jsx)(n.em,{children:"directed-acyclic graph"})," (DAG).",(0,t.jsx)(n.br,{}),"\n","Each node is then assigned to an execution engine according to the optimizer and the compiler generates the data processing code for that engine."]}),"\n",(0,t.jsx)(n.h2,{id:"flinksql",children:"FlinkSQL"}),"\n",(0,t.jsx)(n.p,{children:"SQRL inherits full FlinkSQL grammar for"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"CREATE {TABLE | VIEW | FUNCTION | CATALOG | DATABASE}"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"SELECT"})," queries inside any of the above"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"USE ..."})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["...with the caveat that SQRL currently tracks ",(0,t.jsx)(n.strong,{children:"Flink 1.19"}),"; later features may not parse."]}),"\n",(0,t.jsxs)(n.p,{children:["Refer to the ",(0,t.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-docs-release-1.19/docs/dev/table/sql/overview/",children:"FlinkSQL documentation"})," for a detailed specification."]}),"\n",(0,t.jsx)(n.h2,{id:"type-system",children:"Type System"}),"\n",(0,t.jsx)(n.p,{children:"In SQRL, every table and function has a type based on how the table represents data. The type determines the semantic validity of queries against tables and how data is processed by different engines."}),"\n",(0,t.jsx)(n.p,{children:"SQRL assigns one of the following types to tables based on the definition:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"STREAM"}),': Represents a stream of immutable records with an assigned timestamp (often referred to as the "event time"). Streams are append-only. Stream tables represent events or actions over time.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"VERSIONED_STATE"}),": Contains records with a natural primary key and a timestamp, tracking changes over time to each record, thereby creating a change-stream."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"STATE"}),": Similar to VERSIONED_STATE but without tracking the history of changes. Each record is uniquely identified by its natural primary key."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"LOOKUP"}),": Supports lookup operations using a primary key but does not allow further processing of the data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"STATIC"}),": Consists of data that does not change over time, such as constants."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"import-statement",children:"IMPORT Statement"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"IMPORT qualifiedPath (AS identifier)?;\nIMPORT qualifiedPath.*;             -- wildcard\nIMPORT qualifiedPath.* AS _;        -- hidden wildcard\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Resolution:"})," the dotted path maps to a relative directory; the final element is the filename stem (e.g. ",(0,t.jsx)(n.code,{children:"IMPORT datasqrl.Customer"})," \u21d2 ",(0,t.jsx)(n.code,{children:"datasqrl/Customer.table.sql"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Aliases:"})," rename the imported object (",(0,t.jsx)(n.code,{children:"AS MyTable"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hidden imports:"})," prefix the alias with ",(0,t.jsx)(n.code,{children:"_"})," ",(0,t.jsx)(n.em,{children:"or"})," alias a wildcard to ",(0,t.jsx)(n.code,{children:"_"})," to import objects without exposing them in the interface."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Examples:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"IMPORT ecommerceTs.Customer;                 -- visible\nIMPORT ecommerceTs.Customer AS _Hidden;      -- hidden\nIMPORT ecommerceTs.* AS _;                   -- hide entire package\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Wild-card imports with aliases ",(0,t.jsx)(n.em,{children:"prefix"})," the alias to all imported table names."]}),"\n",(0,t.jsx)(n.h2,{id:"create-table-internal-vs-external",children:"CREATE TABLE (internal vs external)"}),"\n",(0,t.jsxs)(n.p,{children:["SQRL understands the complete FlinkSQL ",(0,t.jsx)(n.code,{children:"CREATE TABLE"})," syntax, but distinguishes between ",(0,t.jsx)(n.strong,{children:"internal"})," and ",(0,t.jsx)(n.strong,{children:"external"})," source tables. External source tables are standard FlinkSQL tables that connect to an internal data source. Internal tables connect to a data source that is managed by SQRL (depending on the configured ",(0,t.jsx)(n.code,{children:"log"})," engine, e.g. a Kafka topic) and exposed for inserts in the interface."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"Internal source (managed by SQRL)"}),(0,t.jsx)(n.th,{children:"External Source (connector)"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Connector clause ",(0,t.jsx)(n.code,{children:"WITH (...)"})]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"omitted"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"required"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Computed columns"}),(0,t.jsxs)(n.td,{children:["Evaluated ",(0,t.jsx)(n.strong,{children:"on insert"})]}),(0,t.jsx)(n.td,{children:"Delegated to connector"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Metadata columns"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"METADATA FROM 'uuid'"}),", ",(0,t.jsx)(n.code,{children:"'timestamp'"})," are recognised by planner"]}),(0,t.jsx)(n.td,{children:"Passed through"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Watermark spec"}),(0,t.jsx)(n.td,{children:"Optional"}),(0,t.jsx)(n.td,{children:"Passed through"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Primary key"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.em,{children:"Unenforced"})," upsert semantics"]}),(0,t.jsx)(n.td,{children:"Same as Flink"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Example (internal):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE Customer (\n  customerid BIGINT,\n  email      STRING,\n  _uuid      STRING NOT NULL METADATA FROM 'uuid',\n  ts         TIMESTAMP_LTZ(3) METADATA FROM 'timestamp',\n  PRIMARY KEY (customerid) NOT ENFORCED\n);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example (external):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE kafka_json_table (\n  user_id INT,\n  name    STRING\n) WITH (\n  'connector' = 'kafka-safe',\n  'topic'     = 'users',\n  'format'    = 'flexible-json'\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"definition-statements",children:"Definition statements"}),"\n",(0,t.jsx)(n.h3,{id:"table-definition",children:"Table definition"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"TableName := SELECT ... ;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Equivalent to a ",(0,t.jsx)(n.code,{children:"CREATE VIEW"})," in SQL."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"ValidCustomer := SELECT * FROM Customer WHERE customerid > 0 AND email IS NOT NULL;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"distinct-operator",children:"DISTINCT operator"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"DistinctTbl := DISTINCT SourceTbl\n               ON pk_col [, ...]\n               ORDER BY ts_col [ASC|DESC] [NULLS LAST] ;\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Deduplicates a ",(0,t.jsx)(n.strong,{children:"STREAM"})," of changelog data into a ",(0,t.jsx)(n.strong,{children:"VERSIONED_STATE"})," table."]}),"\n",(0,t.jsxs)(n.li,{children:["Hint ",(0,t.jsx)(n.code,{children:"/*+filtered_distinct_order*/"})," (see ",(0,t.jsx)(n.a,{href:"#hints",children:"hints"}),") may precede the statement to push filters before deduplication for optimization."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"DistinctProducts := DISTINCT Products ON id ORDER BY updated DESC;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"function-definition",children:"Function definition"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"FuncName(arg1 TYPE [NOT NULL] [, ...]) :=\n  SELECT ... WHERE col = :arg1 ;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Arguments are referenced with ",(0,t.jsx)(n.code,{children:":name"})," in the ",(0,t.jsx)(n.code,{children:"SELECT"})," query. Argument definitions are identical to column definitions in ",(0,t.jsx)(n.code,{children:"CREATE TABLE"})," statements."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CustomerByEmail(email STRING) := SELECT * FROM Customer WHERE email = :email;\n"})}),"\n",(0,t.jsx)(n.h4,{id:"accessing-jwt-payload",children:"Accessing JWT payload"}),"\n",(0,t.jsxs)(n.p,{children:["To access the JWT payload included in the Authorization HTTP header, you can use the ",(0,t.jsx)(n.code,{children:"METADATA"})," expression within the\nfunction definition. The JWT payload is available via the auth object, and nested fields can be accessed directly.\nIn the example below, the JWT payload contains a val field, which is an integer."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"AuthFilter(mySecretId BIGINT NOT NULL METADATA FROM 'auth.val') :=\n  SELECT c.* \n  FROM Customer c \n  WHERE c.customerId = :mySecretId;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"relationship-definition",children:"Relationship definition"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"ParentTable.RelName(arg TYPE, ...) :=\n  SELECT ...\n  FROM Child c\n  WHERE this.id = c.parentId\n  [AND c.col = :arg ...] ;\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"this."})," is the alias for the parent table to reference columns from the parent row."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"Customer.highValueOrders(minAmount BIGINT) := SELECT * FROM Orders o WHERE o.customerid = this.id AND o.amount > :minAmount;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"column-addition-statement",children:"Column-addition statement"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"TableName.new_col := expression;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Must appear ",(0,t.jsx)(n.strong,{children:"immediately after"})," the table it extends, and may reference previously added columns of the same table."]}),"\n",(0,t.jsx)(n.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,t.jsxs)(n.p,{children:['The tables and functions defined in a SQRL script are exposed through an interface. The term "interface" is used generically to describe a means by which a client, user, or external system can access the processed data. The interface depends on the ',(0,t.jsx)(n.a,{href:"/docs/configuration#engines-engines",children:"configured engines"}),": API endpoints for servers, queries and views for databases, and topics for logs. An interface is a sink in the data processing DAG that's defined by a SQRL script."]}),"\n",(0,t.jsx)(n.p,{children:"How a table or function is exposed in the interface depends on the access type. The access type is one of the following:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Access type"}),(0,t.jsx)(n.th,{children:"How to declare"}),(0,t.jsx)(n.th,{children:"Surface"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Query"})," (default)"]}),(0,t.jsx)(n.td,{children:"no modifier"}),(0,t.jsx)(n.td,{children:"GraphQL query / SQL view / log topic (pull)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Subscription"})}),(0,t.jsxs)(n.td,{children:["prefix body with ",(0,t.jsx)(n.code,{children:"SUBSCRIBE"})]}),(0,t.jsx)(n.td,{children:"GraphQL subscription / push topic"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"None"})}),(0,t.jsxs)(n.td,{children:["object name starts with ",(0,t.jsx)(n.code,{children:"_"})," ",(0,t.jsx)(n.em,{children:"or"})," ",(0,t.jsx)(n.code,{children:"/*+no_query*/"})," hint"]}),(0,t.jsx)(n.td,{children:"hidden"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"HighTempAlert := SUBSCRIBE\n                 SELECT * FROM SensorReading WHERE temperature > 50;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"create-table",children:"CREATE TABLE"}),"\n",(0,t.jsxs)(n.p,{children:["CREATE TABLE statements that define an ",(0,t.jsx)(n.a,{href:"#create-table-internal-vs-external",children:"internal data source"})," are exposed as topics in the log, or GraphQL mutations in the server.\nThe input type is defined by mapping all column types to native data types of the interface schema. Computed and metadata columns are not included in the input type since those are computed on insert."]}),"\n",(0,t.jsx)(n.h2,{id:"export-statement",children:"EXPORT statement"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"EXPORT source_identifier TO sinkPath.QualifiedName ;\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sinkPath"})," maps to a connector table definition when present, or one of the ",(0,t.jsx)(n.strong,{children:"built-in"})," sinks:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"print.*"})," \u2013 stdout"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"logger.*"})," \u2013 uses configured logger"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"log.*"})," \u2013 topic in configured log engine"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"EXPORT CustomerTimeWindow TO print.TimeWindow;\nEXPORT MyAlerts          TO log.AlertStream;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"hints",children:"Hints"}),"\n",(0,t.jsxs)(n.p,{children:["Hints live in a ",(0,t.jsx)(n.code,{children:"/*+ ... */"})," comment placed ",(0,t.jsx)(n.strong,{children:"immediately before"})," the definition they apply to."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Hint"}),(0,t.jsx)(n.th,{children:"Form"}),(0,t.jsx)(n.th,{children:"Applies to"}),(0,t.jsx)(n.th,{children:"Effect"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"primary_key"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"primary_key(col, ...)"})}),(0,t.jsx)(n.td,{children:"table"}),(0,t.jsx)(n.td,{children:"declare PK when optimiser cannot infer"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"index"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"index(type, col, ...)"})," ",(0,t.jsx)("br",{})," Multiple ",(0,t.jsx)(n.code,{children:"index(...)"})," can be comma-separated"]}),(0,t.jsx)(n.td,{children:"table"}),(0,t.jsxs)(n.td,{children:["override automatic index selection. ",(0,t.jsx)(n.code,{children:"type"})," \u2208 ",(0,t.jsx)(n.code,{children:"HASH"}),", ",(0,t.jsx)(n.code,{children:"BTREE"}),", ",(0,t.jsx)(n.code,{children:"TEXT"}),", ",(0,t.jsx)(n.code,{children:"VECTOR_COSINE"}),", ",(0,t.jsx)(n.code,{children:"VECTOR_EUCLID"}),". ",(0,t.jsx)("br",{}),(0,t.jsx)(n.code,{children:"index"})," ",(0,t.jsx)(n.em,{children:"alone"})," disables all automatic indexes"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"partition_key"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"partition_key(col, ...)"})}),(0,t.jsx)(n.td,{children:"table"}),(0,t.jsx)(n.td,{children:"define partition columns for sinks that support partitioning"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"vector_dim"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"vector_dim(col, 1536)"})}),(0,t.jsx)(n.td,{children:"table"}),(0,t.jsx)(n.td,{children:"declare fixed vector length. This is required when using vector indexes."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"query_by_all"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"query_by_all(col, ...)"})}),(0,t.jsx)(n.td,{children:"table"}),(0,t.jsxs)(n.td,{children:["generate interface with ",(0,t.jsx)(n.em,{children:"required"})," filter arguments"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"query_by_any"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"query_by_any(col, ...)"})}),(0,t.jsx)(n.td,{children:"table"}),(0,t.jsxs)(n.td,{children:["generate interface with ",(0,t.jsx)(n.em,{children:"optional"})," filter arguments"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"no_query"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"no_query"})}),(0,t.jsx)(n.td,{children:"table"}),(0,t.jsx)(n.td,{children:"hide from interface"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"insert"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"insert(type)"})}),(0,t.jsx)(n.td,{children:"table"}),(0,t.jsxs)(n.td,{children:["controls the way how mutations will be written to their target sink. ",(0,t.jsx)(n.code,{children:"type"})," \u2208 ",(0,t.jsx)(n.code,{children:"SINGLE"})," (default), ",(0,t.jsx)(n.code,{children:"BATCH"}),", ",(0,t.jsx)(n.code,{children:"TRANSACTION"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"filtered_distinct_order"})}),(0,t.jsx)(n.td,{children:"flag"}),(0,t.jsx)(n.td,{children:"DISTINCT table"}),(0,t.jsx)(n.td,{children:"eliminate updates on order column only before dedup"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"engine"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"enigne(engine_id)"})}),(0,t.jsx)(n.td,{children:"table"}),(0,t.jsxs)(n.td,{children:["pin execution engine (",(0,t.jsx)(n.code,{children:"streams"}),", ",(0,t.jsx)(n.code,{children:"database"}),", ",(0,t.jsx)(n.code,{children:"flink"}),", ...)"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"test"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"test"})}),(0,t.jsx)(n.td,{children:"table"}),(0,t.jsxs)(n.td,{children:["marks test case, only executed with ",(0,t.jsxs)(n.a,{href:"compiler#test-command",children:[(0,t.jsx)(n.code,{children:"test"})," command"]}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"workload"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"workload"})}),(0,t.jsx)(n.td,{children:"table"}),(0,t.jsx)(n.td,{children:"retained as sink for DAG optimization but hidden from interface"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"/*+primary_key(sensorid, time_hour), index(VECTOR_COSINE, embedding) */\nSensorTempByHour := SELECT ... ;\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"comments--doc-strings",children:"Comments & Doc-strings"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--"})," single-line comment"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"/* ... */"})," multi-line comment"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"/** ... */"})," ",(0,t.jsx)(n.strong,{children:"doc-string"}),": attached to the next definition and propagated to generated API docs."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"validation-rules",children:"Validation rules"}),"\n",(0,t.jsx)(n.p,{children:"The following produce compile time errors:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Duplicate identifiers (tables, functions, relationships)."}),"\n",(0,t.jsxs)(n.li,{children:["Overloaded functions (same name, different arg list) are ",(0,t.jsx)(n.strong,{children:"not"})," allowed."]}),"\n",(0,t.jsx)(n.li,{children:"Argument list problems (missing type, unused arg, unknown type)."}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DISTINCT"})," must reference existing columns; ",(0,t.jsx)(n.code,{children:"ORDER BY"})," column(s) must be monotonically increasing."]}),"\n",(0,t.jsx)(n.li,{children:"Basetable inference failure for relationships (see below)."}),"\n",(0,t.jsx)(n.li,{children:"Invalid or malformed hints (unknown name, wrong delimiter)."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cheat-sheet",children:"Cheat Sheet"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Construct"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Import package"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"IMPORT ecommerceTs.* ;"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Hidden import"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"IMPORT ecommerceTs.* AS _ ;"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Internal table"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"CREATE TABLE Orders ( ... );"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"External table"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"CREATE TABLE kafka_table (...) WITH ('connector'='kafka');"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Table def."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"BigOrders := SELECT * FROM Orders WHERE amount > 100;"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Distinct"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Dedup := DISTINCT Events ON id ORDER BY ts DESC;"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Function"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"OrdersById(id BIGINT) := SELECT * FROM Orders WHERE id = :id;"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Relationship"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Customer.orders := SELECT * FROM Orders WHERE this.id = customerid;"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Column add"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Orders.total := quantity * price;"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Subscription"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Alerts := SUBSCRIBE SELECT * FROM Dedup WHERE level='WARN';"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Export"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"EXPORT Alerts TO logger.Warnings;"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Hint"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/*+index(hash,id)*/"})})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"api-mapping",children:"API Mapping"}),"\n",(0,t.jsx)(n.p,{children:"When a server engine is configured, the tables, relationships, and functions defined in a SQRL script map to API endpoints exposed by the server."}),"\n",(0,t.jsx)(n.h3,{id:"graphql",children:"GraphQL"}),"\n",(0,t.jsxs)(n.p,{children:["Tables and functions are exposed as query endpoints of the same name and argument signature (i.e. the argument names and types match).\nTables/functions defined with the ",(0,t.jsx)(n.code,{children:"SUBSCRIBE"})," keyword are exposed as subscriptions.\nInternal table sources are exposed as mutations with the input type identical to the columns in the table excluding computed columns."]}),"\n",(0,t.jsx)(n.p,{children:"In addition, the result type of the endpoint matches the schema of the table or function. That means, each field of the result type matches a column or relationship on the table/function by name and the field type is compatible.\nThe field type is compatible with the column/relationship type iff:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"For scalar or collection types there is a native mapping from one type system to the other"}),"\n",(0,t.jsx)(n.li,{children:"For structured types (i.e. nested or relationship), the mapping applies recursively."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The compiler generates the GraphQL schema automatically from the SQRL script. Add the ",(0,t.jsx)(n.code,{children:"--api graphql"})," flag to the ",(0,t.jsx)(n.a,{href:"/docs/compiler#compile-command",children:"compile command"})," to write the schema to the ",(0,t.jsx)(n.code,{children:"schema.graphqls"})," file."]}),"\n",(0,t.jsx)(n.p,{children:"You can modify the GraphQL schema and pass it as an additional argument to the compiler to fully control the interface. Any modifications must preserve the mapping described above."}),"\n",(0,t.jsx)(n.h3,{id:"base-tables",children:"Base Tables"}),"\n",(0,t.jsx)(n.p,{children:"To avoid generating multiple redundant result types in the API interface, the compiler infers the base table."}),"\n",(0,t.jsx)(n.p,{children:"The base table for a defined table or function is the right-most table in the relational tree of the SELECT query from the definition body if and only if that table type is equal to the defined table type. If no such table exists, the base table is the table itself."}),"\n",(0,t.jsxs)(n.p,{children:["The result type for a table or function is the result type generated for that table's base table.\nHidden columns, i.e. columns where the name starts with an underscore ",(0,t.jsx)(n.code,{children:"_"}),", are not included in the generated result type."]}),"\n",(0,t.jsx)(n.h2,{id:"more-information",children:"More Information"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Refer to the ",(0,t.jsx)(n.a,{href:"/docs/configuration",children:"Configuration documentation"})," for engine configuration."]}),"\n",(0,t.jsxs)(n.li,{children:["See ",(0,t.jsx)(n.a,{href:"/docs/compiler",children:"Command documentation"})," for CLI usage of the compiler."]}),"\n",(0,t.jsxs)(n.li,{children:["Read the ",(0,t.jsx)(n.a,{href:"/docs/howto",children:"How-to guides"})," for best-practices and implementation guidance."]}),"\n",(0,t.jsxs)(n.li,{children:["Follow the ",(0,t.jsx)(n.a,{href:"/docs/tutorials",children:"Tutorials"})," for practical SQRL examples."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For engine configuration, see ",(0,t.jsx)(n.strong,{children:"configuration.md"}),"; for CLI usage, see ",(0,t.jsx)(n.strong,{children:"compiler.md"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>l});var s=i(6540);const t={},r=s.createContext(t);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);