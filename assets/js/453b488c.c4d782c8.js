"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4382],{3781:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>R,contentTitle:()=>q,default:()=>C,frontMatter:()=>I,metadata:()=>a,toc:()=>A});const a=JSON.parse('{"id":"compiler","title":"DataSQRL Command","description":"The DataSQRL command compiles, runs, and tests SQRL scripts.","source":"@site/docs/compiler.md","sourceDirName":".","slug":"/compiler","permalink":"/docs/compiler","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udcda SQRL Language","permalink":"/docs/sqrl-language"},"next":{"title":"\u2699\ufe0f Configuration","permalink":"/docs/configuration"}}');var r=n(4848),s=n(8453),i=n(6540),l=n(4164),o=n(5627),c=n(6347),d=n(372),u=n(604),h=n(1861),p=n(8749);function m(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function x(e){const{values:t,children:n}=e;return(0,i.useMemo)((()=>{const e=t??function(e){return m(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}(n);return function(e){const t=(0,h.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function j(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,c.W6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u.aZ)(r),(0,i.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=x(e),[s,l]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!j({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[o,c]=f({queryString:n,groupId:a}),[u,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,p.Dv)(n);return[a,(0,i.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),m=(()=>{const e=o??u;return j({value:e,tabValues:r})?e:null})();(0,d.A)((()=>{m&&l(m)}),[m]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!j({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),h(e)}),[c,h,r]),tabValues:r}}var g=n(9136);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:a,selectValue:s,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.a_)(),u=e=>{const t=e.currentTarget,n=c.indexOf(t),r=i[n].value;r!==a&&(d(t),s(r))},h=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,r.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>{c.push(e)},onKeyDown:h,onClick:u,...s,className:(0,l.A)("tabs__item",v.tabItem,s?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function w(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:(0,l.A)("margin-top--md",e.props.className)}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function D(e){const t=b(e);return(0,r.jsxs)("div",{className:(0,l.A)("tabs-container",v.tabList),children:[(0,r.jsx)(y,{...t,...e}),(0,r.jsx)(w,{...t,...e})]})}function k(e){const t=(0,g.A)();return(0,r.jsx)(D,{...e,children:m(e.children)},String(t))}const T={tabItem:"tabItem_Ymn6"};function S(e){let{children:t,hidden:n,className:a}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,l.A)(T.tabItem,a),hidden:n,children:t})}const I={},q="DataSQRL Command",R={},A=[{value:"Installation",id:"installation",level:2},{value:"Global Options",id:"global-options",level:3},{value:"Compile Command",id:"compile-command",level:2},{value:"Run Command",id:"run-command",level:2},{value:"Data Access",id:"data-access",level:3},{value:"Data Persistence",id:"data-persistence",level:3},{value:"Deployment",id:"deployment",level:3},{value:"Test Command",id:"test-command",level:2},{value:"Test Execution Overview",id:"test-execution-overview",level:3}];function P(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"datasqrl-command",children:"DataSQRL Command"})}),"\n",(0,r.jsx)(t.p,{children:"The DataSQRL command compiles, runs, and tests SQRL scripts."}),"\n",(0,r.jsx)(t.p,{children:"You invoke the DataSQRL command in your terminal or command line. Choose your operating system below or use Docker which works on any machine that has Docker installed."}),"\n",(0,r.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(k,{groupId:"cli",children:(0,r.jsxs)(S,{value:"Docker",default:!0,children:[(0,r.jsx)(t.p,{children:"Always pull the latest Docker image to ensure you have the most recent updates:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"docker pull datasqrl/cmd:latest\n"})})]})}),"\n",(0,r.jsx)(t.h3,{id:"global-options",children:"Global Options"}),"\n",(0,r.jsx)(t.p,{children:"All commands support the following global options:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Option/Flag Name"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-c or --config"}),(0,r.jsx)(t.td,{children:"Specifies the path to one or more package configuration files. Contents of multiple files are merged in the specified order. Defaults to package.json in the current directory, generating a default configuration if none exists."})]})})]}),"\n",(0,r.jsxs)(t.p,{children:["Note, that most commands require that you either specify the SQRL script (and, optionally, a GraphQL schema) as command line arguments or use the ",(0,r.jsx)(t.code,{children:"-c"})," option to specify a project configuration file that allows you to configure all aspects of the project. See the ",(0,r.jsx)(t.a,{href:"/docs/configuration",children:"configuration documentation"})," for more details."]}),"\n",(0,r.jsx)(t.h2,{id:"compile-command",children:"Compile Command"}),"\n",(0,r.jsxs)(t.p,{children:["The compile command processes a SQRL script and, optionally, an API specification, into a deployable data pipeline.\nThe compile command stages all files needed by the compiler in the ",(0,r.jsx)(t.code,{children:"build"})," directory and output the created deployment artifacts for all engines in the ",(0,r.jsx)(t.code,{children:"build/deploy"})," folder."]}),"\n",(0,r.jsx)(k,{groupId:"cli",children:(0,r.jsxs)(S,{value:"Docker",default:!0,children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"docker run --rm -v $PWD:/build datasqrl/cmd compile myscript.sqrl\n"})}),(0,r.jsx)(t.p,{children:"or"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"docker run --rm -v $PWD:/build datasqrl/cmd compile -c package.json\n"})}),(0,r.jsxs)(t.p,{children:["Note, that you need to mount the current directory (",(0,r.jsx)(t.code,{children:"$PWD"})," or ",(0,r.jsx)(t.code,{children:"${PWD}"})," on windows with Powershell) to the ",(0,r.jsx)(t.code,{children:"/build"}),"\ndirectory for file access in docker."]})]})}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Option/Flag Name"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-a or --api"}),(0,r.jsx)(t.td,{children:"Generates an API specification (GraphQL schema) in the file schema.graphqls. Overwrites any existing file with the same name."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-t or --target"}),(0,r.jsx)(t.td,{children:"Directory to write deployment artifacts, defaults to build/plan."})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["Upon successful compilation, the compiler writes the data processing DAG that is planned from the SQRL script into the file ",(0,r.jsx)(t.code,{children:"build/pipeline_explain.txt"})," and a visual representation to ",(0,r.jsx)(t.code,{children:"build/pipeline_visual.html"}),". Open the latter file in your browser to inspect the data processing DAG."]}),"\n",(0,r.jsx)(t.h2,{id:"run-command",children:"Run Command"}),"\n",(0,r.jsx)(t.p,{children:"The run command compiles and runs the generated data pipeline in docker."}),"\n",(0,r.jsx)(k,{groupId:"cli",children:(0,r.jsxs)(S,{value:"Docker",default:!0,children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"docker run -it -p 8888:8888 -p 8081:8081 -p 9092:9092 --rm -v $PWD:/build datasqrl/cmd run myscript.sqrl\n"})}),(0,r.jsx)(t.p,{children:"Note, the additional port mappings to access the individual data systems that are running the pipeline."})]})}),"\n",(0,r.jsx)(t.p,{children:"The run command uses the following engines:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Flink as the stream engine: The Flink cluster is accessible through the WebUI at ",(0,r.jsx)(t.a,{href:"http://localhost:8081/",children:"http://localhost:8081/"}),"."]}),"\n",(0,r.jsx)(t.li,{children:"Postgres as the transactional database engine"}),"\n",(0,r.jsx)(t.li,{children:"Iceberg+DuckDB as the analytic database engine"}),"\n",(0,r.jsx)(t.li,{children:"RedPanda as the log engine: The RedPanda cluster is accessible on port 9092 (via Kafka command line tooling)."}),"\n",(0,r.jsxs)(t.li,{children:["Vertx as the server engine: The GraphQL API is accessible at ",(0,r.jsx)(t.a,{href:"http://localhost:8888/graphiql/",children:"http://localhost:8888/graphiql/"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"data-access",children:"Data Access"}),"\n",(0,r.jsx)(t.p,{children:"DataSQRL runs up the data systems listed above and maps your local directories for data access. To access this data in your DataSQRL jobs during local execution use:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"${PROPERTIES_BOOTSTRAP_SERVERS}"})," to connect to the Redpanda Kafka cluster"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"${DATA_PATH}/"})," to reference ",(0,r.jsx)(t.code,{children:".jsonl"})," or ",(0,r.jsx)(t.code,{children:".csv"})," data in your project."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["This allows DataSQRL to map connectors correctly and also applies to ",(0,r.jsx)(t.a,{href:"#test-command",children:"testing"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"data-persistence",children:"Data Persistence"}),"\n",(0,r.jsx)(t.p,{children:"To preserve inserted data between runs, mount a directory for RedPanda to persist the data to:"}),"\n",(0,r.jsx)(k,{groupId:"cli",children:(0,r.jsxs)(S,{value:"Docker",default:!0,children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"docker run -it -p 8888:8888 -p 8081:8081 -p 9092:9092 --rm -v /mydata/project:/data/redpanda -v $PWD:/build datasqrl/cmd run myscript.sqrl\n"})}),(0,r.jsxs)(t.p,{children:["The volume mount contains the data written to the log engine and persists it to the local ",(0,r.jsx)(t.code,{children:"/mydata/project"})," directory where you want to store the data (adjust as needed and make sure the directory exists)."]})]})}),"\n",(0,r.jsxs)(t.p,{children:["When you terminate (via ",(0,r.jsx)(t.code,{children:"CTRL-C"}),") and re-run your SQRL project, it will replay prior data."]}),"\n",(0,r.jsx)(t.h3,{id:"deployment",children:"Deployment"}),"\n",(0,r.jsxs)(t.p,{children:["The run command is primarily used for local development and quick iteration cycles. It supports small-scale deployments.\nFor large-scale deployments, we recommend that you run the generated pipeline in Kubernetes by extending our ",(0,r.jsx)(t.a,{href:"https://github.com/DataSQRL/sqrl-k8s",children:"Kubernetes setup"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["If you prefer a managed service, you can use ",(0,r.jsx)(t.a,{href:"https://www.datasqrl.com/",children:"DataSQRL Cloud"})," for automated and optimized deployments. Alternatively, you can deploy the generated deployment artifacts in the ",(0,r.jsx)(t.code,{children:"build/plan"})," directory using available managed services by your preferred cloud provider."]}),"\n",(0,r.jsx)(t.h2,{id:"test-command",children:"Test Command"}),"\n",(0,r.jsxs)(t.p,{children:["The test command compiles and runs the data pipeline, then executes the provided test API queries and API endpoints for all tables annotated with ",(0,r.jsx)(t.code,{children:"/*+test */"})," to snapshot the results."]}),"\n",(0,r.jsx)(t.p,{children:"When you first run the test command or add additional test cases, it will create the snapshots and fail. All subsequent runs of the test command compare the results to the previously snapshotted results and succeed if the results are identical, else fail."}),"\n",(0,r.jsx)(k,{groupId:"cli",children:(0,r.jsx)(S,{value:"Docker",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"docker run --rm -v $PWD:/build datasqrl/cmd test\n"})})})}),"\n",(0,r.jsx)(t.p,{children:"Options for the Test Command:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Option/Flag Name"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-s or --snapshots"}),(0,r.jsxs)(t.td,{children:["Path to the snapshot files. Defaults to ",(0,r.jsx)(t.code,{children:"snapshots"}),"."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"--tests"}),(0,r.jsxs)(t.td,{children:["Path to test graphql query files. Defaults to ",(0,r.jsx)(t.code,{children:"tests"}),"."]})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"tests"})," directory contains GraphQL queries that are executed against the API of the generated data pipeline."]}),"\n",(0,r.jsx)(t.h3,{id:"test-execution-overview",children:"Test Execution Overview"}),"\n",(0,r.jsx)(t.p,{children:"Subscriptions are registered first. This ensures that any incoming data events are captured as soon as they occur."}),"\n",(0,r.jsx)(t.p,{children:"Next, mutations are executed in alphabetical order. This controlled ordering allows predictable state changes during testing."}),"\n",(0,r.jsx)(t.p,{children:"Queries are executed after all mutations have been applied. This step retrieves the system state resulting from the preceding operations."}),"\n",(0,r.jsx)(t.p,{children:"Once all queries complete, the subscriptions are terminated and the data collected during their active phase is assembled into snapshots."}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsx)(t.p,{children:"Subscriptions can only be tested in conjunction with mutations at this time."})})]})}function C(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(P,{...e})}):P(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var a=n(6540);const r={},s=a.createContext(r);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);