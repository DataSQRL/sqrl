"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5349],{2545:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var i=t(7422),r=t(4848),s=t(8453);const o={slug:"flinkrunner-announcement",title:"Flink SQL Runner: Run Flink SQL Without JARs or Glue Code",authors:["matthias"],tags:["Flink","DataSQRL"]},l="Flink SQL Runner: Run Flink SQL Without JARs or Glue Code",a={authorsImageUrls:[void 0]},c=[{value:"From SQL to Production, Minus the Plumbing",id:"from-sql-to-production-minus-the-plumbing",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Flexible and Extensible",id:"flexible-and-extensible",level:3},{value:"Get Started",id:"get-started",level:2}];function u(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components},{Head:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t,{children:[(0,r.jsx)("meta",{property:"og:image",content:"/img/blog/flinksqlrunner_logo.png"}),(0,r.jsx)("meta",{name:"twitter:image",content:"/img/blog/flinksqlrunner_logo.png"})]}),"\n",(0,r.jsx)(e.p,{children:"Apache Flink has long been a powerhouse for streaming and batch data processing. And with the rise of Flink SQL, developers can now build sophisticated pipelines using a declarative language they already know. But getting Flink SQL applications into production still comes with friction: packaging JARs, managing connectors, injecting secrets, and wiring up deployment infrastructure."}),"\n",(0,r.jsx)("img",{src:"/img/blog/flinksqlrunner_logo.png",alt:"FlinkSQL Runner >",width:"40%"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://github.com/DataSQRL/flink-sql-runner/",children:(0,r.jsx)(e.strong,{children:"Flink SQL Runner"})})," is here to change that. It's an open-source toolkit that simplifies development, deployment, and operation of Flink SQL applications\u2014locally or in Kubernetes\u2014without manual JAR assembly or scripting custom infrastructure pipelines."]}),"\n",(0,r.jsx)(e.h2,{id:"from-sql-to-production-minus-the-plumbing",children:"From SQL to Production, Minus the Plumbing"}),"\n",(0,r.jsx)(e.p,{children:"Imagine you're writing a Flink SQL job that reads from Kafka, enriches the data, and sinks to Iceberg. In theory, it's just SQL. But in practice, production deployment requires:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Assembling dependencies into a JAR"}),"\n",(0,r.jsx)(e.li,{children:"Writing YAML to configure connectors"}),"\n",(0,r.jsx)(e.li,{children:"Injecting secrets for different environments"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Flink SQL Runner eliminates those headaches. You get:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Declarative execution"})," with SQL scripts or compiled plans"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Simple deployments"})," on Kubernetes via Flink Operator"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Environment isolation"})," with variable substitution and UDF packaging"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"All without leaving the SQL layer."}),"\n",(0,r.jsx)(e.h3,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"SQL and Plan Execution"}),": Run raw SQL scripts or pre-compiled execution plans."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Kubernetes-Native"}),": Built for the Flink Kubernetes Operator\u2014deploy SQL jobs without writing infrastructure code."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Composable Toolkit"}),": Use the pieces you need\u2014Docker image, libraries, extensions\u2014to suit your environment."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Environment Variable Substitution"}),": Inject secrets and environment-specific config into SQL or plan files using ",(0,r.jsx)(e.code,{children:"${ENV_VAR}"})," syntax."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"UDF Infrastructure"}),": Load custom JARs and register system functions easily."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Function Libraries"}),": Drop-in UDFs for advanced math and OpenAI integration."]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"flexible-and-extensible",children:"Flexible and Extensible"}),"\n",(0,r.jsx)(e.p,{children:"Flink SQL Runner is not a monolith. You can:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Run it standalone with Docker."}),"\n",(0,r.jsx)(e.li,{children:"Deploy it with the Flink Kubernetes Operator."}),"\n",(0,r.jsx)(e.li,{children:"Extend it via Maven or Gradle in your own Flink stack:"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-xml",children:"<dependency>\n  <groupId>com.datasqrl.flinkrunner</groupId>\n  <artifactId>flink-sql-runner</artifactId>\n  <version>0.6.0</version>\n</dependency>\n"})}),"\n",(0,r.jsx)(e.h2,{id:"get-started",children:"Get Started"}),"\n",(0,r.jsxs)(e.p,{children:["The Flink SQL Runner project is open source and ",(0,r.jsx)(e.a,{href:"https://github.com/datasqrl/flink-sql-runner",children:"available on Github"}),".\nCheck out the README for more information on how to use and deploy the Flink SQL Runner."]}),"\n",(0,r.jsx)(e.p,{children:"Try it out, report issues, or contribute your own UDFs."})]})}function d(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(u,{...n})}):u(n)}},7422:n=>{n.exports=JSON.parse('{"permalink":"/blog/flinkrunner-announcement","source":"@site/blog/2025-06-09-flink-sql-runner-annoucement.md","title":"Flink SQL Runner: Run Flink SQL Without JARs or Glue Code","description":"Apache Flink has long been a powerhouse for streaming and batch data processing. And with the rise of Flink SQL, developers can now build sophisticated pipelines using a declarative language they already know. But getting Flink SQL applications into production still comes with friction: packaging JARs, managing connectors, injecting secrets, and wiring up deployment infrastructure.","date":"2025-06-09T00:00:00.000Z","tags":[{"inline":true,"label":"Flink","permalink":"/blog/tags/flink"},{"inline":true,"label":"DataSQRL","permalink":"/blog/tags/data-sqrl"}],"readingTime":1.915,"hasTruncateMarker":true,"authors":[{"name":"Matthias Broecheler","title":"CEO of DataSQRL","url":"https://github.com/mbroecheler","page":{"permalink":"/blog/authors/matthias"},"socials":{"linkedin":"https://www.linkedin.com/in/matthiasbroecheler/","github":"https://github.com/mbroecheler","newsletter":"https://www.matthiasb.com"},"imageURL":"/img/headshots/matthias1.png","key":"matthias"}],"frontMatter":{"slug":"flinkrunner-announcement","title":"Flink SQL Runner: Run Flink SQL Without JARs or Glue Code","authors":["matthias"],"tags":["Flink","DataSQRL"]},"unlisted":false,"nextItem":{"title":"Defining Data Interfaces with FlinkSQL","permalink":"/blog/flinksql-extensions"}}')},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function o(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);