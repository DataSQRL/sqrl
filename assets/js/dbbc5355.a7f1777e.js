"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2678],{3252:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"howto","title":"How-To Guides","description":"Practical guides for developing data pipelines with DataSQRL","source":"@site/docs/howto.md","sourceDirName":".","slug":"/howto","permalink":"/docs/howto","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\ud83c\udf93 Tutorials","permalink":"/docs/tutorials"},"next":{"title":"\ud83d\udc69\u200d\ud83d\udcbb How DataSQRL Works","permalink":"/docs/deepdive"}}');var s=n(4848),o=n(8453);const r={},a="How-To Guides",c={},l=[{value:"Project Structure",id:"project-structure",level:2},{value:"Testing",id:"testing",level:2},{value:"Script Imports",id:"script-imports",level:2},{value:"Inline Script Imports",id:"inline-script-imports",level:3},{value:"Data Discovery",id:"data-discovery",level:2},{value:"Manual Subgraph Elimination with Noop Function",id:"manual-subgraph-elimination-with-noop-function",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"how-to-guides",children:"How-To Guides"})}),"\n",(0,s.jsx)(t.p,{children:"Practical guides for developing data pipelines with DataSQRL"}),"\n",(0,s.jsx)(t.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,s.jsx)(t.p,{children:"We recommend the following project structure to support testing and deploying to multiple environments:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:"project-root/\n\u251c\u2500\u2500 sources-prod/                  <-- contains source connectors for prod\n\u251c\u2500\u2500 sources-testdata/              <-- contains test data\n\u251c\u2500\u2500 snapshots/                     <-- snapshots for test cases, generated by DataSQRL\n\u251c\u2500\u2500 tests/                         <-- (optional) GraphQL test queries\n\u251c\u2500\u2500 components.sqrl                <-- table definitions imported into main script\n\u251c\u2500\u2500 mainscript.sqrl\n\u251c\u2500\u2500 mainscript_package_prod.json   <-- configuration for prod\n\u2514\u2500\u2500 mainscript_package_test.json   <-- configuration for testing\n"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Create one folder for each collection of data sources.\nSources that represent the same type of data but different environments (test vs prod) have the same prefix."}),"\n",(0,s.jsxs)(t.li,{children:["Create one separate ",(0,s.jsx)(t.code,{children:"package.json"})," ",(0,s.jsx)(t.a,{href:"/docs/configuration",children:"configuration file"})," for each environment that references the same main script,\nbut maps the data sources differently in the ",(0,s.jsx)(t.code,{children:"dependencies"})," section of the configuration, and (optionally) uses different engines and configurations."]}),"\n",(0,s.jsxs)(t.li,{children:["By default, DataSQRL uses ",(0,s.jsx)(t.code,{children:"tests"})," and ",(0,s.jsx)(t.code,{children:"snapshots"})," directories. If you have multiple test suites or run the same tests with different sources,\nappend a distinguishing suffix (e.g. ",(0,s.jsx)(t.code,{children:"-api"})," or ",(0,s.jsx)(t.code,{children:"-regression"}),") to both directory names and setup specific ",(0,s.jsx)(t.code,{children:"package.json"})," files\n(e.g. ",(0,s.jsx)(t.code,{children:"api-package.json"})," or ",(0,s.jsx)(t.code,{children:"regression-package.json"}),") that refers those directories in their ",(0,s.jsx)(t.a,{href:"/docs/configuration#test-runner-test-runner",children:(0,s.jsx)(t.code,{children:"test-runner"})})," section."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsxs)(t.p,{children:["DataSQRL supports ",(0,s.jsx)(t.a,{href:"compiler#test-command",children:"running automated tests"})," for your SQRL pipeline by annotating test cases with the ",(0,s.jsx)(t.code,{children:"/*+test */"})," hint\nor placing test queries in the ",(0,s.jsx)(t.code,{children:"tests"})," folder (or any other folder that's set in the ",(0,s.jsx)(t.code,{children:"test-runner"})," configuration)."]}),"\n",(0,s.jsxs)(t.p,{children:["The best practice for writing test cases is to ",(0,s.jsx)(t.a,{href:"connectors#connector-management",children:"modularize"})," your sources\nso that you dynamically link different sources for local development, testing, and production.\nIn many cases, you can use the same sources for testing and local development in a single folder."]}),"\n",(0,s.jsx)(t.p,{children:"That data should contain explicit event timestamps for all records. That enables completely deterministic test cases.\nIt also supports reproducing failure scenarios that you experienced in production as local test cases by using the data that caused the failure with the original timesta\nThat way, you don't have to externally simulate certain sequences of events that caused the failure in the first place."}),"\n",(0,s.jsx)(t.p,{children:"In addition, it allows you to build up a repository of failures and edge cases that gets executed automatically to spot regressions."}),"\n",(0,s.jsx)(t.h2,{id:"script-imports",children:"Script Imports"}),"\n",(0,s.jsx)(t.p,{children:"If your main script gets too big, or you want to reuse table definitions across multiple scripts,\nmove the definitions to a separate SQRL script and import it into the main script."}),"\n",(0,s.jsx)(t.h3,{id:"inline-script-imports",children:"Inline Script Imports"}),"\n",(0,s.jsx)(t.p,{children:"Inline imports place table and function definitions from another script into the current scope and requires\nthat table and function names do not clash with those in the importing script."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"IMPORT myscript.*;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This statement imports all tables and functions from a SQRL script called ",(0,s.jsx)(t.code,{children:"myscript.sqrl"})," in the local folder."]}),"\n",(0,s.jsx)(t.h2,{id:"data-discovery",children:"Data Discovery"}),"\n",(0,s.jsxs)(t.p,{children:["DataSQRL automatically generates table definitions with connector configuration and schemas for json-line files (with extension ",(0,s.jsx)(t.code,{children:".jsonl"}),")\nand csv files (with extension ",(0,s.jsx)(t.code,{children:".csv"}),") within the project directory.\nThis makes it easy to import data from such files into a SQRL project."]}),"\n",(0,s.jsxs)(t.p,{children:["For example, to import data from a file ",(0,s.jsx)(t.code,{children:"orders.jsonl"})," in the folder ",(0,s.jsx)(t.code,{children:"mydata"})," you write:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"IMPORT mydata.orders;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["When you run the compiler, it will create the table configuration file ",(0,s.jsx)(t.code,{children:"orders.table.sql"})," which you can then import like any other source.\nThe compiler reads the file and auto-discovers the schema."]}),"\n",(0,s.jsxs)(t.p,{children:["To disable automatic discovery of data for a directory, place a file called ",(0,s.jsx)(t.code,{children:".nodiscovery"})," into that directory."]}),"\n",(0,s.jsx)(t.h2,{id:"manual-subgraph-elimination-with-noop-function",children:"Manual Subgraph Elimination with Noop Function"}),"\n",(0,s.jsx)(t.p,{children:"Sometimes the Flink optimizer is too smart for its own good and will push down predicates that make common subgraph identification impossible.\nThat can result in much larger job graphs and poor performance or high state maintenance."}),"\n",(0,s.jsxs)(t.p,{children:["To inhibit predicate pushdown, SQRL uses the ",(0,s.jsx)(t.code,{children:"noop"})," function that takes an arbitrary list of argument and always returns true.\nAs such, the function serves no purpose other than making it impossible for the optimizer to push down predicates."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(6540);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);