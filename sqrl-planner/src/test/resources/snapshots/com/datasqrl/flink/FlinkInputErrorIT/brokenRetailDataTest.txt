>>>product$10-lp-stream
LogicalProject(_uuid=[$0], _ingest_time=[$1], productid=[$2], name=[$3], description=[$4], category=[$5])
  LogicalProject(_uuid=[$0], _ingest_time=[$1], productid=[$2], name=[$3], description=[$4], category=[$5])
    LogicalTableScan(table=[[product$i$8]], hints=[[[WatermarkHint inheritPath:[] options:[1]]]]) hints[WatermarkHint options:[1]]

>>>customer$7-lp-stream
LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5])
  LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5])
    LogicalTableScan(table=[[customer$i$5]], hints=[[[WatermarkHint inheritPath:[] options:[1]]]]) hints[WatermarkHint options:[1]]

>>>orders$3-lp-stream
LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4])
  LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5])
    LogicalTableScan(table=[[orders$i$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>customer-lp-database
LogicalSort(sort0=[$1], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC])
  LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5])
    LogicalTableScan(table=[[customer$7]])

>>>orders-lp-database
LogicalSort(sort0=[$4], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC])
  LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4])
    LogicalTableScan(table=[[orders$3]])

>>>product-lp-database
LogicalSort(sort0=[$1], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC])
  LogicalProject(_uuid=[$0], _ingest_time=[$1], productid=[$2], name=[$3], description=[$4], category=[$5])
    LogicalTableScan(table=[[product$10]])

>>>customer-data
1000121, lalelu@hottunes.org, Michelle Dagnes, 1650493449
>>>orders-data
10007140, 1000107, 2022-05-19T02:28:39.553244-07:00
10007543, 1000101, 2022-05-19T01:29:39.553244-07:00
10008434, 1000107, 2022-05-19T01:45:39.553244-07:00
>>>product-data
1332, Heavy Duty Butt Wipes, Wipes for hardiest of messes, Personal Care
3225, 4ft Garden Gnome, A real-sized garden gnome adds character to your outdoor space, House & Garden
3571, Poptech Blow 500, High powered blowdryer for any hair, Personal Care
7235, Aachen Snow Globe, Picturesque city in a beautiful snow globe, Decoration
7552, Simer Garden Hose 50ft, Long garden hose that rolls up, House & Garden
8757, Original German Nutcracker 3ft, Hand-made nutcracker is the perfect Christmas decoration, Decoration
>>>input-errors
{"severity":"FATAL","message":"Expected 4 items per row but found 6","location":"input_data:customer","inputData":"\"1000107, emily.ludies@hotmail.com, , ,Emily F. Ludies, 1650493189\"","description":"","errorLabel":"GENERIC_ERROR"}
{"severity":"FATAL","message":"Field [FlexibleDatasetSchema.FlexibleField(super=FlexibleDatasetSchema.AbstractField(name=lastUpdated, description=SchemaElementDescription(description=), default_value=null), types=[FlexibleDatasetSchema.FieldType(variantName= #singleton, type=INTEGER, arrayDepth=0, constraints=[not_null])])] has non-null constraint but record contains null value","location":"input_data:customer","inputData":"SourceRecord{data={customerid=1000101, email=John Mekker, name=1645396849}, sourceTime=null, ingestTime=2023-01-11T23:34:51.352622Z}","description":"","errorLabel":"GENERIC_ERROR"}
{"severity":"FATAL","message":"Field [FlexibleDatasetSchema.FlexibleField(super=FlexibleDatasetSchema.AbstractField(name=lastUpdated, description=SchemaElementDescription(description=), default_value=null), types=[FlexibleDatasetSchema.FieldType(variantName= #singleton, type=INTEGER, arrayDepth=0, constraints=[not_null])])] has non-null constraint but record contains null value","location":"input_data:customer","inputData":"SourceRecord{data={customerid=1000131, email=hotbear753@yahoo.com, name=Mark Spielman, lastUpdated=}, sourceTime=null, ingestTime=2023-01-11T23:34:51.778707Z}","description":"","errorLabel":"GENERIC_ERROR"}
{"severity":"FATAL","message":"Field [FlexibleDatasetSchema.FlexibleField(super=FlexibleDatasetSchema.AbstractField(name=time, description=SchemaElementDescription(description=), default_value=null), types=[FlexibleDatasetSchema.FieldType(variantName= #singleton, type=DATETIME, arrayDepth=0, constraints=[not_null])])] has non-null constraint but record contains null value","location":"input_data:orders","inputData":"SourceRecord{data={id=10008231, customerid=1000121, entries=[{productid=7552, quantity=3, unit_price=25.5, discount=15}, {productid=3225, quantity=1, unit_price=105, discount=0}]}, sourceTime=null, ingestTime=2023-01-11T23:34:51.337397Z}","description":"","errorLabel":"GENERIC_ERROR"}
{"severity":"NOTICE","message":"Cannot match field data [] onto schema field [FlexibleDatasetSchema.FlexibleField(super=FlexibleDatasetSchema.AbstractField(name=lastUpdated, description=SchemaElementDescription(description=), default_value=null), types=[FlexibleDatasetSchema.FieldType(variantName= #singleton, type=INTEGER, arrayDepth=0, constraints=[not_null])])], hence field is ignored","location":"input_data:customer/lastUpdated","inputData":"SourceRecord{data={customerid=1000131, email=hotbear753@yahoo.com, name=Mark Spielman, lastUpdated=}, sourceTime=null, ingestTime=2023-01-11T23:34:51.778707Z}","description":"","errorLabel":"GENERIC_ERROR"}
