>>>customerorders$18-lp-stream
LogicalProject(_uuid=[$0], id=[$1], customerid=[$2], time=[$3])
  LogicalProject(_uuid=[$0], id=[$2], customerid=[$6], time=[$4])
    LogicalJoin(condition=[=($3, $6)], joinType=[inner]) hints[TemporalJoinHint options:[4, 1, 0]]
      LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5])
        LogicalTableScan(table=[[orders$i$4]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
      LogicalFilter(condition=[=($2, 1)])
        LogicalProject(customerid=[$0], updatetime=[$1], $f2=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST)])
          LogicalProject(customerid=[$2], updatetime=[$6])
            LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[epoch_to_timestamp($5)]) hints[WatermarkHint options:[6]]
              LogicalTableScan(table=[[customer$i$1]])

>>>distinctorderstime$22-lp-stream
LogicalProject(__pk_0=[$0], id=[$1], time=[$2])
  LogicalProject(__pk_0=[$6], id=[$2], time=[$4])
    LogicalJoin(condition=[=($6, $3)], joinType=[inner]) hints[TemporalJoinHint options:[4, 6, 0]]
      LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5])
        LogicalTableScan(table=[[orders$i$4]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
      LogicalFilter(condition=[=($7, 1)])
        LogicalProject(customerid=[$0], _uuid=[$1], _ingest_time=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6], $f7=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $6 DESC NULLS LAST)])
          LogicalProject(customerid=[$2], _uuid=[$0], _ingest_time=[$1], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
            LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[epoch_to_timestamp($5)]) hints[WatermarkHint options:[6]]
              LogicalTableScan(table=[[customer$i$1]])

>>>entries$25-lp-stream
LogicalProject(id=[$0], _idx=[$6], productid=[$7], quantity=[$8], unit_price=[$9], discount=[$10], time=[$4])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{5}])
    LogicalProject(id=[$2], _uuid=[$0], _ingest_time=[$1], customerid=[$3], time=[$4], entries=[$5])
      LogicalFilter(condition=[=($6, 1)])
        LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], $f6=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $4 DESC NULLS LAST)])
          LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5])
            LogicalTableScan(table=[[orders$i$4]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
    Uncollect
      LogicalProject($f0=[$cor0.entries])
        LogicalValues(tuples=[[{ 0 }]])

>>>distinctorders$20-lp-stream
LogicalProject(__pk_0=[$0], id=[$1], time=[$2])
  LogicalProject(__pk_0=[$6], id=[$2], time=[$4])
    LogicalJoin(condition=[=($6, $3)], joinType=[inner]) hints[TemporalJoinHint options:[4, 6, 0]]
      LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5])
        LogicalTableScan(table=[[orders$i$4]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
      LogicalFilter(condition=[=($7, 1)])
        LogicalProject(customerid=[$0], _uuid=[$1], _ingest_time=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6], $f7=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $6 DESC NULLS LAST)])
          LogicalProject(customerid=[$2], _uuid=[$0], _ingest_time=[$1], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
            LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[epoch_to_timestamp($5)]) hints[WatermarkHint options:[6]]
              LogicalTableScan(table=[[customer$i$1]])

>>>customerid$16-lp-stream
LogicalProject(customerid=[$0], updatetime=[$1])
  LogicalProject(customerid=[$2], updatetime=[$6])
    LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[epoch_to_timestamp($5)]) hints[WatermarkHint options:[6]]
      LogicalTableScan(table=[[customer$i$1]])

>>>orders$24-lp-stream
LogicalProject(id=[$0], _uuid=[$1], _ingest_time=[$2], customerid=[$3], time=[$4])
  LogicalProject(id=[$2], _uuid=[$0], _ingest_time=[$1], customerid=[$3], time=[$4], entries=[$5])
    LogicalFilter(condition=[=($6, 1)])
      LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], $f6=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $4 DESC NULLS LAST)])
        LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5])
          LogicalTableScan(table=[[orders$i$4]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>customerdistinct$12-lp-stream
LogicalProject(customerid=[$0], _uuid=[$1], _ingest_time=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
  LogicalProject(customerid=[$2], _uuid=[$0], _ingest_time=[$1], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
    LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[epoch_to_timestamp($5)]) hints[WatermarkHint options:[6]]
      LogicalTableScan(table=[[customer$i$1]])

>>>customerdistinct-lp-database
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(customerid=[$0], _uuid=[$1], _ingest_time=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
    LogicalTableScan(table=[[customerdistinct$12]])

>>>customerid-lp-database
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(customerid=[$0], updatetime=[$1])
    LogicalTableScan(table=[[customerid$16]])

>>>customerorders-lp-database
LogicalSort(sort0=[$3], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC])
  LogicalProject(_uuid=[$0], id=[$1], customerid=[$2], time=[$3])
    LogicalTableScan(table=[[customerorders$18]])

>>>distinctorders-lp-database
LogicalSort(sort0=[$0], sort1=[$3], sort2=[$1], dir0=[ASC], dir1=[ASC], dir2=[ASC])
  LogicalProject(__pk_0=[$0], id=[$1], time=[$2], $f3=[$3])
    LogicalFilter(condition=[AND(=($3, $4), <=($5, 10))])
      LogicalProject(__pk_0=[$0], id=[$1], time=[$2], $f3=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS FIRST)], $f4=[RANK() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS FIRST)], $f5=[DENSE_RANK() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS FIRST)])
        LogicalTableScan(table=[[distinctorders$20]])

>>>distinctorderstime-lp-database
LogicalSort(sort0=[$0], sort1=[$3], sort2=[$1], sort3=[$2], dir0=[ASC], dir1=[ASC], dir2=[ASC], dir3=[ASC])
  LogicalProject(__pk_0=[$0], id=[$1], time=[$2], $f3=[$3])
    LogicalFilter(condition=[AND(=($3, $4), <=($5, 10))])
      LogicalProject(__pk_0=[$0], id=[$1], time=[$2], $f3=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS FIRST, $1 NULLS LAST)], $f4=[RANK() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS FIRST, $1 NULLS LAST)], $f5=[DENSE_RANK() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS FIRST, $1 NULLS LAST)])
        LogicalTableScan(table=[[distinctorderstime$22]])

>>>orders-lp-database
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(id=[$0], _uuid=[$1], _ingest_time=[$2], customerid=[$3], time=[$4])
    LogicalTableScan(table=[[orders$24]])

>>>entries-lp-database
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC])
  LogicalProject(id=[$0], _idx=[$1], productid=[$2], quantity=[$3], unit_price=[$4], discount=[$5])
    LogicalTableScan(table=[[entries$25]])

>>>customerdistinct-data
1000101, john.mekker@gmail.com, John B. Mekker, 1650498257, 2022-04-20 23:44:17.0
1000107, emily.ludies@hotmail.com, Emily F. Ludies, 1650493189, 2022-04-20 22:19:49.0
1000121, lalelu@hottunes.org, Michelle Dagnes, 1650493449, 2022-04-20 22:24:09.0
1000131, hotbear753@yahoo.com, Mark Spielman, 1650494449, 2022-04-20 22:40:49.0
>>>customerid-data
1000101, 2022-04-20 23:44:17.0
1000107, 2022-04-20 22:19:49.0
1000121, 2022-04-20 22:24:09.0
1000131, 2022-04-20 22:40:49.0
>>>customerorders-data
10007140, 1000107, 2022-05-19 02:28:39.553
10007543, 1000101, 2022-05-19 01:29:39.553
10008231, 1000121, 2022-05-19 02:16:39.553
10008434, 1000107, 2022-05-19 01:45:39.553
>>>distinctorders-data
10007140, 2022-05-19 02:28:39.553, 2
10007543, 2022-05-19 01:29:39.553, 1
10008231, 2022-05-19 02:16:39.553, 1
10008434, 2022-05-19 01:45:39.553, 1
>>>distinctorderstime-data
10007140, 2022-05-19 02:28:39.553, 1
10007543, 2022-05-19 01:29:39.553, 1
10008231, 2022-05-19 02:16:39.553, 1
10008434, 2022-05-19 01:45:39.553, 2
>>>orders-data
10007140, 1000107, 2022-05-19 02:28:39.553
10007543, 1000101, 2022-05-19 01:29:39.553
10008231, 1000121, 2022-05-19 02:16:39.553
10008434, 1000107, 2022-05-19 01:45:39.553
>>>entries-data
10007140, 0, 1332, 8, 8.49, null, 2022-05-19 02:28:39.553
10007140, 1, 3571, 1, 41.95, 5, 2022-05-19 02:28:39.553
10007543, 0, 7235, 1, 17.35, 0, 2022-05-19 01:29:39.553
10007543, 1, 8757, 2, 57.5, 11.5, 2022-05-19 01:29:39.553
10008231, 0, 7552, 3, 25.5, 15, 2022-05-19 02:16:39.553
10008231, 1, 3225, 1, 105, 0, 2022-05-19 02:16:39.553
10008434, 0, 3571, 1, 41.95, 0, 2022-05-19 01:45:39.553
