type Customers {
  id: Int
  purchases(id: Int, customerid: Int, time: Int, timestamp: String): [orders]
  spending_by_month(month: String, total_spend: Float, total_savings: Float): [spending_by_month]
  past_purchases(productid: Int, num_orders: Int, total_quantity: Int): [past_purchases]
}

type Products {
  id: Int
  name: String
  sizing: String
  weight_in_gram: Int
  type: String
  category: String
  usda_id: Int
  updated: String
  volume_by_day(day: String, quantity: Int, total: Float, total_weight: Int): [volume_by_day]
}

type Query {
  Customers(id: Int): [Customers]
  orders(id: Int, customerid: Int, time: Int, timestamp: String): [orders]
  Products(id: Int, name: String, sizing: String, weight_in_gram: Int, type: String, category: String, usda_id: Int, updated: String): [Products]
}

type items {
  productid: Int
  quantity: Int
  unit_price: Float
  parent(id: Int, customerid: Int, time: Int, timestamp: String): orders!
  discount: Float
  total: Float
  product(id: Int, name: String, sizing: String, weight_in_gram: Int, type: String, category: String, usda_id: Int, updated: String): [Products]
}

type orders {
  id: Int
  customerid: Int
  time: Int
  items(productid: Int, quantity: Int, unit_price: Float, discount: Float, total: Float): [items]
  timestamp: String
  totals(price: Float, savings: Float): totals
}

type past_purchases {
  productid: Int
  num_orders: Int
  total_quantity: Int
  parent(id: Int): Customers!
}

type spending_by_month {
  month: String
  total_spend: Float
  total_savings: Float
  parent(id: Int): Customers!
}

type totals {
  price: Float
  savings: Float
  parent(id: Int, customerid: Int, time: Int, timestamp: String): orders!
}

type volume_by_day {
  day: String
  quantity: Int
  total: Float
  total_weight: Int
  parent(id: Int, name: String, sizing: String, weight_in_gram: Int, type: String, category: String, usda_id: Int, updated: String): Products!
}

