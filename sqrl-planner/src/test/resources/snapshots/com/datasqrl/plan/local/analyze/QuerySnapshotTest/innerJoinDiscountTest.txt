>>>customer$2
LogicalTableScan(table=[[customer$1]])

>>>orders$2
LogicalTableScan(table=[[orders$1]])

>>>product$2
LogicalTableScan(table=[[product$1]])

>>>x$1
LogicalProject(discount=[$32], _uuid=[$0], _idx=[$6], _uuid0=[$11], _idx0=[$17], _uuid1=[$22], _idx1=[$28], __timestamp=[CASE(<($4, $15), CASE(<($15, $26), $26, $15), CASE(<($4, $26), $26, $4))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{5}])
        LogicalTableScan(table=[[orders$2]])
        LogicalTableFunctionScan(invocation=[Orders.entries($cor0.entries)], rowType=[RecordType(INTEGER _idx, BIGINT productid, BIGINT quantity, DOUBLE unit_price, DOUBLE discount)], elementType=[class [Ljava.lang.Object;])
      LogicalCorrelate(correlation=[$cor1], joinType=[inner], requiredColumns=[{5}])
        LogicalTableScan(table=[[orders$2]])
        LogicalTableFunctionScan(invocation=[Orders.entries($cor1.entries)], rowType=[RecordType(INTEGER _idx, BIGINT productid, BIGINT quantity, DOUBLE unit_price, DOUBLE discount)], elementType=[class [Ljava.lang.Object;])
    LogicalCorrelate(correlation=[$cor2], joinType=[inner], requiredColumns=[{5}])
      LogicalTableScan(table=[[orders$2]])
      LogicalTableFunctionScan(invocation=[Orders.entries($cor2.entries)], rowType=[RecordType(INTEGER _idx, BIGINT productid, BIGINT quantity, DOUBLE unit_price, DOUBLE discount)], elementType=[class [Ljava.lang.Object;])

