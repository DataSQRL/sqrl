=== Customer
ID:     customer$2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
Plan:
LogicalTableScan(table=[[customer$1]], hints=[[[WatermarkHint inheritPath:[] options:[1]]]]) hints[WatermarkHint options:[1]]

=== Customer
ID:     customer$3
Type:   state
Stage:  streams
Inputs: customer$2
Primary Key: customerid
Timestamp  : _ingest_time
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
Post Processors:
 - topN: partition=customerid limit=1 sort=#1: _ingest_time TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalTableScan(table=[[customer$2]])

=== EntryCount
ID:     entrycount$1
Type:   stream
Stage:  streams
Inputs: orders$2
Primary Key: _uuid, _idx
Timestamp  : _time
Schema:
 - price: DOUBLE
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _idx: INTEGER NOT NULL
 - _time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(price=[-(*($8, $9), $10)], _uuid=[$0], _idx=[$6], _time=[$4])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{5}])
    LogicalTableScan(table=[[orders$2]])
    LogicalTableFunctionScan(invocation=[Orders.entries($cor0.entries)], rowType=[RecordType(INTEGER _idx, BIGINT productid, BIGINT quantity, DOUBLE unit_price, DOUBLE discount)], elementType=[class [Ljava.lang.Object;])

=== Orders
ID:     orders$2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : time
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType(INTEGER NOT NULL _idx, BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

=== Orders2
ID:     orders2$1
Type:   stream
Stage:  streams
Inputs: orders$2
Primary Key: _uuid
Timestamp  : _time
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(_uuid=[$0], _time=[$4])
  LogicalJoin(condition=[AND(=($6, $0), =($10, $4))], joinType=[inner]) hints[IntervalJoin]
    LogicalTableScan(table=[[orders$2]])
    LogicalTableScan(table=[[orders$2]])

=== orders_by_day
ID:     orders_by_day$1
Type:   stream
Stage:  streams
Inputs: customer$3, ordersinline$1
Primary Key: __pk2$customerid, day
Timestamp  : day
Schema:
 - __pk2$customerid: BIGINT NOT NULL
 - day: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - total_price: DOUBLE
 - total_num: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{0, 1}], total_price=[SUM($2)], total_num=[SUM($3)]) hints[TumbleAggregationHint options:[1, FUNCTION, 5, 86400000, 0]]
  LogicalProject(__pk2$customerid=[$8], day=[endOfDay($2)], price=[$3], num=[$4], _uuid=[$5], time=[$2])
    LogicalJoin(condition=[=($1, $8)], joinType=[inner]) hints[TemporalJoinHint options:[2, 1, 2]]
      LogicalTableScan(table=[[ordersinline$1]])
      LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
        LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $1 DESC NULLS LAST)])
          LogicalTableScan(table=[[customer$3]])

=== OrdersInline
ID:     ordersinline$1
Type:   stream
Stage:  streams
Inputs: orders$2, total$1
Primary Key: _uuid
Timestamp  : time
Schema:
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - price: DOUBLE
 - num: BIGINT NOT NULL
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
Plan:
LogicalProject(id=[$2], customerid=[$3], time=[$4], price=[$7], num=[$8], _uuid=[$0])
  LogicalJoin(condition=[AND(=($0, $6), =($10, $4))], joinType=[inner]) hints[IntervalJoin]
    LogicalTableScan(table=[[orders$2]])
    LogicalTableScan(table=[[total$1]])

=== total
ID:     total$1
Type:   stream
Stage:  streams
Inputs: orders$2
Primary Key: __pk1$_uuid
Timestamp  : _time
Schema:
 - __pk1$_uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - price: DOUBLE
 - num: BIGINT NOT NULL
 - discount: DOUBLE
 - _time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(__pk1$_uuid=[$0], price=[$2], num=[$3], discount=[$4], _time=[$1])
  LogicalAggregate(group=[{0, 4}], price=[SUM($1)], num=[COUNT()], discount=[SUM($2)]) hints[TumbleAggregationHint options:[4, INSTANT, 4, 1, 0]]
    LogicalProject(__pk1$_uuid=[$0], $f1=[-(*($8, $9), $10)], discount=[$10], _idx=[$6], time=[$4])
      LogicalCorrelate(correlation=[$cor1], joinType=[inner], requiredColumns=[{5}])
        LogicalTableScan(table=[[orders$2]])
        LogicalTableFunctionScan(invocation=[Orders.entries($cor1.entries)], rowType=[RecordType(INTEGER _idx, BIGINT productid, BIGINT quantity, DOUBLE unit_price, DOUBLE discount)], elementType=[class [Ljava.lang.Object;])

