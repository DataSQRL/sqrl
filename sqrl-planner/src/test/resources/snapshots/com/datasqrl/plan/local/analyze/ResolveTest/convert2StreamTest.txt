>>>productcount-lp
LogicalProject(productid=[$11], name=[$14], quantity=[SUM($8) IGNORE NULLS OVER (PARTITION BY $11, $14 ORDER BY $4 ROWS UNBOUNDED PRECEDING)], time=[$4])
  LogicalJoin(condition=[=($7, $11)], joinType=[inner]) hints[TemporalJoinHint options:[4, 6, 0]]
    LogicalCorrelate(correlation=[$cor1], joinType=[inner], requiredColumns=[{5}])
      LogicalTableScan(table=[[orders$q$5]])
      Uncollect
        LogicalProject($f0=[$cor1.entries])
          LogicalValues(tuples=[[{ 0 }]])
    LogicalFilter(condition=[=($7, 1)]) hints[DedupHint]
      LogicalProject(productid=[$0], _uuid=[$1], _ingest_time=[$2], name=[$3], description=[$4], category=[$5], updatetime=[$6], $f7=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $6 DESC NULLS LAST)])
        LogicalTableScan(table=[[product$q$11]])

>>>countstream-lp
LogicalProject(_uuid=[$0], _source_time=[$1], productid=[$2], name=[$3], quantity=[$4])
  LogicalStream(stream=[ADD])
    LogicalFilter(condition=[>($2, 1)])
      LogicalFilter(condition=[=($4, 1)]) hints[DedupHint]
        LogicalProject(productid=[$0], name=[$1], quantity=[$2], time=[$3], $f4=[ROW_NUMBER() OVER (PARTITION BY $0, $1 ORDER BY $3 DESC NULLS LAST)])
          LogicalTableScan(table=[[productcount$q$13]])

>>>productcount2-lp
LogicalProject(productid=[$2], _uuid=[$0], _source_time=[$1], name=[$3], quantity=[$4])
  LogicalTableScan(table=[[countstream$q$15]])

