>>>customeragg1$q$4-lp-STREAM
LogicalProject(customerid=[$1], num=[$2], _ingest_time=[$0])
  LogicalAggregate(group=[{1, 2}], num=[COUNT()]) hints[SlidingAggregationHint options:[1, 3600000, 72000]]
    LogicalTableScan(table=[[customer$q$2]])

>>>customeragg1$q$4-lp-DATABASE
LogicalProject(customerid=[$0], num=[$1], _ingest_time=[$2])
  LogicalFilter(condition=[=($3, 1)]) hints[DedupHint]
    LogicalProject(customerid=[$0], num=[$1], _ingest_time=[$2], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
      LogicalProject(customerid=[$2], num=[COUNT() IGNORE NULLS OVER (PARTITION BY $2 ORDER BY $1 ROWS UNBOUNDED PRECEDING)], _ingest_time=[$1])
        LogicalFilter(condition=[<(NOW(), +($1, 3600000:INTERVAL SECOND(7)))])
          LogicalTableScan(table=[[customer$q$2]])

>>>customeragg2$q$6-lp-DATABASE
LogicalProject(customerid=[$0], num=[$1], _ingest_time=[$2])
  LogicalFilter(condition=[=($3, 1)]) hints[DedupHint]
    LogicalProject(customerid=[$0], num=[$1], _ingest_time=[$2], _rownum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
      LogicalProject(customerid=[$2], num=[COUNT() IGNORE NULLS OVER (PARTITION BY $2 ORDER BY $1 ROWS UNBOUNDED PRECEDING)], _ingest_time=[$1])
        LogicalFilter(condition=[<(NOW(), +($1, 3600000:INTERVAL SECOND(7)))])
          LogicalTableScan(table=[[customer$q$2]])

>>>customeragg3$q$8-lp-STREAM
LogicalProject(customerid=[$1], num=[$2], _ingest_time=[$0])
  LogicalAggregate(group=[{1, 2}], num=[COUNT()]) hints[SlidingAggregationHint options:[1, 3600000, 72000]]
    LogicalTableScan(table=[[customer$q$2]])

