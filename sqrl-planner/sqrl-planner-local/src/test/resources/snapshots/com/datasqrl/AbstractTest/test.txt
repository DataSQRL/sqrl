>>>Script
IMPORT mysourcepackage.Events AS ConferenceEvents TIMESTAMP last_updated AS timestamp;
IMPORT mysourcepackage.AuthTokens;
IMPORT mysourcepackage.EmailTemplates

IMPORT myAPI.EventUpdate TIMESTAMP _source_time AS timestamp;
IMPORT myAPI.Likes;
IMPORT myAPI.ReportEvent;
IMPORT myAPI.AddInterest;
IMPORT myAPI.EventRemoval;

IMPORT string.*;
IMPORT text.*;
IMPORT secure.randomID;

EmailTemplates := DISTINCT EmailTemplates ON id ORDER BY last_updated DESC;
AuthTokens := DISTINCT AuthTokens ON id ORDER BY last_updated DESC;

EventPosts := SELECT * FROM EventUpdate WHERE id IS NOT NULL;

EventPosts.id := randomID(12);
EventPosts.secret := randomID(10);

EventPostEmail := SELECT e.email as toEmail, t.fromEmail, t.title,
                         format(t.textBody, e.name, e.id, e.secret) as textBody
                  FROM EventPosts e TEMPORAL JOIN EmailTemplates t ON t.id = 'confirmpost';

EXPORT EventPostEmail TO print.eventpostemail; --sink to queue and email sending

EventSecrets := DISTINCT EventPosts ON id ORDER BY timestamp DESC;

VerifiedEventUpdate := SELECT u.* FROM EventUpdate u TEMPORAL JOIN EventSecrets s ON u.id = s.id AND u.secret = s.secret;

AuthorizedEventRemoval := SELECT r.* FROM EventRemoval r TEMPORAL JOIN AuthTokens a ON a.id = 'removal' AND a.value = r.auth_token;

FilteredEventUpdate := SELECT v.*, coalesce(r._uuid, '') AS removalId, ((NOT bannedWordsFilter(v.name))
                            OR (NOT bannedWordsFilter(v.description)) OR (NOT bannedWordsFilter(v.location))) AS removed
                       FROM VerifiedEventUpdate v LEFT INTERVAL JOIN AuthorizedEventRemoval r ON v.id = r.eventId AND v.timestamp < r._source_time;

/* requires string aggregated concatenation
ConferenceEvents.speakerSummary := SELECT concatAgg( s.name + '(' + s.title + ' at ' + s.company + ')', ', ') as name
                                 FROM @.speakers s;
 */
/* Replace with above */
ConferenceEvents.speakerSummary := SELECT CONCAT('speakerlength', (sum(length(s.name) + length(s.title) + length(s.company)))) as name
                                   FROM @.speakers s;

ConferenceEventsFlat := SELECT e._uuid, e.timestamp, e.id, e.time, e.title, e.description, e.location, s.name as name
                        FROM ConferenceEvents e JOIN e.speakerSummary s;

Events := SELECT _uuid, removalId, timestamp, id, time, title, description, name, location, removed FROM FilteredEventUpdate
          UNION ALL
          SELECT _uuid, '' as removalId, timestamp, id, time, title, description, name, location, FALSE as removed FROM ConferenceEventsFlat;

EventNotification := SELECT * FROM FilteredEventUpdate WHERE NOT removed;

--Events.embedding := embed_text(title + description);
Events.embedding := length(description); -- replace by vector embedding

Events := DISTINCT Events ON id ORDER BY timestamp DESC;

--Interests.embedding := embed_text(text);
AddInterest.embedding := length(text); -- replace by vector embedding

UserInterests := SELECT userid, avg(embedding) as interestVector FROM AddInterest GROUP BY userid;

UserLikes := DISTINCT Likes ON userid, eventId ORDER BY _source_time DESC;


EventLikeCount := SELECT eventid, sum(liked) as num FROM UserLikes l GROUP BY eventid;
Events.likeCount := JOIN EventLikeCount l ON @.id = l.eventid;

EventsAfterTime(@afterTime: DateTime) := SELECT * FROM Events WHERE time > @afterTime AND NOT removed
                                                             ORDER BY time ASC;

EventSearch(@query: String, @afterTime: DateTime) := SELECT * FROM Events WHERE
                        time >= @afterTime AND textsearch(@query, title, description) > 0
                        AND NOT removed
                        ORDER BY textsearch(@query, title, description) DESC;

-- Events that the user liked or that are similar to users interests (requires vector search)

PersonalizedEvents(@userid: String, @tolerance: Float, @afterTime: DateTime) :=
SELECT e.*, l.liked,
       coalesce(l.eventId, '') as shouldRemove1,
       i.interestVector / e.embedding as score
--       cosineSimilarity(i.interestVector, e.embedding) as score
FROM Events e
    LEFT JOIN UserLikes l ON e.id = l.eventId AND l.userid = @userid
    LEFT JOIN UserInterests i ON i.userid = @userid
    WHERE e.time > @afterTime AND NOT removed
          AND (l.liked = 1 OR (i.interestVector IS NOT NULL AND
                               i.interestVector / CAST(e.embedding AS Float) >= @tolerance))
--                               cosineSimilarity(i.interestVector, e.embedding) >= @tolerance))
    ORDER BY e.time ASC

--PersonalizedEvents.likeCount := JOIN EventLikeCount l ON @.id = l.eventid;


FlaggedEventEmail := SELECT t.toEmail, t.fromEmail, t.title,
                         format(t.textBody, r.eventid, e.title, e.description, e.name) as textBody
                  FROM ReportEvent r
                  TEMPORAL JOIN Events e ON r.eventid = e.id
                  TEMPORAL JOIN EmailTemplates t ON t.id = 'eventflag';

EXPORT FlaggedEventEmail TO print.flaggedEventEmail;

>>>Schema
scalar DateTime

type Query {
    PersonalizedEvents( userid: String!, tolerance: Float!, afterTime: DateTime!): [PersonalizedEvents!]
    EventsAfterTime(afterTime: DateTime!): [Events!]!
    EventSearch( query: String!, afterTime: DateTime!): [EventSearchResult!]!
}

interface AbstractEvents {
    String : Int!
    time : String!
    location: String!
    title : String!
    description : String!
    name : String!
}

type LikeCount {
    num : Int
}

type EventSearchResult {
    id : String!
    time : String!
    location: String!
    title : String!
    description : String!
    name : String!
}
type Events implements AbstractEvents{
    id : String!
    time : String!
    location: String!
    title : String!
    description : String!
    name : String!
}

type PersonalizedEvents implements AbstractEvents{
    id : String!
    time : String!
    location: String!
    title : String!
    description : String!
    name : String!
    liked: Int!
    score: Float!
}

type Subscription {
    EventNotification: Events
}


type Mutation {
    EventUpdate(event: EventUpdate!): EventUpdated
    Likes(liked: LikedInput!): CreatedLiked
    ReportEvent(report: EventReport!): EventReported
    AddInterest(interest: AddInterest!): InterestAdded
    EventRemoval(removal: EventRemoval!): EventRemoved
}

input EventUpdate {
    userid: String!
    id: String!
    name: String!
    email: String!
    location: String!
    time: DateTime!
    title: String!
    description: String!
    secret: String!
}

type EventUpdated {
    _source_time: String!
    userid: String!
}

input EventRemoval {
    eventId: String!
    auth_token: String!
}

type EventRemoved {
    _source_time: String!
}

input AddInterest {
    text: String!
    userid: String!
}

type InterestAdded {
    _source_time: String!
    userid: String!
}

input EventReport {
    eventId: String!
    userid: String!
}

type EventReported {
    _source_time: String!
    userid: String!
}

input LikedInput {
    eventId: String!
    userid: String!
    liked: Int!
}

type CreatedLiked {
    _source_time: String!
    userid: String!
}

>>>DDL


CREATE TABLE IF NOT EXISTS events$51 (id$0 VARCHAR NOT NULL,_uuid$0 VARCHAR NOT NULL,removalid$0 VARCHAR NOT NULL,timestamp$0 TIMESTAMPTZ NOT NULL,time$0 TIMESTAMPTZ NOT NULL,title$0 VARCHAR NOT NULL,description$0 VARCHAR NOT NULL,name$0 VARCHAR NOT NULL,location$0 VARCHAR NOT NULL,removed$0 BOOLEAN NOT NULL,embedding$0 BIGINT NOT NULL , PRIMARY KEY (id$0));
CREATE TABLE IF NOT EXISTS userinterests$53 (userid$0 VARCHAR NOT NULL,interestvector$0 BIGINT NOT NULL,_source_time$0 TIMESTAMPTZ NOT NULL , PRIMARY KEY (userid$0));
CREATE TABLE IF NOT EXISTS userlikes$55 (userid$0 VARCHAR NOT NULL,eventid$0 VARCHAR NOT NULL,_uuid$0 VARCHAR NOT NULL,_ingest_time$0 TIMESTAMPTZ NOT NULL,_source_time$0 TIMESTAMPTZ NOT NULL,liked$0 BIGINT NOT NULL , PRIMARY KEY (userid$0,eventid$0));
CREATE INDEX IF NOT EXISTS events$51_btree_c4 ON events$51 USING btree (time$0);
CREATE INDEX IF NOT EXISTS events$51_text_c5c6 ON events$51 USING GIN (to_tsvector('english', coalesce(title$0, '') || ' ' || coalesce(description$0, '') ));
Query:PersonalizedEvents(userid, tolerance, afterTime)  =  SELECT "id$0", "_uuid$0", "removalid$0", "timestamp$0", "time$0", "title$0", "description$0", "name$0", "location$0", "removed$0", "embedding$0", "liked$0" AS "liked", COALESCE("eventid$0", '') AS "shouldRemove1", "interestvector$0" / "embedding$0" AS "score", "__timestamp$0"
FROM (SELECT "t1"."id$0", "t1"."_uuid$0", "t1"."removalid$0", "t1"."timestamp$0", "t1"."time$0", "t1"."title$0", "t1"."description$0", "t1"."name$0", "t1"."location$0", "t1"."removed$0", "t1"."embedding$0", "t1"."userid$0", "t1"."eventid$0", "t1"."_uuid$00", "t1"."_ingest_time$0", "t1"."_source_time$0", "t1"."liked$0", "t1"."__timestamp", "t2"."userid$0" AS "userid$00", "t2"."interestvector$0", "t2"."_source_time$0" AS "_source_time$00", CASE WHEN "t1"."__timestamp" < "t2"."_source_time$0" THEN "t2"."_source_time$0" ELSE "t1"."__timestamp" END AS "__timestamp$0"
  FROM (SELECT "t"."id$0", "t"."_uuid$0", "t"."removalid$0", "t"."timestamp$0", "t"."time$0", "t"."title$0", "t"."description$0", "t"."name$0", "t"."location$0", "t"."removed$0", "t"."embedding$0", "t0"."userid$0", "t0"."eventid$0", "t0"."_uuid$0" AS "_uuid$00", "t0"."_ingest_time$0", "t0"."_source_time$0", "t0"."liked$0", CASE WHEN "t"."timestamp$0" < "t0"."_source_time$0" THEN "t0"."_source_time$0" ELSE "t"."timestamp$0" END AS "__timestamp"
    FROM (SELECT *
      FROM "events$51"
      WHERE "time$0" > $3 AND NOT "removed$0") AS "t"
     LEFT JOIN (SELECT *
      FROM "userlikes$55"
      WHERE "userid$0" = $1) AS "t0" ON "t"."id$0" = "t0"."eventid$0") AS "t1"
   LEFT JOIN (SELECT *
    FROM "userinterests$53"
    WHERE "userid$0" = $1) AS "t2" ON TRUE) AS "t3"
WHERE "t3"."liked$0" = 1 OR "t3"."interestvector$0" / CAST("t3"."embedding$0" AS FLOAT) >= $2
ORDER BY "time$0", "id$0"

Query:EventsAfterTime(afterTime)  =  SELECT *
FROM "events$51"
WHERE "time$0" > $1 AND NOT "removed$0"
ORDER BY "time$0", "id$0"

Query:EventSearch(query, afterTime)  =  SELECT *
FROM "events$51"
WHERE "time$0" >= $2 AND (TO_TSVECTOR("title$0") @@ TO_TSQUERY(CAST($1 AS VARCHAR(65536))) AND TS_RANK_CD("title$0", CAST($1 AS VARCHAR(65536))) > 0) AND NOT "removed$0"
ORDER BY "id$0"

>>>Queries


query$1 = SELECT *
FROM (SELECT `id$1`, `_uuid$0`, `_ingest_time$0`, `_source_time$0`, `userid$0`, `name$0`, `email$0`, `location$0`, `time$0`, `title$0`, `description$0`, `timestamp$0`, `secret$1`, ROW_NUMBER() OVER (PARTITION BY `id$1` ORDER BY `timestamp$0` DESC NULLS LAST) AS `$f13`
  FROM (SELECT RANDOMID(12) AS `id$1`, `_uuid$0`, `_ingest_time$0`, `_source_time$0`, `userid$0`, `name$0`, `email$0`, `location$0`, `time$0`, `title$0`, `description$0`, `timestamp$0`, RANDOMID(10) AS `secret$1`
    FROM `eventupdate$i$11`) AS `t1`) AS `t2`
WHERE `$f13` = 1

query$2 = SELECT *
FROM (SELECT `id$0`, `_uuid$0`, `_ingest_time$0`, `value$0`, `last_updated$0`, ROW_NUMBER() OVER (PARTITION BY `id$0` ORDER BY `last_updated$0` DESC NULLS LAST) AS `$f5`
  FROM (SELECT `id$0`, `_uuid$0`, `_ingest_time$0`, `value$0`, `last_updated$0`
    FROM `authtokens$i$5`) AS `t6`) AS `t7`
WHERE `$f5` = 1

query$3 = SELECT `$cor3`.`_uuid$0` AS `___uuid$0$pk$1`, CHAR_LENGTH(`t150`.`name$0`) + CHAR_LENGTH(`t150`.`title$0`) + CHAR_LENGTH(`t150`.`company$0`) AS `$f0`, `t150`.`_idx$0`, `$cor3`.`timestamp$0`
FROM (SELECT `_uuid$0`, `_ingest_time$0`, `id$0`, `last_updated$0`, `time$0`, `title$0`, `location$0`, `speakers$0`, `description$0`, `timestamp$0`
  FROM `conferenceevents$i$1`) AS `$cor3`,
 UNNEST(`$cor3`.`speakers$0`) AS `t150`

root$4 = SELECT `id$0`, `_uuid$0`, `removalId` AS `removalid$0`, `timestamp$0`, `time$0`, `title$0`, `description$0`, `name$0`, `location$0`, `removed` AS `removed$0`, CHAR_LENGTH(`description$0`) AS `embedding$0`
FROM (SELECT `t5`.`_uuid$0`, COALESCE(`t9`.`_uuid$0`, '') AS `removalId`, `t5`.`timestamp$0`, `t5`.`id$0`, `t5`.`time$0`, `t5`.`title$0`, `t5`.`description$0`, `t5`.`name$0`, `t5`.`location$0`, NOT BANNEDWORDSFILTER(`t5`.`name$0`) OR NOT BANNEDWORDSFILTER(`t5`.`description$0`) OR NOT BANNEDWORDSFILTER(`t5`.`location$0`) AS `removed`
   FROM (SELECT `$cor4`.`_uuid$0`, `$cor4`.`_ingest_time$0`, `$cor4`.`_source_time$0`, `$cor4`.`userid$0`, `$cor4`.`id$0`, `$cor4`.`name$0`, `$cor4`.`email$0`, `$cor4`.`location$0`, `$cor4`.`time$0`, `$cor4`.`title$0`, `$cor4`.`description$0`, `$cor4`.`secret$0`, `$cor4`.`timestamp$0`
     FROM (SELECT `_uuid$0`, `_ingest_time$0`, `_source_time$0`, `userid$0`, `id$0`, `name$0`, `email$0`, `location$0`, `time$0`, `title$0`, `description$0`, `secret$0`, `timestamp$0`
       FROM `eventupdate$i$11`) AS `$cor4`
      INNER JOIN `query$1` FOR SYSTEM_TIME AS OF `$cor4`.`timestamp$0` AS `t3` ON `$cor4`.`id$0` = `t3`.`id$1` AND `$cor4`.`secret$0` = `t3`.`secret$1`) AS `t5`
    LEFT JOIN (SELECT `$cor5`.`_uuid$0`, `$cor5`.`_ingest_time$0`, `$cor5`.`_source_time$0`, `$cor5`.`eventid$0`, `$cor5`.`auth_token$0`
     FROM `eventremoval$i$23` AS `$cor5`
      INNER JOIN `query$2` FOR SYSTEM_TIME AS OF `$cor5`.`_source_time$0` AS `t8` ON `t8`.`id$0` = 'removal' AND `t8`.`value$0` = `$cor5`.`auth_token$0`) AS `t9` ON `t5`.`id$0` = `t9`.`eventid$0` AND `t5`.`timestamp$0` < `t9`.`_source_time$0` AND `t9`.`_source_time$0` < (`t5`.`timestamp$0` + INTERVAL '5' SECOND(1))
   UNION ALL
   SELECT `t12`.`_uuid$0` AS `_uuid`, '' AS `removalId`, `t12`.`timestamp$0` AS `timestamp`, CAST(`t12`.`id$0` AS VARCHAR(65536) CHARACTER SET `UTF-16LE`) AS `EXPR$3`, `t12`.`time$0` AS `time`, `t12`.`title$0` AS `title`, `t12`.`description$0` AS `description`, `t20`.`name`, `t12`.`location$0` AS `location`, FALSE AS `removed`
   FROM (SELECT `_uuid$0`, `_ingest_time$0`, `id$0`, `last_updated$0`, `time$0`, `title$0`, `location$0`, `speakers$0`, `description$0`, `timestamp$0`
     FROM `conferenceevents$i$1`) AS `t12`
    INNER JOIN (SELECT `___uuid$0$pk$1`, CONCAT('speakerlength', SUM(`$f0`)) AS `name`, `window_time` AS `timestamp$0`
     FROM TABLE(TUMBLE(TABLE `query$3`, DESCRIPTOR(`timestamp$0`), INTERVAL '0.001' SECOND(1))) AS `t17`
     GROUP BY `___uuid$0$pk$1`, `window_start`, `window_end`, `window_time`) AS `t20` ON `t12`.`_uuid$0` = `t20`.`___uuid$0$pk$1` AND `t12`.`timestamp$0` = `t20`.`timestamp$0`) AS `t23`

root$5 = SELECT `userid$0`, AVG(`embedding$0`) OVER (PARTITION BY `userid$0` ORDER BY `_source_time$0` ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS `interestvector$0`, `_source_time$0`
FROM (SELECT `_uuid$0`, `_ingest_time$0`, `_source_time$0`, `text$0`, `userid$0`, CHAR_LENGTH(`text$0`) AS `embedding$0`
  FROM `addinterest$i$20`) AS `t27`

root$6 = SELECT `userid$0`, `eventid$0`, `_uuid$0`, `_ingest_time$0`, `_source_time$0`, `liked$0`
FROM `likes$i$14`

root$7 = SELECT `_uuid$0`, `removalId` AS `removalid$0`, `_ingest_time$0`, `_source_time$0`, `userid$0`, `id$0`, `name$0`, `email$0`, `location$0`, `time$0`, `title$0`, `description$0`, `secret$0`, `timestamp$0`, `removed` AS `removed$0`
FROM (SELECT `t38`.`_uuid$0`, COALESCE(`t42`.`_uuid$0`, '') AS `removalId`, `t38`.`_ingest_time$0`, `t38`.`_source_time$0`, `t38`.`userid$0`, `t38`.`id$0`, `t38`.`name$0`, `t38`.`email$0`, `t38`.`location$0`, `t38`.`time$0`, `t38`.`title$0`, `t38`.`description$0`, `t38`.`secret$0`, `t38`.`timestamp$0`, NOT BANNEDWORDSFILTER(`t38`.`name$0`) OR NOT BANNEDWORDSFILTER(`t38`.`description$0`) OR NOT BANNEDWORDSFILTER(`t38`.`location$0`) AS `removed`
  FROM (SELECT `$cor6`.`_uuid$0`, `$cor6`.`_ingest_time$0`, `$cor6`.`_source_time$0`, `$cor6`.`userid$0`, `$cor6`.`id$0`, `$cor6`.`name$0`, `$cor6`.`email$0`, `$cor6`.`location$0`, `$cor6`.`time$0`, `$cor6`.`title$0`, `$cor6`.`description$0`, `$cor6`.`secret$0`, `$cor6`.`timestamp$0`
    FROM (SELECT `_uuid$0`, `_ingest_time$0`, `_source_time$0`, `userid$0`, `id$0`, `name$0`, `email$0`, `location$0`, `time$0`, `title$0`, `description$0`, `secret$0`, `timestamp$0`
      FROM `eventupdate$i$11`) AS `$cor6`
     INNER JOIN `query$1` FOR SYSTEM_TIME AS OF `$cor6`.`timestamp$0` AS `t36` ON `$cor6`.`id$0` = `t36`.`id$1` AND `$cor6`.`secret$0` = `t36`.`secret$1`) AS `t38`
   LEFT JOIN (SELECT `$cor7`.`_uuid$0`, `$cor7`.`_ingest_time$0`, `$cor7`.`_source_time$0`, `$cor7`.`eventid$0`, `$cor7`.`auth_token$0`
    FROM `eventremoval$i$23` AS `$cor7`
     INNER JOIN `query$2` FOR SYSTEM_TIME AS OF `$cor7`.`_source_time$0` AS `t41` ON `t41`.`id$0` = 'removal' AND `t41`.`value$0` = `$cor7`.`auth_token$0`) AS `t42` ON `t38`.`id$0` = `t42`.`eventid$0` AND `t38`.`timestamp$0` < `t42`.`_source_time$0` AND `t42`.`_source_time$0` < (`t38`.`timestamp$0` + INTERVAL '5' SECOND(1))) AS `t43`
WHERE NOT `t43`.`removed`

query$8 = SELECT *
FROM (SELECT `id$0`, `_uuid$0`, `_ingest_time$0`, `last_updated$0`, `title$0`, `fromemail$0`, `toemail$0`, `textbody$0`, ROW_NUMBER() OVER (PARTITION BY `id$0` ORDER BY `last_updated$0` DESC NULLS LAST) AS `$f8`
  FROM (SELECT `id$0`, `_uuid$0`, `_ingest_time$0`, `last_updated$0`, `title$0`, `fromemail$0`, `toemail$0`, `textbody$0`
    FROM `emailtemplates$i$8`) AS `t47`) AS `t48`
WHERE `$f8` = 1

root$9 = SELECT `$cor8`.`_uuid$0`, `$cor8`.`email$0` AS `toemail$0`, `t49`.`fromemail$0`, `t49`.`title$0`, FORMAT(`t49`.`textbody$0`, `$cor8`.`name$0`, `$cor8`.`id$1`, `$cor8`.`secret$1`) AS `textbody$0`, `$cor8`.`timestamp$0`
FROM (SELECT `_uuid$0`, `_ingest_time$0`, `_source_time$0`, `userid$0`, `id$0`, `name$0`, `email$0`, `location$0`, `time$0`, `title$0`, `description$0`, `secret$0`, `timestamp$0`, RANDOMID(12) AS `id$1`, RANDOMID(10) AS `secret$1`
  FROM `eventupdate$i$11`) AS `$cor8`
 INNER JOIN `query$8` FOR SYSTEM_TIME AS OF `$cor8`.`timestamp$0` AS `t49` ON `t49`.`id$0` = 'confirmpost'

query$10 = SELECT *
FROM (SELECT `id`, `_uuid`, `removalId`, `timestamp`, `time`, `title`, `description`, `name`, `location`, `removed`, `embedding$0`, ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY `timestamp` DESC NULLS LAST) AS `$f11`
  FROM (SELECT `id$0` AS `id`, `_uuid$0` AS `_uuid`, `removalId`, `timestamp$0` AS `timestamp`, `time$0` AS `time`, `title$0` AS `title`, `description$0` AS `description`, `name$0` AS `name`, `location$0` AS `location`, `removed`, CHAR_LENGTH(`description$0`) AS `embedding$0`
    FROM (SELECT `t63`.`_uuid$0`, COALESCE(`t67`.`_uuid$0`, '') AS `removalId`, `t63`.`timestamp$0`, `t63`.`id$0`, `t63`.`time$0`, `t63`.`title$0`, `t63`.`description$0`, `t63`.`name$0`, `t63`.`location$0`, NOT BANNEDWORDSFILTER(`t63`.`name$0`) OR NOT BANNEDWORDSFILTER(`t63`.`description$0`) OR NOT BANNEDWORDSFILTER(`t63`.`location$0`) AS `removed`
       FROM (SELECT `$cor11`.`_uuid$0`, `$cor11`.`_ingest_time$0`, `$cor11`.`_source_time$0`, `$cor11`.`userid$0`, `$cor11`.`id$0`, `$cor11`.`name$0`, `$cor11`.`email$0`, `$cor11`.`location$0`, `$cor11`.`time$0`, `$cor11`.`title$0`, `$cor11`.`description$0`, `$cor11`.`secret$0`, `$cor11`.`timestamp$0`
         FROM (SELECT `_uuid$0`, `_ingest_time$0`, `_source_time$0`, `userid$0`, `id$0`, `name$0`, `email$0`, `location$0`, `time$0`, `title$0`, `description$0`, `secret$0`, `timestamp$0`
           FROM `eventupdate$i$11`) AS `$cor11`
          INNER JOIN `query$1` FOR SYSTEM_TIME AS OF `$cor11`.`timestamp$0` AS `t61` ON `$cor11`.`id$0` = `t61`.`id$1` AND `$cor11`.`secret$0` = `t61`.`secret$1`) AS `t63`
        LEFT JOIN (SELECT `$cor12`.`_uuid$0`, `$cor12`.`_ingest_time$0`, `$cor12`.`_source_time$0`, `$cor12`.`eventid$0`, `$cor12`.`auth_token$0`
         FROM `eventremoval$i$23` AS `$cor12`
          INNER JOIN `query$2` FOR SYSTEM_TIME AS OF `$cor12`.`_source_time$0` AS `t66` ON `t66`.`id$0` = 'removal' AND `t66`.`value$0` = `$cor12`.`auth_token$0`) AS `t67` ON `t63`.`id$0` = `t67`.`eventid$0` AND `t63`.`timestamp$0` < `t67`.`_source_time$0` AND `t67`.`_source_time$0` < (`t63`.`timestamp$0` + INTERVAL '5' SECOND(1))
       UNION ALL
       SELECT `t70`.`_uuid$0` AS `_uuid`, '' AS `removalId`, `t70`.`timestamp$0` AS `timestamp`, CAST(`t70`.`id$0` AS VARCHAR(65536) CHARACTER SET `UTF-16LE`) AS `EXPR$3`, `t70`.`time$0` AS `time`, `t70`.`title$0` AS `title`, `t70`.`description$0` AS `description`, `t78`.`name`, `t70`.`location$0` AS `location`, FALSE AS `removed`
       FROM (SELECT `_uuid$0`, `_ingest_time$0`, `id$0`, `last_updated$0`, `time$0`, `title$0`, `location$0`, `speakers$0`, `description$0`, `timestamp$0`
         FROM `conferenceevents$i$1`) AS `t70`
        INNER JOIN (SELECT `___uuid$0$pk$1`, CONCAT('speakerlength', SUM(`$f0`)) AS `name`, `window_time` AS `timestamp$0`
         FROM TABLE(TUMBLE(TABLE `query$3`, DESCRIPTOR(`timestamp$0`), INTERVAL '0.001' SECOND(1))) AS `t75`
         GROUP BY `___uuid$0$pk$1`, `window_start`, `window_end`, `window_time`) AS `t78` ON `t70`.`_uuid$0` = `t78`.`___uuid$0$pk$1` AND `t70`.`timestamp$0` = `t78`.`timestamp$0`) AS `t81`) AS `t83`) AS `t84`
WHERE `$f11` = 1

root$11 = SELECT `$cor9`.`_uuid$0`, `t56`.`toemail$0`, `t56`.`fromemail$0`, `t56`.`title$0`, FORMAT(`t56`.`textbody$0`, `$cor9`.`eventid$0`, `$cor9`.`title`, `$cor9`.`description`, `$cor9`.`name`) AS `textbody$0`, `$cor9`.`_source_time$0`
FROM (SELECT *
  FROM `reportevent$i$17` AS `$cor10`
   INNER JOIN `query$10` FOR SYSTEM_TIME AS OF `$cor10`.`_source_time$0` AS `t85` ON `$cor10`.`eventid$0` = `t85`.`id`) AS `$cor9`
 INNER JOIN `query$8` FOR SYSTEM_TIME AS OF `$cor9`.`_source_time$0` AS `t56` ON `t56`.`id$0` = 'eventflag'

