=== Customer
ID:     customer$2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
Plan:
LogicalTableScan(table=[[customer$1]], hints=[[[WatermarkHint inheritPath:[] options:[1]]]]) hints[WatermarkHint options:[1]]

=== Customer
ID:     customer$3
Type:   state
Stage:  streams
Inputs: customer$2
Primary Key: customerid
Timestamp  : _ingest_time
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - customerid: BIGINT NOT NULL
 - email: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - lastUpdated: BIGINT NOT NULL
Post Processors:
 - topN: partition=customerid limit=1 sort=#1: _ingest_time TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalTableScan(table=[[customer$2]])

=== OrderCustomer
ID:     ordercustomer$1
Type:   state
Stage:  streams
Inputs: customer$3, orders$3
Primary Key: id
Timestamp  : __timestamp
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(_uuid=[$0], id=[$2], name=[$11], customerid=[$3], __timestamp=[CASE(<($1, $8), $8, $1)])
  LogicalJoin(condition=[=($3, $9)], joinType=[inner]) hints[JoinCostHint options:[VERSIONED_STATE, VERSIONED_STATE, 1, RIGHT]]
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $1 DESC NULLS LAST)])
        LogicalTableScan(table=[[orders$3]])
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $1 DESC NULLS LAST)])
        LogicalTableScan(table=[[customer$3]])

=== OrderCustomerConstant
ID:     ordercustomerconstant$1
Type:   state
Stage:  streams
Inputs: customer$3, orders$3
Primary Key: id
Timestamp  : __timestamp
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalProject(_uuid=[$0], id=[$2], name=[$11], customerid=[$3], __timestamp=[CASE(<($1, $8), $8, $1)])
  LogicalJoin(condition=[AND(=($3, $9), =($11, 'Robert'), >($2, 5))], joinType=[inner]) hints[JoinCostHint options:[VERSIONED_STATE, VERSIONED_STATE, 2, RIGHT]]
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $1 DESC NULLS LAST)])
        LogicalTableScan(table=[[orders$3]])
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $1 DESC NULLS LAST)])
        LogicalTableScan(table=[[customer$3]])

=== OrderCustomerLeft
ID:     ordercustomerleft$1
Type:   state
Stage:  streams
Inputs: customer$3, orders$3
Primary Key: id
Timestamp  : __timestamp
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE"
 - id: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE"
 - customerid: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)
Plan:
LogicalProject(_uuid=[$7], id=[$2], name=[$11], customerid=[$3], __timestamp=[CASE(<($1, $8), $8, $1)])
  LogicalJoin(condition=[=($3, $9)], joinType=[left]) hints[JoinCostHint options:[VERSIONED_STATE, VERSIONED_STATE, 1, RIGHT]]
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $1 DESC NULLS LAST)])
        LogicalTableScan(table=[[orders$3]])
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $1 DESC NULLS LAST)])
        LogicalTableScan(table=[[customer$3]])

=== OrderCustomerLeftExcluded
ID:     ordercustomerleftexcluded$1
Type:   state
Stage:  streams
Inputs: customer$3, orders$3
Primary Key: id
Timestamp  : __timestamp
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)
Plan:
LogicalProject(_uuid=[$0], id=[$2], customerid=[$3], __timestamp=[CASE(<($1, $8), $8, $1)])
  LogicalFilter(condition=[IS NULL($7)])
    LogicalJoin(condition=[=($3, $9)], joinType=[left]) hints[JoinCostHint options:[VERSIONED_STATE, VERSIONED_STATE, 1, RIGHT]]
      LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
        LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $1 DESC NULLS LAST)])
          LogicalTableScan(table=[[orders$3]])
      LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
        LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $1 DESC NULLS LAST)])
          LogicalTableScan(table=[[customer$3]])

=== OrderCustomerRight
ID:     ordercustomerright$1
Type:   state
Stage:  streams
Inputs: customer$3, orders$3
Primary Key: _customerid0, ouuid
Timestamp  : __timestamp
Schema:
 - ouuid: BIGINT NOT NULL
 - id: BIGINT
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT
 - _customerid0: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)
Plan:
LogicalProject(ouuid=[COALESCE($9, 0:BIGINT)], id=[$9], name=[$4], customerid=[$10], _customerid0=[$2], __timestamp=[CASE(<($1, $8), $8, $1)])
  LogicalJoin(condition=[=($10, $2)], joinType=[left]) hints[JoinCostHint options:[VERSIONED_STATE, VERSIONED_STATE, 1, LEFT]]
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $1 DESC NULLS LAST)])
        LogicalTableScan(table=[[customer$3]])
    LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
      LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $1 DESC NULLS LAST)])
        LogicalTableScan(table=[[orders$3]])

=== OrderCustomerRightExcluded
ID:     ordercustomerrightexcluded$1
Type:   state
Stage:  streams
Inputs: customer$3, orders$3
Primary Key: customerid
Timestamp  : __timestamp
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - customerid: BIGINT NOT NULL
 - name: VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)
Plan:
LogicalProject(_uuid=[$0], customerid=[$2], name=[$4], __timestamp=[CASE(<($1, $8), $8, $1)])
  LogicalFilter(condition=[IS NULL($9)])
    LogicalJoin(condition=[=($10, $2)], joinType=[left]) hints[JoinCostHint options:[VERSIONED_STATE, VERSIONED_STATE, 1, LEFT]]
      LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
        LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastUpdated=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $1 DESC NULLS LAST)])
          LogicalTableScan(table=[[customer$3]])
      LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
        LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $1 DESC NULLS LAST)])
          LogicalTableScan(table=[[orders$3]])

=== Orders
ID:     orders$2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : _ingest_time
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType(INTEGER NOT NULL _idx, BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[1]]]]) hints[WatermarkHint options:[1]]

=== Orders
ID:     orders$3
Type:   state
Stage:  streams
Inputs: orders$2
Primary Key: id
Timestamp  : _ingest_time
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType(INTEGER NOT NULL _idx, BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Post Processors:
 - topN: partition=id limit=1 sort=#1: _ingest_time TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalTableScan(table=[[orders$2]])

