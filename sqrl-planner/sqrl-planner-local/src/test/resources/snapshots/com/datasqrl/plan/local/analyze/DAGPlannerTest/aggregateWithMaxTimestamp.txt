=== OrderAgg1
ID:     orderagg1$1
Type:   state
Stage:  streams
Inputs: orders$2
Primary Key: customerid
Timestamp  : __timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - count: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalAggregate(group=[{3}], count=[COUNT()], __timestamp=[MAX($4)])
  LogicalTableScan(table=[[orders$2]])

=== OrderAgg2
ID:     orderagg2$1
Type:   state
Stage:  streams
Inputs: orders$2
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - count: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{3}], timestamp=[MAX($4)], count=[COUNT()])
  LogicalTableScan(table=[[orders$2]])

=== OrderAgg3
ID:     orderagg3$1
Type:   state
Stage:  streams
Inputs: ordersstate$1
Primary Key: customerid
Timestamp  : __timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - count: BIGINT NOT NULL
 - __timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
Plan:
LogicalAggregate(group=[{3}], count=[COUNT()], __timestamp=[MAX($4)])
  LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
    LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $4 DESC NULLS LAST)])
      LogicalTableScan(table=[[ordersstate$1]])

=== OrderAgg4
ID:     orderagg4$1
Type:   state
Stage:  streams
Inputs: ordersstate$1
Primary Key: customerid
Timestamp  : timestamp
Schema:
 - customerid: BIGINT NOT NULL
 - timestamp: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - count: BIGINT NOT NULL
Plan:
LogicalAggregate(group=[{3}], timestamp=[MAX($4)], count=[COUNT()])
  LogicalFilter(condition=[=($6, 1)]) hints[DedupHint]
    LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], _rownum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $4 DESC NULLS LAST)])
      LogicalTableScan(table=[[ordersstate$1]])

=== Orders
ID:     orders$2
Type:   stream
Stage:  streams
Primary Key: _uuid
Timestamp  : time
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType(INTEGER NOT NULL _idx, BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Plan:
LogicalTableScan(table=[[orders$1]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

=== OrdersState
ID:     ordersstate$1
Type:   state
Stage:  streams
Inputs: orders$2
Primary Key: id
Timestamp  : time
Schema:
 - _uuid: CHAR(36) CHARACTER SET "UTF-16LE" NOT NULL
 - _ingest_time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - id: BIGINT NOT NULL
 - customerid: BIGINT NOT NULL
 - time: TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) NOT NULL
 - entries: RecordType(INTEGER NOT NULL _idx, BIGINT NOT NULL productid, BIGINT NOT NULL quantity, DOUBLE NOT NULL unit_price, DOUBLE discount) NOT NULL ARRAY NOT NULL
Post Processors:
 - topN: partition=id limit=1 sort=#4: time TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) DESC-nulls-last 
Plan:
LogicalTableScan(table=[[orders$2]])

