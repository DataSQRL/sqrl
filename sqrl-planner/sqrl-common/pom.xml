<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <artifactId>sqrl-planner</artifactId>
    <groupId>com.datasqrl</groupId>
    <version>0.4.3</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>sqrl-common</artifactId>
  <version>0.4.3</version>

  <!--
    README: Dependencies that are shared between planning and utility modules
  -->
  <dependencies>
    <!-- SQRL -->
    <dependency>
      <groupId>com.datasqrl</groupId>
      <artifactId>sqrl-base</artifactId>
    </dependency>
    <dependency>
      <groupId>com.datasqrl</groupId>
      <artifactId>sqrl-io-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.immutables</groupId>
      <artifactId>value</artifactId>
      <scope>compile</scope>
    </dependency>
    <!-- Flink -->
    <!-- TODO: We only use calcite in this dep as the classes are not shaded and
               will break flink's in-process execution if its modified.
               This needs to be refactored out, since we also have our own
               calcite overrides. -->
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-planner_2.12</artifactId>
    </dependency>

    <!-- Util -->
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr4-runtime</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
    </dependency>

    <!-- Test -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.datasqrl</groupId>
      <artifactId>sqrl-execute-flink-function</artifactId>
    </dependency>
  </dependencies>
  <build>
    <pluginManagement>
      <plugins>
        <!-- Antlr code gen -->
        <plugin>
          <groupId>org.antlr</groupId>
          <artifactId>antlr4-maven-plugin</artifactId>
          <version>${antlr.version}</version>
          <executions>
            <execution>
              <phase>generate-sources</phase>
              <goals>
                <goal>antlr4</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <visitor>true</visitor>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <!-- Patch in calcite class overrides, required for downstream packages -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <configuration>
          <filters combine.children="append">
            <filter>
              <artifact>*:*</artifact>
              <excludes>
                <exclude>org-apache-calcite-jdbc.properties</exclude>
                <exclude>META-INF/*.SF</exclude>
                <exclude>META-INF/*.DSA</exclude>
                <exclude>META-INF/*.RSA</exclude>
                <exclude>LICENSE</exclude>
              </excludes>
            </filter>
          </filters>
          <artifactSet>
          </artifactSet>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.antlr</groupId>
        <artifactId>antlr4-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.22.2</version>
        <configuration>
          <excludes>
            <exclude>**/*IT*.java</exclude>
          </excludes>
        </configuration>
      </plugin>
      <plugin>
        <!-- Extract parser grammar template from calcite-core.jar and put
                     it under ${project.build.directory} where all freemarker templates are. -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-parser-template</id>
            <phase>initialize</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.apache.calcite</groupId>
                  <artifactId>calcite-core</artifactId>
                  <version>1.26.0</version>
<!--                  <version>1.29.0</version>-->
                  <type>jar</type>
                  <overWrite>true</overWrite>
                  <outputDirectory>${project.build.directory}/</outputDirectory>
                  <includes>**/Parser.jj</includes>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>apply-patch</id>
            <phase>initialize</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>patch</executable>
              <arguments>
                <!-- The location where the Parser.jj file was extracted -->
                <argument>${project.build.directory}/codegen/templates/Parser.jj</argument>
                <!-- The location of your patch file -->
                <argument>-i</argument>
                <argument>patch.diff</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- adding fmpp code gen -->
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-fmpp-resources</id>
            <phase>initialize</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/codegen</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/codegen</directory>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.googlecode.fmpp-maven-plugin</groupId>
        <artifactId>fmpp-maven-plugin</artifactId>
        <version>1.0</version>
        <dependencies>
          <dependency>
            <groupId>org.freemarker</groupId>
            <artifactId>freemarker</artifactId>
            <version>2.3.28</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>generate-fmpp-sources</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <cfgFile>${project.build.directory}/codegen/config.fmpp</cfgFile>
              <outputDirectory>target/generated-sources</outputDirectory>
              <templateDirectory>${project.build.directory}/codegen/templates</templateDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!-- This must be run AFTER the fmpp-maven-plugin -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>javacc-maven-plugin</artifactId>
        <version>2.4</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <id>javacc</id>
            <goals>
              <goal>javacc</goal>
            </goals>
            <configuration>
              <sourceDirectory>${project.build.directory}/generated-sources/</sourceDirectory>
              <includes>
                <include>**/Parser.jj</include>
              </includes>
              <!-- This must be kept synced with Apache Calcite. -->
              <lookAhead>1</lookAhead>
              <isStatic>false</isStatic>
              <outputDirectory>${project.build.directory}/generated-sources/javacc</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>