# This is a docker-compose template for starting a DataSQRL compiled data pipeline
# This template uses the Apache Flink as the stream engine, Postgres as the database engine, and Vertx as the server engine.
# It assumes that:
# 1. You ran the `compile` command to compile your SQRL script (and API specification)
# 2. Are in the `build/deploy` directory which contains the deployment artifacts generated by the compiler
# 3. Have built the deployment artifacts for each pipeline engine
# Refer to the deployment documentation for more information:
# https://www.datasqrl.com/docs/reference/operations/deploy/overview/
version: "3.8"
services:
  db:
    image: postgres:14.6-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=datasqrl
    ports:
      - '5432:5432'
    volumes:
      - ./database-schema.sql:/docker-entrypoint-initdb.d/init-schema.sql

  flink-jobmanager:
    image: flink:1.16.1-scala_2.12-java11
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager

  flink-taskmanager:
    image: flink:1.16.1-scala_2.12-java11
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 1

  servlet:
    image: eclipse-temurin:11
    command: java -jar vertx-server.jar
    depends_on:
      - db
    ports:
      - "8888:8888"
    volumes:
      - ./server-model.json:/model.json
      - ./server-config.json:/config.json
      - ./vertx-server.jar:/vertx-server.jar

  flink-job-submitter:
    image: curlimages/curl:7.80.0
    depends_on:
      - flink-jobmanager
      - db
    volumes:
      - ./flink-job.jar:/flink-job.jar
    entrypoint: /bin/sh -c
    command: >
      "while ! curl -s http://flink-jobmanager:8081/overview | grep -q '\"taskmanagers\":1'; do
        echo 'Waiting for Flink JobManager REST API...';
        sleep 5;
      done;
      echo 'Submitting Flink job...';
      curl -X POST -H 'Content-Type: application/x-java-archive' --data-binary '@/flink-job.jar' http://flink-jobmanager:8081/jars/upload;
      echo 'Job submitted.'"

volumes:
  db:
    driver: local
