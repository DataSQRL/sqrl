version: 2.1

orbs:
  docker: circleci/docker@2.2.0

executors:
  default-machine:
    machine:
      image: ubuntu-2004:202111-02
      resource_class: large
    environment:
      TZ: America/Los_Angeles

commands:
  generate-settings:
    description: "Generate Maven settings.xml with GitHub credentials"
    steps:
      - run:
          name: Generate settings.xml
          command: |
            mkdir -p ~/.m2
            cat \<<EOF > ~/.m2/settings.xml
            <settings>
              <servers>
                <server>
                  <id>github</id>
                  <username>${GITHUB_USER}</username>
                  <password>${GITHUB_TOKEN}</password>
                </server>
              </servers>
            </settings>
            EOF

  install-jdk:
    description: "Install OpenJDK 17"
    steps:
      - run:
          name: Install OpenJDK 17
          command: |
                   sudo apt-get update && sudo apt-get install -y openjdk-17-jdk
                   sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
                   sudo update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac
                   java -version

  download-dependencies:
    description: "Download Maven dependencies"
    steps:
      - restore_cache:
          keys:
            - m2-{{ checksum "pom.xml" }}
      - run:
          name: Check if cache was restored
          command: |
            if [ -d ~/.m2/repository ]; then
              echo "Cache hit detected, skipping resolve job."
              circleci step halt
            else
              echo "No cache hit, proceeding with resolve."
            fi
      - run:
          name: Download dependencies
          command: |
            mvn -B \
              org.apache.maven.plugins:maven-dependency-plugin:3.8.1:go-offline \
              de.qaware.maven:go-offline-maven-plugin:1.2.8:resolve-dependencies \
              -T3

  save-test-results:
    description: "Save test results and upload to Codecov"
    steps:
      - run:
          name: Save package results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" \
              -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - run:
          name: Codecov
          command: |
            set -x

            curl -Os https://cli.codecov.io/latest/linux/codecov
            chmod +x codecov

            # Prepare extra arguments: include pull request number if set
            EXTRA=""
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              EXTRA="--pull-request-number $CIRCLE_PR_NUMBER"
            fi

            # Build the set of common arguments.
            COMMON_ARGS="--token $CODECOV_TOKEN --branch $CIRCLE_BRANCH --commit-sha $CIRCLE_SHA1 $EXTRA --recurse-submodules --git-service github"

            ls -lha

            ./codecov --version

            # Upload the coverage report.
            ./codecov upload-coverage $COMMON_ARGS

            # Upload the test reports.
            ./codecov do-upload --report-type test_results $COMMON_ARGS

jobs:
  build-base:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - generate-settings
      - download-dependencies
      - save_cache:
          key: m2-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2

  unit-tests:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - m2-{{ checksum "pom.xml" }}
      - generate-settings
      - run:
          name: Run Unit Tests
          command: mvn -T1 -B install -DskipITs -Pskip-shade-plugin
          environment:
            DATASQRL_TOKEN: $DATASQRL_TOKEN
      - save-test-results

  integration-tests:
    executor: default-machine
    steps:
      - checkout
      - restore_cache:
          keys:
            - m2-{{ checksum "pom.xml" }}
      - generate-settings
      - install-jdk
      - run:
          name: Run Integration Tests
          command: mvn -T1 -B install -Dtest=skip -Dsurefire.failIfNoSpecifiedTests=false -Pskip-shade-plugin
          environment:
            DATASQRL_TOKEN: $DATASQRL_TOKEN
      - save-test-results

  build-test-image:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - m2-{{ checksum "pom.xml" }}
      - generate-settings
      - run:
          name: Build shaded JAR
          command: mvn clean -T1 -B install -DskipTests -DskipITs
          environment:
            DATASQRL_TOKEN: $DATASQRL_TOKEN
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Pull base image
          command: docker pull eclipse-temurin:17-jdk-noble
      - run:
          name: Build Docker image
          command: docker build -t sqrl-test ./sqrl-tools
      - run:
          name: Save Docker image
          command: docker save -o sqrl-test.tar sqrl-test
      - persist_to_workspace:
          root: .
          paths:
            - sqrl-test.tar

  run-conference-tests: &disabled
    executor: default-machine
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: docker load -i sqrl-test.tar
      - run:
          name: Conference Tests
          command: |
            docker run -i --rm -v $PWD:/build sqrl-test test conference.sqrl conference.graphqls --snapshot snapshots-conference --tests tests-conference
          working_directory: ./sqrl-testing/sqrl-integration-tests/src/test/resources/usecases/conference

  run-connectors-tests:
    executor: default-machine
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: docker load -i sqrl-test.tar
      - run:
          name: Connectors Tests
          command: |
            docker run -i --rm -v $PWD:/build sqrl-test \
              test connectors.sqrl
          working_directory: ./sqrl-testing/sqrl-integration-tests/src/test/resources/usecases/connectors-test

  run-udf-tests:
    executor: default-machine
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: docker load -i sqrl-test.tar
      - run:
          name: UDF Tests
          command: |
            docker run -i --rm -v $PWD:/build sqrl-test \
              test myudf.sqrl \
              --snapshot snapshots-myudf --tests tests-myudf
          working_directory: ./sqrl-testing/sqrl-integration-tests/src/test/resources/usecases/udf

  docker-build-and-push:
    parameters:
      build_type:
        type: enum
        enum: ["latest", "tag"]
        default: "latest"
    docker:
      - image: cimg/openjdk:17.0
    environment:
      TZ: America/Los_Angeles
    steps:
      - checkout
      - generate-settings
      - download-dependencies
      - run:
          name: Build SQRL
          command: |
            if [ "<< parameters.build_type >>" = "tag" ]; then
              mvn -T1 -B -U -e clean package -DskipTests
            else
              mvn -T1 -B -U -e clean package
            fi
          environment:
            DATASQRL_TOKEN: $DATASQRL_TOKEN
      - docker/install-docker-tools
      - run:
          name: Set Docker Tags
          command: |
            if [ "<< parameters.build_type >>" = "tag" ]; then
              echo "export CMD_TAGS='$CIRCLE_TAG,latest'" >> $BASH_ENV
              echo "export SERVER_TAGS='$CIRCLE_TAG,latest'" >> $BASH_ENV
              echo "export FLINK_TAGS='$CIRCLE_TAG,latest'" >> $BASH_ENV
            else
              echo "export CMD_TAGS='dev'" >> $BASH_ENV
              echo "export SERVER_TAGS='dev'" >> $BASH_ENV
              echo "export FLINK_TAGS='dev'" >> $BASH_ENV
            fi
      - docker/build:
          image: datasqrl/cmd
          tag: "$CMD_TAGS"
          dockerfile: sqrl-tools/Dockerfile
          path: sqrl-tools
          extra_build_args: --platform=linux/amd64,linux/arm64
      - docker/build:
          image: datasqrl/sqrl-server
          tag: "$SERVER_TAGS"
          dockerfile: sqrl-server/sqrl-server-vertx/Dockerfile
          path: sqrl-server/sqrl-server-vertx
          extra_build_args: --platform=linux/amd64,linux/arm64
      - docker/build:
          image: datasqrl/sqrl-flink-runner
          tag: "$FLINK_TAGS"
          dockerfile: sqrl-tools/sqrl-flink-runner/Dockerfile
          path: sqrl-tools/sqrl-flink-runner
          extra_build_args: --platform=linux/amd64,linux/arm64
      - when:
          condition:
            equal: ["tag", << parameters.build_type >>]
          steps:
            - docker/push: { image: datasqrl/cmd, tag: "$CIRCLE_TAG" }
            - docker/push: { image: datasqrl/cmd, tag: latest }
            - docker/push: { image: datasqrl/sqrl-server, tag: "$CIRCLE_TAG" }
            - docker/push: { image: datasqrl/sqrl-server, tag: latest }
            - docker/push: { image: datasqrl/sqrl-flink-runner, tag: "$CIRCLE_TAG" }
            - docker/push: { image: datasqrl/sqrl-flink-runner, tag: latest }
      - when:
          condition:
            equal: ["latest", << parameters.build_type >>]
          steps:
            - docker/push: { image: datasqrl/cmd, tag: dev }
            - docker/push: { image: datasqrl/sqrl-server, tag: dev }
            - docker/push: { image: datasqrl/sqrl-flink-runner, tag: dev }

workflows:
  pull-request-workflow:
    jobs:
      - build-base:
          context: datasqrl
      - unit-tests:
          context: datasqrl
          requires:
            - build-base
      - integration-tests:
          context: datasqrl
          requires:
            - build-base
      - build-test-image:
          context: datasqrl
          requires:
            - build-base
      # Temporarily disabled for maintenance:
      # - run-conference-tests:
      #     context: datasqrl
      #     requires:
      #       - build-test-image
      - run-connectors-tests:
          context: datasqrl
          requires:
            - build-test-image
      - run-udf-tests:
          context: datasqrl
          requires:
            - build-test-image

  main-branch-workflow:
    jobs:
      - docker-build-and-push:
          build_type: "latest"
          context:
            - datasqrl
          filters:
            branches:
              only:
                - main
                - v0.5.9-release

  tag-workflow:
    jobs:
      - docker-build-and-push:
          build_type: "tag"
          context:
            - datasqrl
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
