version: 2.1

job-defaults: &job-defaults
  context: datasqrl
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

orbs:
  docker: circleci/docker@2.2.0

executors:
  default-machine:
    machine:
      image: ubuntu-2004:202111-02
      resource_class: large
    environment:
      TZ: America/Los_Angeles

commands:
  generate-settings:
    description: "Generate Maven settings.xml with GitHub credentials"
    steps:
      - run:
          name: Generate settings.xml
          command: |
            mkdir -p ~/.m2
            cat \<<EOF > ~/.m2/settings.xml
            <settings>
              <servers>
                <server>
                  <id>github</id>
                  <username>${GITHUB_USER}</username>
                  <password>${GITHUB_TOKEN}</password>
                </server>
                <server>
                  <id>central</id>
                  <username>${CENTRAL_USER}</username>
                  <password>${CENTRAL_PASSWORD}</password>
                </server>
              </servers>
            </settings>
            EOF

  install-jdk:
    description: "Install OpenJDK 17"
    steps:
      - run:
          name: Install OpenJDK 17
          command: |
                   sudo apt-get update && sudo apt-get install -y openjdk-17-jdk
                   sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
                   sudo update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac
                   java -version

  determine-version:
    description: "Derive TAG_SUFFIX and REGISTRY"
    steps:
      - run:
          name: Determine Docker tag & registry
          command: |
            set -x
            # helper to extract the first PR number, if any
            get_pr_number() {
              if [ -n "$CIRCLE_PULL_REQUEST" ]; then
                basename "$CIRCLE_PULL_REQUEST"
              elif [ -n "$CIRCLE_PULL_REQUESTS" ]; then
                echo "$CIRCLE_PULL_REQUESTS" | cut -d',' -f1 | xargs basename
              fi
            }

            PR_NUM=$(get_pr_number)

            if [ -n "$PR_NUM" ]; then
              echo "export TAG_SUFFIX=pr-$PR_NUM" >> "$BASH_ENV"
              echo "export REGISTRY=ghcr.io/datasqrl" >> "$BASH_ENV"
            elif [ -n "$CIRCLE_TAG" ]; then
              echo "export TAG_SUFFIX=$CIRCLE_TAG"    >> "$BASH_ENV"
              echo "export REGISTRY=datasqrl"        >> "$BASH_ENV"
              echo "export LATEST_TAG=true"          >> "$BASH_ENV"
            elif [ "$CIRCLE_BRANCH" = "main" ]; then
              echo "export TAG_SUFFIX=dev"           >> "$BASH_ENV"
              echo "export REGISTRY=datasqrl"        >> "$BASH_ENV"
            else
              echo "export TAG_SUFFIX=$CIRCLE_BRANCH" >> "$BASH_ENV"
              echo "export REGISTRY=datasqrl"         >> "$BASH_ENV"
            fi

  download-dependencies:
    description: "Download Maven dependencies"
    steps:
      - restore_cache:
          keys:
            - m2-{{ checksum "pom.xml" }}
      - run:
          name: Check if cache was restored
          command: |
            if [ -d ~/.m2/repository/de/qaware ]; then
              echo "Cache hit detected, skipping resolve job."
              circleci step halt
            else
              echo "No cache hit, proceeding with resolve."
            fi
      - run:
          name: Download dependencies
          command: |
            mvn -B \
              org.apache.maven.plugins:maven-dependency-plugin:3.8.1:go-offline \
              de.qaware.maven:go-offline-maven-plugin:1.2.8:resolve-dependencies \
              -T3

  save-test-results:
    description: "Save test results and upload to Codecov"
    steps:
      - run:
          name: Save package results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" \
              -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - run:
          name: Codecov
          command: |
            set -x
            curl -Os https://cli.codecov.io/latest/linux/codecov
            chmod +x codecov

            # Prepare extra arguments: include pull request number if set
            EXTRA=""
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              EXTRA="--pull-request-number $CIRCLE_PR_NUMBER"
            fi

            # Build the set of common arguments.
            COMMON_ARGS="--token $CODECOV_TOKEN --branch $CIRCLE_BRANCH --commit-sha $CIRCLE_SHA1 $EXTRA --recurse-submodules --git-service github"

            ls -lha

            ./codecov --version

            # Upload the coverage report.
            ./codecov upload-coverage $COMMON_ARGS

            # Upload the test reports.
            ./codecov do-upload --report-type test_results $COMMON_ARGS

  compute-base-tag:
    description: "Compute deterministic BASE_TAG from Dockerfile.base"
    steps:
      - run:
          name: Compute BASE_TAG
          command: |
            BASE_TAG=$(sha1sum sqrl-tools/Dockerfile.base | cut -c1-12)
            echo "Computed BASE_TAG=${BASE_TAG}"
            echo "export BASE_TAG=${BASE_TAG}" >> "$BASH_ENV"

  compute-mcp-tag:
    description: "Compute MCP_TAG from latest @modelcontextprotocol/inspector version"
    steps:
      - run:
          name: Compute MCP_TAG
          command: |
            # Install Node.js and npm if not available
            if ! command -v npm &> /dev/null; then
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            
            # Fetch the latest version of @modelcontextprotocol/inspector
            MCP_TAG=$(npm view @modelcontextprotocol/inspector version)
            echo "Latest MCP inspector version: ${MCP_TAG}"
            echo "export MCP_TAG=${MCP_TAG}" >> "$BASH_ENV"

  checkout-and-version:
    steps:
      - checkout
      - run:
          name: Set version if tagged release
          command: |
            env
            if [ -n "$CIRCLE_TAG" ]; then
              echo "Setting Maven version to $CIRCLE_TAG"
              mvn -B versions:set -DnewVersion=$CIRCLE_TAG
            fi

  run-docker-test:
    description: >
      Run a sqrl-test container:
        • fail if an expected pattern is **missing**
        • fail if any SLF4J / log4j warnings **appear**
    parameters:
      test_args:        { type: string }
      working_dir:      { type: string }
      expected_pattern: { type: string }
    steps:
      - run:
          name: Run tests and assertions
          working_directory: << parameters.working_dir >>
          environment:
            LOG_FILE: "/tmp/sqrl-test-logs-$$.txt"
          command: |
            set -o pipefail

            # 1 ── run container and capture all output
            docker run -i -v "$PWD:/build" sqrl-test \
              << parameters.test_args >> 2>&1 | tee "$LOG_FILE"
            DOCKER_EXIT=${PIPESTATUS[0]}

            # 2 ──  slf4j / log4j warnings must NOT appear
            if grep -qE '(log4j:WARN|SLF4J\(W\)|SLF4J:WARN)' "$LOG_FILE"; then
              echo "❌  SLF4J / log4j warnings detected – failing the job." >&2
              exit 1
            fi

            # 3 ──  the job-specific pattern MUST appear
            if ! grep -q "<< parameters.expected_pattern >>" "$LOG_FILE"; then
              echo "❌  Expected log entry “<< parameters.expected_pattern >>” not found – failing the job." >&2
              exit 1
            fi

            # 4 ──  still propagate the container’s exit status
            exit "$DOCKER_EXIT"

jobs:
  download-maven-dependencies:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout-and-version
      - generate-settings
      - download-dependencies
      - save_cache:
          key: m2-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2

  unit-tests:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout-and-version
      - restore_cache:
          keys:
            - m2-{{ checksum "pom.xml" }}
      - generate-settings
      - run:
          name: Run Unit Tests
          command: mvn -U -T2 -B install -DskipITs -Pskip-shade-plugin
      - save-test-results

  integration-tests:
    executor: default-machine
    parameters:
      test_sharding_total:
        type: integer
      test_sharding_index:
        type: integer
    environment:
      TEST_SHARDING_TOTAL: << parameters.test_sharding_total >>
      TEST_SHARDING_INDEX:  << parameters.test_sharding_index >>
    steps:
      - checkout-and-version
      - restore_cache:
          keys:
            - m2-{{ checksum "pom.xml" }}
      - generate-settings
      - install-jdk
      - compute-mcp-tag
      - run:
          name: Auth ghcr
          command: echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_USER" --password-stdin
      - run:
          name: Run Integration Tests
          command: mvn -U -T2 -B install -Dtest=skip -Dsurefire.failIfNoSpecifiedTests=false -Pskip-shade-plugin -Dmcp.inspector.version=$MCP_TAG
      - save-test-results

  build-test-image:
    executor: default-machine
    steps:
      - checkout-and-version
      - restore_cache:
          keys:
            - m2-{{ checksum "pom.xml" }}
      - generate-settings
      - install-jdk
      - run:
          name: Build shaded JAR
          command: mvn -U clean -T1C -B install -DskipTests -DskipITs
      - compute-base-tag
      - run:
          name: Pull base image
          command: docker pull datasqrl/base-sqrl:$BASE_TAG
      - run:
          name: Build and push test images
          command: |
            set -ex
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_USER" --password-stdin

            # ── cmd test image ────────────────────────────────────────────────
            docker build \
              --build-arg BASE_TAG=$BASE_TAG \
              -t datasqrl/cmd-test-image:${CIRCLE_SHA1} \
              ./sqrl-tools
            docker push datasqrl/cmd-test-image:${CIRCLE_SHA1}

            # ── sqrl-server test image ───────────────────────────────────────
            docker build \
              -t datasqrl/sqrl-server-test-image:${CIRCLE_SHA1} \
              sqrl-server/sqrl-server-vertx
            docker push datasqrl/sqrl-server-test-image:${CIRCLE_SHA1}

            # wait for all images to be pushed
            wait

  deploy:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout-and-version
      - restore_cache:
          keys:
            - m2-{{ checksum "pom.xml" }}
      - generate-settings
      - run:
          name: Import GPG Key
          command: |
            echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
            echo "default-key $(gpg --list-keys --with-colons | grep pub | cut -d':' -f5)" >> ~/.gnupg/gpg.conf
            echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
      - run:
          name: Build shaded JAR
          command: mvn -U clean -T1C -B deploy -DskipTests -DskipITs ${CIRCLE_TAG:+-Prelease}

  run-conference-tests: &disabled
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Pull test image
          command: |
            docker pull datasqrl/cmd-test-image:${CIRCLE_SHA1}
            docker tag  datasqrl/cmd-test-image:${CIRCLE_SHA1} sqrl-test
      - run-docker-test:
          working_dir: ./sqrl-testing/sqrl-integration-tests/src/test/resources/usecases/conference
          test_args: test conference.sqrl conference.graphqls --snapshots snapshots-conference --tests tests-conference

  run-connectors-tests:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Pull test image
          command: |
            docker pull datasqrl/cmd-test-image:${CIRCLE_SHA1}
            docker tag  datasqrl/cmd-test-image:${CIRCLE_SHA1} sqrl-test
      - run-docker-test:
          working_dir: ./sqrl-testing/sqrl-integration-tests/src/test/resources/usecases/connectors-test
          test_args: test connectors.sqrl
          expected_pattern: 'WARN  org.apache.flink.metrics'

  run-udf-tests:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Pull test image
          command: |
            docker pull datasqrl/cmd-test-image:${CIRCLE_SHA1}
            docker tag  datasqrl/cmd-test-image:${CIRCLE_SHA1} sqrl-test
      - run-docker-test:
          working_dir: ./sqrl-testing/sqrl-integration-tests/src/test/resources/usecases/udf
          test_args: test myudf.sqrl --snapshots snapshots-myudf --tests tests-myudf
          expected_pattern: 'WARN  org.apache.flink.runtime.security.token.DefaultDelegationTokenManager'

  run-vertx-tests:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Pull test image
          command: |
            docker pull datasqrl/cmd-test-image:${CIRCLE_SHA1}
            docker pull datasqrl/sqrl-server-test-image:${CIRCLE_SHA1}
      - run:
          working_directory: ./sqrl-testing/sqrl-integration-tests/src/test/resources/usecases/udf
          name: Launch sqrl-server and test if API is running
          command: |
            docker run -v "$PWD:/build" -e TZ="UTC" datasqrl/cmd-test-image:${CIRCLE_SHA1} compile myudf.sqrl
            docker run -d --name sqrl-server -v $(pwd)/build/deploy/plan/vertx.json:/opt/sqrl/vertx.json \
                                                  -v $(pwd)/build/deploy/plan/vertx-config.json:/opt/sqrl/vertx-config.json \
                                                  -p 8888:8888 \
                                                  datasqrl/sqrl-server-test-image:${CIRCLE_SHA1}
            sleep 2s
            docker logs sqrl-server
            curl -s -X POST http://localhost:8888/graphql   -H 'Content-Type: application/json'   --data '{"query":"query { __typename }"}'

  run-jwt-tests:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Pull test image
          command: |
            docker pull datasqrl/cmd-test-image:${CIRCLE_SHA1}
            docker pull datasqrl/sqrl-server-test-image:${CIRCLE_SHA1}
      - run:
          name: Run JWT tests
          command: ./.circleci/run-jwt-tests.sh

  build-images:
    # use a full VM so we can run Docker / Buildx
    executor: default-machine

    steps:
      - checkout-and-version
      - restore_cache:
          keys:
            - m2-{{ checksum "pom.xml" }}
      - generate-settings
      - install-jdk

      - run:
          name: Build shaded JARs
          command: mvn -U -T1C -B install -DskipTests -DskipITs

      - determine-version
      - compute-base-tag

      # enable QEMU for multi-arch, install Buildx, login
      - run:
          name: Prepare Docker build environment
          command: |
            sudo apt-get update && sudo apt-get install -y qemu-user-static binfmt-support
            docker run --privileged --rm tonistiigi/binfmt --install all

            sudo mkdir -p /usr/local/lib/docker/cli-plugins
            curl -sSL https://github.com/docker/buildx/releases/download/v0.12.0/buildx-v0.12.0.linux-amd64 \
                 -o buildx
            chmod +x buildx
            sudo mv buildx /usr/local/lib/docker/cli-plugins/docker-buildx
            docker buildx create --use --name sqrl-builder
            docker buildx inspect --bootstrap

            echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_USER" --password-stdin
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

            docker pull datasqrl/base-sqrl:$BASE_TAG

      - run:
          name: Build + push Docker images
          command: |
            set -x
            build_and_push() {
              local repo="$1" ; shift
              local dir="$1"  ; shift

              docker buildx build \
                --platform linux/amd64,linux/arm64 \
                --push \
                --build-arg BASE_TAG=$BASE_TAG \
                -t $REGISTRY/$repo:$TAG_SUFFIX \
                -f $dir/Dockerfile \
                $dir

              # tag :latest on release builds
              if [ "$LATEST_TAG" = "true" ]; then
                docker buildx imagetools create \
                  -t $REGISTRY/$repo:latest \
                  $REGISTRY/$repo:$TAG_SUFFIX
              fi
            }

            build_and_push cmd                 sqrl-tools
            build_and_push sqrl-server         sqrl-server/sqrl-server-vertx

  docker-build-base-image:
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - checkout
      - compute-base-tag

      - run:
          name: Enable QEMU for ARM build
          command: |
            sudo apt-get update && sudo apt-get install -y qemu-user-static binfmt-support
            docker run --privileged --rm tonistiigi/binfmt --install all
      - run:
          name: Install docker buildx
          command: |
            sudo mkdir -p /usr/local/lib/docker/cli-plugins
            curl -sSL https://github.com/docker/buildx/releases/download/v0.12.0/buildx-v0.12.0.linux-amd64 \
                 -o buildx
            chmod +x buildx
            sudo mv buildx /usr/local/lib/docker/cli-plugins/docker-buildx
            docker buildx create --use --name base-builder
            docker buildx inspect --bootstrap
      - run:
          name: Login to Docker Hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - run:
          name: Skip build if base already exists
          command: |
            set +e

            if docker buildx imagetools inspect datasqrl/base-sqrl:${BASE_TAG} \
                --format '{{json .}}' > /tmp/manifest.json 2>/dev/null; then
              echo "── Manifest for datasqrl/base-sqrl:${BASE_TAG} ────────────────"
              cat /tmp/manifest.json | jq .
              echo "───────────────────────────────────────────────────────────────"
              echo "Tag already exists – skipping base-image build."
              circleci step halt
            else
              echo "Tag does not exist yet – will build base image."
            fi

      - run:
          name: Build & push datasqrl/base-sqrl:$BASE_TAG
          command: |
            docker buildx build \
              --push \
              --platform linux/amd64,linux/arm64 \
              -t datasqrl/base-sqrl:$BASE_TAG \
              -f sqrl-tools/Dockerfile.base \
              sqrl-tools

  docker-build-mcp-inspector:
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - checkout
      - compute-mcp-tag

      - run:
          name: Enable QEMU for ARM build
          command: |
            sudo apt-get update && sudo apt-get install -y qemu-user-static binfmt-support
            docker run --privileged --rm tonistiigi/binfmt --install all
      - run:
          name: Install docker buildx
          command: |
            sudo mkdir -p /usr/local/lib/docker/cli-plugins
            curl -sSL https://github.com/docker/buildx/releases/download/v0.12.0/buildx-v0.12.0.linux-amd64 \
                 -o buildx
            chmod +x buildx
            sudo mv buildx /usr/local/lib/docker/cli-plugins/docker-buildx
            docker buildx create --use --name mcp-builder
            docker buildx inspect --bootstrap
      - run:
          name: Login to Docker Hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - run:
          name: Skip build if MCP inspector already exists
          command: |
            set +e

            if docker buildx imagetools inspect datasqrl/mcp-inspector:${MCP_TAG} \
                --format '{{json .}}' > /tmp/manifest.json 2>/dev/null; then
              echo "── Manifest for datasqrl/mcp-inspector:${MCP_TAG} ────────────────"
              cat /tmp/manifest.json | jq .
              echo "───────────────────────────────────────────────────────────────"
              echo "Tag already exists – skipping MCP inspector build."
              circleci step halt
            else
              echo "Tag does not exist yet – will build MCP inspector image."
            fi

      - run:
          name: Build & push datasqrl/mcp-inspector:$MCP_TAG
          command: |
            docker buildx build \
              --push \
              --platform linux/amd64,linux/arm64 \
              -t datasqrl/mcp-inspector:$MCP_TAG \
              -t datasqrl/mcp-inspector:latest \
              -f Dockerfile.mcp-inspector \
              .

workflows:
  ci:
    jobs:
      - docker-build-base-image:
          <<: *job-defaults
      - docker-build-mcp-inspector:
          <<: *job-defaults
      - download-maven-dependencies:
          <<: *job-defaults
      - build-test-image:
          <<: *job-defaults
          filters:
            branches:
              only: /.*/
            tags:
              ignore: /.*/
          requires:
            - download-maven-dependencies
            - docker-build-base-image
      - integration-tests:
          <<: *job-defaults
          filters:
            branches:
              only: /.*/
            tags:
              ignore: /.*/
          matrix:
            parameters:
              test_sharding_total:  [2]
              test_sharding_index: [0, 1]
          requires:
            - download-maven-dependencies
            - docker-build-mcp-inspector
      - build-images:
          <<: *job-defaults
          requires:
            - download-maven-dependencies
            - docker-build-base-image
      - deploy:
          <<: *job-defaults
          requires:
            - download-maven-dependencies
      - unit-tests:
          <<: *job-defaults
          filters:
            branches:
              only: /.*/
            tags:
              ignore: /.*/
          requires:
            - download-maven-dependencies
      - run-connectors-tests:
          <<: *job-defaults
          filters:
            branches:
              only: /.*/
            tags:
              ignore: /.*/
          requires:
            - build-test-image
      - run-udf-tests:
          <<: *job-defaults
          filters:
            branches:
              only: /.*/
            tags:
              ignore: /.*/
          requires:
            - build-test-image
      - run-vertx-tests:
          <<: *job-defaults
          filters:
            branches:
              only: /.*/
            tags:
              ignore: /.*/
          requires:
            - build-test-image

      - run-jwt-tests:
          <<: *job-defaults
          filters:
            branches:
              only: /.*/
            tags:
              ignore: /.*/
          requires:
            - build-test-image
