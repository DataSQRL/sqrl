>>>category$14-lp-stream
LogicalProject(name=[$0], updatetime=[$1])
  LogicalProject(name=[$5], updatetime=[$6])
    LogicalProject(_uuid=[$0], _ingest_time=[$1], productid=[$2], name=[$3], description=[$4], category=[$5], updatetime=[-($1, 12:INTERVAL YEAR)]) hints[WatermarkHint options:[6]]
      LogicalTableScan(table=[[product$i$4]])

>>>total$18-lp-stream
LogicalProject(_uuid=[$0], price=[$1], discount=[$2], num=[$3], time=[$4])
  LogicalProject(_uuid=[$0], price=[$2], discount=[$3], num=[$4], time=[$1])
    LogicalAggregate(group=[{0, 4}], price=[SUM($12)], discount=[SUM($11)], num=[COUNT()]) hints[TumbleAggregationHint options:[4, INSTANT]]
      LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], _idx=[$6], productid=[$7], quantity=[$8], unit_price=[$9], discount=[$10], $f11=[coalesce($10, 0E0:DOUBLE)], $f12=[-(*($8, $9), coalesce($10, 0E0:DOUBLE))])
        LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{5}])
          LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5])
            LogicalTableScan(table=[[orders$i$7]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
          Uncollect
            LogicalProject($f0=[$cor0.entries])
              LogicalValues(tuples=[[{ 0 }]])

>>>_sales_72h$24-lp-stream
LogicalProject(productid=[$0], total=[$1], num=[$2], hour=[$3])
  LogicalProject(productid=[$4], total=[SUM($2) IGNORE NULLS OVER (PARTITION BY $4 ORDER BY $1 ROWS UNBOUNDED PRECEDING)], num=[SUM($3) IGNORE NULLS OVER (PARTITION BY $4 ORDER BY $1 ROWS UNBOUNDED PRECEDING)], hour=[$1])
    LogicalJoin(condition=[=($4, $0)], joinType=[inner]) hints[TemporalJoinHint options:[1, 6, 0]]
      LogicalProject(productid=[$0], hour=[$1], quantity=[$2], num_orders=[$3])
        LogicalAggregate(group=[{0, 1}], quantity=[SUM($2)], num_orders=[COUNT()]) hints[TumbleAggregationHint options:[1, FUNCTION]]
          LogicalProject(productid=[$13], hour=[round_to_hour($4)], quantity=[$8], _uuid=[$0], _idx=[$6])
            LogicalJoin(condition=[=($7, $13)], joinType=[inner]) hints[TemporalJoinHint options:[4, 6, 0]]
              LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], _idx=[$6], productid=[$7], quantity=[$8], unit_price=[$9], discount=[$10], $f11=[coalesce($10, 0E0:DOUBLE)], $f12=[-(*($8, $9), coalesce($10, 0E0:DOUBLE))])
                LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{5}])
                  LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5])
                    LogicalTableScan(table=[[orders$i$7]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
                  Uncollect
                    LogicalProject($f0=[$cor0.entries])
                      LogicalValues(tuples=[[{ 0 }]])
              LogicalFilter(condition=[=($7, 1)])
                LogicalProject(productid=[$0], _uuid=[$1], _ingest_time=[$2], name=[$3], description=[$4], category=[$5], updatetime=[$6], $f7=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $6 DESC NULLS LAST)])
                  LogicalProject(productid=[$2], _uuid=[$0], _ingest_time=[$1], name=[$3], description=[$4], category=[$5], updatetime=[$6])
                    LogicalProject(_uuid=[$0], _ingest_time=[$1], productid=[$2], name=[$3], description=[$4], category=[$5], updatetime=[-($1, 12:INTERVAL YEAR)]) hints[WatermarkHint options:[6]]
                      LogicalTableScan(table=[[product$i$4]])
      LogicalFilter(condition=[=($7, 1)])
        LogicalProject(productid=[$0], _uuid=[$1], _ingest_time=[$2], name=[$3], description=[$4], category=[$5], updatetime=[$6], $f7=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $6 DESC NULLS LAST)])
          LogicalProject(productid=[$2], _uuid=[$0], _ingest_time=[$1], name=[$3], description=[$4], category=[$5], updatetime=[$6])
            LogicalProject(_uuid=[$0], _ingest_time=[$1], productid=[$2], name=[$3], description=[$4], category=[$5], updatetime=[-($1, 12:INTERVAL YEAR)]) hints[WatermarkHint options:[6]]
              LogicalTableScan(table=[[product$i$4]])

>>>orders$9-lp-stream
LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4])
  LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5])
    LogicalTableScan(table=[[orders$i$7]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]

>>>customer$12-lp-stream
LogicalProject(customerid=[$0], _uuid=[$1], _ingest_time=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
  LogicalProject(customerid=[$2], _uuid=[$0], _ingest_time=[$1], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
    LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[epoch_to_timestamp($5)]) hints[WatermarkHint options:[6]]
      LogicalTableScan(table=[[customer$i$1]])

>>>_sales_by_hour$20-lp-stream
LogicalProject(productid=[$0], hour=[$1], quantity=[$2], num_orders=[$3])
  LogicalProject(productid=[$0], hour=[$1], quantity=[$2], num_orders=[$3])
    LogicalAggregate(group=[{0, 1}], quantity=[SUM($2)], num_orders=[COUNT()]) hints[TumbleAggregationHint options:[1, FUNCTION]]
      LogicalProject(productid=[$13], hour=[round_to_hour($4)], quantity=[$8], _uuid=[$0], _idx=[$6])
        LogicalJoin(condition=[=($7, $13)], joinType=[inner]) hints[TemporalJoinHint options:[4, 6, 0]]
          LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], _idx=[$6], productid=[$7], quantity=[$8], unit_price=[$9], discount=[$10], $f11=[coalesce($10, 0E0:DOUBLE)], $f12=[-(*($8, $9), coalesce($10, 0E0:DOUBLE))])
            LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{5}])
              LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5])
                LogicalTableScan(table=[[orders$i$7]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
              Uncollect
                LogicalProject($f0=[$cor0.entries])
                  LogicalValues(tuples=[[{ 0 }]])
          LogicalFilter(condition=[=($7, 1)])
            LogicalProject(productid=[$0], _uuid=[$1], _ingest_time=[$2], name=[$3], description=[$4], category=[$5], updatetime=[$6], $f7=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $6 DESC NULLS LAST)])
              LogicalProject(productid=[$2], _uuid=[$0], _ingest_time=[$1], name=[$3], description=[$4], category=[$5], updatetime=[$6])
                LogicalProject(_uuid=[$0], _ingest_time=[$1], productid=[$2], name=[$3], description=[$4], category=[$5], updatetime=[-($1, 12:INTERVAL YEAR)]) hints[WatermarkHint options:[6]]
                  LogicalTableScan(table=[[product$i$4]])

>>>_sales_24h$22-lp-stream
LogicalProject(productid=[$0], total=[$1], num=[$2], hour=[$3])
  LogicalProject(productid=[$4], total=[SUM($2) IGNORE NULLS OVER (PARTITION BY $4 ORDER BY $1 ROWS UNBOUNDED PRECEDING)], num=[SUM($3) IGNORE NULLS OVER (PARTITION BY $4 ORDER BY $1 ROWS UNBOUNDED PRECEDING)], hour=[$1])
    LogicalJoin(condition=[=($4, $0)], joinType=[inner]) hints[TemporalJoinHint options:[1, 6, 0]]
      LogicalProject(productid=[$0], hour=[$1], quantity=[$2], num_orders=[$3])
        LogicalAggregate(group=[{0, 1}], quantity=[SUM($2)], num_orders=[COUNT()]) hints[TumbleAggregationHint options:[1, FUNCTION]]
          LogicalProject(productid=[$13], hour=[round_to_hour($4)], quantity=[$8], _uuid=[$0], _idx=[$6])
            LogicalJoin(condition=[=($7, $13)], joinType=[inner]) hints[TemporalJoinHint options:[4, 6, 0]]
              LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5], _idx=[$6], productid=[$7], quantity=[$8], unit_price=[$9], discount=[$10], $f11=[coalesce($10, 0E0:DOUBLE)], $f12=[-(*($8, $9), coalesce($10, 0E0:DOUBLE))])
                LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{5}])
                  LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5])
                    LogicalTableScan(table=[[orders$i$7]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
                  Uncollect
                    LogicalProject($f0=[$cor0.entries])
                      LogicalValues(tuples=[[{ 0 }]])
              LogicalFilter(condition=[=($7, 1)])
                LogicalProject(productid=[$0], _uuid=[$1], _ingest_time=[$2], name=[$3], description=[$4], category=[$5], updatetime=[$6], $f7=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $6 DESC NULLS LAST)])
                  LogicalProject(productid=[$2], _uuid=[$0], _ingest_time=[$1], name=[$3], description=[$4], category=[$5], updatetime=[$6])
                    LogicalProject(_uuid=[$0], _ingest_time=[$1], productid=[$2], name=[$3], description=[$4], category=[$5], updatetime=[-($1, 12:INTERVAL YEAR)]) hints[WatermarkHint options:[6]]
                      LogicalTableScan(table=[[product$i$4]])
      LogicalFilter(condition=[=($7, 1)])
        LogicalProject(productid=[$0], _uuid=[$1], _ingest_time=[$2], name=[$3], description=[$4], category=[$5], updatetime=[$6], $f7=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $6 DESC NULLS LAST)])
          LogicalProject(productid=[$2], _uuid=[$0], _ingest_time=[$1], name=[$3], description=[$4], category=[$5], updatetime=[$6])
            LogicalProject(_uuid=[$0], _ingest_time=[$1], productid=[$2], name=[$3], description=[$4], category=[$5], updatetime=[-($1, 12:INTERVAL YEAR)]) hints[WatermarkHint options:[6]]
              LogicalTableScan(table=[[product$i$4]])

>>>entries$10-lp-stream
LogicalProject(_uuid=[$0], _idx=[$6], productid=[$7], quantity=[$8], unit_price=[$9], discount=[$10], discount$0=[coalesce($10, 0E0:DOUBLE)], total=[-(*($8, $9), coalesce($10, 0E0:DOUBLE))], time=[$4])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{5}])
    LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4], entries=[$5])
      LogicalTableScan(table=[[orders$i$7]], hints=[[[WatermarkHint inheritPath:[] options:[4]]]]) hints[WatermarkHint options:[4]]
    Uncollect
      LogicalProject($f0=[$cor0.entries])
        LogicalValues(tuples=[[{ 0 }]])

>>>product$16-lp-stream
LogicalProject(productid=[$0], _uuid=[$1], _ingest_time=[$2], name=[$3], description=[$4], category=[$5], updatetime=[$6])
  LogicalProject(productid=[$2], _uuid=[$0], _ingest_time=[$1], name=[$3], description=[$4], category=[$5], updatetime=[$6])
    LogicalProject(_uuid=[$0], _ingest_time=[$1], productid=[$2], name=[$3], description=[$4], category=[$5], updatetime=[-($1, 12:INTERVAL YEAR)]) hints[WatermarkHint options:[6]]
      LogicalTableScan(table=[[product$i$4]])

>>>orders-lp-database
LogicalProject(_uuid=[$0], _ingest_time=[$1], id=[$2], customerid=[$3], time=[$4])
  LogicalTableScan(table=[[orders$9]])

>>>entries-lp-database
LogicalProject(_uuid=[$0], _idx=[$1], productid=[$2], quantity=[$3], unit_price=[$4], discount=[$5], discount$0=[$6], total=[$7])
  LogicalTableScan(table=[[entries$10]])

>>>customer-lp-database
LogicalProject(customerid=[$0], _uuid=[$1], _ingest_time=[$2], email=[$3], name=[$4], lastupdated=[$5], updatetime=[$6])
  LogicalTableScan(table=[[customer$12]])

>>>category-lp-database
LogicalProject(name=[$0], updatetime=[$1])
  LogicalTableScan(table=[[category$14]])

>>>product-lp-database
LogicalProject(productid=[$0], _uuid=[$1], _ingest_time=[$2], name=[$3], description=[$4], category=[$5], updatetime=[$6])
  LogicalTableScan(table=[[product$16]])

>>>total-lp-database
LogicalProject(_uuid=[$0], price=[$1], discount=[$2], num=[$3], time=[$4])
  LogicalTableScan(table=[[total$18]])

>>>_sales_by_hour-lp-database
LogicalProject(productid=[$0], hour=[$1], quantity=[$2], num_orders=[$3])
  LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[DESC])
    LogicalTableScan(table=[[_sales_by_hour$20]])

>>>_sales_24h-lp-database
LogicalProject(productid=[$0], total=[$1], num=[$2], hour=[$3])
  LogicalSort(sort0=[$0], sort1=[$4], dir0=[ASC], dir1=[ASC])
    LogicalFilter(condition=[<=($4, 24)])
      LogicalProject(productid=[$0], total=[$1], num=[$2], hour=[$3], $f4=[ROW_NUMBER() OVER (PARTITION BY $0)])
        LogicalTableScan(table=[[_sales_24h$22]])

>>>_sales_72h-lp-database
LogicalProject(productid=[$0], total=[$1], num=[$2], hour=[$3])
  LogicalSort(sort0=[$0], sort1=[$4], dir0=[ASC], dir1=[ASC])
    LogicalFilter(condition=[<=($4, 72)])
      LogicalProject(productid=[$0], total=[$1], num=[$2], hour=[$3], $f4=[ROW_NUMBER() OVER (PARTITION BY $0)])
        LogicalTableScan(table=[[_sales_72h$24]])

>>>_sales_trend-lp-database
LogicalProject(productid=[$0], productid0=[$1], productid1=[$2], increase=[$3])
  LogicalProject(productid=[$0], productid0=[$7], productid1=[$12], increase=[+(/(*($8, 1.5E0:DOUBLE), greatest($13, 5.000E2:DOUBLE)), /(*($9, 1.5E0:DOUBLE), greatest($14, 1.000E2:DOUBLE)))])
    LogicalJoin(condition=[=($0, $12)], joinType=[inner]) hints[JoinCostHint options:[STATE, STATE, 1]]
      LogicalJoin(condition=[=($0, $7)], joinType=[inner]) hints[JoinCostHint options:[TEMPORAL_STATE, STATE, 1]]
        LogicalTableScan(table=[[product$16]])
        LogicalSort(sort0=[$0], sort1=[$4], dir0=[ASC], dir1=[ASC])
          LogicalFilter(condition=[<=($4, 24)])
            LogicalProject(productid=[$0], total=[$1], num=[$2], hour=[$3], $f4=[ROW_NUMBER() OVER (PARTITION BY $0)])
              LogicalTableScan(table=[[_sales_24h$22]])
      LogicalSort(sort0=[$0], sort1=[$4], dir0=[ASC], dir1=[ASC])
        LogicalFilter(condition=[<=($4, 72)])
          LogicalProject(productid=[$0], total=[$1], num=[$2], hour=[$3], $f4=[ROW_NUMBER() OVER (PARTITION BY $0)])
            LogicalTableScan(table=[[_sales_72h$24]])

>>>orders-data
10007140, 1000107
10007543, 1000101
10008231, 1000121
10008434, 1000107
>>>entries-data
0, 1332, 8, 8.490, null, 0.000, 67.920
0, 3571, 1, 41.950, 0.000, 0.000, 41.950
0, 7235, 1, 17.350, 0.000, 0.000, 17.350
0, 7552, 3, 25.500, 15.000, 15.000, 61.500
1, 3225, 1, 105.000, 0.000, 0.000, 105.000
1, 3571, 1, 41.950, 5.000, 5.000, 36.950
1, 8757, 2, 57.500, 11.500, 11.500, 103.500
>>>customer-data
1000101, john.mekker@gmail.com, John B. Mekker, 1650498257
1000107, emily.ludies@hotmail.com, Emily F. Ludies, 1650493189
1000121, lalelu@hottunes.org, Michelle Dagnes, 1650493449
1000131, hotbear753@yahoo.com, Mark Spielman, 1650494449
>>>category-data
Decoration
House & Garden
House & garden
Personal Care
>>>product-data
1332, Heavy Duty Butt Wipes, Wipes for hardiest of messes, Personal Care
3225, 4ft Garden Gnome, A real-sized garden gnome adds character to your outdoor space, House & Garden
3571, Poptech Blow 500, High powered blowdryer for any hair, Personal Care
7235, Aachen Snow Globe, Picturesque city in a beautiful snow globe, Decoration
7552, Simer Garden Hose 50ft, Long garden hose that rolls up, House & garden
8757, Original German Nutcracker 3ft, Hand-made nutcracker is the perfect Christmas decoration, Decoration
>>>total-data
104.870, 5.000, 2
120.850, 11.500, 2
166.500, 15.000, 2
41.950, 0.000, 1
>>>_sales_by_hour-data
1332, 8, 1
3225, 1, 1
3571, 1, 1
3571, 1, 1
7235, 1, 1
7552, 3, 1
8757, 2, 1
>>>_sales_24h-data
1332, 8, 1
3225, 1, 1
3571, 2, 2
7235, 1, 1
7552, 3, 1
8757, 2, 1
>>>_sales_72h-data
1332, 8, 1
3225, 1, 1
3571, 2, 2
7235, 1, 1
7552, 3, 1
8757, 2, 1
>>>_sales_trend-data
1332, 1332, 1332, 0.03900000000000000000
3225, 3225, 3225, 0.01800000000000000000
3571, 3571, 3571, 0.03600000000000000000
7235, 7235, 7235, 0.01800000000000000000
7552, 7552, 7552, 0.02400000000000000000
8757, 8757, 8757, 0.02100000000000000000
