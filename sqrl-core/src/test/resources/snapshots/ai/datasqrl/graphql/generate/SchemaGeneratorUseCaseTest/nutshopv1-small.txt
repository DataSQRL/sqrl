type Customers {
  id: Int
  purchases(id: Int, customerid: Int, time: Int, timestamp: String): [orders]
  spending_by_month(id: Int, month: String, total_spend: Float, total_savings: Float): [spending_by_month]
}

type Products {
  id: Int
  name: String
  sizing: String
  weight_in_gram: Int
  type: String
  category: String
  usda_id: Int
  updated: String
}

type Query {
  Customers(id: Int): [Customers]
  orders(id: Int, customerid: Int, time: Int, timestamp: String): [orders]
  Products(id: Int, name: String, sizing: String, weight_in_gram: Int, type: String, category: String, usda_id: Int, updated: String): [Products]
}

type items {
  productid: Int
  quantity: Int
  unit_price: Float
  parent(id: Int, customerid: Int, time: Int, timestamp: String): orders!
  discount: Float
  product(id: Int, name: String, sizing: String, weight_in_gram: Int, type: String, category: String, usda_id: Int, updated: String): [Products]
  total: Float
}

type orders {
  id: Int
  customerid: Int
  time: Int
  items(productid: Int, quantity: Int, unit_price: Float, discount: Float, total: Float): [items]
  timestamp: String
  totals(price: Float, savings: Float): [totals]
}

type spending_by_month {
  id: Int
  month: String
  total_spend: Float
  total_savings: Float
  parent(id: Int): Customers!
}

type totals {
  price: Float
  savings: Float
  parent(id: Int, customerid: Int, time: Int, timestamp: String): orders!
}

