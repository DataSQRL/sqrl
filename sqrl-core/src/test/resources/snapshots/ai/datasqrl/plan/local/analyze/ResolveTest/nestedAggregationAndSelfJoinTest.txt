>>>total-lp
LogicalProject(__pk_0=[$0], price=[$2], num=[$3], discount=[$4], time=[$1])
  LogicalAggregate(group=[{0, 5}], price=[SUM($1)], num=[COUNT()], discount=[SUM($2)]) hints[TumbleAggregationHint options:[5, INSTANT]]
    LogicalProject(__pk_0=[$0], $f1=[-(*($8, $9), $10)], discount=[$10], _idx=[$6], _ingest_time=[$1], time=[$4])
      LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{5}])
        LogicalTableScan(table=[[orders$q$2]])
        Uncollect
          LogicalProject($f0=[$cor0.entries])
            LogicalValues(tuples=[[{ 0 }]])

>>>ordersinline-lp
LogicalProject(_uuid=[$0], id=[$2], customerid=[$3], time=[$4], price=[$7], num=[$8])
  LogicalJoin(condition=[AND(=($0, $6), =($10, $4))], joinType=[inner]) hints[IntervalJoin]
    LogicalTableScan(table=[[orders$q$2]])
    LogicalTableScan(table=[[total$q$10]])

>>>orders_by_day-lp
LogicalProject(__pk_0=[$0], day=[$1], total_price=[$2], total_num=[$3])
  LogicalAggregate(group=[{0, 1}], total_price=[SUM($2)], total_num=[SUM($3)]) hints[TumbleAggregationHint options:[1, FUNCTION]]
    LogicalProject(__pk_0=[$6], day=[round_to_day($3)], price=[$4], num=[$5], _uuid=[$0])
      LogicalJoin(condition=[=($2, $6)], joinType=[inner]) hints[TemporalJoinHint options:[3, 2, 0]]
        LogicalTableScan(table=[[ordersinline$q$12]])
        LogicalFilter(condition=[=($6, 1)])
          LogicalProject(customerid=[$0], _uuid=[$1], _ingest_time=[$2], email=[$3], name=[$4], lastupdated=[$5], $f6=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
            LogicalTableScan(table=[[customer$q$8]])

