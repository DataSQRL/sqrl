Customer.orders := JOIN Orders ON Orders.customerid = _.customerid;
Orders.entries.product := JOIN Product ON Product.productid = _.productid;
Customer.recent_products := SELECT e.productid, e.product.category AS category,
                                   sum(e.quantity) AS quantity, count(1) AS num_orders
                            FROM _.orders.entries AS e
                            WHERE e.parent.time > now() - INTERVAL 2 YEAR
                            GROUP BY productid, category ORDER BY count(1) DESC, quantity DESC;


LogicalSort(sort0=[$0], sort1=[$4], sort2=[$3], dir0=[ASC], dir1=[DESC], dir2=[DESC])
  LogicalAggregate(group=[{0, 1, 2}], quantity=[SUM($3)], num_orders=[COUNT()])
    LogicalProject(__uuid$0=[$0], productid=[$13], category=[$22], quantity=[$14])
      LogicalProject(_uuid=[$0], _ingest_time=[$1], customerid=[$2], email=[$3], name=[$4], lastupdated=[$5], id=[$6], _uuid0=[$7], _ingest_time0=[$8], customerid0=[$9], time=[$10], id0=[$11], _idx=[$12], productid=[$13], quantity=[$14], unit_price=[$15], discount=[$16], _uuid1=[$17], _ingest_time1=[$18], productid0=[$19], name0=[$20], description=[$21], category=[$22], id1=[CAST($23):BIGINT], _uuid2=[CAST($24):CHAR(36) CHARACTER SET "UTF-16LE"], _ingest_time2=[CAST($25):TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)], customerid1=[$26], time0=[CAST($27):TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)])
        LogicalJoin(condition=[=($11, $23)], joinType=[inner])
          LogicalJoin(condition=[=($11, $17)], joinType=[left])
            LogicalJoin(condition=[true], joinType=[default])
              LogicalTableScan(table=[[customer$3]])
              LogicalJoin(condition=[=($0, $5)], joinType=[default])
                LogicalProject(id=[$6], _uuid=[$7], _ingest_time=[$8], customerid=[$9], time=[$10])
                  LogicalJoin(condition=[=($2, $9)], joinType=[default])
                    LogicalTableScan(table=[[customer$3]])
                    LogicalTableScan(table=[[orders$12]])
                LogicalTableScan(table=[[entries$13]])
            LogicalProject(_uuid=[$6], _ingest_time=[$7], productid=[$8], name=[$9], description=[$10], category=[$11])
              LogicalJoin(condition=[=($2, $8)], joinType=[default])
                LogicalTableScan(table=[[entries$13]])
                LogicalTableScan(table=[[product$10]])
          LogicalFilter(condition=[>($4, -(now(), 24:INTERVAL MONTH))])
            LogicalTableScan(table=[[orders$12]])


SELECT "customer$3"."_uuid" AS "__uuid$0", "entries$13"."productid", "t0"."category", SUM("entries$13"."quantity") AS "quantity", COUNT(*) AS "num_orders"
FROM "customer$3"
 DEFAULT JOIN ((SELECT "orders$12"."id", "orders$12"."_uuid", "orders$12"."_ingest_time", "orders$12"."customerid", "orders$12"."time"
   FROM "customer$3" AS "customer$30"
    DEFAULT JOIN "orders$12" ON "customer$30"."customerid" = "orders$12"."customerid") AS "t" DEFAULT JOIN "entries$13" ON "t"."id" = "entries$13"."id") ON TRUE
 LEFT JOIN (SELECT "product$10"."_uuid", "product$10"."_ingest_time", "product$10"."productid", "product$10"."name", "product$10"."description", "product$10"."category"
  FROM "entries$13" AS "entries$130"
   DEFAULT JOIN "product$10" ON "entries$130"."productid" = "product$10"."productid") AS "t0" ON "entries$13"."id" = "t0"."_uuid"
 INNER JOIN (SELECT *
  FROM "orders$12"
  WHERE "time" > "now"() - INTERVAL '24' MONTH) AS "t1" ON "entries$13"."id" = "t1"."id"
GROUP BY "customer$3"."_uuid", "entries$13"."productid", "t0"."category"
ORDER BY "customer$3"."_uuid", COUNT(*) DESC, SUM("entries$13"."quantity") DESC