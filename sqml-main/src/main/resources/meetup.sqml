IMPORT poetry-data.*;

IMPORT col.collect_as_set;

Star := DISTINCT Star ON userid, postid ORDER BY timestamp DESC;

-- Adding relationships between the tables
Star.post := JOIN Post ON Post.id = @.postid INVERSE stars;
Star.user := JOIN User On User.id = @.userid INVERSE stared;

Connect.fromPost := JOIN Post ON Post.id = @.frompostid;
Connect.toPost := JOIN Post ON Post.id = @.topostid;
Connect.user := JOIN User ON User.id = @.userid INVERSE connections;

Post.user := JOIN User ON User.id = @.userid INVERSE posts;
Post.connections := JOIN Connect ON (@.id = Connect.frompostid OR @.id = Connect.topostid);

-- Aggregates

Post.num_stars := COUNT(@.stars);
Post.num_connections := COUNT(@.connections);

-- We count connections double for activity levels
Post.recent_activity := (SELECT COUNT(*) FROM @.stars WHERE timestamp > now() - INTERVAL 24 HOUR LIMIT 1)
                        + (SELECT 2 * COUNT(*) FROM @.connections WHERE timestamp > now() - INTERVAL 24 HOUR LIMIT 1)

Post.agg_connections := SELECT iff(from_=@,toPost,fromPost) as other, COUNT(*) as count, collect_as_set(tag) as tags
                        FROM @.connections
                        GROUP BY other ORDER BY count;


User.num_posts := COUNT(@.posts);
User.num_stars := SUM(@.posts.num_stars);
User.num_connections := COUNT(@.connections);

User.stared_posts := JOIN @.stared.post;

CREATE SUBSCRIPTION NewConnections ON ADD AS
SELECT u.id as userid, p.id as sourcepostid, c.id connectionid, (JOIN c) AS connection
    FROM User u JOIN u.stared_posts p JOIN p.connections c
