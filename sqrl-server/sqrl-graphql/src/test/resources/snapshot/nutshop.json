[ {
  "function" : {
    "name" : "SpendingByWeek",
    "description" : " Retrieve weekly spending data for a specified customer.",
    "parameters" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "description" : " The number of results to skip before starting to collect the result set (default: 0)."
        },
        "customerid" : {
          "type" : "integer",
          "description" : "customerid: The unique identifier for the customer."
        },
        "limit" : {
          "type" : "integer",
          "description" : " The maximum number of results to return (default: 10)."
        }
      },
      "required" : [ "customerid" ]
    }
  },
  "contextKeys" : [ "customerid" ],
  "apiQuery" : {
    "query" : "query SpendingByWeek($customerid: Int!$limit: Int = 10$offset: Int = 0) {\nSpendingByWeek(customerid: $customerid, limit: $limit, offset: $offset) {\nweek\ntotal_spend\ntotal_savings\n}\n\n}"
  }
}, {
  "function" : {
    "name" : "Products",
    "description" : " Retrieve product information with optional filtering by product ID.",
    "parameters" : {
      "type" : "object",
      "properties" : {
        "orders_limit" : {
          "type" : "integer"
        },
        "offset" : {
          "type" : "integer",
          "description" : " The number of results to skip before starting to collect the result set (default: 0)."
        },
        "limit" : {
          "type" : "integer",
          "description" : " The maximum number of results to return (default: 10)."
        },
        "id" : {
          "type" : "integer",
          "description" : " The unique identifier for the product (optional)."
        },
        "orders_items_limit" : {
          "type" : "integer"
        }
      },
      "required" : [ ]
    }
  },
  "contextKeys" : [ "customerid" ],
  "apiQuery" : {
    "query" : "query Products($id: Int$limit: Int = 10$offset: Int = 0$orders_limit: Int = 10$orders_items_limit: Int = 10) {\nProducts(id: $id, limit: $limit, offset: $offset) {\nid\nname\nsizing\nweight_in_gram\ntype\ncategory\nusda_id\nupdated\norders(limit: $orders_limit) {\nid\ncustomerid\ntimestamp\nitems(limit: $orders_items_limit) {\nquantity\nunit_price\ndiscount0\ntotal\n}\ntotal {\nprice\ndiscount\n}\n}\n}\n\n}"
  }
}, {
  "function" : {
    "name" : "Orders",
    "description" : " Retrieve order information for a specified customer.",
    "parameters" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "description" : " The number of results to skip before starting to collect the result set (default: 0)."
        },
        "customerid" : {
          "type" : "integer",
          "description" : " The unique identifier for the customer."
        },
        "limit" : {
          "type" : "integer",
          "description" : " The maximum number of results to return (default: 10)."
        },
        "items_limit" : {
          "type" : "integer"
        }
      },
      "required" : [ "customerid" ]
    }
  },
  "contextKeys" : [ "customerid" ],
  "apiQuery" : {
    "query" : "query Orders($customerid: Int!$limit: Int = 10$offset: Int = 0$items_limit: Int = 10) {\nOrders(customerid: $customerid, limit: $limit, offset: $offset) {\nid\ncustomerid\ntimestamp\nitems(limit: $items_limit) {\nquantity\nunit_price\ndiscount0\ntotal\nproduct {\nid\nname\nsizing\nweight_in_gram\ntype\ncategory\nusda_id\nupdated\n}\n}\ntotal {\nprice\ndiscount\n}\n}\n\n}"
  }
}, {
  "function" : {
    "name" : "OrdersByTimeRange",
    "description" : "Retrieves orders for a given customer within the specified time range",
    "parameters" : {
      "type" : "object",
      "properties" : {
        "customerid" : {
          "type" : "integer",
          "description" : "The unique identifier for the customer"
        },
        "fromTime" : {
          "type" : "string",
          "description" : "Returns orders where the order timestamp is larger than this RFC-3339 compliant fromTime timestamp"
        },
        "items_limit" : {
          "type" : "integer"
        },
        "toTime" : {
          "type" : "string",
          "description" : "Returns orders where the order timestamp is smaller than this RFC-3339 compliant toTime timestamp"
        }
      },
      "required" : [ "customerid", "fromTime", "toTime" ]
    }
  },
  "contextKeys" : [ "customerid" ],
  "apiQuery" : {
    "query" : "query OrdersByTimeRange($customerid: Int!$fromTime: DateTime!$toTime: DateTime!$items_limit: Int = 10) {\nOrdersByTimeRange(customerid: $customerid, fromTime: $fromTime, toTime: $toTime) {\nid\ncustomerid\ntimestamp\nitems(limit: $items_limit) {\nquantity\nunit_price\ndiscount0\ntotal\nproduct {\nid\nname\nsizing\nweight_in_gram\ntype\ncategory\nusda_id\nupdated\n}\n}\ntotal {\nprice\ndiscount\n}\n}\n\n}"
  }
}, {
  "function" : {
    "name" : "OrderAgain",
    "description" : " Suggest products for a customer to order again based on their previous orders.",
    "parameters" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "description" : " The number of results to skip before starting to collect the result set (default: 0)."
        },
        "customerid" : {
          "type" : "integer",
          "description" : " The unique identifier for the customer."
        },
        "limit" : {
          "type" : "integer",
          "description" : " The maximum number of results to return (default: 10)."
        },
        "product_orders_limit" : {
          "type" : "integer"
        }
      },
      "required" : [ "customerid" ]
    }
  },
  "contextKeys" : [ "customerid" ],
  "apiQuery" : {
    "query" : "query OrderAgain($customerid: Int!$limit: Int = 10$offset: Int = 0$product_orders_limit: Int = 10) {\nOrderAgain(customerid: $customerid, limit: $limit, offset: $offset) {\nproduct {\nid\nname\nsizing\nweight_in_gram\ntype\ncategory\nusda_id\nupdated\norders(limit: $product_orders_limit) {\nid\ncustomerid\ntimestamp\n}\n}\nnum\nquantity\n}\n\n}"
  }
} ]