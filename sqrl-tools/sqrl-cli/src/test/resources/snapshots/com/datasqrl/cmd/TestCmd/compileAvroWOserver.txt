>>>sql
CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptostring` AS 'com.datasqrl.TimeFunctions$TimestampToString' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofmonth` AS 'com.datasqrl.TimeFunctions$EndOfMonth' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofweek` AS 'com.datasqrl.TimeFunctions$EndOfWeek' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `parsetimestamp` AS 'com.datasqrl.TimeFunctions$ParseTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochmillitotimestamp` AS 'com.datasqrl.TimeFunctions$EpochMilliToTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofminute` AS 'com.datasqrl.TimeFunctions$EndOfMinute' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `timestamptoepoch` AS 'com.datasqrl.TimeFunctions$TimestampToEpoch' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofsecond` AS 'com.datasqrl.TimeFunctions$EndOfSecond' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `epochtotimestamp` AS 'com.datasqrl.TimeFunctions$EpochToTimestamp' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofday` AS 'com.datasqrl.TimeFunctions$EndOfDay' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `atzone` AS 'com.datasqrl.TimeFunctions$AtZone' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofhour` AS 'com.datasqrl.TimeFunctions$EndOfHour' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `endofyear` AS 'com.datasqrl.TimeFunctions$EndOfYear' LANGUAGE JAVA;

CREATE TEMPORARY FUNCTION IF NOT EXISTS `__DataSQRLUuidGenerator` AS 'com.datasqrl.SecureFunctions$Uuid' LANGUAGE JAVA;

CREATE TEMPORARY TABLE `orders$1` (
  `_uuid` AS __DATASQRLUUIDGENERATOR(),
  `_ingest_time` AS PROCTIME(),
  `_source_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL METADATA FROM 'timestamp',
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `entries` ROW(`productid` INTEGER NOT NULL, `quantity` INTEGER NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,
  WATERMARK FOR `_source_time` AS (`_source_time` - INTERVAL '1' SECOND)
) WITH (
  'properties.bootstrap.servers' = 'kafka:9092',
  'connector' = 'kafka',
  'format' = 'avro',
  'topic' = 'orders',
  'properties.group.id' = 'datasqrl-orders',
  'scan.startup.mode' = 'earliest-offset'
);

CREATE TEMPORARY TABLE `entries$1` (
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,
  `productid` INTEGER NOT NULL,
  `quantity` INTEGER NOT NULL,
  `unit_price` DOUBLE NOT NULL,
  `discount` DOUBLE,
  `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  PRIMARY KEY (`_uuid`, `productid`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'entries$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `ordercount$1` (
  `timeSec` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `number` BIGINT NOT NULL,
  `volume` INTEGER NOT NULL,
  PRIMARY KEY (`timeSec`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'ordercount$1',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `orders$2` (
  `_uuid` CHAR(36) CHARACTER SET `UTF-16LE` NOT NULL,
  `_ingest_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `_source_time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `id` BIGINT NOT NULL,
  `customerid` BIGINT NOT NULL,
  `time` VARCHAR(2147483647) CHARACTER SET `UTF-16LE` NOT NULL,
  `entries` ROW(`productid` INTEGER NOT NULL, `quantity` INTEGER NOT NULL, `unit_price` DOUBLE NOT NULL, `discount` DOUBLE) NOT NULL ARRAY NOT NULL,
  PRIMARY KEY (`_uuid`) NOT ENFORCED
) WITH (
  'password' = 'postgres',
  'connector' = 'jdbc',
  'driver' = 'org.postgresql.Driver',
  'table-name' = 'orders$2',
  'url' = 'jdbc:postgresql://database:5432/datasqrl',
  'username' = 'postgres'
);

CREATE TEMPORARY TABLE `ordercount$1$1` (
  `timeSec` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL,
  `number` BIGINT NOT NULL,
  `volume` INTEGER NOT NULL
) WITH (
  'properties.bootstrap.servers' = 'kafka:9092',
  'connector' = 'kafka',
  'format' = 'avro',
  'topic' = 'orders',
  'properties.group.id' = 'datasqrl-orders'
);

CREATE VIEW `root$1`
AS
SELECT `$cor7`.`_uuid`, `t00`.`productid`, `t00`.`quantity`, `t00`.`unit_price`, `t00`.`discount`, `$cor7`.`_source_time` AS `__timestamp`
FROM `orders$1` AS `$cor7`,
UNNEST(`$cor7`.`entries`) AS `t00`;

CREATE VIEW `query$2`
AS
SELECT `$cor6`.`_source_time` AS `timeSec`, `t30`.`quantity`, `$cor6`.`_uuid`, `t30`.`productid`
FROM `orders$1` AS `$cor6`,
UNNEST(`$cor6`.`entries`) AS `t30`;

CREATE VIEW `root$3`
AS
SELECT `window_time` AS `timeSec`, COUNT(*) AS `number`, SUM(`quantity`) AS `volume`
FROM TABLE(TUMBLE((TABLE `query$2`), (DESCRIPTOR(`timeSec`)), INTERVAL '1' SECOND(4), INTERVAL '0' SECOND(1))) AS `t5`
GROUP BY `window_start`, `window_end`, `window_time`;

CREATE VIEW `root$4`
AS
SELECT *
FROM `orders$1`;

CREATE VIEW `root$5`
AS
SELECT `window_time` AS `timeSec`, COUNT(*) AS `number`, SUM(`quantity`) AS `volume`
FROM TABLE(TUMBLE((TABLE `query$2`), (DESCRIPTOR(`timeSec`)), INTERVAL '1' SECOND(4), INTERVAL '0' SECOND(1))) AS `t12`
GROUP BY `window_start`, `window_end`, `window_time`;

EXECUTE STATEMENT SET BEGIN
INSERT INTO `entries$1`
(SELECT *
FROM `root$1`)
;
INSERT INTO `ordercount$1`
(SELECT *
FROM `root$3`)
;
INSERT INTO `orders$2`
(SELECT *
FROM `root$4`)
;
INSERT INTO `ordercount$1$1`
(SELECT *
FROM `root$5`)
;
END;
