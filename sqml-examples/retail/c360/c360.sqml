IMPORT ecommerce-data.Customer;
IMPORT ecommerce-data.Product;
IMPORT ecommerce-data.Orders;

Customer := DISTINCT Customer ON customerid ORDER BY _ingest_time DESC;
Product := DISTINCT Product ON productid ORDER BY _ingest_time DESC;

-- Compute useful statistics on orders
Orders.entries.discount := coalesce(discount, 0.0);
Orders.entries.total := quantity * unit_price - discount;
Orders.total := sum(entries.total);
Orders.total_savings := sum(entries.discount);
Orders.total_entries := count(entries);


-- Relate Customer to Orders and compute a customer's total order spent
Customer.orders := JOIN Orders ON Orders.customerid = _.customerid;
Customer.total_orders := sum(orders.total);

-- Aggregate all products the customer has ordered for the 'order again' feature
Orders.entries.product := JOIN Product ON Product.productid = _.productid INVERSE order_entries;

Customer.recent_products := SELECT productid, product.category AS category,
                                   sum(quantity) AS quantity, count(*) AS num_orders
                            FROM _.orders.entries
                            WHERE parent.time > now() - INTERVAL 2 YEAR
                            GROUP BY productid, category ORDER BY num_orders DESC, quantity DESC;

Customer.recent_products_categories :=
                     SELECT category, count(*) AS num_products
                     FROM _.recent_products
                     GROUP BY category ORDER BY num_products;

Customer.recent_products_categories.products := JOIN _.parent.recent_products rp ON rp.category=_.category;

-- Aggregate customer spending by month and product category for the 'spending history' feature
Customer._spending_by_month_category :=
                     SELECT time.roundToMonth(parent.time) AS month,
                            product.category AS category,
                            sum(total) AS total,
                            sum(discount) AS savings
                     FROM _.orders.entries
                     GROUP BY month, category ORDER BY month DESC;

Customer.spending_by_month :=
                    SELECT month, sum(total) AS total, sum(savings) AS savings
                    FROM _._spending_by_month_category
                    GROUP BY month ORDER BY month DESC;
Customer.spending_by_month.categories :=
    JOIN _.parent._spending_by_month_category c ON c.month=month;

/* Compute w/w product sales volume increase average over a month
   These numbers are internal to determine trending products */
Product._sales_last_week := SELECT SUM(e.quantity)
                          FROM _.order_entries e
                          --WHERE e.parent.time > now() - INTERVAL 1 WEEK;
                          WHERE e.parent.time > now() - INTERVAL 7 DAY;

Product._sales_last_month := SELECT SUM(e.quantity)
                          FROM _.order_entries e
                          --WHERE e.parent.time > now() - INTERVAL 4 WEEK;
                          WHERE e.parent.time > now() - INTERVAL 1 MONTH;

Product._last_week_increase := _sales_last_week * 4 / _sales_last_month;

-- Determine trending products for each category
Category := SELECT DISTINCT category AS name FROM Product;
Category.products := JOIN Product ON _.name = Product.category;
Category.trending := JOIN Product p ON _.name = p.category AND p._last_week_increase > 0
                     ORDER BY p._last_week_increase DESC LIMIT 10;

/* Determine customers favorite categories by total spent
   In combination with trending products this is used for the product recommendation feature */
Customer.favorite_categories := SELECT s.category as category_name,
                                        sum(s.total) AS total
                                FROM _._spending_by_month_category s
                                WHERE s.month >= now() - INTERVAL 1 YEAR
                                GROUP BY category_name ORDER BY total DESC LIMIT 5;

Customer.favorite_categories.category := JOIN Category ON _.category_name = Category.name;

-- Create subscription for customer spending more than $100 so we can send them a coupon --

CREATE SUBSCRIPTION NewCustomerPromotion ON ADD AS
SELECT customerid, email, name, total_orders FROM Customer WHERE total_orders >= 100;