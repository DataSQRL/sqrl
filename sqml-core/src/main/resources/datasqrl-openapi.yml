openapi: 3.0.1
info:
  title: DataSQRL API
  description: Defines the API of DataSQRL server for submitting scripts, adding sources
    & sinks, and configuring the environment.
  termsOfService: http://dataeng.ai/terms
  contact:
    email: support@datasqrl.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
externalDocs:
  description: Learn more about DataSQRL
  url: http://datasqrl.com
servers:
  - url: https://localhost:5070
  - url: http://localhost:5070
tags:
  - name: deployment
    description: Execute and manage scripts running on the server.
    externalDocs:
      description: Find out more
      url: http://datasqrl.com
  - name: source
    description: Connect and manage sources on the server.
    externalDocs:
      description: Find out more
      url: http://datasqrl.com
  - name: sink
    description: Connect and manage sinks on the server.
    externalDocs:
      description: Find out more about our store
      url: http://datasqrl.com
paths:
  /deployment:
    post:
      tags:
        - deployment
      summary: Deploy a script and execute it on the server
      operationId: deployScript
      requestBody:
        description: Script bundle configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptBundle'
        required: true
      responses:
        200:
          description: successful deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployResult'
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessages'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      x-codegen-request-body-name: body
    get:
      tags:
        - deployment
      summary: Get all active deployments
      operationId: getDeployments
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeployResult'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /deployment/{deployId}:
    get:
      tags:
        - deployment
      summary: Retrieve deployment by id
      description: Returns a single deployment
      operationId: getDeploymentById
      parameters:
        - name: deployId
          in: path
          description: Id of the deployment
          required: true
          schema:
            type: string
            minLength: 16
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployResult'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        404:
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /compile:
    post:
      tags:
        - deployment
      summary: Compile and validate a script on the server
      operationId: compileScript
      requestBody:
        description: Script bundle configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptBundle'
        required: true
      responses:
        200:
          description: successful deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompilationResult'
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessages'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      x-codegen-request-body-name: body
  /source:
    post:
      tags:
        - source
      summary: Connect or update a data source
      operationId: addOrUpdateSource
      requestBody:
        description: Source configuration for the source to be connected or updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Source'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceWithErrors'
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessages'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      x-codegen-request-body-name: body
    get:
      tags:
        - source
      summary: Get connected sources
      operationId: getSources
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /source/{sourceName}:
    get:
      tags:
        - source
      summary: Find source by Name
      description: Returns a single source
      operationId: getSourceByName
      parameters:
        - name: sourceName
          in: path
          description: Name of the source to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        404:
          description: Source not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    delete:
      tags:
        - source
      summary: Disconnects a source
      operationId: deleteSource
      parameters:
        - name: sourceName
          in: path
          description: Source name to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        404:
          description: Source not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /source/{sourceName}/tables:
    get:
      tags:
        - source
      summary: Get connected tables for a source
      description: Returns all tables that are connected for the given source
      operationId: getSourceTables
      parameters:
        - name: sourceName
          in: path
          description: Name of the source
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceTable'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        404:
          description: Source not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    post:
      tags:
        - source
      summary: Adds or updates table on source
      operationId: updateSourceTable
      parameters:
        - name: sourceName
          in: path
          description: Name of source
          required: true
          schema:
            type: string
      requestBody:
        description: Source table configuration for table to be added or updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceTableWithErrors'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceTable'
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessages'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      x-codegen-request-body-name: body
  /source/{sourceName}/tables/{tableName}:
    get:
      tags:
        - source
      summary: Find source table by name
      description: Returns a single source table
      operationId: getSourceTableByName
      parameters:
        - name: sourceName
          in: path
          description: Name of the source
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: Name of the table
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        404:
          description: Source not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    delete:
      tags:
        - source
      summary: Disconnects table from source
      operationId: deleteSourceTable
      parameters:
        - name: sourceName
          in: path
          description: Name of the source
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: Name of the table
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceTable'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        404:
          description: Source not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /sink:
    post:
      tags:
        - sink
      summary: Connect or update a data sink
      operationId: addOrUpdateSink
      requestBody:
        description: Sink configuration for the sink to be connected or updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sink'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SinkWithErrors'
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessages'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      x-codegen-request-body-name: body
    get:
      tags:
        - sink
      summary: Get connected sinks
      operationId: getSinks
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sink'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /sink/{sinkName}:
    get:
      tags:
        - sink
      summary: Find sink by Name
      description: Returns a single sink
      operationId: getSinkByName
      parameters:
        - name: sinkName
          in: path
          description: Name of the sink
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        404:
          description: Source not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    delete:
      tags:
        - sink
      summary: Disconnects a sink
      operationId: deleteSink
      parameters:
        - name: sinkName
          in: path
          description: Name of the sink
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        400:
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        404:
          description: Source not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

components:
  schemas:
    Source:
      type: object
      required:
        - config
      properties:
        name:
          type: string
          description: "The assigned name for this source"
        config:
          oneOf:
            - $ref: '#/components/schemas/FileSourceConfig'
            - $ref: '#/components/schemas/KafkaSourceConfig'
          discriminator:
            propertyName: sourceType
            mapping:
              file: '#/components/schemas/FileSourceConfig'
              kafka: '#/components/schemas/KafkaSourceConfig'
        discoverTables:
          type: boolean
          default: true
        tables:
          type: array
          items:
            $ref: '#/components/schemas/SourceTable'
    SourceWithErrors:
      allOf:
        - $ref: '#/components/schemas/Source'
        - type: object
          properties:
            messages:
              $ref: '#/components/schemas/ErrorMessages'
    SourceTable:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: "The assigned name for this source"
        identifier:
          type: string
        format:
          $ref: '#/components/schemas/formatDef'
        formatConfig:
          $ref: '#/components/schemas/formatConfig'
    SourceTableWithErrors:
      allOf:
        - $ref: '#/components/schemas/SourceTable'
        - type: object
          properties:
            messages:
              $ref: '#/components/schemas/ErrorMessages'
    FileSourceConfig:
      type: object
      required:
        - uri
        - sourceType
      properties:
        sourceType:
          type: string
          description: "The type of this source"
        uri:
          type: string
        canonicalizer:
          $ref: '#/components/schemas/canonicalizerDef'
        partPattern:
          type: string
        charset:
          type: string
        discoverFiles:
          type: boolean
    KafkaSourceConfig:
      type: object
      required:
        - host
        - sourceType
      properties:
        sourceType:
          type: string
          description: "The type of this source"
        host:
          type: string
        canonicalizer:
          $ref: '#/components/schemas/canonicalizerDef'
    CSVFormatConfig:
      type: object
      required:
        - header
      properties:
        delimiter:
          type: string
        header:
          type: array
          items:
            type: string
        commentPrefix:
          type: string
          description: "String to recognize a comment in the csv file"
    JSONFormatConfig:
      type: object
      required:
        - type
      properties:
        type:
          type: string
    canonicalizerDef:
      type: string
      description: Name Canonicalizer
      enum:
        - lowercase
        - case_sensitive
        - system
    formatDef:
      type: string
      description: Name of format
      enum:
        - csv
        - json
        - avro
    formatConfig:
      oneOf:
        - $ref: '#/components/schemas/CSVFormatConfig'
        - $ref: '#/components/schemas/JSONFormatConfig'
      discriminator:
        propertyName: type
        mapping:
          csv: '#/components/schemas/CSVFormatConfig'
          json: '#/components/schemas/JSONFormatConfig'
    Sink:
      type: object
      required:
        - config
        - sinkType
      properties:
        name:
          type: string
          description: "The assigned name for this sink"
        config:
          oneOf:
            - $ref: '#/components/schemas/FileSinkConfig'
          discriminator:
            propertyName: sinkType
            mapping:
              file: '#/components/schemas/FileSourceConfig'
        format:
          $ref: '#/components/schemas/formatDef'
        formatConfig:
          $ref: '#/components/schemas/formatConfig'
    SinkWithErrors:
      allOf:
        - $ref: '#/components/schemas/Sink'
        - type: object
          properties:
            messages:
              $ref: '#/components/schemas/ErrorMessages'
    FileSinkConfig:
      type: object
      required:
        - uri
        - sinkType
      properties:
        sinkType:
          type: string
        uri:
          type: string
        partDelimiter:
          type: string
        charset:
          type: string
    ScriptBundle:
      type: object
      required:
        - name
        - scripts
      properties:
        name:
          type: string
        version:
          type: string
        scripts:
          type: array
          items:
            $ref: '#/components/schemas/ScriptBundleScript'
        queries:
          type: array
          items:
            $ref: '#/components/schemas/ScriptBundleQuery'
    ScriptBundleScript:
      type: object
      required:
        - name
        - content
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 128
        content:
          type: string
          minLength: 10
        filename:
          type: string
        inputSchema:
          type: string
        main:
          type: boolean
    ScriptBundleQuery:
      type: object
      required:
        - name
        - graphql
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 128
        filename:
          type: string
        graphQL:
          type: string
          minLength: 10
    DeployResult:
      type: object
      required:
        - id
        - name
        - version
        - submissionTime
        - status
      properties:
        id:
          type: string
        name:
          type: string
        version:
          type: string
        executionId:
          type: string
        submissionTime:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/submissionStatus'
        compilation:
          $ref: '#/components/schemas/CompilationResult'
    submissionStatus:
      type: string
      description: Status of a Submission
      enum:
        - submitted
        - running
        - deployed
        - stopped
        - failed
    CompilationResult:
      type: object
      required:
        - status
      properties:
        compilations:
          type: array
          items:
            $ref: '#/components/schemas/ScriptCompilation'
        compileTime:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/compilationStatus'
        messages:
          $ref: '#/components/schemas/ErrorMessages'
    compilationStatus:
      type: string
      description: Whether compilation was successful or not
      enum:
        - success
        - failed
    ScriptCompilation:
      type: object
      required:
        - name
        - filename
        - preschema
      properties:
        name:
          type: string
        filename:
          type: string
        preschema:
          type: string
    ErrorMessage:
      type: object
      required:
        - message
        - severity
      properties:
        location:
          $ref: '#/components/schemas/ErrorLocation'
        message:
          type: string
        severity:
          $ref: '#/components/schemas/errorSeverity'
    ErrorLocation:
      type: object
      properties:
        prefix:
          type: string
        path:
          type: string
        file:
          type: object
          properties:
            line:
              type: integer
            offset:
              type: integer
    ErrorMessages:
      type: array
      items:
        $ref: '#/components/schemas/ErrorMessage'
    errorSeverity:
      type: string
      description: Severity of the error
      enum:
        - fatal
        - warning
        - information
    GenericError:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string